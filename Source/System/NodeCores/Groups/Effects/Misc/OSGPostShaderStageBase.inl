/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PostShaderStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PostShaderStageBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 PostShaderStageBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 PostShaderStageBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the PostShaderStage::_sfColorBufferFormat field.

inline
GLenum &PostShaderStageBase::editColorBufferFormat(void)
{
    editSField(ColorBufferFormatFieldMask);

    return _sfColorBufferFormat.getValue();
}

//! Get the value of the PostShaderStage::_sfColorBufferFormat field.
inline
const GLenum &PostShaderStageBase::getColorBufferFormat(void) const
{
    return _sfColorBufferFormat.getValue();
}

//! Set the value of the PostShaderStage::_sfColorBufferFormat field.
inline
void PostShaderStageBase::setColorBufferFormat(const GLenum &value)
{
    editSField(ColorBufferFormatFieldMask);

    _sfColorBufferFormat.setValue(value);
}
//! Get the value of the PostShaderStage::_sfUseColorTextureBuffer field.

inline
bool &PostShaderStageBase::editUseColorTextureBuffer(void)
{
    editSField(UseColorTextureBufferFieldMask);

    return _sfUseColorTextureBuffer.getValue();
}

//! Get the value of the PostShaderStage::_sfUseColorTextureBuffer field.
inline
      bool  PostShaderStageBase::getUseColorTextureBuffer(void) const
{
    return _sfUseColorTextureBuffer.getValue();
}

//! Set the value of the PostShaderStage::_sfUseColorTextureBuffer field.
inline
void PostShaderStageBase::setUseColorTextureBuffer(const bool value)
{
    editSField(UseColorTextureBufferFieldMask);

    _sfUseColorTextureBuffer.setValue(value);
}
//! Get the value of the PostShaderStage::_sfUseDepthTextureBuffer field.

inline
bool &PostShaderStageBase::editUseDepthTextureBuffer(void)
{
    editSField(UseDepthTextureBufferFieldMask);

    return _sfUseDepthTextureBuffer.getValue();
}

//! Get the value of the PostShaderStage::_sfUseDepthTextureBuffer field.
inline
      bool  PostShaderStageBase::getUseDepthTextureBuffer(void) const
{
    return _sfUseDepthTextureBuffer.getValue();
}

//! Set the value of the PostShaderStage::_sfUseDepthTextureBuffer field.
inline
void PostShaderStageBase::setUseDepthTextureBuffer(const bool value)
{
    editSField(UseDepthTextureBufferFieldMask);

    _sfUseDepthTextureBuffer.setValue(value);
}

//! Get the value of the \a index element the PostShaderStage::_mfVertexShaders field.
inline
const std::string &PostShaderStageBase::getVertexShaders(const UInt32 index) const
{
    return _mfVertexShaders[index];
}

inline
std::string &PostShaderStageBase::editVertexShaders(const UInt32 index)
{
    editMField(VertexShadersFieldMask, _mfVertexShaders);

    return _mfVertexShaders[index];
}


//! Get the value of the \a index element the PostShaderStage::_mfFragmentShaders field.
inline
const std::string &PostShaderStageBase::getFragmentShaders(const UInt32 index) const
{
    return _mfFragmentShaders[index];
}

inline
std::string &PostShaderStageBase::editFragmentShaders(const UInt32 index)
{
    editMField(FragmentShadersFieldMask, _mfFragmentShaders);

    return _mfFragmentShaders[index];
}


//! Get the value of the \a index element the PostShaderStage::_mfPassSizes field.
inline
const Vec2f &PostShaderStageBase::getPassSizes(const UInt32 index) const
{
    return _mfPassSizes[index];
}

inline
Vec2f &PostShaderStageBase::editPassSizes(const UInt32 index)
{
    editMField(PassSizesFieldMask, _mfPassSizes);

    return _mfPassSizes[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void PostShaderStageBase::execSync (      PostShaderStageBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ColorBufferFormatFieldMask & whichField))
        _sfColorBufferFormat.syncWith(pFrom->_sfColorBufferFormat);

    if(FieldBits::NoField != (UseColorTextureBufferFieldMask & whichField))
        _sfUseColorTextureBuffer.syncWith(pFrom->_sfUseColorTextureBuffer);

    if(FieldBits::NoField != (UseDepthTextureBufferFieldMask & whichField))
        _sfUseDepthTextureBuffer.syncWith(pFrom->_sfUseDepthTextureBuffer);

    if(FieldBits::NoField != (VertexShadersFieldMask & whichField))
        _mfVertexShaders.syncWith(pFrom->_mfVertexShaders,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FragmentShadersFieldMask & whichField))
        _mfFragmentShaders.syncWith(pFrom->_mfFragmentShaders,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (PassSizesFieldMask & whichField))
        _mfPassSizes.syncWith(pFrom->_mfPassSizes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
const Char8 *PostShaderStageBase::getClassname(void)
{
    return "PostShaderStage";
}
OSG_GEN_CONTAINERPTR(PostShaderStage);

OSG_END_NAMESPACE

