/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *          David Naylor                                                     *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonDrawable
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSKELETONDRAWABLEBASE_H_
#define _OSGSKELETONDRAWABLEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGTBAnimationDef.h"

//#include "OSGBaseTypes.h"

#include "OSGMaterialDrawable.h" // Parent

#include "OSGSkeletonBlendedGeometryFields.h" // Skeleton type
#include "OSGSysFields.h"               // DrawBindPose type
#include "OSGBaseFields.h"              // BindPoseColor type

#include "OSGSkeletonDrawableFields.h"

OSG_BEGIN_NAMESPACE

class SkeletonDrawable;

//! \brief SkeletonDrawable Base Class.

class OSG_TBANIMATION_DLLMAPPING SkeletonDrawableBase : public MaterialDrawable
{
  public:

    typedef MaterialDrawable Inherited;
    typedef MaterialDrawable ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SkeletonDrawable);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        SkeletonFieldId = Inherited::NextFieldId,
        DrawBindPoseFieldId = SkeletonFieldId + 1,
        DrawPoseFieldId = DrawBindPoseFieldId + 1,
        BindPoseColorFieldId = DrawPoseFieldId + 1,
        PoseColorFieldId = BindPoseColorFieldId + 1,
        NextFieldId = PoseColorFieldId + 1
    };

    static const OSG::BitVector SkeletonFieldMask =
        (TypeTraits<BitVector>::One << SkeletonFieldId);
    static const OSG::BitVector DrawBindPoseFieldMask =
        (TypeTraits<BitVector>::One << DrawBindPoseFieldId);
    static const OSG::BitVector DrawPoseFieldMask =
        (TypeTraits<BitVector>::One << DrawPoseFieldId);
    static const OSG::BitVector BindPoseColorFieldMask =
        (TypeTraits<BitVector>::One << BindPoseColorFieldId);
    static const OSG::BitVector PoseColorFieldMask =
        (TypeTraits<BitVector>::One << PoseColorFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecSkeletonBlendedGeometryPtr SFSkeletonType;
    typedef SFBool            SFDrawBindPoseType;
    typedef SFBool            SFDrawPoseType;
    typedef SFColor4f         SFBindPoseColorType;
    typedef SFColor4f         SFPoseColorType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecSkeletonBlendedGeometryPtr *getSFSkeleton       (void) const;
                  SFUnrecSkeletonBlendedGeometryPtr *editSFSkeleton       (void);

                  SFBool              *editSFDrawBindPose   (void);
            const SFBool              *getSFDrawBindPose    (void) const;

                  SFBool              *editSFDrawPose       (void);
            const SFBool              *getSFDrawPose        (void) const;

                  SFColor4f           *editSFBindPoseColor  (void);
            const SFColor4f           *getSFBindPoseColor   (void) const;

                  SFColor4f           *editSFPoseColor      (void);
            const SFColor4f           *getSFPoseColor       (void) const;


                  SkeletonBlendedGeometry * getSkeleton       (void) const;

                  bool                &editDrawBindPose   (void);
                  bool                 getDrawBindPose    (void) const;

                  bool                &editDrawPose       (void);
                  bool                 getDrawPose        (void) const;

                  Color4f             &editBindPoseColor  (void);
            const Color4f             &getBindPoseColor   (void) const;

                  Color4f             &editPoseColor      (void);
            const Color4f             &getPoseColor       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setSkeleton       (SkeletonBlendedGeometry * const value);
            void setDrawBindPose   (const bool value);
            void setDrawPose       (const bool value);
            void setBindPoseColor  (const Color4f &value);
            void setPoseColor      (const Color4f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SkeletonDrawableTransitPtr  create          (void);
    static  SkeletonDrawable           *createEmpty     (void);

    static  SkeletonDrawableTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SkeletonDrawable            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SkeletonDrawableTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecSkeletonBlendedGeometryPtr _sfSkeleton;
    SFBool            _sfDrawBindPose;
    SFBool            _sfDrawPose;
    SFColor4f         _sfBindPoseColor;
    SFColor4f         _sfPoseColor;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SkeletonDrawableBase(void);
    SkeletonDrawableBase(const SkeletonDrawableBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SkeletonDrawableBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SkeletonDrawable *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleSkeleton        (void) const;
    EditFieldHandlePtr editHandleSkeleton       (void);
    GetFieldHandlePtr  getHandleDrawBindPose    (void) const;
    EditFieldHandlePtr editHandleDrawBindPose   (void);
    GetFieldHandlePtr  getHandleDrawPose        (void) const;
    EditFieldHandlePtr editHandleDrawPose       (void);
    GetFieldHandlePtr  getHandleBindPoseColor   (void) const;
    EditFieldHandlePtr editHandleBindPoseColor  (void);
    GetFieldHandlePtr  getHandlePoseColor       (void) const;
    EditFieldHandlePtr editHandlePoseColor      (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SkeletonDrawableBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SkeletonDrawableBase &source);
};

typedef SkeletonDrawableBase *SkeletonDrawableBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSKELETONDRAWABLEBASE_H_ */
