/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BlendedKeyframeAnimator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGKeyframeSequence.h"        // KeyframeSequences Class

#include "OSGBlendedKeyframeAnimatorBase.h"
#include "OSGBlendedKeyframeAnimator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BlendedKeyframeAnimator
    Applies the result of the interpolation of a set of  key-frame sequences to a field.
    Each key-frame sequence is evaluated at the given timestamps.  The result is then multiplied
    by the corresponding blend amount and then added to the value of the field.
    \code
    //Initialize the value of the field to the "zero" of the data type
    zeroField(TheAnimatedField, TheAnimatedFieldIndex);

    //For each KeyframeSequence
    for(UInt32 i(0) ; i<getMFKeyframeSequences()->size() ; ++i)
    {
    //Get the value of interpolated key-frame sequence
    InterpValue = getKeyframeSequences(i)->interpolate();

    //Add the blended amount to the field
    TheAnimatedField = TheAnimatedField + (getKeyframeSequences(i) * InterpValue);
    }
    \endcode
    The data-type of the #OSG::KeyframeSequence must match the type of the field applied to.
    Can only be used for data-types that can be multiplied and added, so this can not be used for
    booleans, strings, pointers, etc.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var KeyframeSequence * BlendedKeyframeAnimatorBase::_mfKeyframeSequences
    
*/

/*! \var Real32          BlendedKeyframeAnimatorBase::_mfBlendAmounts
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BlendedKeyframeAnimator *>::_type("BlendedKeyframeAnimatorPtr", "AnimatorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BlendedKeyframeAnimator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BlendedKeyframeAnimator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BlendedKeyframeAnimator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BlendedKeyframeAnimatorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecKeyframeSequencePtr::Description(
        MFUnrecKeyframeSequencePtr::getClassType(),
        "KeyframeSequences",
        "",
        KeyframeSequencesFieldId, KeyframeSequencesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BlendedKeyframeAnimator::editHandleKeyframeSequences),
        static_cast<FieldGetMethodSig >(&BlendedKeyframeAnimator::getHandleKeyframeSequences));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "BlendAmounts",
        "",
        BlendAmountsFieldId, BlendAmountsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BlendedKeyframeAnimator::editHandleBlendAmounts),
        static_cast<FieldGetMethodSig >(&BlendedKeyframeAnimator::getHandleBlendAmounts));

    oType.addInitialDesc(pDesc);
}


BlendedKeyframeAnimatorBase::TypeObject BlendedKeyframeAnimatorBase::_type(
    BlendedKeyframeAnimatorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BlendedKeyframeAnimatorBase::createEmptyLocal),
    BlendedKeyframeAnimator::initMethod,
    BlendedKeyframeAnimator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BlendedKeyframeAnimator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"BlendedKeyframeAnimator\"\n"
    "\tparent=\"Animator\"\n"
    "    library=\"TBAnimation\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "Applies the result of the interpolation of a set of  key-frame sequences to a field.\n"
    "Each key-frame sequence is evaluated at the given timestamps.  The result is then multiplied\n"
    "by the corresponding blend amount and then added to the value of the field.\n"
    "\n"
    "/code\n"
    "//Initialize the value of the field to the \"zero\" of the data type\n"
    "zeroField(TheAnimatedField, TheAnimatedFieldIndex);\n"
    "\n"
    "//For each KeyframeSequence\n"
    "for(UInt32 i(0) ; i&lt; getMFKeyframeSequences()->size() ; ++i)\n"
    "{\n"
    "    //Get the value of interpolated key-frame sequence\n"
    "    InterpValue = getKeyframeSequences(i)->interpolate();\n"
    "\n"
    "    //Add the blended amount to the field\n"
    "    TheAnimatedField = TheAnimatedField + (getKeyframeSequences(i) * InterpValue);\n"
    "}\n"
    "/endcode\n"
    "The data-type of the #OSG::KeyframeSequence must match the type of the field applied to.\n"
    "Can only be used for data-types that can be multiplied and added, so this can not be used for\n"
    "booleans, strings, pointers, etc.\n"
    "\t<Field\n"
    "\t\tname=\"KeyframeSequences\"\n"
    "\t\ttype=\"KeyframeSequence\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BlendAmounts\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Applies the result of the interpolation of a set of  key-frame sequences to a field.\n"
    "Each key-frame sequence is evaluated at the given timestamps.  The result is then multiplied\n"
    "by the corresponding blend amount and then added to the value of the field.\n"
    "\n"
    "/code\n"
    "//Initialize the value of the field to the \"zero\" of the data type\n"
    "zeroField(TheAnimatedField, TheAnimatedFieldIndex);\n"
    "\n"
    "//For each KeyframeSequence\n"
    "for(UInt32 i(0) ; i<getMFKeyframeSequences()->size() ; ++i)\n"
    "{\n"
    "//Get the value of interpolated key-frame sequence\n"
    "InterpValue = getKeyframeSequences(i)->interpolate();\n"
    "\n"
    "//Add the blended amount to the field\n"
    "TheAnimatedField = TheAnimatedField + (getKeyframeSequences(i) * InterpValue);\n"
    "}\n"
    "/endcode\n"
    "The data-type of the #OSG::KeyframeSequence must match the type of the field applied to.\n"
    "Can only be used for data-types that can be multiplied and added, so this can not be used for\n"
    "booleans, strings, pointers, etc.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BlendedKeyframeAnimatorBase::getType(void)
{
    return _type;
}

const FieldContainerType &BlendedKeyframeAnimatorBase::getType(void) const
{
    return _type;
}

UInt32 BlendedKeyframeAnimatorBase::getContainerSize(void) const
{
    return sizeof(BlendedKeyframeAnimator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the BlendedKeyframeAnimator::_mfKeyframeSequences field.
const MFUnrecKeyframeSequencePtr *BlendedKeyframeAnimatorBase::getMFKeyframeSequences(void) const
{
    return &_mfKeyframeSequences;
}

MFUnrecKeyframeSequencePtr *BlendedKeyframeAnimatorBase::editMFKeyframeSequences(void)
{
    editMField(KeyframeSequencesFieldMask, _mfKeyframeSequences);

    return &_mfKeyframeSequences;
}

MFReal32 *BlendedKeyframeAnimatorBase::editMFBlendAmounts(void)
{
    editMField(BlendAmountsFieldMask, _mfBlendAmounts);

    return &_mfBlendAmounts;
}

const MFReal32 *BlendedKeyframeAnimatorBase::getMFBlendAmounts(void) const
{
    return &_mfBlendAmounts;
}




void BlendedKeyframeAnimatorBase::pushToKeyframeSequences(KeyframeSequence * const value)
{
    editMField(KeyframeSequencesFieldMask, _mfKeyframeSequences);

    _mfKeyframeSequences.push_back(value);
}

void BlendedKeyframeAnimatorBase::assignKeyframeSequences(const MFUnrecKeyframeSequencePtr &value)
{
    MFUnrecKeyframeSequencePtr::const_iterator elemIt  =
        value.begin();
    MFUnrecKeyframeSequencePtr::const_iterator elemEnd =
        value.end  ();

    static_cast<BlendedKeyframeAnimator *>(this)->clearKeyframeSequences();

    while(elemIt != elemEnd)
    {
        this->pushToKeyframeSequences(*elemIt);

        ++elemIt;
    }
}

void BlendedKeyframeAnimatorBase::removeFromKeyframeSequences(UInt32 uiIndex)
{
    if(uiIndex < _mfKeyframeSequences.size())
    {
        editMField(KeyframeSequencesFieldMask, _mfKeyframeSequences);

        _mfKeyframeSequences.erase(uiIndex);
    }
}

void BlendedKeyframeAnimatorBase::removeObjFromKeyframeSequences(KeyframeSequence * const value)
{
    Int32 iElemIdx = _mfKeyframeSequences.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(KeyframeSequencesFieldMask, _mfKeyframeSequences);

        _mfKeyframeSequences.erase(iElemIdx);
    }
}
void BlendedKeyframeAnimatorBase::clearKeyframeSequences(void)
{
    editMField(KeyframeSequencesFieldMask, _mfKeyframeSequences);


    _mfKeyframeSequences.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 BlendedKeyframeAnimatorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (KeyframeSequencesFieldMask & whichField))
    {
        returnValue += _mfKeyframeSequences.getBinSize();
    }
    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        returnValue += _mfBlendAmounts.getBinSize();
    }

    return returnValue;
}

void BlendedKeyframeAnimatorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (KeyframeSequencesFieldMask & whichField))
    {
        _mfKeyframeSequences.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        _mfBlendAmounts.copyToBin(pMem);
    }
}

void BlendedKeyframeAnimatorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (KeyframeSequencesFieldMask & whichField))
    {
        editMField(KeyframeSequencesFieldMask, _mfKeyframeSequences);
        _mfKeyframeSequences.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        editMField(BlendAmountsFieldMask, _mfBlendAmounts);
        _mfBlendAmounts.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BlendedKeyframeAnimatorTransitPtr BlendedKeyframeAnimatorBase::createLocal(BitVector bFlags)
{
    BlendedKeyframeAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BlendedKeyframeAnimator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BlendedKeyframeAnimatorTransitPtr BlendedKeyframeAnimatorBase::createDependent(BitVector bFlags)
{
    BlendedKeyframeAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BlendedKeyframeAnimator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BlendedKeyframeAnimatorTransitPtr BlendedKeyframeAnimatorBase::create(void)
{
    BlendedKeyframeAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BlendedKeyframeAnimator>(tmpPtr);
    }

    return fc;
}

BlendedKeyframeAnimator *BlendedKeyframeAnimatorBase::createEmptyLocal(BitVector bFlags)
{
    BlendedKeyframeAnimator *returnValue;

    newPtr<BlendedKeyframeAnimator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BlendedKeyframeAnimator *BlendedKeyframeAnimatorBase::createEmpty(void)
{
    BlendedKeyframeAnimator *returnValue;

    newPtr<BlendedKeyframeAnimator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr BlendedKeyframeAnimatorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BlendedKeyframeAnimator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BlendedKeyframeAnimator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BlendedKeyframeAnimatorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BlendedKeyframeAnimator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BlendedKeyframeAnimator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BlendedKeyframeAnimatorBase::shallowCopy(void) const
{
    BlendedKeyframeAnimator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BlendedKeyframeAnimator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

BlendedKeyframeAnimatorBase::BlendedKeyframeAnimatorBase(void) :
    Inherited(),
    _mfKeyframeSequences      (),
    _mfBlendAmounts           ()
{
}

BlendedKeyframeAnimatorBase::BlendedKeyframeAnimatorBase(const BlendedKeyframeAnimatorBase &source) :
    Inherited(source),
    _mfKeyframeSequences      (),
    _mfBlendAmounts           (source._mfBlendAmounts           )
{
}


/*-------------------------- destructors ----------------------------------*/

BlendedKeyframeAnimatorBase::~BlendedKeyframeAnimatorBase(void)
{
}

void BlendedKeyframeAnimatorBase::onCreate(const BlendedKeyframeAnimator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        BlendedKeyframeAnimator *pThis = static_cast<BlendedKeyframeAnimator *>(this);

        MFUnrecKeyframeSequencePtr::const_iterator KeyframeSequencesIt  =
            source->_mfKeyframeSequences.begin();
        MFUnrecKeyframeSequencePtr::const_iterator KeyframeSequencesEnd =
            source->_mfKeyframeSequences.end  ();

        while(KeyframeSequencesIt != KeyframeSequencesEnd)
        {
            pThis->pushToKeyframeSequences(*KeyframeSequencesIt);

            ++KeyframeSequencesIt;
        }
    }
}

GetFieldHandlePtr BlendedKeyframeAnimatorBase::getHandleKeyframeSequences (void) const
{
    MFUnrecKeyframeSequencePtr::GetHandlePtr returnValue(
        new  MFUnrecKeyframeSequencePtr::GetHandle(
             &_mfKeyframeSequences,
             this->getType().getFieldDesc(KeyframeSequencesFieldId),
             const_cast<BlendedKeyframeAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BlendedKeyframeAnimatorBase::editHandleKeyframeSequences(void)
{
    MFUnrecKeyframeSequencePtr::EditHandlePtr returnValue(
        new  MFUnrecKeyframeSequencePtr::EditHandle(
             &_mfKeyframeSequences,
             this->getType().getFieldDesc(KeyframeSequencesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&BlendedKeyframeAnimator::pushToKeyframeSequences,
                    static_cast<BlendedKeyframeAnimator *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&BlendedKeyframeAnimator::removeFromKeyframeSequences,
                    static_cast<BlendedKeyframeAnimator *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&BlendedKeyframeAnimator::removeObjFromKeyframeSequences,
                    static_cast<BlendedKeyframeAnimator *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&BlendedKeyframeAnimator::clearKeyframeSequences,
                    static_cast<BlendedKeyframeAnimator *>(this)));

    editMField(KeyframeSequencesFieldMask, _mfKeyframeSequences);

    return returnValue;
}

GetFieldHandlePtr BlendedKeyframeAnimatorBase::getHandleBlendAmounts    (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfBlendAmounts,
             this->getType().getFieldDesc(BlendAmountsFieldId),
             const_cast<BlendedKeyframeAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BlendedKeyframeAnimatorBase::editHandleBlendAmounts   (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfBlendAmounts,
             this->getType().getFieldDesc(BlendAmountsFieldId),
             this));


    editMField(BlendAmountsFieldMask, _mfBlendAmounts);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BlendedKeyframeAnimatorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BlendedKeyframeAnimator *pThis = static_cast<BlendedKeyframeAnimator *>(this);

    pThis->execSync(static_cast<BlendedKeyframeAnimator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BlendedKeyframeAnimatorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BlendedKeyframeAnimator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BlendedKeyframeAnimator *>(pRefAspect),
                  dynamic_cast<const BlendedKeyframeAnimator *>(this));

    return returnValue;
}
#endif

void BlendedKeyframeAnimatorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<BlendedKeyframeAnimator *>(this)->clearKeyframeSequences();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfBlendAmounts.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
