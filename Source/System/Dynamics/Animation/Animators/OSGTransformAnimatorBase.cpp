/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TransformAnimator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGKeyframeNumberSequenceTmpl.h" // XTranslationSequence Class
#include "OSGKeyframeVectorSequenceTmpl.h" // TranslationSequence Class

#include "OSGTransformAnimatorBase.h"
#include "OSGTransformAnimator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TransformAnimator
    Applies the result of the interpolation of a key-frame sequence to specific components of a 
    matrix field. For example, the x-translation defined by a matrix can be animated with a #OSG::KeyframeNumberSequenceReal32.
    \code
    //Number Keyframe Sequence
    KeyframeNumberSequenceReal32RecPtr XTransKeyframes = KeyframeNumberSequenceReal32::create();
    XTransKeyframes->addKeyframe(1.0,0.0f);
    XTransKeyframes->addKeyframe(5.0,2.0f);
    XTransKeyframes->addKeyframe(-5.0,4.0f);
    XTransKeyframes->addKeyframe(1.0,6.0f);

    //Animator
    TransformAnimatorRecPtr TheAnimator = TransformAnimator::create();
    TheAnimator->setXTranslationSequence(XTransKeyframes);

    //Make a transform node to animate
    TransformRecPtr TransCore = Transform::create();

    NodeRecPtr TransNode = makeNodeFor(TransCore);

    //Add child nodes to TransNode
    ...
    //Add TransNode to your scene graph
    ...

    //Animation
    FieldAnimationRecPtr TheAnimation = FieldAnimation::create();
    TheAnimation->setAnimator(TheAnimator);
    TheAnimation->setInterpolationType(Animator::LINEAR_INTERPOLATION);
    TheAnimation->setCycling(2);
    TheAnimation->setAnimatedField(TransCore, std::string("matrix"));

    //Attach an update producer to the animation and start it
    TheAnimation->attachUpdateProducer(win);
    TheAnimation->start();
    \endcode
    The data-type of the #OSG::KeyframeSequence must be Matrix.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfXTranslationSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfYTranslationSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfZTranslationSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfXRotationSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfYRotationSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfZRotationSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfXScaleSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfYScaleSequence
    
*/

/*! \var KeyframeNumberSequenceReal32 * TransformAnimatorBase::_sfZScaleSequence
    
*/

/*! \var KeyframeVectorSequenceVec3f * TransformAnimatorBase::_sfTranslationSequence
    
*/

/*! \var KeyframeVectorSequenceVec3f * TransformAnimatorBase::_sfScaleSequence
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TransformAnimator *>::_type("TransformAnimatorPtr", "AnimatorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TransformAnimator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TransformAnimator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TransformAnimator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TransformAnimatorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "XTranslationSequence",
        "",
        XTranslationSequenceFieldId, XTranslationSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleXTranslationSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleXTranslationSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "YTranslationSequence",
        "",
        YTranslationSequenceFieldId, YTranslationSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleYTranslationSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleYTranslationSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "ZTranslationSequence",
        "",
        ZTranslationSequenceFieldId, ZTranslationSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleZTranslationSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleZTranslationSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "XRotationSequence",
        "",
        XRotationSequenceFieldId, XRotationSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleXRotationSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleXRotationSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "YRotationSequence",
        "",
        YRotationSequenceFieldId, YRotationSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleYRotationSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleYRotationSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "ZRotationSequence",
        "",
        ZRotationSequenceFieldId, ZRotationSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleZRotationSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleZRotationSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "XScaleSequence",
        "",
        XScaleSequenceFieldId, XScaleSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleXScaleSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleXScaleSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "YScaleSequence",
        "",
        YScaleSequenceFieldId, YScaleSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleYScaleSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleYScaleSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeNumberSequenceReal32Ptr::Description(
        SFUnrecKeyframeNumberSequenceReal32Ptr::getClassType(),
        "ZScaleSequence",
        "",
        ZScaleSequenceFieldId, ZScaleSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleZScaleSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleZScaleSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeVectorSequenceVec3fPtr::Description(
        SFUnrecKeyframeVectorSequenceVec3fPtr::getClassType(),
        "TranslationSequence",
        "",
        TranslationSequenceFieldId, TranslationSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleTranslationSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleTranslationSequence));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecKeyframeVectorSequenceVec3fPtr::Description(
        SFUnrecKeyframeVectorSequenceVec3fPtr::getClassType(),
        "ScaleSequence",
        "",
        ScaleSequenceFieldId, ScaleSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TransformAnimator::editHandleScaleSequence),
        static_cast<FieldGetMethodSig >(&TransformAnimator::getHandleScaleSequence));

    oType.addInitialDesc(pDesc);
}


TransformAnimatorBase::TypeObject TransformAnimatorBase::_type(
    TransformAnimatorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&TransformAnimatorBase::createEmptyLocal),
    TransformAnimator::initMethod,
    TransformAnimator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TransformAnimator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TransformAnimator\"\n"
    "\tparent=\"Animator\"\n"
    "    library=\"TBAnimation\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "Applies the result of the interpolation of a key-frame sequence to specific components of a \n"
    "matrix field. For example, the x-translation defined by a matrix can be animated with a #OSG::KeyframeSequenceReal32.\n"
    "\\code\n"
    "    //Number Keyframe Sequence\n"
    "    KeyframeNumberSequenceReal32RecPtr XTransKeyframes = KeyframeNumberSequenceReal32::create();\n"
    "    XTransKeyframes-&gt;addKeyframe(1.0,0.0f);\n"
    "    XTransKeyframes-&gt;addKeyframe(5.0,2.0f);\n"
    "    XTransKeyframes-&gt;addKeyframe(-5.0,4.0f);\n"
    "    XTransKeyframes-&gt;addKeyframe(1.0,6.0f);\n"
    "\n"
    "    //Animator\n"
    "    TransformAnimatorRecPtr TheAnimator = TransformAnimator::create();\n"
    "    TheAnimator-&gt;setXTranslationSequence(XTransKeyframes);\n"
    "\n"
    "    //Make a transform node to animate\n"
    "    TransformRecPtr TransCore = Transform::create();\n"
    "\n"
    "    NodeRecPtr TransNode = makeNodeFor(TransCore);\n"
    "\n"
    "    //Add child nodes to TransNode\n"
    "    ...\n"
    "    //Add TransNode to your scene graph\n"
    "    ...\n"
    "\n"
    "    //Animation\n"
    "    FieldAnimationRecPtr TheAnimation = FieldAnimation::create();\n"
    "    TheAnimation-&gt;setAnimator(TheAnimator);\n"
    "    TheAnimation-&gt;setInterpolationType(Animator::LINEAR_INTERPOLATION);\n"
    "    TheAnimation-&gt;setCycling(2);\n"
    "    TheAnimation-&gt;setAnimatedField(TransCore, std::string(\"matrix\"));\n"
    "\n"
    "    //Attach an update producer to the animation and start it\n"
    "    TheAnimation-&gt;attachUpdateProducer(win);\n"
    "    TheAnimation-&gt;start();\n"
    "\\endcode\n"
    "The data-type of the #OSG::KeyframeSequence must be Matrix.\n"
    "\t<Field\n"
    "\t\tname=\"XTranslationSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"YTranslationSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ZTranslationSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"XRotationSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"YRotationSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ZRotationSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"XScaleSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"YScaleSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ZScaleSequence\"\n"
    "\t\ttype=\"KeyframeNumberSequenceReal32\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeNumberSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TranslationSequence\"\n"
    "\t\ttype=\"KeyframeVectorSequenceVec3f\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeNumberSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeVectorSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ScaleSequence\"\n"
    "\t\ttype=\"KeyframeVectorSequenceVec3f\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tfieldHeader=\"OSGKeyframeVectorSequenceTmplFields.h\"\n"
    "\t\ttypeHeader=\"OSGKeyframeVectorSequenceTmpl.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Applies the result of the interpolation of a key-frame sequence to specific components of a \n"
    "matrix field. For example, the x-translation defined by a matrix can be animated with a #OSG::KeyframeSequenceReal32.\n"
    "\\code\n"
    "//Number Keyframe Sequence\n"
    "KeyframeNumberSequenceReal32RecPtr XTransKeyframes = KeyframeNumberSequenceReal32::create();\n"
    "XTransKeyframes->addKeyframe(1.0,0.0f);\n"
    "XTransKeyframes->addKeyframe(5.0,2.0f);\n"
    "XTransKeyframes->addKeyframe(-5.0,4.0f);\n"
    "XTransKeyframes->addKeyframe(1.0,6.0f);\n"
    "\n"
    "//Animator\n"
    "TransformAnimatorRecPtr TheAnimator = TransformAnimator::create();\n"
    "TheAnimator->setXTranslationSequence(XTransKeyframes);\n"
    "\n"
    "//Make a transform node to animate\n"
    "TransformRecPtr TransCore = Transform::create();\n"
    "\n"
    "NodeRecPtr TransNode = makeNodeFor(TransCore);\n"
    "\n"
    "//Add child nodes to TransNode\n"
    "...\n"
    "//Add TransNode to your scene graph\n"
    "...\n"
    "\n"
    "//Animation\n"
    "FieldAnimationRecPtr TheAnimation = FieldAnimation::create();\n"
    "TheAnimation->setAnimator(TheAnimator);\n"
    "TheAnimation->setInterpolationType(Animator::LINEAR_INTERPOLATION);\n"
    "TheAnimation->setCycling(2);\n"
    "TheAnimation->setAnimatedField(TransCore, std::string(\"matrix\"));\n"
    "\n"
    "//Attach an update producer to the animation and start it\n"
    "TheAnimation->attachUpdateProducer(win);\n"
    "TheAnimation->start();\n"
    "\\endcode\n"
    "The data-type of the #OSG::KeyframeSequence must be Matrix.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TransformAnimatorBase::getType(void)
{
    return _type;
}

const FieldContainerType &TransformAnimatorBase::getType(void) const
{
    return _type;
}

UInt32 TransformAnimatorBase::getContainerSize(void) const
{
    return sizeof(TransformAnimator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TransformAnimator::_sfXTranslationSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFXTranslationSequence(void) const
{
    return &_sfXTranslationSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFXTranslationSequence(void)
{
    editSField(XTranslationSequenceFieldMask);

    return &_sfXTranslationSequence;
}

//! Get the TransformAnimator::_sfYTranslationSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFYTranslationSequence(void) const
{
    return &_sfYTranslationSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFYTranslationSequence(void)
{
    editSField(YTranslationSequenceFieldMask);

    return &_sfYTranslationSequence;
}

//! Get the TransformAnimator::_sfZTranslationSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFZTranslationSequence(void) const
{
    return &_sfZTranslationSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFZTranslationSequence(void)
{
    editSField(ZTranslationSequenceFieldMask);

    return &_sfZTranslationSequence;
}

//! Get the TransformAnimator::_sfXRotationSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFXRotationSequence(void) const
{
    return &_sfXRotationSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFXRotationSequence(void)
{
    editSField(XRotationSequenceFieldMask);

    return &_sfXRotationSequence;
}

//! Get the TransformAnimator::_sfYRotationSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFYRotationSequence(void) const
{
    return &_sfYRotationSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFYRotationSequence(void)
{
    editSField(YRotationSequenceFieldMask);

    return &_sfYRotationSequence;
}

//! Get the TransformAnimator::_sfZRotationSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFZRotationSequence(void) const
{
    return &_sfZRotationSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFZRotationSequence(void)
{
    editSField(ZRotationSequenceFieldMask);

    return &_sfZRotationSequence;
}

//! Get the TransformAnimator::_sfXScaleSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFXScaleSequence(void) const
{
    return &_sfXScaleSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFXScaleSequence (void)
{
    editSField(XScaleSequenceFieldMask);

    return &_sfXScaleSequence;
}

//! Get the TransformAnimator::_sfYScaleSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFYScaleSequence(void) const
{
    return &_sfYScaleSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFYScaleSequence (void)
{
    editSField(YScaleSequenceFieldMask);

    return &_sfYScaleSequence;
}

//! Get the TransformAnimator::_sfZScaleSequence field.
const SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::getSFZScaleSequence(void) const
{
    return &_sfZScaleSequence;
}

SFUnrecKeyframeNumberSequenceReal32Ptr *TransformAnimatorBase::editSFZScaleSequence (void)
{
    editSField(ZScaleSequenceFieldMask);

    return &_sfZScaleSequence;
}

//! Get the TransformAnimator::_sfTranslationSequence field.
const SFUnrecKeyframeVectorSequenceVec3fPtr *TransformAnimatorBase::getSFTranslationSequence(void) const
{
    return &_sfTranslationSequence;
}

SFUnrecKeyframeVectorSequenceVec3fPtr *TransformAnimatorBase::editSFTranslationSequence(void)
{
    editSField(TranslationSequenceFieldMask);

    return &_sfTranslationSequence;
}

//! Get the TransformAnimator::_sfScaleSequence field.
const SFUnrecKeyframeVectorSequenceVec3fPtr *TransformAnimatorBase::getSFScaleSequence(void) const
{
    return &_sfScaleSequence;
}

SFUnrecKeyframeVectorSequenceVec3fPtr *TransformAnimatorBase::editSFScaleSequence  (void)
{
    editSField(ScaleSequenceFieldMask);

    return &_sfScaleSequence;
}





/*------------------------------ access -----------------------------------*/

UInt32 TransformAnimatorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (XTranslationSequenceFieldMask & whichField))
    {
        returnValue += _sfXTranslationSequence.getBinSize();
    }
    if(FieldBits::NoField != (YTranslationSequenceFieldMask & whichField))
    {
        returnValue += _sfYTranslationSequence.getBinSize();
    }
    if(FieldBits::NoField != (ZTranslationSequenceFieldMask & whichField))
    {
        returnValue += _sfZTranslationSequence.getBinSize();
    }
    if(FieldBits::NoField != (XRotationSequenceFieldMask & whichField))
    {
        returnValue += _sfXRotationSequence.getBinSize();
    }
    if(FieldBits::NoField != (YRotationSequenceFieldMask & whichField))
    {
        returnValue += _sfYRotationSequence.getBinSize();
    }
    if(FieldBits::NoField != (ZRotationSequenceFieldMask & whichField))
    {
        returnValue += _sfZRotationSequence.getBinSize();
    }
    if(FieldBits::NoField != (XScaleSequenceFieldMask & whichField))
    {
        returnValue += _sfXScaleSequence.getBinSize();
    }
    if(FieldBits::NoField != (YScaleSequenceFieldMask & whichField))
    {
        returnValue += _sfYScaleSequence.getBinSize();
    }
    if(FieldBits::NoField != (ZScaleSequenceFieldMask & whichField))
    {
        returnValue += _sfZScaleSequence.getBinSize();
    }
    if(FieldBits::NoField != (TranslationSequenceFieldMask & whichField))
    {
        returnValue += _sfTranslationSequence.getBinSize();
    }
    if(FieldBits::NoField != (ScaleSequenceFieldMask & whichField))
    {
        returnValue += _sfScaleSequence.getBinSize();
    }

    return returnValue;
}

void TransformAnimatorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (XTranslationSequenceFieldMask & whichField))
    {
        _sfXTranslationSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (YTranslationSequenceFieldMask & whichField))
    {
        _sfYTranslationSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ZTranslationSequenceFieldMask & whichField))
    {
        _sfZTranslationSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (XRotationSequenceFieldMask & whichField))
    {
        _sfXRotationSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (YRotationSequenceFieldMask & whichField))
    {
        _sfYRotationSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ZRotationSequenceFieldMask & whichField))
    {
        _sfZRotationSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (XScaleSequenceFieldMask & whichField))
    {
        _sfXScaleSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (YScaleSequenceFieldMask & whichField))
    {
        _sfYScaleSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ZScaleSequenceFieldMask & whichField))
    {
        _sfZScaleSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TranslationSequenceFieldMask & whichField))
    {
        _sfTranslationSequence.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleSequenceFieldMask & whichField))
    {
        _sfScaleSequence.copyToBin(pMem);
    }
}

void TransformAnimatorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (XTranslationSequenceFieldMask & whichField))
    {
        editSField(XTranslationSequenceFieldMask);
        _sfXTranslationSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (YTranslationSequenceFieldMask & whichField))
    {
        editSField(YTranslationSequenceFieldMask);
        _sfYTranslationSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ZTranslationSequenceFieldMask & whichField))
    {
        editSField(ZTranslationSequenceFieldMask);
        _sfZTranslationSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (XRotationSequenceFieldMask & whichField))
    {
        editSField(XRotationSequenceFieldMask);
        _sfXRotationSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (YRotationSequenceFieldMask & whichField))
    {
        editSField(YRotationSequenceFieldMask);
        _sfYRotationSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ZRotationSequenceFieldMask & whichField))
    {
        editSField(ZRotationSequenceFieldMask);
        _sfZRotationSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (XScaleSequenceFieldMask & whichField))
    {
        editSField(XScaleSequenceFieldMask);
        _sfXScaleSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (YScaleSequenceFieldMask & whichField))
    {
        editSField(YScaleSequenceFieldMask);
        _sfYScaleSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ZScaleSequenceFieldMask & whichField))
    {
        editSField(ZScaleSequenceFieldMask);
        _sfZScaleSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TranslationSequenceFieldMask & whichField))
    {
        editSField(TranslationSequenceFieldMask);
        _sfTranslationSequence.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleSequenceFieldMask & whichField))
    {
        editSField(ScaleSequenceFieldMask);
        _sfScaleSequence.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TransformAnimatorTransitPtr TransformAnimatorBase::createLocal(BitVector bFlags)
{
    TransformAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TransformAnimator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TransformAnimatorTransitPtr TransformAnimatorBase::createDependent(BitVector bFlags)
{
    TransformAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TransformAnimator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TransformAnimatorTransitPtr TransformAnimatorBase::create(void)
{
    TransformAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TransformAnimator>(tmpPtr);
    }

    return fc;
}

TransformAnimator *TransformAnimatorBase::createEmptyLocal(BitVector bFlags)
{
    TransformAnimator *returnValue;

    newPtr<TransformAnimator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TransformAnimator *TransformAnimatorBase::createEmpty(void)
{
    TransformAnimator *returnValue;

    newPtr<TransformAnimator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr TransformAnimatorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TransformAnimator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TransformAnimator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TransformAnimatorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TransformAnimator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TransformAnimator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TransformAnimatorBase::shallowCopy(void) const
{
    TransformAnimator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TransformAnimator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TransformAnimatorBase::TransformAnimatorBase(void) :
    Inherited(),
    _sfXTranslationSequence   (NULL),
    _sfYTranslationSequence   (NULL),
    _sfZTranslationSequence   (NULL),
    _sfXRotationSequence      (NULL),
    _sfYRotationSequence      (NULL),
    _sfZRotationSequence      (NULL),
    _sfXScaleSequence         (NULL),
    _sfYScaleSequence         (NULL),
    _sfZScaleSequence         (NULL),
    _sfTranslationSequence    (NULL),
    _sfScaleSequence          (NULL)
{
}

TransformAnimatorBase::TransformAnimatorBase(const TransformAnimatorBase &source) :
    Inherited(source),
    _sfXTranslationSequence   (NULL),
    _sfYTranslationSequence   (NULL),
    _sfZTranslationSequence   (NULL),
    _sfXRotationSequence      (NULL),
    _sfYRotationSequence      (NULL),
    _sfZRotationSequence      (NULL),
    _sfXScaleSequence         (NULL),
    _sfYScaleSequence         (NULL),
    _sfZScaleSequence         (NULL),
    _sfTranslationSequence    (NULL),
    _sfScaleSequence          (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

TransformAnimatorBase::~TransformAnimatorBase(void)
{
}

void TransformAnimatorBase::onCreate(const TransformAnimator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TransformAnimator *pThis = static_cast<TransformAnimator *>(this);

        pThis->setXTranslationSequence(source->getXTranslationSequence());

        pThis->setYTranslationSequence(source->getYTranslationSequence());

        pThis->setZTranslationSequence(source->getZTranslationSequence());

        pThis->setXRotationSequence(source->getXRotationSequence());

        pThis->setYRotationSequence(source->getYRotationSequence());

        pThis->setZRotationSequence(source->getZRotationSequence());

        pThis->setXScaleSequence(source->getXScaleSequence());

        pThis->setYScaleSequence(source->getYScaleSequence());

        pThis->setZScaleSequence(source->getZScaleSequence());

        pThis->setTranslationSequence(source->getTranslationSequence());

        pThis->setScaleSequence(source->getScaleSequence());
    }
}

GetFieldHandlePtr TransformAnimatorBase::getHandleXTranslationSequence (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfXTranslationSequence,
             this->getType().getFieldDesc(XTranslationSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleXTranslationSequence(void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfXTranslationSequence,
             this->getType().getFieldDesc(XTranslationSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setXTranslationSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(XTranslationSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleYTranslationSequence (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfYTranslationSequence,
             this->getType().getFieldDesc(YTranslationSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleYTranslationSequence(void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfYTranslationSequence,
             this->getType().getFieldDesc(YTranslationSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setYTranslationSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(YTranslationSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleZTranslationSequence (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfZTranslationSequence,
             this->getType().getFieldDesc(ZTranslationSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleZTranslationSequence(void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfZTranslationSequence,
             this->getType().getFieldDesc(ZTranslationSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setZTranslationSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(ZTranslationSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleXRotationSequence (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfXRotationSequence,
             this->getType().getFieldDesc(XRotationSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleXRotationSequence(void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfXRotationSequence,
             this->getType().getFieldDesc(XRotationSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setXRotationSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(XRotationSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleYRotationSequence (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfYRotationSequence,
             this->getType().getFieldDesc(YRotationSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleYRotationSequence(void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfYRotationSequence,
             this->getType().getFieldDesc(YRotationSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setYRotationSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(YRotationSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleZRotationSequence (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfZRotationSequence,
             this->getType().getFieldDesc(ZRotationSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleZRotationSequence(void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfZRotationSequence,
             this->getType().getFieldDesc(ZRotationSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setZRotationSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(ZRotationSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleXScaleSequence  (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfXScaleSequence,
             this->getType().getFieldDesc(XScaleSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleXScaleSequence (void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfXScaleSequence,
             this->getType().getFieldDesc(XScaleSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setXScaleSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(XScaleSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleYScaleSequence  (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfYScaleSequence,
             this->getType().getFieldDesc(YScaleSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleYScaleSequence (void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfYScaleSequence,
             this->getType().getFieldDesc(YScaleSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setYScaleSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(YScaleSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleZScaleSequence  (void) const
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::GetHandle(
             &_sfZScaleSequence,
             this->getType().getFieldDesc(ZScaleSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleZScaleSequence (void)
{
    SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeNumberSequenceReal32Ptr::EditHandle(
             &_sfZScaleSequence,
             this->getType().getFieldDesc(ZScaleSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setZScaleSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(ZScaleSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleTranslationSequence (void) const
{
    SFUnrecKeyframeVectorSequenceVec3fPtr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeVectorSequenceVec3fPtr::GetHandle(
             &_sfTranslationSequence,
             this->getType().getFieldDesc(TranslationSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleTranslationSequence(void)
{
    SFUnrecKeyframeVectorSequenceVec3fPtr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeVectorSequenceVec3fPtr::EditHandle(
             &_sfTranslationSequence,
             this->getType().getFieldDesc(TranslationSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setTranslationSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(TranslationSequenceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TransformAnimatorBase::getHandleScaleSequence   (void) const
{
    SFUnrecKeyframeVectorSequenceVec3fPtr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeVectorSequenceVec3fPtr::GetHandle(
             &_sfScaleSequence,
             this->getType().getFieldDesc(ScaleSequenceFieldId),
             const_cast<TransformAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TransformAnimatorBase::editHandleScaleSequence  (void)
{
    SFUnrecKeyframeVectorSequenceVec3fPtr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeVectorSequenceVec3fPtr::EditHandle(
             &_sfScaleSequence,
             this->getType().getFieldDesc(ScaleSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TransformAnimator::setScaleSequence,
                    static_cast<TransformAnimator *>(this), _1));

    editSField(ScaleSequenceFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TransformAnimatorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TransformAnimator *pThis = static_cast<TransformAnimator *>(this);

    pThis->execSync(static_cast<TransformAnimator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TransformAnimatorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TransformAnimator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TransformAnimator *>(pRefAspect),
                  dynamic_cast<const TransformAnimator *>(this));

    return returnValue;
}
#endif

void TransformAnimatorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TransformAnimator *>(this)->setXTranslationSequence(NULL);

    static_cast<TransformAnimator *>(this)->setYTranslationSequence(NULL);

    static_cast<TransformAnimator *>(this)->setZTranslationSequence(NULL);

    static_cast<TransformAnimator *>(this)->setXRotationSequence(NULL);

    static_cast<TransformAnimator *>(this)->setYRotationSequence(NULL);

    static_cast<TransformAnimator *>(this)->setZRotationSequence(NULL);

    static_cast<TransformAnimator *>(this)->setXScaleSequence(NULL);

    static_cast<TransformAnimator *>(this)->setYScaleSequence(NULL);

    static_cast<TransformAnimator *>(this)->setZScaleSequence(NULL);

    static_cast<TransformAnimator *>(this)->setTranslationSequence(NULL);

    static_cast<TransformAnimator *>(this)->setScaleSequence(NULL);


}


OSG_END_NAMESPACE
