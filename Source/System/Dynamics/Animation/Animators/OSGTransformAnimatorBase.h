/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TransformAnimator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTRANSFORMANIMATORBASE_H_
#define _OSGTRANSFORMANIMATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGTBAnimationDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAnimator.h" // Parent

#include "OSGKeyframeNumberSequenceTmplFields.h" // XTranslationSequence type
#include "OSGKeyframeVectorSequenceTmplFields.h" // ScaleSequence type

#include "OSGTransformAnimatorFields.h"

OSG_BEGIN_NAMESPACE

class TransformAnimator;

//! \brief TransformAnimator Base Class.

class OSG_TBANIMATION_DLLMAPPING TransformAnimatorBase : public Animator
{
  public:

    typedef Animator Inherited;
    typedef Animator ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(TransformAnimator);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        XTranslationSequenceFieldId = Inherited::NextFieldId,
        YTranslationSequenceFieldId = XTranslationSequenceFieldId + 1,
        ZTranslationSequenceFieldId = YTranslationSequenceFieldId + 1,
        XRotationSequenceFieldId = ZTranslationSequenceFieldId + 1,
        YRotationSequenceFieldId = XRotationSequenceFieldId + 1,
        ZRotationSequenceFieldId = YRotationSequenceFieldId + 1,
        XScaleSequenceFieldId = ZRotationSequenceFieldId + 1,
        YScaleSequenceFieldId = XScaleSequenceFieldId + 1,
        ZScaleSequenceFieldId = YScaleSequenceFieldId + 1,
        TranslationSequenceFieldId = ZScaleSequenceFieldId + 1,
        ScaleSequenceFieldId = TranslationSequenceFieldId + 1,
        NextFieldId = ScaleSequenceFieldId + 1
    };

    static const OSG::BitVector XTranslationSequenceFieldMask =
        (TypeTraits<BitVector>::One << XTranslationSequenceFieldId);
    static const OSG::BitVector YTranslationSequenceFieldMask =
        (TypeTraits<BitVector>::One << YTranslationSequenceFieldId);
    static const OSG::BitVector ZTranslationSequenceFieldMask =
        (TypeTraits<BitVector>::One << ZTranslationSequenceFieldId);
    static const OSG::BitVector XRotationSequenceFieldMask =
        (TypeTraits<BitVector>::One << XRotationSequenceFieldId);
    static const OSG::BitVector YRotationSequenceFieldMask =
        (TypeTraits<BitVector>::One << YRotationSequenceFieldId);
    static const OSG::BitVector ZRotationSequenceFieldMask =
        (TypeTraits<BitVector>::One << ZRotationSequenceFieldId);
    static const OSG::BitVector XScaleSequenceFieldMask =
        (TypeTraits<BitVector>::One << XScaleSequenceFieldId);
    static const OSG::BitVector YScaleSequenceFieldMask =
        (TypeTraits<BitVector>::One << YScaleSequenceFieldId);
    static const OSG::BitVector ZScaleSequenceFieldMask =
        (TypeTraits<BitVector>::One << ZScaleSequenceFieldId);
    static const OSG::BitVector TranslationSequenceFieldMask =
        (TypeTraits<BitVector>::One << TranslationSequenceFieldId);
    static const OSG::BitVector ScaleSequenceFieldMask =
        (TypeTraits<BitVector>::One << ScaleSequenceFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFXTranslationSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFYTranslationSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFZTranslationSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFXRotationSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFYRotationSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFZRotationSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFXScaleSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFYScaleSequenceType;
    typedef SFUnrecKeyframeNumberSequenceReal32Ptr SFZScaleSequenceType;
    typedef SFUnrecKeyframeVectorSequenceVec3fPtr SFTranslationSequenceType;
    typedef SFUnrecKeyframeVectorSequenceVec3fPtr SFScaleSequenceType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFXTranslationSequence(void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFXTranslationSequence(void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFYTranslationSequence(void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFYTranslationSequence(void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFZTranslationSequence(void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFZTranslationSequence(void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFXRotationSequence(void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFXRotationSequence(void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFYRotationSequence(void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFYRotationSequence(void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFZRotationSequence(void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFZRotationSequence(void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFXScaleSequence (void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFXScaleSequence (void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFYScaleSequence (void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFYScaleSequence (void);
            const SFUnrecKeyframeNumberSequenceReal32Ptr *getSFZScaleSequence (void) const;
                  SFUnrecKeyframeNumberSequenceReal32Ptr *editSFZScaleSequence (void);
            const SFUnrecKeyframeVectorSequenceVec3fPtr *getSFTranslationSequence(void) const;
                  SFUnrecKeyframeVectorSequenceVec3fPtr *editSFTranslationSequence(void);
            const SFUnrecKeyframeVectorSequenceVec3fPtr *getSFScaleSequence  (void) const;
                  SFUnrecKeyframeVectorSequenceVec3fPtr *editSFScaleSequence  (void);


                  KeyframeNumberSequenceReal32 * getXTranslationSequence(void) const;

                  KeyframeNumberSequenceReal32 * getYTranslationSequence(void) const;

                  KeyframeNumberSequenceReal32 * getZTranslationSequence(void) const;

                  KeyframeNumberSequenceReal32 * getXRotationSequence(void) const;

                  KeyframeNumberSequenceReal32 * getYRotationSequence(void) const;

                  KeyframeNumberSequenceReal32 * getZRotationSequence(void) const;

                  KeyframeNumberSequenceReal32 * getXScaleSequence (void) const;

                  KeyframeNumberSequenceReal32 * getYScaleSequence (void) const;

                  KeyframeNumberSequenceReal32 * getZScaleSequence (void) const;

                  KeyframeVectorSequenceVec3f * getTranslationSequence(void) const;

                  KeyframeVectorSequenceVec3f * getScaleSequence  (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setXTranslationSequence(KeyframeNumberSequenceReal32 * const value);
            void setYTranslationSequence(KeyframeNumberSequenceReal32 * const value);
            void setZTranslationSequence(KeyframeNumberSequenceReal32 * const value);
            void setXRotationSequence(KeyframeNumberSequenceReal32 * const value);
            void setYRotationSequence(KeyframeNumberSequenceReal32 * const value);
            void setZRotationSequence(KeyframeNumberSequenceReal32 * const value);
            void setXScaleSequence (KeyframeNumberSequenceReal32 * const value);
            void setYScaleSequence (KeyframeNumberSequenceReal32 * const value);
            void setZScaleSequence (KeyframeNumberSequenceReal32 * const value);
            void setTranslationSequence(KeyframeVectorSequenceVec3f * const value);
            void setScaleSequence  (KeyframeVectorSequenceVec3f * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TransformAnimatorTransitPtr  create          (void);
    static  TransformAnimator           *createEmpty     (void);

    static  TransformAnimatorTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  TransformAnimator            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  TransformAnimatorTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecKeyframeNumberSequenceReal32Ptr _sfXTranslationSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfYTranslationSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfZTranslationSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfXRotationSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfYRotationSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfZRotationSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfXScaleSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfYScaleSequence;
    SFUnrecKeyframeNumberSequenceReal32Ptr _sfZScaleSequence;
    SFUnrecKeyframeVectorSequenceVec3fPtr _sfTranslationSequence;
    SFUnrecKeyframeVectorSequenceVec3fPtr _sfScaleSequence;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TransformAnimatorBase(void);
    TransformAnimatorBase(const TransformAnimatorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TransformAnimatorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TransformAnimator *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleXTranslationSequence (void) const;
    EditFieldHandlePtr editHandleXTranslationSequence(void);
    GetFieldHandlePtr  getHandleYTranslationSequence (void) const;
    EditFieldHandlePtr editHandleYTranslationSequence(void);
    GetFieldHandlePtr  getHandleZTranslationSequence (void) const;
    EditFieldHandlePtr editHandleZTranslationSequence(void);
    GetFieldHandlePtr  getHandleXRotationSequence (void) const;
    EditFieldHandlePtr editHandleXRotationSequence(void);
    GetFieldHandlePtr  getHandleYRotationSequence (void) const;
    EditFieldHandlePtr editHandleYRotationSequence(void);
    GetFieldHandlePtr  getHandleZRotationSequence (void) const;
    EditFieldHandlePtr editHandleZRotationSequence(void);
    GetFieldHandlePtr  getHandleXScaleSequence  (void) const;
    EditFieldHandlePtr editHandleXScaleSequence (void);
    GetFieldHandlePtr  getHandleYScaleSequence  (void) const;
    EditFieldHandlePtr editHandleYScaleSequence (void);
    GetFieldHandlePtr  getHandleZScaleSequence  (void) const;
    EditFieldHandlePtr editHandleZScaleSequence (void);
    GetFieldHandlePtr  getHandleTranslationSequence (void) const;
    EditFieldHandlePtr editHandleTranslationSequence(void);
    GetFieldHandlePtr  getHandleScaleSequence   (void) const;
    EditFieldHandlePtr editHandleScaleSequence  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TransformAnimatorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TransformAnimatorBase &source);
};

typedef TransformAnimatorBase *TransformAnimatorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGTRANSFORMANIMATORBASE_H_ */
