/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class KeyframeAnimator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGKeyframeSequence.h"        // KeyframeSequence Class

#include "OSGKeyframeAnimatorBase.h"
#include "OSGKeyframeAnimator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::KeyframeAnimator
    Applies the result of the interpolation of a key-frame sequence to a field.
    The data-type of the #OSG::KeyframeSequence must match the type of the field applied to.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var KeyframeSequence * KeyframeAnimatorBase::_sfKeyframeSequence
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<KeyframeAnimator *>::_type("KeyframeAnimatorPtr", "AnimatorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(KeyframeAnimator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           KeyframeAnimator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           KeyframeAnimator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void KeyframeAnimatorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecKeyframeSequencePtr::Description(
        SFUnrecKeyframeSequencePtr::getClassType(),
        "KeyframeSequence",
        "",
        KeyframeSequenceFieldId, KeyframeSequenceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KeyframeAnimator::editHandleKeyframeSequence),
        static_cast<FieldGetMethodSig >(&KeyframeAnimator::getHandleKeyframeSequence));

    oType.addInitialDesc(pDesc);
}


KeyframeAnimatorBase::TypeObject KeyframeAnimatorBase::_type(
    KeyframeAnimatorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&KeyframeAnimatorBase::createEmptyLocal),
    KeyframeAnimator::initMethod,
    KeyframeAnimator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&KeyframeAnimator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"KeyframeAnimator\"\n"
    "\tparent=\"Animator\"\n"
    "    library=\"TBAnimation\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "Applies the result of the interpolation of a key-frame sequence to a field.\n"
    "The data-type of the #OSG::KeyframeSequence must match the type of the field applied to.\n"
    "\t<Field\n"
    "\t\tname=\"KeyframeSequence\"\n"
    "\t\ttype=\"KeyframeSequence\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Applies the result of the interpolation of a key-frame sequence to a field.\n"
    "The data-type of the #OSG::KeyframeSequence must match the type of the field applied to.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &KeyframeAnimatorBase::getType(void)
{
    return _type;
}

const FieldContainerType &KeyframeAnimatorBase::getType(void) const
{
    return _type;
}

UInt32 KeyframeAnimatorBase::getContainerSize(void) const
{
    return sizeof(KeyframeAnimator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the KeyframeAnimator::_sfKeyframeSequence field.
const SFUnrecKeyframeSequencePtr *KeyframeAnimatorBase::getSFKeyframeSequence(void) const
{
    return &_sfKeyframeSequence;
}

SFUnrecKeyframeSequencePtr *KeyframeAnimatorBase::editSFKeyframeSequence(void)
{
    editSField(KeyframeSequenceFieldMask);

    return &_sfKeyframeSequence;
}





/*------------------------------ access -----------------------------------*/

UInt32 KeyframeAnimatorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (KeyframeSequenceFieldMask & whichField))
    {
        returnValue += _sfKeyframeSequence.getBinSize();
    }

    return returnValue;
}

void KeyframeAnimatorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (KeyframeSequenceFieldMask & whichField))
    {
        _sfKeyframeSequence.copyToBin(pMem);
    }
}

void KeyframeAnimatorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (KeyframeSequenceFieldMask & whichField))
    {
        editSField(KeyframeSequenceFieldMask);
        _sfKeyframeSequence.copyFromBin(pMem);
    }
}

//! create a new instance of the class
KeyframeAnimatorTransitPtr KeyframeAnimatorBase::createLocal(BitVector bFlags)
{
    KeyframeAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<KeyframeAnimator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
KeyframeAnimatorTransitPtr KeyframeAnimatorBase::createDependent(BitVector bFlags)
{
    KeyframeAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<KeyframeAnimator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
KeyframeAnimatorTransitPtr KeyframeAnimatorBase::create(void)
{
    KeyframeAnimatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<KeyframeAnimator>(tmpPtr);
    }

    return fc;
}

KeyframeAnimator *KeyframeAnimatorBase::createEmptyLocal(BitVector bFlags)
{
    KeyframeAnimator *returnValue;

    newPtr<KeyframeAnimator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
KeyframeAnimator *KeyframeAnimatorBase::createEmpty(void)
{
    KeyframeAnimator *returnValue;

    newPtr<KeyframeAnimator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr KeyframeAnimatorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    KeyframeAnimator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const KeyframeAnimator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr KeyframeAnimatorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    KeyframeAnimator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const KeyframeAnimator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr KeyframeAnimatorBase::shallowCopy(void) const
{
    KeyframeAnimator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const KeyframeAnimator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

KeyframeAnimatorBase::KeyframeAnimatorBase(void) :
    Inherited(),
    _sfKeyframeSequence       (NULL)
{
}

KeyframeAnimatorBase::KeyframeAnimatorBase(const KeyframeAnimatorBase &source) :
    Inherited(source),
    _sfKeyframeSequence       (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

KeyframeAnimatorBase::~KeyframeAnimatorBase(void)
{
}

void KeyframeAnimatorBase::onCreate(const KeyframeAnimator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        KeyframeAnimator *pThis = static_cast<KeyframeAnimator *>(this);

        pThis->setKeyframeSequence(source->getKeyframeSequence());
    }
}

GetFieldHandlePtr KeyframeAnimatorBase::getHandleKeyframeSequence (void) const
{
    SFUnrecKeyframeSequencePtr::GetHandlePtr returnValue(
        new  SFUnrecKeyframeSequencePtr::GetHandle(
             &_sfKeyframeSequence,
             this->getType().getFieldDesc(KeyframeSequenceFieldId),
             const_cast<KeyframeAnimatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KeyframeAnimatorBase::editHandleKeyframeSequence(void)
{
    SFUnrecKeyframeSequencePtr::EditHandlePtr returnValue(
        new  SFUnrecKeyframeSequencePtr::EditHandle(
             &_sfKeyframeSequence,
             this->getType().getFieldDesc(KeyframeSequenceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&KeyframeAnimator::setKeyframeSequence,
                    static_cast<KeyframeAnimator *>(this), _1));

    editSField(KeyframeSequenceFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void KeyframeAnimatorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    KeyframeAnimator *pThis = static_cast<KeyframeAnimator *>(this);

    pThis->execSync(static_cast<KeyframeAnimator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *KeyframeAnimatorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    KeyframeAnimator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const KeyframeAnimator *>(pRefAspect),
                  dynamic_cast<const KeyframeAnimator *>(this));

    return returnValue;
}
#endif

void KeyframeAnimatorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<KeyframeAnimator *>(this)->setKeyframeSequence(NULL);


}


OSG_END_NAMESPACE
