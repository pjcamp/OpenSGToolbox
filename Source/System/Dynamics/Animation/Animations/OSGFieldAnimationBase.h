/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FieldAnimation
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGFIELDANIMATIONBASE_H_
#define _OSGFIELDANIMATIONBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGTBAnimationDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAnimation.h" // Parent

#include "OSGAnimatorFields.h"          // Animator type
#include "OSGFieldContainerFields.h"    // Container type
#include "OSGSysFields.h"               // FieldId type
#include "OSGBaseFields.h"              // FieldName type

#include "OSGFieldAnimationFields.h"

OSG_BEGIN_NAMESPACE

class FieldAnimation;

//! \brief FieldAnimation Base Class.

class OSG_TBANIMATION_DLLMAPPING FieldAnimationBase : public Animation
{
  public:

    typedef Animation Inherited;
    typedef Animation ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(FieldAnimation);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        AnimatorFieldId = Inherited::NextFieldId,
        ContainerFieldId = AnimatorFieldId + 1,
        FieldIdFieldId = ContainerFieldId + 1,
        FieldNameFieldId = FieldIdFieldId + 1,
        IndexFieldId = FieldNameFieldId + 1,
        InterpolationTypeFieldId = IndexFieldId + 1,
        ReplacementPolicyFieldId = InterpolationTypeFieldId + 1,
        NextFieldId = ReplacementPolicyFieldId + 1
    };

    static const OSG::BitVector AnimatorFieldMask =
        (TypeTraits<BitVector>::One << AnimatorFieldId);
    static const OSG::BitVector ContainerFieldMask =
        (TypeTraits<BitVector>::One << ContainerFieldId);
    static const OSG::BitVector FieldIdFieldMask =
        (TypeTraits<BitVector>::One << FieldIdFieldId);
    static const OSG::BitVector FieldNameFieldMask =
        (TypeTraits<BitVector>::One << FieldNameFieldId);
    static const OSG::BitVector IndexFieldMask =
        (TypeTraits<BitVector>::One << IndexFieldId);
    static const OSG::BitVector InterpolationTypeFieldMask =
        (TypeTraits<BitVector>::One << InterpolationTypeFieldId);
    static const OSG::BitVector ReplacementPolicyFieldMask =
        (TypeTraits<BitVector>::One << ReplacementPolicyFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecAnimatorPtr SFAnimatorType;
    typedef SFUnrecFieldContainerPtr SFContainerType;
    typedef SFUInt32          SFFieldIdType;
    typedef SFString          SFFieldNameType;
    typedef SFInt64           SFIndexType;
    typedef SFUInt32          SFInterpolationTypeType;
    typedef SFUInt32          SFReplacementPolicyType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecAnimatorPtr  *getSFAnimator       (void) const;
                  SFUnrecAnimatorPtr  *editSFAnimator       (void);

                  SFUInt32            *editSFInterpolationType(void);
            const SFUInt32            *getSFInterpolationType (void) const;

                  SFUInt32            *editSFReplacementPolicy(void);
            const SFUInt32            *getSFReplacementPolicy (void) const;


                  Animator * getAnimator       (void) const;

                  UInt32              &editInterpolationType(void);
                  UInt32               getInterpolationType (void) const;

                  UInt32              &editReplacementPolicy(void);
                  UInt32               getReplacementPolicy (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setAnimator       (Animator * const value);
            void setInterpolationType(const UInt32 value);
            void setReplacementPolicy(const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  FieldAnimationTransitPtr  create          (void);
    static  FieldAnimation           *createEmpty     (void);

    static  FieldAnimationTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  FieldAnimation            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  FieldAnimationTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecAnimatorPtr _sfAnimator;
    SFUnrecFieldContainerPtr _sfContainer;
    SFUInt32          _sfFieldId;
    SFString          _sfFieldName;
    SFInt64           _sfIndex;
    SFUInt32          _sfInterpolationType;
    SFUInt32          _sfReplacementPolicy;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    FieldAnimationBase(void);
    FieldAnimationBase(const FieldAnimationBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~FieldAnimationBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const FieldAnimation *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleAnimator        (void) const;
    EditFieldHandlePtr editHandleAnimator       (void);
    GetFieldHandlePtr  getHandleContainer       (void) const;
    EditFieldHandlePtr editHandleContainer      (void);
    GetFieldHandlePtr  getHandleFieldId         (void) const;
    EditFieldHandlePtr editHandleFieldId        (void);
    GetFieldHandlePtr  getHandleFieldName       (void) const;
    EditFieldHandlePtr editHandleFieldName      (void);
    GetFieldHandlePtr  getHandleIndex           (void) const;
    EditFieldHandlePtr editHandleIndex          (void);
    GetFieldHandlePtr  getHandleInterpolationType (void) const;
    EditFieldHandlePtr editHandleInterpolationType(void);
    GetFieldHandlePtr  getHandleReplacementPolicy (void) const;
    EditFieldHandlePtr editHandleReplacementPolicy(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecFieldContainerPtr *getSFContainer       (void) const;
                  SFUnrecFieldContainerPtr *editSFContainer      (void);

                  SFUInt32            *editSFFieldId        (void);
            const SFUInt32            *getSFFieldId         (void) const;

                  SFString            *editSFFieldName      (void);
            const SFString            *getSFFieldName       (void) const;

                  SFInt64             *editSFIndex          (void);
            const SFInt64             *getSFIndex           (void) const;


                  FieldContainer * getContainer      (void) const;

                  UInt32              &editFieldId        (void);
                  UInt32               getFieldId         (void) const;

                  std::string         &editFieldName      (void);
            const std::string         &getFieldName       (void) const;

                  Int64               &editIndex          (void);
                  Int64                getIndex           (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setContainer      (FieldContainer * const value);
            void setFieldId        (const UInt32 value);
            void setFieldName      (const std::string &value);
            void setIndex          (const Int64 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      FieldAnimationBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const FieldAnimationBase &source);
};

typedef FieldAnimationBase *FieldAnimationBaseP;

OSG_END_NAMESPACE

#endif /* _OSGFIELDANIMATIONBASE_H_ */
