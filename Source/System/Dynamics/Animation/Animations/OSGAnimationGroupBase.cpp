/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnimationGroup!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGAnimationEventDetails.h"


#include "OSGAnimation.h"               // Animations Class

#include "OSGAnimationGroupBase.h"
#include "OSGAnimationGroup.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AnimationGroup
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Animation *     AnimationGroupBase::_mfAnimations
    
*/

/*! \var Real32          AnimationGroupBase::_sfScale
    
*/

/*! \var Real32          AnimationGroupBase::_sfOffset
    
*/

/*! \var Real32          AnimationGroupBase::_sfSpan
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AnimationGroup *>::_type("AnimationGroupPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AnimationGroup *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AnimationGroup *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AnimationGroup *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AnimationGroupBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecAnimationPtr::Description(
        MFUnrecAnimationPtr::getClassType(),
        "Animations",
        "",
        AnimationsFieldId, AnimationsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AnimationGroup::editHandleAnimations),
        static_cast<FieldGetMethodSig >(&AnimationGroup::getHandleAnimations));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Scale",
        "",
        ScaleFieldId, ScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AnimationGroup::editHandleScale),
        static_cast<FieldGetMethodSig >(&AnimationGroup::getHandleScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Offset",
        "",
        OffsetFieldId, OffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AnimationGroup::editHandleOffset),
        static_cast<FieldGetMethodSig >(&AnimationGroup::getHandleOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Span",
        "",
        SpanFieldId, SpanFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AnimationGroup::editHandleSpan),
        static_cast<FieldGetMethodSig >(&AnimationGroup::getHandleSpan));

    oType.addInitialDesc(pDesc);
}


AnimationGroupBase::TypeObject AnimationGroupBase::_type(
    AnimationGroupBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&AnimationGroupBase::createEmptyLocal),
    AnimationGroup::initMethod,
    AnimationGroup::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AnimationGroup::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AnimationGroup\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"TBAnimation\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Animations\"\n"
    "\t\ttype=\"Animation\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Scale\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Offset\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"0.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Span\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"-1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"AnimationsStarted\"\n"
    "\t\tdetailsType=\"AnimationEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"AnimationsStopped\"\n"
    "\t\tdetailsType=\"AnimationEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"AnimationsPaused\"\n"
    "\t\tdetailsType=\"AnimationEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"AnimationsUnpaused\"\n"
    "\t\tdetailsType=\"AnimationEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"AnimationsEnded\"\n"
    "\t\tdetailsType=\"AnimationEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"AnimationsCycled\"\n"
    "\t\tdetailsType=\"AnimationEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    ""
    );

//! AnimationGroup Produced Events

EventDescription *AnimationGroupBase::_eventDesc[] =
{
    new EventDescription("AnimationsStarted", 
                          "",
                          AnimationsStartedEventId, 
                          FieldTraits<AnimationEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AnimationGroupBase::getHandleAnimationsStartedSignal)),

    new EventDescription("AnimationsStopped", 
                          "",
                          AnimationsStoppedEventId, 
                          FieldTraits<AnimationEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AnimationGroupBase::getHandleAnimationsStoppedSignal)),

    new EventDescription("AnimationsPaused", 
                          "",
                          AnimationsPausedEventId, 
                          FieldTraits<AnimationEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AnimationGroupBase::getHandleAnimationsPausedSignal)),

    new EventDescription("AnimationsUnpaused", 
                          "",
                          AnimationsUnpausedEventId, 
                          FieldTraits<AnimationEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AnimationGroupBase::getHandleAnimationsUnpausedSignal)),

    new EventDescription("AnimationsEnded", 
                          "",
                          AnimationsEndedEventId, 
                          FieldTraits<AnimationEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AnimationGroupBase::getHandleAnimationsEndedSignal)),

    new EventDescription("AnimationsCycled", 
                          "",
                          AnimationsCycledEventId, 
                          FieldTraits<AnimationEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AnimationGroupBase::getHandleAnimationsCycledSignal))

};

EventProducerType AnimationGroupBase::_producerType(
    "AnimationGroupProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnimationGroupBase::getType(void)
{
    return _type;
}

const FieldContainerType &AnimationGroupBase::getType(void) const
{
    return _type;
}

const EventProducerType &AnimationGroupBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 AnimationGroupBase::getContainerSize(void) const
{
    return sizeof(AnimationGroup);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AnimationGroup::_mfAnimations field.
const MFUnrecAnimationPtr *AnimationGroupBase::getMFAnimations(void) const
{
    return &_mfAnimations;
}

MFUnrecAnimationPtr *AnimationGroupBase::editMFAnimations     (void)
{
    editMField(AnimationsFieldMask, _mfAnimations);

    return &_mfAnimations;
}

SFReal32 *AnimationGroupBase::editSFScale(void)
{
    editSField(ScaleFieldMask);

    return &_sfScale;
}

const SFReal32 *AnimationGroupBase::getSFScale(void) const
{
    return &_sfScale;
}


SFReal32 *AnimationGroupBase::editSFOffset(void)
{
    editSField(OffsetFieldMask);

    return &_sfOffset;
}

const SFReal32 *AnimationGroupBase::getSFOffset(void) const
{
    return &_sfOffset;
}


SFReal32 *AnimationGroupBase::editSFSpan(void)
{
    editSField(SpanFieldMask);

    return &_sfSpan;
}

const SFReal32 *AnimationGroupBase::getSFSpan(void) const
{
    return &_sfSpan;
}




void AnimationGroupBase::pushToAnimations(Animation * const value)
{
    editMField(AnimationsFieldMask, _mfAnimations);

    _mfAnimations.push_back(value);
}

void AnimationGroupBase::assignAnimations(const MFUnrecAnimationPtr &value)
{
    MFUnrecAnimationPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecAnimationPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AnimationGroup *>(this)->clearAnimations();

    while(elemIt != elemEnd)
    {
        this->pushToAnimations(*elemIt);

        ++elemIt;
    }
}

void AnimationGroupBase::removeFromAnimations(UInt32 uiIndex)
{
    if(uiIndex < _mfAnimations.size())
    {
        editMField(AnimationsFieldMask, _mfAnimations);

        _mfAnimations.erase(uiIndex);
    }
}

void AnimationGroupBase::removeObjFromAnimations(Animation * const value)
{
    Int32 iElemIdx = _mfAnimations.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(AnimationsFieldMask, _mfAnimations);

        _mfAnimations.erase(iElemIdx);
    }
}
void AnimationGroupBase::clearAnimations(void)
{
    editMField(AnimationsFieldMask, _mfAnimations);


    _mfAnimations.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 AnimationGroupBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        returnValue += _mfAnimations.getBinSize();
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }
    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        returnValue += _sfOffset.getBinSize();
    }
    if(FieldBits::NoField != (SpanFieldMask & whichField))
    {
        returnValue += _sfSpan.getBinSize();
    }

    return returnValue;
}

void AnimationGroupBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        _sfOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpanFieldMask & whichField))
    {
        _sfSpan.copyToBin(pMem);
    }
}

void AnimationGroupBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        _sfOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpanFieldMask & whichField))
    {
        _sfSpan.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AnimationGroupTransitPtr AnimationGroupBase::createLocal(BitVector bFlags)
{
    AnimationGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<AnimationGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AnimationGroupTransitPtr AnimationGroupBase::createDependent(BitVector bFlags)
{
    AnimationGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<AnimationGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AnimationGroupTransitPtr AnimationGroupBase::create(void)
{
    AnimationGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<AnimationGroup>(tmpPtr);
    }

    return fc;
}

AnimationGroup *AnimationGroupBase::createEmptyLocal(BitVector bFlags)
{
    AnimationGroup *returnValue;

    newPtr<AnimationGroup>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
AnimationGroup *AnimationGroupBase::createEmpty(void)
{
    AnimationGroup *returnValue;

    newPtr<AnimationGroup>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr AnimationGroupBase::shallowCopyLocal(
    BitVector bFlags) const
{
    AnimationGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimationGroup *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimationGroupBase::shallowCopyDependent(
    BitVector bFlags) const
{
    AnimationGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimationGroup *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimationGroupBase::shallowCopy(void) const
{
    AnimationGroup *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const AnimationGroup *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- event producers ----------------------------------*/
void AnimationGroupBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case AnimationsStartedEventId:
        OSG_ASSERT(dynamic_cast<AnimationsStartedEventDetailsType* const>(e));

        _AnimationsStartedEvent.set_combiner(ConsumableEventCombiner(e));
        _AnimationsStartedEvent(dynamic_cast<AnimationsStartedEventDetailsType* const>(e), AnimationsStartedEventId);
        break;
    case AnimationsStoppedEventId:
        OSG_ASSERT(dynamic_cast<AnimationsStoppedEventDetailsType* const>(e));

        _AnimationsStoppedEvent.set_combiner(ConsumableEventCombiner(e));
        _AnimationsStoppedEvent(dynamic_cast<AnimationsStoppedEventDetailsType* const>(e), AnimationsStoppedEventId);
        break;
    case AnimationsPausedEventId:
        OSG_ASSERT(dynamic_cast<AnimationsPausedEventDetailsType* const>(e));

        _AnimationsPausedEvent.set_combiner(ConsumableEventCombiner(e));
        _AnimationsPausedEvent(dynamic_cast<AnimationsPausedEventDetailsType* const>(e), AnimationsPausedEventId);
        break;
    case AnimationsUnpausedEventId:
        OSG_ASSERT(dynamic_cast<AnimationsUnpausedEventDetailsType* const>(e));

        _AnimationsUnpausedEvent.set_combiner(ConsumableEventCombiner(e));
        _AnimationsUnpausedEvent(dynamic_cast<AnimationsUnpausedEventDetailsType* const>(e), AnimationsUnpausedEventId);
        break;
    case AnimationsEndedEventId:
        OSG_ASSERT(dynamic_cast<AnimationsEndedEventDetailsType* const>(e));

        _AnimationsEndedEvent.set_combiner(ConsumableEventCombiner(e));
        _AnimationsEndedEvent(dynamic_cast<AnimationsEndedEventDetailsType* const>(e), AnimationsEndedEventId);
        break;
    case AnimationsCycledEventId:
        OSG_ASSERT(dynamic_cast<AnimationsCycledEventDetailsType* const>(e));

        _AnimationsCycledEvent.set_combiner(ConsumableEventCombiner(e));
        _AnimationsCycledEvent(dynamic_cast<AnimationsCycledEventDetailsType* const>(e), AnimationsCycledEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection AnimationGroupBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case AnimationsStartedEventId:
        return _AnimationsStartedEvent.connect(listener, at);
        break;
    case AnimationsStoppedEventId:
        return _AnimationsStoppedEvent.connect(listener, at);
        break;
    case AnimationsPausedEventId:
        return _AnimationsPausedEvent.connect(listener, at);
        break;
    case AnimationsUnpausedEventId:
        return _AnimationsUnpausedEvent.connect(listener, at);
        break;
    case AnimationsEndedEventId:
        return _AnimationsEndedEvent.connect(listener, at);
        break;
    case AnimationsCycledEventId:
        return _AnimationsCycledEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  AnimationGroupBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case AnimationsStartedEventId:
        return _AnimationsStartedEvent.connect(group, listener, at);
        break;
    case AnimationsStoppedEventId:
        return _AnimationsStoppedEvent.connect(group, listener, at);
        break;
    case AnimationsPausedEventId:
        return _AnimationsPausedEvent.connect(group, listener, at);
        break;
    case AnimationsUnpausedEventId:
        return _AnimationsUnpausedEvent.connect(group, listener, at);
        break;
    case AnimationsEndedEventId:
        return _AnimationsEndedEvent.connect(group, listener, at);
        break;
    case AnimationsCycledEventId:
        return _AnimationsCycledEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  AnimationGroupBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case AnimationsStartedEventId:
        _AnimationsStartedEvent.disconnect(group);
        break;
    case AnimationsStoppedEventId:
        _AnimationsStoppedEvent.disconnect(group);
        break;
    case AnimationsPausedEventId:
        _AnimationsPausedEvent.disconnect(group);
        break;
    case AnimationsUnpausedEventId:
        _AnimationsUnpausedEvent.disconnect(group);
        break;
    case AnimationsEndedEventId:
        _AnimationsEndedEvent.disconnect(group);
        break;
    case AnimationsCycledEventId:
        _AnimationsCycledEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  AnimationGroupBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case AnimationsStartedEventId:
        _AnimationsStartedEvent.disconnect_all_slots();
        break;
    case AnimationsStoppedEventId:
        _AnimationsStoppedEvent.disconnect_all_slots();
        break;
    case AnimationsPausedEventId:
        _AnimationsPausedEvent.disconnect_all_slots();
        break;
    case AnimationsUnpausedEventId:
        _AnimationsUnpausedEvent.disconnect_all_slots();
        break;
    case AnimationsEndedEventId:
        _AnimationsEndedEvent.disconnect_all_slots();
        break;
    case AnimationsCycledEventId:
        _AnimationsCycledEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  AnimationGroupBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case AnimationsStartedEventId:
        return _AnimationsStartedEvent.empty();
        break;
    case AnimationsStoppedEventId:
        return _AnimationsStoppedEvent.empty();
        break;
    case AnimationsPausedEventId:
        return _AnimationsPausedEvent.empty();
        break;
    case AnimationsUnpausedEventId:
        return _AnimationsUnpausedEvent.empty();
        break;
    case AnimationsEndedEventId:
        return _AnimationsEndedEvent.empty();
        break;
    case AnimationsCycledEventId:
        return _AnimationsCycledEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  AnimationGroupBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case AnimationsStartedEventId:
        return _AnimationsStartedEvent.num_slots();
        break;
    case AnimationsStoppedEventId:
        return _AnimationsStoppedEvent.num_slots();
        break;
    case AnimationsPausedEventId:
        return _AnimationsPausedEvent.num_slots();
        break;
    case AnimationsUnpausedEventId:
        return _AnimationsUnpausedEvent.num_slots();
        break;
    case AnimationsEndedEventId:
        return _AnimationsEndedEvent.num_slots();
        break;
    case AnimationsCycledEventId:
        return _AnimationsCycledEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

AnimationGroupBase::AnimationGroupBase(void) :
    Inherited(),
    _mfAnimations             (),
    _sfScale                  (Real32(1.0)),
    _sfOffset                 (Real32(0.0)),
    _sfSpan                   (Real32(-1.0))
{
}

AnimationGroupBase::AnimationGroupBase(const AnimationGroupBase &source) :
    Inherited(source),
    _mfAnimations             (),
    _sfScale                  (source._sfScale                  ),
    _sfOffset                 (source._sfOffset                 ),
    _sfSpan                   (source._sfSpan                   )
{
}


/*-------------------------- destructors ----------------------------------*/

AnimationGroupBase::~AnimationGroupBase(void)
{
}

void AnimationGroupBase::onCreate(const AnimationGroup *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AnimationGroup *pThis = static_cast<AnimationGroup *>(this);

        MFUnrecAnimationPtr::const_iterator AnimationsIt  =
            source->_mfAnimations.begin();
        MFUnrecAnimationPtr::const_iterator AnimationsEnd =
            source->_mfAnimations.end  ();

        while(AnimationsIt != AnimationsEnd)
        {
            pThis->pushToAnimations(*AnimationsIt);

            ++AnimationsIt;
        }
    }
}

GetFieldHandlePtr AnimationGroupBase::getHandleAnimations      (void) const
{
    MFUnrecAnimationPtr::GetHandlePtr returnValue(
        new  MFUnrecAnimationPtr::GetHandle(
             &_mfAnimations,
             this->getType().getFieldDesc(AnimationsFieldId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationGroupBase::editHandleAnimations     (void)
{
    MFUnrecAnimationPtr::EditHandlePtr returnValue(
        new  MFUnrecAnimationPtr::EditHandle(
             &_mfAnimations,
             this->getType().getFieldDesc(AnimationsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AnimationGroup::pushToAnimations,
                    static_cast<AnimationGroup *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AnimationGroup::removeFromAnimations,
                    static_cast<AnimationGroup *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AnimationGroup::removeObjFromAnimations,
                    static_cast<AnimationGroup *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AnimationGroup::clearAnimations,
                    static_cast<AnimationGroup *>(this)));

    editMField(AnimationsFieldMask, _mfAnimations);

    return returnValue;
}

GetFieldHandlePtr AnimationGroupBase::getHandleScale           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationGroupBase::editHandleScale          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             this));


    editSField(ScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr AnimationGroupBase::getHandleOffset          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOffset,
             this->getType().getFieldDesc(OffsetFieldId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationGroupBase::editHandleOffset         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOffset,
             this->getType().getFieldDesc(OffsetFieldId),
             this));


    editSField(OffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr AnimationGroupBase::getHandleSpan            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSpan,
             this->getType().getFieldDesc(SpanFieldId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationGroupBase::editHandleSpan           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSpan,
             this->getType().getFieldDesc(SpanFieldId),
             this));


    editSField(SpanFieldMask);

    return returnValue;
}


GetEventHandlePtr AnimationGroupBase::getHandleAnimationsStartedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<AnimationsStartedEventType>(
             const_cast<AnimationsStartedEventType *>(&_AnimationsStartedEvent),
             _producerType.getEventDescription(AnimationsStartedEventId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AnimationGroupBase::getHandleAnimationsStoppedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<AnimationsStoppedEventType>(
             const_cast<AnimationsStoppedEventType *>(&_AnimationsStoppedEvent),
             _producerType.getEventDescription(AnimationsStoppedEventId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AnimationGroupBase::getHandleAnimationsPausedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<AnimationsPausedEventType>(
             const_cast<AnimationsPausedEventType *>(&_AnimationsPausedEvent),
             _producerType.getEventDescription(AnimationsPausedEventId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AnimationGroupBase::getHandleAnimationsUnpausedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<AnimationsUnpausedEventType>(
             const_cast<AnimationsUnpausedEventType *>(&_AnimationsUnpausedEvent),
             _producerType.getEventDescription(AnimationsUnpausedEventId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AnimationGroupBase::getHandleAnimationsEndedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<AnimationsEndedEventType>(
             const_cast<AnimationsEndedEventType *>(&_AnimationsEndedEvent),
             _producerType.getEventDescription(AnimationsEndedEventId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AnimationGroupBase::getHandleAnimationsCycledSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<AnimationsCycledEventType>(
             const_cast<AnimationsCycledEventType *>(&_AnimationsCycledEvent),
             _producerType.getEventDescription(AnimationsCycledEventId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AnimationGroupBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AnimationGroup *pThis = static_cast<AnimationGroup *>(this);

    pThis->execSync(static_cast<AnimationGroup *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AnimationGroupBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    AnimationGroup *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AnimationGroup *>(pRefAspect),
                  dynamic_cast<const AnimationGroup *>(this));

    return returnValue;
}
#endif

void AnimationGroupBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AnimationGroup *>(this)->clearAnimations();


}


OSG_END_NAMESPACE
