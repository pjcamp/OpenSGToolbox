/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnimationGroup!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGAnimation.h"               // Animations Class

#include "OSGAnimationGroupBase.h"
#include "OSGAnimationGroup.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AnimationGroup
    Controls the animation of a collection of #Animation as a singleunit.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Animation *     AnimationGroupBase::_mfAnimations
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AnimationGroup *>::_type("AnimationGroupPtr", "AnimationPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AnimationGroup *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AnimationGroup *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AnimationGroup *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AnimationGroupBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecAnimationPtr::Description(
        MFUnrecAnimationPtr::getClassType(),
        "Animations",
        "",
        AnimationsFieldId, AnimationsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AnimationGroup::editHandleAnimations),
        static_cast<FieldGetMethodSig >(&AnimationGroup::getHandleAnimations));

    oType.addInitialDesc(pDesc);
}


AnimationGroupBase::TypeObject AnimationGroupBase::_type(
    AnimationGroupBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&AnimationGroupBase::createEmptyLocal),
    AnimationGroup::initMethod,
    AnimationGroup::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AnimationGroup::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AnimationGroup\"\n"
    "\tparent=\"Animation\"\n"
    "    library=\"TBAnimation\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "Controls the animation of a collection of #Animation as a singleunit.\n"
    "\t<Field\n"
    "\t\tname=\"Animations\"\n"
    "\t\ttype=\"Animation\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Controls the animation of a collection of #Animation as a singleunit.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnimationGroupBase::getType(void)
{
    return _type;
}

const FieldContainerType &AnimationGroupBase::getType(void) const
{
    return _type;
}

UInt32 AnimationGroupBase::getContainerSize(void) const
{
    return sizeof(AnimationGroup);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AnimationGroup::_mfAnimations field.
const MFUnrecAnimationPtr *AnimationGroupBase::getMFAnimations(void) const
{
    return &_mfAnimations;
}

MFUnrecAnimationPtr *AnimationGroupBase::editMFAnimations     (void)
{
    editMField(AnimationsFieldMask, _mfAnimations);

    return &_mfAnimations;
}



void AnimationGroupBase::pushToAnimations(Animation * const value)
{
    editMField(AnimationsFieldMask, _mfAnimations);

    _mfAnimations.push_back(value);
}

void AnimationGroupBase::assignAnimations(const MFUnrecAnimationPtr &value)
{
    MFUnrecAnimationPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecAnimationPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AnimationGroup *>(this)->clearAnimations();

    while(elemIt != elemEnd)
    {
        this->pushToAnimations(*elemIt);

        ++elemIt;
    }
}

void AnimationGroupBase::removeFromAnimations(UInt32 uiIndex)
{
    if(uiIndex < _mfAnimations.size())
    {
        editMField(AnimationsFieldMask, _mfAnimations);

        _mfAnimations.erase(uiIndex);
    }
}

void AnimationGroupBase::removeObjFromAnimations(Animation * const value)
{
    Int32 iElemIdx = _mfAnimations.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(AnimationsFieldMask, _mfAnimations);

        _mfAnimations.erase(iElemIdx);
    }
}
void AnimationGroupBase::clearAnimations(void)
{
    editMField(AnimationsFieldMask, _mfAnimations);


    _mfAnimations.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 AnimationGroupBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        returnValue += _mfAnimations.getBinSize();
    }

    return returnValue;
}

void AnimationGroupBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyToBin(pMem);
    }
}

void AnimationGroupBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AnimationGroupTransitPtr AnimationGroupBase::createLocal(BitVector bFlags)
{
    AnimationGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<AnimationGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AnimationGroupTransitPtr AnimationGroupBase::createDependent(BitVector bFlags)
{
    AnimationGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<AnimationGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AnimationGroupTransitPtr AnimationGroupBase::create(void)
{
    AnimationGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<AnimationGroup>(tmpPtr);
    }

    return fc;
}

AnimationGroup *AnimationGroupBase::createEmptyLocal(BitVector bFlags)
{
    AnimationGroup *returnValue;

    newPtr<AnimationGroup>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
AnimationGroup *AnimationGroupBase::createEmpty(void)
{
    AnimationGroup *returnValue;

    newPtr<AnimationGroup>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr AnimationGroupBase::shallowCopyLocal(
    BitVector bFlags) const
{
    AnimationGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimationGroup *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimationGroupBase::shallowCopyDependent(
    BitVector bFlags) const
{
    AnimationGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimationGroup *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimationGroupBase::shallowCopy(void) const
{
    AnimationGroup *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const AnimationGroup *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

AnimationGroupBase::AnimationGroupBase(void) :
    Inherited(),
    _mfAnimations             ()
{
}

AnimationGroupBase::AnimationGroupBase(const AnimationGroupBase &source) :
    Inherited(source),
    _mfAnimations             ()
{
}


/*-------------------------- destructors ----------------------------------*/

AnimationGroupBase::~AnimationGroupBase(void)
{
}

void AnimationGroupBase::onCreate(const AnimationGroup *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AnimationGroup *pThis = static_cast<AnimationGroup *>(this);

        MFUnrecAnimationPtr::const_iterator AnimationsIt  =
            source->_mfAnimations.begin();
        MFUnrecAnimationPtr::const_iterator AnimationsEnd =
            source->_mfAnimations.end  ();

        while(AnimationsIt != AnimationsEnd)
        {
            pThis->pushToAnimations(*AnimationsIt);

            ++AnimationsIt;
        }
    }
}

GetFieldHandlePtr AnimationGroupBase::getHandleAnimations      (void) const
{
    MFUnrecAnimationPtr::GetHandlePtr returnValue(
        new  MFUnrecAnimationPtr::GetHandle(
             &_mfAnimations,
             this->getType().getFieldDesc(AnimationsFieldId),
             const_cast<AnimationGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationGroupBase::editHandleAnimations     (void)
{
    MFUnrecAnimationPtr::EditHandlePtr returnValue(
        new  MFUnrecAnimationPtr::EditHandle(
             &_mfAnimations,
             this->getType().getFieldDesc(AnimationsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AnimationGroup::pushToAnimations,
                    static_cast<AnimationGroup *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AnimationGroup::removeFromAnimations,
                    static_cast<AnimationGroup *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AnimationGroup::removeObjFromAnimations,
                    static_cast<AnimationGroup *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AnimationGroup::clearAnimations,
                    static_cast<AnimationGroup *>(this)));

    editMField(AnimationsFieldMask, _mfAnimations);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void AnimationGroupBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AnimationGroup *pThis = static_cast<AnimationGroup *>(this);

    pThis->execSync(static_cast<AnimationGroup *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AnimationGroupBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    AnimationGroup *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AnimationGroup *>(pRefAspect),
                  dynamic_cast<const AnimationGroup *>(this));

    return returnValue;
}
#endif

void AnimationGroupBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AnimationGroup *>(this)->clearAnimations();


}


OSG_END_NAMESPACE
