/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowEventProducer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGWindowEventDetails.h"
#include "OSGMouseEventDetails.h"
#include "OSGMouseWheelEventDetails.h"
#include "OSGKeyEventDetails.h"
#include "OSGUpdateEventDetails.h"



#include "OSGWindowEventProducerBase.h"
#include "OSGWindowEventProducer.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::WindowEventProducer
    WindowEventProducer is the base class for all Window specific Event producers. It also contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            WindowEventProducerBase::_sfEnabled
    
*/

/*! \var bool            WindowEventProducerBase::_sfUseCallbackForDraw
    
*/

/*! \var bool            WindowEventProducerBase::_sfUseCallbackForReshape
    
*/

/*! \var Time            WindowEventProducerBase::_sfLastUpdateTime
    
*/

/*! \var bool            WindowEventProducerBase::_sfLockCursor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<WindowEventProducer *>::_type("WindowEventProducerPtr", "WindowPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(WindowEventProducer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           WindowEventProducer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           WindowEventProducer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void WindowEventProducerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Enabled",
        "",
        EnabledFieldId, EnabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleEnabled),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UseCallbackForDraw",
        "",
        UseCallbackForDrawFieldId, UseCallbackForDrawFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleUseCallbackForDraw),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleUseCallbackForDraw));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UseCallbackForReshape",
        "",
        UseCallbackForReshapeFieldId, UseCallbackForReshapeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleUseCallbackForReshape),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleUseCallbackForReshape));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "LastUpdateTime",
        "",
        LastUpdateTimeFieldId, LastUpdateTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleLastUpdateTime),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleLastUpdateTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "LockCursor",
        "",
        LockCursorFieldId, LockCursorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleLockCursor),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleLockCursor));

    oType.addInitialDesc(pDesc);
}


WindowEventProducerBase::TypeObject WindowEventProducerBase::_type(
    WindowEventProducerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    WindowEventProducer::initMethod,
    WindowEventProducer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&WindowEventProducer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"WindowEventProducer\"\n"
    "\tparent=\"Window\"\n"
    "\tlibrary=\"System\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    ">\n"
    "WindowEventProducer is the base class for all Window specific Event producers. It also contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.\n"
    "\t<Field\n"
    "\t\tname=\"Enabled\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UseCallbackForDraw\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UseCallbackForReshape\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LastUpdateTime\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"data\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"-1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LockCursor\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowOpened\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when this window has opened.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowClosing\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when this window has received a close command, but has not yet closed.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowClosed\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when this window has closed.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowIconified\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when this window has closed.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowDeiconified\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when this window has closed.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowActivated\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when this window has closed.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowDeactivated\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when this window has closed.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowEntered\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the cursor has entered this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowExited\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the cursor has exited this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseClicked\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when there is a mouse button click in this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseEntered\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the cursor has entered this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseExited\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the cursor has exited this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MousePressed\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when there is a mouse button press in this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseReleased\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when there is a mouse button release in this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseMoved\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the mouse has moved in this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseDragged\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the mouse has moved, and one or more of the mouse buttons are down in this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseWheelMoved\"\n"
    "\t\tdetailsType=\"MouseWheelEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the mouse wheel has moved in this window.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyPressed\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the a key has been pressed when this window has focus.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyReleased\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the a key has been released when this window has focus.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyTyped\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired when the a key has been typed when this window has focus.\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"Update\"\n"
    "\t\tdetailsType=\"UpdateEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\tThis Event is fired by the main loop of this window whenever it is idle.\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "WindowEventProducer is the base class for all Window specific Event producers. It also contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.\n"
    );

//! WindowEventProducer Produced Events

EventDescription *WindowEventProducerBase::_eventDesc[] =
{
    new EventDescription("WindowOpened", 
                          "This Event is fired when this window has opened.",
                          WindowOpenedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowOpenedSignal)),

    new EventDescription("WindowClosing", 
                          "This Event is fired when this window has received a close command, but has not yet closed.",
                          WindowClosingEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowClosingSignal)),

    new EventDescription("WindowClosed", 
                          "This Event is fired when this window has closed.",
                          WindowClosedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowClosedSignal)),

    new EventDescription("WindowIconified", 
                          "This Event is fired when this window has closed.",
                          WindowIconifiedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowIconifiedSignal)),

    new EventDescription("WindowDeiconified", 
                          "This Event is fired when this window has closed.",
                          WindowDeiconifiedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowDeiconifiedSignal)),

    new EventDescription("WindowActivated", 
                          "This Event is fired when this window has closed.",
                          WindowActivatedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowActivatedSignal)),

    new EventDescription("WindowDeactivated", 
                          "This Event is fired when this window has closed.",
                          WindowDeactivatedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowDeactivatedSignal)),

    new EventDescription("WindowEntered", 
                          "This Event is fired when the cursor has entered this window.",
                          WindowEnteredEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowEnteredSignal)),

    new EventDescription("WindowExited", 
                          "This Event is fired when the cursor has exited this window.",
                          WindowExitedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleWindowExitedSignal)),

    new EventDescription("MouseClicked", 
                          "This Event is fired when there is a mouse button click in this window.",
                          MouseClickedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMouseClickedSignal)),

    new EventDescription("MouseEntered", 
                          "This Event is fired when the cursor has entered this window.",
                          MouseEnteredEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMouseEnteredSignal)),

    new EventDescription("MouseExited", 
                          "This Event is fired when the cursor has exited this window.",
                          MouseExitedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMouseExitedSignal)),

    new EventDescription("MousePressed", 
                          "This Event is fired when there is a mouse button press in this window.",
                          MousePressedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMousePressedSignal)),

    new EventDescription("MouseReleased", 
                          "This Event is fired when there is a mouse button release in this window.",
                          MouseReleasedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMouseReleasedSignal)),

    new EventDescription("MouseMoved", 
                          "This Event is fired when the mouse has moved in this window.",
                          MouseMovedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMouseMovedSignal)),

    new EventDescription("MouseDragged", 
                          "This Event is fired when the mouse has moved, and one or more of the mouse buttons are down in this window.",
                          MouseDraggedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMouseDraggedSignal)),

    new EventDescription("MouseWheelMoved", 
                          "This Event is fired when the mouse wheel has moved in this window.",
                          MouseWheelMovedEventId, 
                          FieldTraits<MouseWheelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleMouseWheelMovedSignal)),

    new EventDescription("KeyPressed", 
                          "This Event is fired when the a key has been pressed when this window has focus.",
                          KeyPressedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleKeyPressedSignal)),

    new EventDescription("KeyReleased", 
                          "This Event is fired when the a key has been released when this window has focus.",
                          KeyReleasedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleKeyReleasedSignal)),

    new EventDescription("KeyTyped", 
                          "This Event is fired when the a key has been typed when this window has focus.",
                          KeyTypedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleKeyTypedSignal)),

    new EventDescription("Update", 
                          "This Event is fired by the main loop of this window whenever it is idle.",
                          UpdateEventId, 
                          FieldTraits<UpdateEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&WindowEventProducerBase::getHandleUpdateSignal))

};

EventProducerType WindowEventProducerBase::_producerType(
    "WindowEventProducerProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowEventProducerBase::getType(void)
{
    return _type;
}

const FieldContainerType &WindowEventProducerBase::getType(void) const
{
    return _type;
}

const EventProducerType &WindowEventProducerBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 WindowEventProducerBase::getContainerSize(void) const
{
    return sizeof(WindowEventProducer);
}

/*------------------------- decorator get ------------------------------*/


SFBool *WindowEventProducerBase::editSFEnabled(void)
{
    editSField(EnabledFieldMask);

    return &_sfEnabled;
}

const SFBool *WindowEventProducerBase::getSFEnabled(void) const
{
    return &_sfEnabled;
}


SFBool *WindowEventProducerBase::editSFUseCallbackForDraw(void)
{
    editSField(UseCallbackForDrawFieldMask);

    return &_sfUseCallbackForDraw;
}

const SFBool *WindowEventProducerBase::getSFUseCallbackForDraw(void) const
{
    return &_sfUseCallbackForDraw;
}


SFBool *WindowEventProducerBase::editSFUseCallbackForReshape(void)
{
    editSField(UseCallbackForReshapeFieldMask);

    return &_sfUseCallbackForReshape;
}

const SFBool *WindowEventProducerBase::getSFUseCallbackForReshape(void) const
{
    return &_sfUseCallbackForReshape;
}


SFTime *WindowEventProducerBase::editSFLastUpdateTime(void)
{
    editSField(LastUpdateTimeFieldMask);

    return &_sfLastUpdateTime;
}

const SFTime *WindowEventProducerBase::getSFLastUpdateTime(void) const
{
    return &_sfLastUpdateTime;
}


SFBool *WindowEventProducerBase::editSFLockCursor(void)
{
    editSField(LockCursorFieldMask);

    return &_sfLockCursor;
}

const SFBool *WindowEventProducerBase::getSFLockCursor(void) const
{
    return &_sfLockCursor;
}






/*------------------------------ access -----------------------------------*/

UInt32 WindowEventProducerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForDraw.getBinSize();
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForReshape.getBinSize();
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        returnValue += _sfLastUpdateTime.getBinSize();
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        returnValue += _sfLockCursor.getBinSize();
    }

    return returnValue;
}

void WindowEventProducerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        _sfUseCallbackForDraw.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        _sfUseCallbackForReshape.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        _sfLastUpdateTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        _sfLockCursor.copyToBin(pMem);
    }
}

void WindowEventProducerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        _sfUseCallbackForDraw.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        _sfUseCallbackForReshape.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        _sfLastUpdateTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        _sfLockCursor.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void WindowEventProducerBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        OSG_ASSERT(dynamic_cast<WindowOpenedEventDetailsType* const>(e));

        _WindowOpenedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowOpenedEvent(dynamic_cast<WindowOpenedEventDetailsType* const>(e), WindowOpenedEventId);
        break;
    case WindowClosingEventId:
        OSG_ASSERT(dynamic_cast<WindowClosingEventDetailsType* const>(e));

        _WindowClosingEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowClosingEvent(dynamic_cast<WindowClosingEventDetailsType* const>(e), WindowClosingEventId);
        break;
    case WindowClosedEventId:
        OSG_ASSERT(dynamic_cast<WindowClosedEventDetailsType* const>(e));

        _WindowClosedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowClosedEvent(dynamic_cast<WindowClosedEventDetailsType* const>(e), WindowClosedEventId);
        break;
    case WindowIconifiedEventId:
        OSG_ASSERT(dynamic_cast<WindowIconifiedEventDetailsType* const>(e));

        _WindowIconifiedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowIconifiedEvent(dynamic_cast<WindowIconifiedEventDetailsType* const>(e), WindowIconifiedEventId);
        break;
    case WindowDeiconifiedEventId:
        OSG_ASSERT(dynamic_cast<WindowDeiconifiedEventDetailsType* const>(e));

        _WindowDeiconifiedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowDeiconifiedEvent(dynamic_cast<WindowDeiconifiedEventDetailsType* const>(e), WindowDeiconifiedEventId);
        break;
    case WindowActivatedEventId:
        OSG_ASSERT(dynamic_cast<WindowActivatedEventDetailsType* const>(e));

        _WindowActivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowActivatedEvent(dynamic_cast<WindowActivatedEventDetailsType* const>(e), WindowActivatedEventId);
        break;
    case WindowDeactivatedEventId:
        OSG_ASSERT(dynamic_cast<WindowDeactivatedEventDetailsType* const>(e));

        _WindowDeactivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowDeactivatedEvent(dynamic_cast<WindowDeactivatedEventDetailsType* const>(e), WindowDeactivatedEventId);
        break;
    case WindowEnteredEventId:
        OSG_ASSERT(dynamic_cast<WindowEnteredEventDetailsType* const>(e));

        _WindowEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowEnteredEvent(dynamic_cast<WindowEnteredEventDetailsType* const>(e), WindowEnteredEventId);
        break;
    case WindowExitedEventId:
        OSG_ASSERT(dynamic_cast<WindowExitedEventDetailsType* const>(e));

        _WindowExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowExitedEvent(dynamic_cast<WindowExitedEventDetailsType* const>(e), WindowExitedEventId);
        break;
    case MouseClickedEventId:
        OSG_ASSERT(dynamic_cast<MouseClickedEventDetailsType* const>(e));

        _MouseClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseClickedEvent(dynamic_cast<MouseClickedEventDetailsType* const>(e), MouseClickedEventId);
        break;
    case MouseEnteredEventId:
        OSG_ASSERT(dynamic_cast<MouseEnteredEventDetailsType* const>(e));

        _MouseEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseEnteredEvent(dynamic_cast<MouseEnteredEventDetailsType* const>(e), MouseEnteredEventId);
        break;
    case MouseExitedEventId:
        OSG_ASSERT(dynamic_cast<MouseExitedEventDetailsType* const>(e));

        _MouseExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseExitedEvent(dynamic_cast<MouseExitedEventDetailsType* const>(e), MouseExitedEventId);
        break;
    case MousePressedEventId:
        OSG_ASSERT(dynamic_cast<MousePressedEventDetailsType* const>(e));

        _MousePressedEvent.set_combiner(ConsumableEventCombiner(e));
        _MousePressedEvent(dynamic_cast<MousePressedEventDetailsType* const>(e), MousePressedEventId);
        break;
    case MouseReleasedEventId:
        OSG_ASSERT(dynamic_cast<MouseReleasedEventDetailsType* const>(e));

        _MouseReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseReleasedEvent(dynamic_cast<MouseReleasedEventDetailsType* const>(e), MouseReleasedEventId);
        break;
    case MouseMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseMovedEventDetailsType* const>(e));

        _MouseMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseMovedEvent(dynamic_cast<MouseMovedEventDetailsType* const>(e), MouseMovedEventId);
        break;
    case MouseDraggedEventId:
        OSG_ASSERT(dynamic_cast<MouseDraggedEventDetailsType* const>(e));

        _MouseDraggedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseDraggedEvent(dynamic_cast<MouseDraggedEventDetailsType* const>(e), MouseDraggedEventId);
        break;
    case MouseWheelMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e));

        _MouseWheelMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseWheelMovedEvent(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e), MouseWheelMovedEventId);
        break;
    case KeyPressedEventId:
        OSG_ASSERT(dynamic_cast<KeyPressedEventDetailsType* const>(e));

        _KeyPressedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyPressedEvent(dynamic_cast<KeyPressedEventDetailsType* const>(e), KeyPressedEventId);
        break;
    case KeyReleasedEventId:
        OSG_ASSERT(dynamic_cast<KeyReleasedEventDetailsType* const>(e));

        _KeyReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyReleasedEvent(dynamic_cast<KeyReleasedEventDetailsType* const>(e), KeyReleasedEventId);
        break;
    case KeyTypedEventId:
        OSG_ASSERT(dynamic_cast<KeyTypedEventDetailsType* const>(e));

        _KeyTypedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyTypedEvent(dynamic_cast<KeyTypedEventDetailsType* const>(e), KeyTypedEventId);
        break;
    case UpdateEventId:
        OSG_ASSERT(dynamic_cast<UpdateEventDetailsType* const>(e));

        _UpdateEvent.set_combiner(ConsumableEventCombiner(e));
        _UpdateEvent(dynamic_cast<UpdateEventDetailsType* const>(e), UpdateEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection WindowEventProducerBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.connect(listener, at);
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.connect(listener, at);
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.connect(listener, at);
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.connect(listener, at);
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.connect(listener, at);
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.connect(listener, at);
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.connect(listener, at);
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.connect(listener, at);
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.connect(listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(listener, at);
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(listener, at);
        break;
    case UpdateEventId:
        return _UpdateEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  WindowEventProducerBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.connect(group, listener, at);
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.connect(group, listener, at);
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.connect(group, listener, at);
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.connect(group, listener, at);
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.connect(group, listener, at);
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.connect(group, listener, at);
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.connect(group, listener, at);
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.connect(group, listener, at);
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.connect(group, listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(group, listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(group, listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(group, listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(group, listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(group, listener, at);
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(group, listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(group, listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(group, listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(group, listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(group, listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(group, listener, at);
        break;
    case UpdateEventId:
        return _UpdateEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  WindowEventProducerBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        _WindowOpenedEvent.disconnect(group);
        break;
    case WindowClosingEventId:
        _WindowClosingEvent.disconnect(group);
        break;
    case WindowClosedEventId:
        _WindowClosedEvent.disconnect(group);
        break;
    case WindowIconifiedEventId:
        _WindowIconifiedEvent.disconnect(group);
        break;
    case WindowDeiconifiedEventId:
        _WindowDeiconifiedEvent.disconnect(group);
        break;
    case WindowActivatedEventId:
        _WindowActivatedEvent.disconnect(group);
        break;
    case WindowDeactivatedEventId:
        _WindowDeactivatedEvent.disconnect(group);
        break;
    case WindowEnteredEventId:
        _WindowEnteredEvent.disconnect(group);
        break;
    case WindowExitedEventId:
        _WindowExitedEvent.disconnect(group);
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect(group);
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect(group);
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect(group);
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect(group);
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect(group);
        break;
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect(group);
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect(group);
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect(group);
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect(group);
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect(group);
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect(group);
        break;
    case UpdateEventId:
        _UpdateEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  WindowEventProducerBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        _WindowOpenedEvent.disconnect_all_slots();
        break;
    case WindowClosingEventId:
        _WindowClosingEvent.disconnect_all_slots();
        break;
    case WindowClosedEventId:
        _WindowClosedEvent.disconnect_all_slots();
        break;
    case WindowIconifiedEventId:
        _WindowIconifiedEvent.disconnect_all_slots();
        break;
    case WindowDeiconifiedEventId:
        _WindowDeiconifiedEvent.disconnect_all_slots();
        break;
    case WindowActivatedEventId:
        _WindowActivatedEvent.disconnect_all_slots();
        break;
    case WindowDeactivatedEventId:
        _WindowDeactivatedEvent.disconnect_all_slots();
        break;
    case WindowEnteredEventId:
        _WindowEnteredEvent.disconnect_all_slots();
        break;
    case WindowExitedEventId:
        _WindowExitedEvent.disconnect_all_slots();
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect_all_slots();
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect_all_slots();
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect_all_slots();
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect_all_slots();
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect_all_slots();
        break;
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect_all_slots();
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect_all_slots();
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect_all_slots();
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect_all_slots();
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect_all_slots();
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect_all_slots();
        break;
    case UpdateEventId:
        _UpdateEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  WindowEventProducerBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.empty();
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.empty();
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.empty();
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.empty();
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.empty();
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.empty();
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.empty();
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.empty();
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.empty();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.empty();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.empty();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.empty();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.empty();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.empty();
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.empty();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.empty();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.empty();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.empty();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.empty();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.empty();
        break;
    case UpdateEventId:
        return _UpdateEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  WindowEventProducerBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.num_slots();
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.num_slots();
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.num_slots();
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.num_slots();
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.num_slots();
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.num_slots();
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.num_slots();
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.num_slots();
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.num_slots();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.num_slots();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.num_slots();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.num_slots();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.num_slots();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.num_slots();
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.num_slots();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.num_slots();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.num_slots();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.num_slots();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.num_slots();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.num_slots();
        break;
    case UpdateEventId:
        return _UpdateEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

WindowEventProducerBase::WindowEventProducerBase(void) :
    Inherited(),
    _sfEnabled                (),
    _sfUseCallbackForDraw     (bool(false)),
    _sfUseCallbackForReshape  (bool(false)),
    _sfLastUpdateTime         (Time(-1.0)),
    _sfLockCursor             (bool(false))
{
}

WindowEventProducerBase::WindowEventProducerBase(const WindowEventProducerBase &source) :
    Inherited(source),
    _sfEnabled                (source._sfEnabled                ),
    _sfUseCallbackForDraw     (source._sfUseCallbackForDraw     ),
    _sfUseCallbackForReshape  (source._sfUseCallbackForReshape  ),
    _sfLastUpdateTime         (source._sfLastUpdateTime         ),
    _sfLockCursor             (source._sfLockCursor             )
{
}


/*-------------------------- destructors ----------------------------------*/

WindowEventProducerBase::~WindowEventProducerBase(void)
{
}


GetFieldHandlePtr WindowEventProducerBase::getHandleEnabled         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleEnabled        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             this));


    editSField(EnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleUseCallbackForDraw (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseCallbackForDraw,
             this->getType().getFieldDesc(UseCallbackForDrawFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleUseCallbackForDraw(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseCallbackForDraw,
             this->getType().getFieldDesc(UseCallbackForDrawFieldId),
             this));


    editSField(UseCallbackForDrawFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleUseCallbackForReshape (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseCallbackForReshape,
             this->getType().getFieldDesc(UseCallbackForReshapeFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleUseCallbackForReshape(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseCallbackForReshape,
             this->getType().getFieldDesc(UseCallbackForReshapeFieldId),
             this));


    editSField(UseCallbackForReshapeFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleLastUpdateTime  (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfLastUpdateTime,
             this->getType().getFieldDesc(LastUpdateTimeFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleLastUpdateTime (void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfLastUpdateTime,
             this->getType().getFieldDesc(LastUpdateTimeFieldId),
             this));


    editSField(LastUpdateTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleLockCursor      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLockCursor,
             this->getType().getFieldDesc(LockCursorFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleLockCursor     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLockCursor,
             this->getType().getFieldDesc(LockCursorFieldId),
             this));


    editSField(LockCursorFieldMask);

    return returnValue;
}


GetEventHandlePtr WindowEventProducerBase::getHandleWindowOpenedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowOpenedEventType>(
             const_cast<WindowOpenedEventType *>(&_WindowOpenedEvent),
             _producerType.getEventDescription(WindowOpenedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowClosingSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowClosingEventType>(
             const_cast<WindowClosingEventType *>(&_WindowClosingEvent),
             _producerType.getEventDescription(WindowClosingEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowClosedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowClosedEventType>(
             const_cast<WindowClosedEventType *>(&_WindowClosedEvent),
             _producerType.getEventDescription(WindowClosedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowIconifiedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowIconifiedEventType>(
             const_cast<WindowIconifiedEventType *>(&_WindowIconifiedEvent),
             _producerType.getEventDescription(WindowIconifiedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowDeiconifiedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowDeiconifiedEventType>(
             const_cast<WindowDeiconifiedEventType *>(&_WindowDeiconifiedEvent),
             _producerType.getEventDescription(WindowDeiconifiedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowActivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowActivatedEventType>(
             const_cast<WindowActivatedEventType *>(&_WindowActivatedEvent),
             _producerType.getEventDescription(WindowActivatedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowDeactivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowDeactivatedEventType>(
             const_cast<WindowDeactivatedEventType *>(&_WindowDeactivatedEvent),
             _producerType.getEventDescription(WindowDeactivatedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowEnteredEventType>(
             const_cast<WindowEnteredEventType *>(&_WindowEnteredEvent),
             _producerType.getEventDescription(WindowEnteredEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleWindowExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowExitedEventType>(
             const_cast<WindowExitedEventType *>(&_WindowExitedEvent),
             _producerType.getEventDescription(WindowExitedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMouseClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseClickedEventType>(
             const_cast<MouseClickedEventType *>(&_MouseClickedEvent),
             _producerType.getEventDescription(MouseClickedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMouseEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseEnteredEventType>(
             const_cast<MouseEnteredEventType *>(&_MouseEnteredEvent),
             _producerType.getEventDescription(MouseEnteredEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMouseExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseExitedEventType>(
             const_cast<MouseExitedEventType *>(&_MouseExitedEvent),
             _producerType.getEventDescription(MouseExitedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMousePressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MousePressedEventType>(
             const_cast<MousePressedEventType *>(&_MousePressedEvent),
             _producerType.getEventDescription(MousePressedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMouseReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseReleasedEventType>(
             const_cast<MouseReleasedEventType *>(&_MouseReleasedEvent),
             _producerType.getEventDescription(MouseReleasedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMouseMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseMovedEventType>(
             const_cast<MouseMovedEventType *>(&_MouseMovedEvent),
             _producerType.getEventDescription(MouseMovedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMouseDraggedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseDraggedEventType>(
             const_cast<MouseDraggedEventType *>(&_MouseDraggedEvent),
             _producerType.getEventDescription(MouseDraggedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleMouseWheelMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseWheelMovedEventType>(
             const_cast<MouseWheelMovedEventType *>(&_MouseWheelMovedEvent),
             _producerType.getEventDescription(MouseWheelMovedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleKeyPressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyPressedEventType>(
             const_cast<KeyPressedEventType *>(&_KeyPressedEvent),
             _producerType.getEventDescription(KeyPressedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleKeyReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyReleasedEventType>(
             const_cast<KeyReleasedEventType *>(&_KeyReleasedEvent),
             _producerType.getEventDescription(KeyReleasedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleKeyTypedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyTypedEventType>(
             const_cast<KeyTypedEventType *>(&_KeyTypedEvent),
             _producerType.getEventDescription(KeyTypedEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

GetEventHandlePtr WindowEventProducerBase::getHandleUpdateSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<UpdateEventType>(
             const_cast<UpdateEventType *>(&_UpdateEvent),
             _producerType.getEventDescription(UpdateEventId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void WindowEventProducerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    WindowEventProducer *pThis = static_cast<WindowEventProducer *>(this);

    pThis->execSync(static_cast<WindowEventProducer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void WindowEventProducerBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
