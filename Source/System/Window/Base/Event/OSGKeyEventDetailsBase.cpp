/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class KeyEventDetails!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"





#include "OSGWindow.h"                  // Window Class

#include "OSGKeyEventDetailsBase.h"
#include "OSGKeyEventDetails.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::KeyEventDetails
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          KeyEventDetailsBase::_sfKey
    
*/

/*! \var UInt32          KeyEventDetailsBase::_sfModifiers
    
*/

/*! \var Window *        KeyEventDetailsBase::_sfWindow
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<KeyEventDetails *>::_type("KeyEventDetailsPtr", "InputEventDetailsPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(KeyEventDetails *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           KeyEventDetails *,
                           0);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void KeyEventDetailsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Key",
        "",
        KeyFieldId, KeyFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KeyEventDetails::editHandleKey),
        static_cast<FieldGetMethodSig >(&KeyEventDetails::getHandleKey));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Modifiers",
        "",
        ModifiersFieldId, ModifiersFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KeyEventDetails::editHandleModifiers),
        static_cast<FieldGetMethodSig >(&KeyEventDetails::getHandleModifiers));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecWindowPtr::Description(
        SFUnrecWindowPtr::getClassType(),
        "Window",
        "",
        WindowFieldId, WindowFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KeyEventDetails::editHandleWindow),
        static_cast<FieldGetMethodSig >(&KeyEventDetails::getHandleWindow));

    oType.addInitialDesc(pDesc);
}


KeyEventDetailsBase::TypeObject KeyEventDetailsBase::_type(
    KeyEventDetailsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&KeyEventDetailsBase::createEmptyLocal),
    KeyEventDetails::initMethod,
    KeyEventDetails::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&KeyEventDetails::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"KeyEventDetails\"\n"
    "\tparent=\"InputEventDetails\"\n"
    "    library=\"System\"\n"
    "\tpointerfieldtypes=\"single\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Key\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"KeyEvent::KEY_UNKNOWN\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Modifiers\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"KeyEvent::KEY_MODIFIER_UNKNOWN\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Window\"\n"
    "\t\ttype=\"Window\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &KeyEventDetailsBase::getType(void)
{
    return _type;
}

const FieldContainerType &KeyEventDetailsBase::getType(void) const
{
    return _type;
}

UInt32 KeyEventDetailsBase::getContainerSize(void) const
{
    return sizeof(KeyEventDetails);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *KeyEventDetailsBase::editSFKey(void)
{
    editSField(KeyFieldMask);

    return &_sfKey;
}

const SFUInt32 *KeyEventDetailsBase::getSFKey(void) const
{
    return &_sfKey;
}


SFUInt32 *KeyEventDetailsBase::editSFModifiers(void)
{
    editSField(ModifiersFieldMask);

    return &_sfModifiers;
}

const SFUInt32 *KeyEventDetailsBase::getSFModifiers(void) const
{
    return &_sfModifiers;
}


//! Get the KeyEventDetails::_sfWindow field.
const SFUnrecWindowPtr *KeyEventDetailsBase::getSFWindow(void) const
{
    return &_sfWindow;
}

SFUnrecWindowPtr    *KeyEventDetailsBase::editSFWindow         (void)
{
    editSField(WindowFieldMask);

    return &_sfWindow;
}





/*------------------------------ access -----------------------------------*/

UInt32 KeyEventDetailsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (KeyFieldMask & whichField))
    {
        returnValue += _sfKey.getBinSize();
    }
    if(FieldBits::NoField != (ModifiersFieldMask & whichField))
    {
        returnValue += _sfModifiers.getBinSize();
    }
    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        returnValue += _sfWindow.getBinSize();
    }

    return returnValue;
}

void KeyEventDetailsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (KeyFieldMask & whichField))
    {
        _sfKey.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ModifiersFieldMask & whichField))
    {
        _sfModifiers.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        _sfWindow.copyToBin(pMem);
    }
}

void KeyEventDetailsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (KeyFieldMask & whichField))
    {
        _sfKey.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ModifiersFieldMask & whichField))
    {
        _sfModifiers.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        _sfWindow.copyFromBin(pMem);
    }
}

//! create a new instance of the class
KeyEventDetailsTransitPtr KeyEventDetailsBase::createLocal(BitVector bFlags)
{
    KeyEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<KeyEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
KeyEventDetailsTransitPtr KeyEventDetailsBase::createDependent(BitVector bFlags)
{
    KeyEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<KeyEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
KeyEventDetailsTransitPtr KeyEventDetailsBase::create(void)
{
    KeyEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<KeyEventDetails>(tmpPtr);
    }

    return fc;
}

KeyEventDetails *KeyEventDetailsBase::createEmptyLocal(BitVector bFlags)
{
    KeyEventDetails *returnValue;

    newPtr<KeyEventDetails>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
KeyEventDetails *KeyEventDetailsBase::createEmpty(void)
{
    KeyEventDetails *returnValue;

    newPtr<KeyEventDetails>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr KeyEventDetailsBase::shallowCopyLocal(
    BitVector bFlags) const
{
    KeyEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const KeyEventDetails *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr KeyEventDetailsBase::shallowCopyDependent(
    BitVector bFlags) const
{
    KeyEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const KeyEventDetails *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr KeyEventDetailsBase::shallowCopy(void) const
{
    KeyEventDetails *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const KeyEventDetails *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

KeyEventDetailsBase::KeyEventDetailsBase(void) :
    Inherited(),
    _sfKey                    (UInt32(KeyEventDetails::KEY_UNKNOWN)),
    _sfModifiers              (UInt32(KeyEventDetails::KEY_MODIFIER_UNKNOWN)),
    _sfWindow                 (NULL)
{
}

KeyEventDetailsBase::KeyEventDetailsBase(const KeyEventDetailsBase &source) :
    Inherited(source),
    _sfKey                    (source._sfKey                    ),
    _sfModifiers              (source._sfModifiers              ),
    _sfWindow                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

KeyEventDetailsBase::~KeyEventDetailsBase(void)
{
}

void KeyEventDetailsBase::onCreate(const KeyEventDetails *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        KeyEventDetails *pThis = static_cast<KeyEventDetails *>(this);

        pThis->setWindow(source->getWindow());
    }
}

GetFieldHandlePtr KeyEventDetailsBase::getHandleKey             (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfKey,
             this->getType().getFieldDesc(KeyFieldId),
             const_cast<KeyEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KeyEventDetailsBase::editHandleKey            (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfKey,
             this->getType().getFieldDesc(KeyFieldId),
             this));


    editSField(KeyFieldMask);

    return returnValue;
}

GetFieldHandlePtr KeyEventDetailsBase::getHandleModifiers       (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfModifiers,
             this->getType().getFieldDesc(ModifiersFieldId),
             const_cast<KeyEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KeyEventDetailsBase::editHandleModifiers      (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfModifiers,
             this->getType().getFieldDesc(ModifiersFieldId),
             this));


    editSField(ModifiersFieldMask);

    return returnValue;
}

GetFieldHandlePtr KeyEventDetailsBase::getHandleWindow          (void) const
{
    SFUnrecWindowPtr::GetHandlePtr returnValue(
        new  SFUnrecWindowPtr::GetHandle(
             &_sfWindow,
             this->getType().getFieldDesc(WindowFieldId),
             const_cast<KeyEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KeyEventDetailsBase::editHandleWindow         (void)
{
    SFUnrecWindowPtr::EditHandlePtr returnValue(
        new  SFUnrecWindowPtr::EditHandle(
             &_sfWindow,
             this->getType().getFieldDesc(WindowFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&KeyEventDetails::setWindow,
                    static_cast<KeyEventDetails *>(this), _1));

    editSField(WindowFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void KeyEventDetailsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    KeyEventDetails *pThis = static_cast<KeyEventDetails *>(this);

    pThis->execSync(static_cast<KeyEventDetails *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *KeyEventDetailsBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    KeyEventDetails *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const KeyEventDetails *>(pRefAspect),
                  dynamic_cast<const KeyEventDetails *>(this));

    return returnValue;
}
#endif

void KeyEventDetailsBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<KeyEventDetails *>(this)->setWindow(NULL);


}


OSG_END_NAMESPACE
