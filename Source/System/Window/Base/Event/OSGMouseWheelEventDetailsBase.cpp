/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MouseWheelEventDetails!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"





#include "OSGViewport.h"                // Viewport Class

#include "OSGMouseWheelEventDetailsBase.h"
#include "OSGMouseWheelEventDetails.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MouseWheelEventDetails
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt8           MouseWheelEventDetailsBase::_sfScrollType
    
*/

/*! \var UInt8           MouseWheelEventDetailsBase::_sfScrollOrientation
    
*/

/*! \var Int32           MouseWheelEventDetailsBase::_sfWheelRotation
    
*/

/*! \var Pnt2f           MouseWheelEventDetailsBase::_sfLocation
    
*/

/*! \var Viewport *      MouseWheelEventDetailsBase::_sfViewport
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MouseWheelEventDetails *>::_type("MouseWheelEventDetailsPtr", "InputEventDetailsPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MouseWheelEventDetails *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MouseWheelEventDetails *,
                           0);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MouseWheelEventDetailsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "ScrollType",
        "",
        ScrollTypeFieldId, ScrollTypeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MouseWheelEventDetails::editHandleScrollType),
        static_cast<FieldGetMethodSig >(&MouseWheelEventDetails::getHandleScrollType));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "ScrollOrientation",
        "",
        ScrollOrientationFieldId, ScrollOrientationFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MouseWheelEventDetails::editHandleScrollOrientation),
        static_cast<FieldGetMethodSig >(&MouseWheelEventDetails::getHandleScrollOrientation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "WheelRotation",
        "",
        WheelRotationFieldId, WheelRotationFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MouseWheelEventDetails::editHandleWheelRotation),
        static_cast<FieldGetMethodSig >(&MouseWheelEventDetails::getHandleWheelRotation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Location",
        "",
        LocationFieldId, LocationFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MouseWheelEventDetails::editHandleLocation),
        static_cast<FieldGetMethodSig >(&MouseWheelEventDetails::getHandleLocation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecViewportPtr::Description(
        SFUnrecViewportPtr::getClassType(),
        "Viewport",
        "",
        ViewportFieldId, ViewportFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MouseWheelEventDetails::editHandleViewport),
        static_cast<FieldGetMethodSig >(&MouseWheelEventDetails::getHandleViewport));

    oType.addInitialDesc(pDesc);
}


MouseWheelEventDetailsBase::TypeObject MouseWheelEventDetailsBase::_type(
    MouseWheelEventDetailsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MouseWheelEventDetailsBase::createEmptyLocal),
    MouseWheelEventDetails::initMethod,
    MouseWheelEventDetails::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MouseWheelEventDetails::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MouseWheelEventDetails\"\n"
    "\tparent=\"InputEventDetails\"\n"
    "    library=\"System\"\n"
    "\tpointerfieldtypes=\"single\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"ScrollType\"\n"
    "\t\ttype=\"UInt8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"MouseWheelEvent::UNIT_SCROLL\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ScrollOrientation\"\n"
    "\t\ttype=\"UInt8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"MouseWheelEvent::SCROLL_ORIENTATION_VERTICAL\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"WheelRotation\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Location\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Viewport\"\n"
    "\t\ttype=\"Viewport\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MouseWheelEventDetailsBase::getType(void)
{
    return _type;
}

const FieldContainerType &MouseWheelEventDetailsBase::getType(void) const
{
    return _type;
}

UInt32 MouseWheelEventDetailsBase::getContainerSize(void) const
{
    return sizeof(MouseWheelEventDetails);
}

/*------------------------- decorator get ------------------------------*/


SFUInt8 *MouseWheelEventDetailsBase::editSFScrollType(void)
{
    editSField(ScrollTypeFieldMask);

    return &_sfScrollType;
}

const SFUInt8 *MouseWheelEventDetailsBase::getSFScrollType(void) const
{
    return &_sfScrollType;
}


SFUInt8 *MouseWheelEventDetailsBase::editSFScrollOrientation(void)
{
    editSField(ScrollOrientationFieldMask);

    return &_sfScrollOrientation;
}

const SFUInt8 *MouseWheelEventDetailsBase::getSFScrollOrientation(void) const
{
    return &_sfScrollOrientation;
}


SFInt32 *MouseWheelEventDetailsBase::editSFWheelRotation(void)
{
    editSField(WheelRotationFieldMask);

    return &_sfWheelRotation;
}

const SFInt32 *MouseWheelEventDetailsBase::getSFWheelRotation(void) const
{
    return &_sfWheelRotation;
}


SFPnt2f *MouseWheelEventDetailsBase::editSFLocation(void)
{
    editSField(LocationFieldMask);

    return &_sfLocation;
}

const SFPnt2f *MouseWheelEventDetailsBase::getSFLocation(void) const
{
    return &_sfLocation;
}


//! Get the MouseWheelEventDetails::_sfViewport field.
const SFUnrecViewportPtr *MouseWheelEventDetailsBase::getSFViewport(void) const
{
    return &_sfViewport;
}

SFUnrecViewportPtr  *MouseWheelEventDetailsBase::editSFViewport       (void)
{
    editSField(ViewportFieldMask);

    return &_sfViewport;
}





/*------------------------------ access -----------------------------------*/

UInt32 MouseWheelEventDetailsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
    {
        returnValue += _sfScrollType.getBinSize();
    }
    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
    {
        returnValue += _sfScrollOrientation.getBinSize();
    }
    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
    {
        returnValue += _sfWheelRotation.getBinSize();
    }
    if(FieldBits::NoField != (LocationFieldMask & whichField))
    {
        returnValue += _sfLocation.getBinSize();
    }
    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        returnValue += _sfViewport.getBinSize();
    }

    return returnValue;
}

void MouseWheelEventDetailsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
    {
        _sfScrollType.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
    {
        _sfScrollOrientation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
    {
        _sfWheelRotation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LocationFieldMask & whichField))
    {
        _sfLocation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        _sfViewport.copyToBin(pMem);
    }
}

void MouseWheelEventDetailsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
    {
        _sfScrollType.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
    {
        _sfScrollOrientation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
    {
        _sfWheelRotation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LocationFieldMask & whichField))
    {
        _sfLocation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        _sfViewport.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MouseWheelEventDetailsTransitPtr MouseWheelEventDetailsBase::createLocal(BitVector bFlags)
{
    MouseWheelEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MouseWheelEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MouseWheelEventDetailsTransitPtr MouseWheelEventDetailsBase::createDependent(BitVector bFlags)
{
    MouseWheelEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MouseWheelEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MouseWheelEventDetailsTransitPtr MouseWheelEventDetailsBase::create(void)
{
    MouseWheelEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MouseWheelEventDetails>(tmpPtr);
    }

    return fc;
}

MouseWheelEventDetails *MouseWheelEventDetailsBase::createEmptyLocal(BitVector bFlags)
{
    MouseWheelEventDetails *returnValue;

    newPtr<MouseWheelEventDetails>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MouseWheelEventDetails *MouseWheelEventDetailsBase::createEmpty(void)
{
    MouseWheelEventDetails *returnValue;

    newPtr<MouseWheelEventDetails>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MouseWheelEventDetailsBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MouseWheelEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MouseWheelEventDetails *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MouseWheelEventDetailsBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MouseWheelEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MouseWheelEventDetails *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MouseWheelEventDetailsBase::shallowCopy(void) const
{
    MouseWheelEventDetails *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MouseWheelEventDetails *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

MouseWheelEventDetailsBase::MouseWheelEventDetailsBase(void) :
    Inherited(),
    _sfScrollType             (UInt8(MouseWheelEventDetails::UNIT_SCROLL)),
    _sfScrollOrientation      (UInt8(MouseWheelEventDetails::SCROLL_ORIENTATION_VERTICAL)),
    _sfWheelRotation          (Int32(0)),
    _sfLocation               (Pnt2f(0.0f,0.0f)),
    _sfViewport               (NULL)
{
}

MouseWheelEventDetailsBase::MouseWheelEventDetailsBase(const MouseWheelEventDetailsBase &source) :
    Inherited(source),
    _sfScrollType             (source._sfScrollType             ),
    _sfScrollOrientation      (source._sfScrollOrientation      ),
    _sfWheelRotation          (source._sfWheelRotation          ),
    _sfLocation               (source._sfLocation               ),
    _sfViewport               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

MouseWheelEventDetailsBase::~MouseWheelEventDetailsBase(void)
{
}

void MouseWheelEventDetailsBase::onCreate(const MouseWheelEventDetails *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MouseWheelEventDetails *pThis = static_cast<MouseWheelEventDetails *>(this);

        pThis->setViewport(source->getViewport());
    }
}

GetFieldHandlePtr MouseWheelEventDetailsBase::getHandleScrollType      (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfScrollType,
             this->getType().getFieldDesc(ScrollTypeFieldId),
             const_cast<MouseWheelEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MouseWheelEventDetailsBase::editHandleScrollType     (void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfScrollType,
             this->getType().getFieldDesc(ScrollTypeFieldId),
             this));


    editSField(ScrollTypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr MouseWheelEventDetailsBase::getHandleScrollOrientation (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfScrollOrientation,
             this->getType().getFieldDesc(ScrollOrientationFieldId),
             const_cast<MouseWheelEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MouseWheelEventDetailsBase::editHandleScrollOrientation(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfScrollOrientation,
             this->getType().getFieldDesc(ScrollOrientationFieldId),
             this));


    editSField(ScrollOrientationFieldMask);

    return returnValue;
}

GetFieldHandlePtr MouseWheelEventDetailsBase::getHandleWheelRotation   (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWheelRotation,
             this->getType().getFieldDesc(WheelRotationFieldId),
             const_cast<MouseWheelEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MouseWheelEventDetailsBase::editHandleWheelRotation  (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWheelRotation,
             this->getType().getFieldDesc(WheelRotationFieldId),
             this));


    editSField(WheelRotationFieldMask);

    return returnValue;
}

GetFieldHandlePtr MouseWheelEventDetailsBase::getHandleLocation        (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfLocation,
             this->getType().getFieldDesc(LocationFieldId),
             const_cast<MouseWheelEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MouseWheelEventDetailsBase::editHandleLocation       (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfLocation,
             this->getType().getFieldDesc(LocationFieldId),
             this));


    editSField(LocationFieldMask);

    return returnValue;
}

GetFieldHandlePtr MouseWheelEventDetailsBase::getHandleViewport        (void) const
{
    SFUnrecViewportPtr::GetHandlePtr returnValue(
        new  SFUnrecViewportPtr::GetHandle(
             &_sfViewport,
             this->getType().getFieldDesc(ViewportFieldId),
             const_cast<MouseWheelEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MouseWheelEventDetailsBase::editHandleViewport       (void)
{
    SFUnrecViewportPtr::EditHandlePtr returnValue(
        new  SFUnrecViewportPtr::EditHandle(
             &_sfViewport,
             this->getType().getFieldDesc(ViewportFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MouseWheelEventDetails::setViewport,
                    static_cast<MouseWheelEventDetails *>(this), _1));

    editSField(ViewportFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void MouseWheelEventDetailsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MouseWheelEventDetails *pThis = static_cast<MouseWheelEventDetails *>(this);

    pThis->execSync(static_cast<MouseWheelEventDetails *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MouseWheelEventDetailsBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MouseWheelEventDetails *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MouseWheelEventDetails *>(pRefAspect),
                  dynamic_cast<const MouseWheelEventDetails *>(this));

    return returnValue;
}
#endif

void MouseWheelEventDetailsBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MouseWheelEventDetails *>(this)->setViewport(NULL);


}


OSG_END_NAMESPACE
