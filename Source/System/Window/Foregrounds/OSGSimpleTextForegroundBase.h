/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleTextForeground
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSIMPLETEXTFOREGROUNDBASE_H_
#define _OSGSIMPLETEXTFOREGROUNDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGUtilDef.h"

//#include "OSGBaseTypes.h"

#include "OSGForeground.h" // Parent

#include "OSGBaseFields.h"              // Lines type
#include "OSGSysFields.h"               // Size type
#include "OSGVecFields.h"               // ShadowOffset type

#include "OSGSimpleTextForegroundFields.h"

OSG_BEGIN_NAMESPACE

class SimpleTextForeground;

//! \brief SimpleTextForeground Base Class.

class OSG_UTIL_DLLMAPPING SimpleTextForegroundBase : public Foreground
{
  public:

    typedef Foreground Inherited;
    typedef Foreground ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SimpleTextForeground);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        LinesFieldId = Inherited::NextFieldId,
        SizeFieldId = LinesFieldId + 1,
        ColorFieldId = SizeFieldId + 1,
        ShadowColorFieldId = ColorFieldId + 1,
        BgColorFieldId = ShadowColorFieldId + 1,
        FamilyFieldId = BgColorFieldId + 1,
        ShadowOffsetFieldId = FamilyFieldId + 1,
        HorizontalAlignFieldId = ShadowOffsetFieldId + 1,
        VerticalAlignFieldId = HorizontalAlignFieldId + 1,
        BorderColorFieldId = VerticalAlignFieldId + 1,
        BorderOffsetFieldId = BorderColorFieldId + 1,
        TextMarginFieldId = BorderOffsetFieldId + 1,
        TileFieldId = TextMarginFieldId + 1,
        NextFieldId = TileFieldId + 1
    };

    static const OSG::BitVector LinesFieldMask =
        (TypeTraits<BitVector>::One << LinesFieldId);
    static const OSG::BitVector SizeFieldMask =
        (TypeTraits<BitVector>::One << SizeFieldId);
    static const OSG::BitVector ColorFieldMask =
        (TypeTraits<BitVector>::One << ColorFieldId);
    static const OSG::BitVector ShadowColorFieldMask =
        (TypeTraits<BitVector>::One << ShadowColorFieldId);
    static const OSG::BitVector BgColorFieldMask =
        (TypeTraits<BitVector>::One << BgColorFieldId);
    static const OSG::BitVector FamilyFieldMask =
        (TypeTraits<BitVector>::One << FamilyFieldId);
    static const OSG::BitVector ShadowOffsetFieldMask =
        (TypeTraits<BitVector>::One << ShadowOffsetFieldId);
    static const OSG::BitVector HorizontalAlignFieldMask =
        (TypeTraits<BitVector>::One << HorizontalAlignFieldId);
    static const OSG::BitVector VerticalAlignFieldMask =
        (TypeTraits<BitVector>::One << VerticalAlignFieldId);
    static const OSG::BitVector BorderColorFieldMask =
        (TypeTraits<BitVector>::One << BorderColorFieldId);
    static const OSG::BitVector BorderOffsetFieldMask =
        (TypeTraits<BitVector>::One << BorderOffsetFieldId);
    static const OSG::BitVector TextMarginFieldMask =
        (TypeTraits<BitVector>::One << TextMarginFieldId);
    static const OSG::BitVector TileFieldMask =
        (TypeTraits<BitVector>::One << TileFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFString          MFLinesType;
    typedef SFReal32          SFSizeType;
    typedef SFColor4f         SFColorType;
    typedef SFColor4f         SFShadowColorType;
    typedef SFColor4f         SFBgColorType;
    typedef SFString          SFFamilyType;
    typedef SFVec2f           SFShadowOffsetType;
    typedef SFUInt8           SFHorizontalAlignType;
    typedef SFUInt8           SFVerticalAlignType;
    typedef SFColor4f         SFBorderColorType;
    typedef SFVec2f           SFBorderOffsetType;
    typedef SFVec2f           SFTextMarginType;
    typedef SFBool            SFTileType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFString            *editMFLines          (void);
            const MFString            *getMFLines           (void) const;

                  SFReal32            *editSFSize           (void);
            const SFReal32            *getSFSize            (void) const;

                  SFColor4f           *editSFColor          (void);
            const SFColor4f           *getSFColor           (void) const;

                  SFColor4f           *editSFShadowColor    (void);
            const SFColor4f           *getSFShadowColor     (void) const;

                  SFColor4f           *editSFBgColor        (void);
            const SFColor4f           *getSFBgColor         (void) const;

                  SFString            *editSFFamily         (void);
            const SFString            *getSFFamily          (void) const;

                  SFVec2f             *editSFShadowOffset   (void);
            const SFVec2f             *getSFShadowOffset    (void) const;

                  SFUInt8             *editSFHorizontalAlign(void);
            const SFUInt8             *getSFHorizontalAlign (void) const;

                  SFUInt8             *editSFVerticalAlign  (void);
            const SFUInt8             *getSFVerticalAlign   (void) const;

                  SFColor4f           *editSFBorderColor    (void);
            const SFColor4f           *getSFBorderColor     (void) const;

                  SFVec2f             *editSFBorderOffset   (void);
            const SFVec2f             *getSFBorderOffset    (void) const;

                  SFVec2f             *editSFTextMargin     (void);
            const SFVec2f             *getSFTextMargin      (void) const;

                  SFBool              *editSFTile           (void);
            const SFBool              *getSFTile            (void) const;


                  std::string         &editLines          (const UInt32 index);
            const std::string         &getLines           (const UInt32 index) const;

                  Real32              &editSize           (void);
                  Real32               getSize            (void) const;

                  Color4f             &editColor          (void);
            const Color4f             &getColor           (void) const;

                  Color4f             &editShadowColor    (void);
            const Color4f             &getShadowColor     (void) const;

                  Color4f             &editBgColor        (void);
            const Color4f             &getBgColor         (void) const;

                  std::string         &editFamily         (void);
            const std::string         &getFamily          (void) const;

                  Vec2f               &editShadowOffset   (void);
            const Vec2f               &getShadowOffset    (void) const;

                  UInt8               &editHorizontalAlign(void);
                  UInt8                getHorizontalAlign (void) const;

                  UInt8               &editVerticalAlign  (void);
                  UInt8                getVerticalAlign   (void) const;

                  Color4f             &editBorderColor    (void);
            const Color4f             &getBorderColor     (void) const;

                  Vec2f               &editBorderOffset   (void);
            const Vec2f               &getBorderOffset    (void) const;

                  Vec2f               &editTextMargin     (void);
            const Vec2f               &getTextMargin      (void) const;

                  bool                &editTile           (void);
                  bool                 getTile            (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setSize           (const Real32 value);
            void setColor          (const Color4f &value);
            void setShadowColor    (const Color4f &value);
            void setBgColor        (const Color4f &value);
            void setFamily         (const std::string &value);
            void setShadowOffset   (const Vec2f &value);
            void setHorizontalAlign(const UInt8 value);
            void setVerticalAlign  (const UInt8 value);
            void setBorderColor    (const Color4f &value);
            void setBorderOffset   (const Vec2f &value);
            void setTextMargin     (const Vec2f &value);
            void setTile           (const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SimpleTextForegroundTransitPtr  create          (void);
    static  SimpleTextForeground           *createEmpty     (void);

    static  SimpleTextForegroundTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SimpleTextForeground            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SimpleTextForegroundTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFString          _mfLines;
    SFReal32          _sfSize;
    SFColor4f         _sfColor;
    SFColor4f         _sfShadowColor;
    SFColor4f         _sfBgColor;
    SFString          _sfFamily;
    SFVec2f           _sfShadowOffset;
    SFUInt8           _sfHorizontalAlign;
    SFUInt8           _sfVerticalAlign;
    SFColor4f         _sfBorderColor;
    SFVec2f           _sfBorderOffset;
    SFVec2f           _sfTextMargin;
    SFBool            _sfTile;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SimpleTextForegroundBase(void);
    SimpleTextForegroundBase(const SimpleTextForegroundBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SimpleTextForegroundBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleLines           (void) const;
    EditFieldHandlePtr editHandleLines          (void);
    GetFieldHandlePtr  getHandleSize            (void) const;
    EditFieldHandlePtr editHandleSize           (void);
    GetFieldHandlePtr  getHandleColor           (void) const;
    EditFieldHandlePtr editHandleColor          (void);
    GetFieldHandlePtr  getHandleShadowColor     (void) const;
    EditFieldHandlePtr editHandleShadowColor    (void);
    GetFieldHandlePtr  getHandleBgColor         (void) const;
    EditFieldHandlePtr editHandleBgColor        (void);
    GetFieldHandlePtr  getHandleFamily          (void) const;
    EditFieldHandlePtr editHandleFamily         (void);
    GetFieldHandlePtr  getHandleShadowOffset    (void) const;
    EditFieldHandlePtr editHandleShadowOffset   (void);
    GetFieldHandlePtr  getHandleHorizontalAlign (void) const;
    EditFieldHandlePtr editHandleHorizontalAlign(void);
    GetFieldHandlePtr  getHandleVerticalAlign   (void) const;
    EditFieldHandlePtr editHandleVerticalAlign  (void);
    GetFieldHandlePtr  getHandleBorderColor     (void) const;
    EditFieldHandlePtr editHandleBorderColor    (void);
    GetFieldHandlePtr  getHandleBorderOffset    (void) const;
    EditFieldHandlePtr editHandleBorderOffset   (void);
    GetFieldHandlePtr  getHandleTextMargin      (void) const;
    EditFieldHandlePtr editHandleTextMargin     (void);
    GetFieldHandlePtr  getHandleTile            (void) const;
    EditFieldHandlePtr editHandleTile           (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SimpleTextForegroundBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SimpleTextForegroundBase &source);
};

typedef SimpleTextForegroundBase *SimpleTextForegroundBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSIMPLETEXTFOREGROUNDBASE_H_ */
