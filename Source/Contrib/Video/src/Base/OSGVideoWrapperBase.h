/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VideoWrapper
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGVIDEOWRAPPERBASE_H_
#define _OSGVIDEOWRAPPERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribVideoDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent


#include "OSGVideoWrapperFields.h"

//Event Producer Headers
#include "OSGActivity.h"
#include "OSGConsumableEventCombiner.h"

#include "OSGVideoEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class VideoWrapper;

//! \brief VideoWrapper Base Class.

class OSG_CONTRIBVIDEO_DLLMAPPING VideoWrapperBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(VideoWrapper);
    
    
    typedef VideoEventDetails  StartedEventDetailsType;
    typedef VideoEventDetails  StoppedEventDetailsType;
    typedef VideoEventDetails  PausedEventDetailsType;
    typedef VideoEventDetails  UnpausedEventDetailsType;
    typedef VideoEventDetails  EndedEventDetailsType;
    typedef VideoEventDetails  CycledEventDetailsType;
    typedef VideoEventDetails  OpenedEventDetailsType;
    typedef VideoEventDetails  ClosedEventDetailsType;
    typedef VideoEventDetails  SeekedEventDetailsType;

    typedef boost::signals2::signal<void (EventDetails* const            , UInt32)> BaseEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> StartedEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> StoppedEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> PausedEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> UnpausedEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> EndedEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> CycledEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> OpenedEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> ClosedEventType;
    typedef boost::signals2::signal<void (VideoEventDetails* const, UInt32), ConsumableEventCombiner> SeekedEventType;

    /*==========================  PUBLIC  =================================*/

  public:


    enum
    {
        StartedEventId = 1,
        StoppedEventId = StartedEventId + 1,
        PausedEventId = StoppedEventId + 1,
        UnpausedEventId = PausedEventId + 1,
        EndedEventId = UnpausedEventId + 1,
        CycledEventId = EndedEventId + 1,
        OpenedEventId = CycledEventId + 1,
        ClosedEventId = OpenedEventId + 1,
        SeekedEventId = ClosedEventId + 1,
        NextProducedEventId = SeekedEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    virtual boost::signals2::connection attachActivity(UInt32 eventId,
                                                       Activity* TheActivity);
                                                         
    virtual UInt32                   getNumProducedEvents       (void                                ) const;
    virtual const EventDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    virtual const EventDescription *getProducedEventDescription(UInt32 ProducedEventId              ) const;
    virtual UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;
    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //Started
    boost::signals2::connection connectStarted        (const StartedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectStarted        (const StartedEventType::group_type &group,
                                                       const StartedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectStarted                (const StartedEventType::group_type &group);
    void   disconnectAllSlotsStarted        (void);
    bool   isEmptyStarted                   (void) const;
    UInt32 numSlotsStarted                  (void) const;
    
    //Stopped
    boost::signals2::connection connectStopped        (const StoppedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectStopped        (const StoppedEventType::group_type &group,
                                                       const StoppedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectStopped                (const StoppedEventType::group_type &group);
    void   disconnectAllSlotsStopped        (void);
    bool   isEmptyStopped                   (void) const;
    UInt32 numSlotsStopped                  (void) const;
    
    //Paused
    boost::signals2::connection connectPaused         (const PausedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectPaused         (const PausedEventType::group_type &group,
                                                       const PausedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectPaused                 (const PausedEventType::group_type &group);
    void   disconnectAllSlotsPaused         (void);
    bool   isEmptyPaused                    (void) const;
    UInt32 numSlotsPaused                   (void) const;
    
    //Unpaused
    boost::signals2::connection connectUnpaused       (const UnpausedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectUnpaused       (const UnpausedEventType::group_type &group,
                                                       const UnpausedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectUnpaused               (const UnpausedEventType::group_type &group);
    void   disconnectAllSlotsUnpaused       (void);
    bool   isEmptyUnpaused                  (void) const;
    UInt32 numSlotsUnpaused                 (void) const;
    
    //Ended
    boost::signals2::connection connectEnded          (const EndedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectEnded          (const EndedEventType::group_type &group,
                                                       const EndedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectEnded                  (const EndedEventType::group_type &group);
    void   disconnectAllSlotsEnded          (void);
    bool   isEmptyEnded                     (void) const;
    UInt32 numSlotsEnded                    (void) const;
    
    //Cycled
    boost::signals2::connection connectCycled         (const CycledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectCycled         (const CycledEventType::group_type &group,
                                                       const CycledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectCycled                 (const CycledEventType::group_type &group);
    void   disconnectAllSlotsCycled         (void);
    bool   isEmptyCycled                    (void) const;
    UInt32 numSlotsCycled                   (void) const;
    
    //Opened
    boost::signals2::connection connectOpened         (const OpenedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectOpened         (const OpenedEventType::group_type &group,
                                                       const OpenedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectOpened                 (const OpenedEventType::group_type &group);
    void   disconnectAllSlotsOpened         (void);
    bool   isEmptyOpened                    (void) const;
    UInt32 numSlotsOpened                   (void) const;
    
    //Closed
    boost::signals2::connection connectClosed         (const ClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectClosed         (const ClosedEventType::group_type &group,
                                                       const ClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectClosed                 (const ClosedEventType::group_type &group);
    void   disconnectAllSlotsClosed         (void);
    bool   isEmptyClosed                    (void) const;
    UInt32 numSlotsClosed                   (void) const;
    
    //Seeked
    boost::signals2::connection connectSeeked         (const SeekedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSeeked         (const SeekedEventType::group_type &group,
                                                       const SeekedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSeeked                 (const SeekedEventType::group_type &group);
    void   disconnectAllSlotsSeeked         (void);
    bool   isEmptySeeked                    (void) const;
    UInt32 numSlotsSeeked                   (void) const;
    
    
    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    StartedEventType _StartedEvent;
    StoppedEventType _StoppedEvent;
    PausedEventType _PausedEvent;
    UnpausedEventType _UnpausedEvent;
    EndedEventType _EndedEvent;
    CycledEventType _CycledEvent;
    OpenedEventType _OpenedEvent;
    ClosedEventType _ClosedEvent;
    SeekedEventType _SeekedEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    VideoWrapperBase(void);
    VideoWrapperBase(const VideoWrapperBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~VideoWrapperBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleStartedSignal(void) const;
    GetEventHandlePtr getHandleStoppedSignal(void) const;
    GetEventHandlePtr getHandlePausedSignal(void) const;
    GetEventHandlePtr getHandleUnpausedSignal(void) const;
    GetEventHandlePtr getHandleEndedSignal(void) const;
    GetEventHandlePtr getHandleCycledSignal(void) const;
    GetEventHandlePtr getHandleOpenedSignal(void) const;
    GetEventHandlePtr getHandleClosedSignal(void) const;
    GetEventHandlePtr getHandleSeekedSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceStarted             (StartedEventDetailsType* const e);
    void produceStopped             (StoppedEventDetailsType* const e);
    void producePaused              (PausedEventDetailsType* const e);
    void produceUnpaused            (UnpausedEventDetailsType* const e);
    void produceEnded               (EndedEventDetailsType* const e);
    void produceCycled              (CycledEventDetailsType* const e);
    void produceOpened              (OpenedEventDetailsType* const e);
    void produceClosed              (ClosedEventDetailsType* const e);
    void produceSeeked              (SeekedEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      VideoWrapperBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const VideoWrapperBase &source);
};

typedef VideoWrapperBase *VideoWrapperBaseP;

OSG_END_NAMESPACE

#endif /* _OSGVIDEOWRAPPERBASE_H_ */
