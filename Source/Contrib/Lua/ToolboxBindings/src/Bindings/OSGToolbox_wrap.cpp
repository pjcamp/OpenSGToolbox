/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Inherited swig_types[0]
#define SWIGTYPE_p_MFChildrenType swig_types[1]
#define SWIGTYPE_p_MatrixType swig_types[2]
#define SWIGTYPE_p_OSG__Activity swig_types[3]
#define SWIGTYPE_p_OSG__ActivityRefPtr swig_types[4]
#define SWIGTYPE_p_OSG__Animation swig_types[5]
#define SWIGTYPE_p_OSG__AnimationRefPtr swig_types[6]
#define SWIGTYPE_p_OSG__Attachment swig_types[7]
#define SWIGTYPE_p_OSG__AttachmentContainer swig_types[8]
#define SWIGTYPE_p_OSG__AttachmentContainerRefPtr swig_types[9]
#define SWIGTYPE_p_OSG__AttachmentRefPtr swig_types[10]
#define SWIGTYPE_p_OSG__BoxVolume swig_types[11]
#define SWIGTYPE_p_OSG__Camera swig_types[12]
#define SWIGTYPE_p_OSG__CameraRefPtr swig_types[13]
#define SWIGTYPE_p_OSG__CgFXMaterial swig_types[14]
#define SWIGTYPE_p_OSG__CgFXMaterialRefPtr swig_types[15]
#define SWIGTYPE_p_OSG__Color4f swig_types[16]
#define SWIGTYPE_p_OSG__Component swig_types[17]
#define SWIGTYPE_p_OSG__ComponentRefPtr swig_types[18]
#define SWIGTYPE_p_OSG__Distribution1D swig_types[19]
#define SWIGTYPE_p_OSG__Distribution1DRefPtr swig_types[20]
#define SWIGTYPE_p_OSG__Distribution2D swig_types[21]
#define SWIGTYPE_p_OSG__Distribution2DRefPtr swig_types[22]
#define SWIGTYPE_p_OSG__Distribution3D swig_types[23]
#define SWIGTYPE_p_OSG__Distribution3DRefPtr swig_types[24]
#define SWIGTYPE_p_OSG__EventDescription swig_types[25]
#define SWIGTYPE_p_OSG__EventDetails swig_types[26]
#define SWIGTYPE_p_OSG__EventDetailsRefPtr swig_types[27]
#define SWIGTYPE_p_OSG__EventProducerType swig_types[28]
#define SWIGTYPE_p_OSG__FieldContainer swig_types[29]
#define SWIGTYPE_p_OSG__FieldContainerRefPtr swig_types[30]
#define SWIGTYPE_p_OSG__FieldContainerType swig_types[31]
#define SWIGTYPE_p_OSG__FieldDescriptionBase swig_types[32]
#define SWIGTYPE_p_OSG__FrustumVolume swig_types[33]
#define SWIGTYPE_p_OSG__GenericEventDetails swig_types[34]
#define SWIGTYPE_p_OSG__GenericEventDetailsRefPtr swig_types[35]
#define SWIGTYPE_p_OSG__Geometry swig_types[36]
#define SWIGTYPE_p_OSG__GeometryRefPtr swig_types[37]
#define SWIGTYPE_p_OSG__Image swig_types[38]
#define SWIGTYPE_p_OSG__ImageRefPtr swig_types[39]
#define SWIGTYPE_p_OSG__InternalWindow swig_types[40]
#define SWIGTYPE_p_OSG__InternalWindowRefPtr swig_types[41]
#define SWIGTYPE_p_OSG__KeyEventDetails swig_types[42]
#define SWIGTYPE_p_OSG__Line swig_types[43]
#define SWIGTYPE_p_OSG__LuaActivity swig_types[44]
#define SWIGTYPE_p_OSG__LuaActivityRefPtr swig_types[45]
#define SWIGTYPE_p_OSG__Matrix swig_types[46]
#define SWIGTYPE_p_OSG__Node swig_types[47]
#define SWIGTYPE_p_OSG__NodeCore swig_types[48]
#define SWIGTYPE_p_OSG__NodeCoreRefPtr swig_types[49]
#define SWIGTYPE_p_OSG__NodeRefPtr swig_types[50]
#define SWIGTYPE_p_OSG__ParticleSystem swig_types[51]
#define SWIGTYPE_p_OSG__ParticleSystemRefPtr swig_types[52]
#define SWIGTYPE_p_OSG__PhysicsBody swig_types[53]
#define SWIGTYPE_p_OSG__PhysicsBodyRefPtr swig_types[54]
#define SWIGTYPE_p_OSG__PhysicsHandler swig_types[55]
#define SWIGTYPE_p_OSG__PhysicsHandlerRefPtr swig_types[56]
#define SWIGTYPE_p_OSG__PhysicsSpace swig_types[57]
#define SWIGTYPE_p_OSG__PhysicsSpaceRefPtr swig_types[58]
#define SWIGTYPE_p_OSG__PhysicsWorld swig_types[59]
#define SWIGTYPE_p_OSG__PhysicsWorldRefPtr swig_types[60]
#define SWIGTYPE_p_OSG__Pnt2f swig_types[61]
#define SWIGTYPE_p_OSG__Pnt3f swig_types[62]
#define SWIGTYPE_p_OSG__ReflexiveContainer swig_types[63]
#define SWIGTYPE_p_OSG__ScrollPanel swig_types[64]
#define SWIGTYPE_p_OSG__ScrollPanelRefPtr swig_types[65]
#define SWIGTYPE_p_OSG__Sound swig_types[66]
#define SWIGTYPE_p_OSG__SoundGroup swig_types[67]
#define SWIGTYPE_p_OSG__SoundGroupRefPtr swig_types[68]
#define SWIGTYPE_p_OSG__SoundManager swig_types[69]
#define SWIGTYPE_p_OSG__SoundRefPtr swig_types[70]
#define SWIGTYPE_p_OSG__TextureObjChunk swig_types[71]
#define SWIGTYPE_p_OSG__TextureObjChunkRefPtr swig_types[72]
#define SWIGTYPE_p_OSG__UIDrawingSurface swig_types[73]
#define SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr swig_types[74]
#define SWIGTYPE_p_OSG__Vec2f swig_types[75]
#define SWIGTYPE_p_OSG__Vec3f swig_types[76]
#define SWIGTYPE_p_OSG__VideoManager swig_types[77]
#define SWIGTYPE_p_OSG__VideoWrapper swig_types[78]
#define SWIGTYPE_p_OSG__VideoWrapperRefPtr swig_types[79]
#define SWIGTYPE_p_OSG__Viewport swig_types[80]
#define SWIGTYPE_p_OSG__ViewportRefPtr swig_types[81]
#define SWIGTYPE_p_OSG__Volume swig_types[82]
#define SWIGTYPE_p_OSG__WindowEventProducer swig_types[83]
#define SWIGTYPE_p_OSG__WindowEventProducerRefPtr swig_types[84]
#define SWIGTYPE_p_ParentContainer swig_types[85]
#define SWIGTYPE_p_PlaneSet swig_types[86]
#define SWIGTYPE_p_PointType swig_types[87]
#define SWIGTYPE_p_PointType3f swig_types[88]
#define SWIGTYPE_p_QuaternionType swig_types[89]
#define SWIGTYPE_p_SFCoreType swig_types[90]
#define SWIGTYPE_p_SFParentType swig_types[91]
#define SWIGTYPE_p_SFTravMaskType swig_types[92]
#define SWIGTYPE_p_SFVolumeType swig_types[93]
#define SWIGTYPE_p_TypeObject swig_types[94]
#define SWIGTYPE_p_ValueType swig_types[95]
#define SWIGTYPE_p_VectorType swig_types[96]
#define SWIGTYPE_p_VectorType3f swig_types[97]
#define SWIGTYPE_p_VolumeType swig_types[98]
#define SWIGTYPE_p_boost__signals2__connection swig_types[99]
#define SWIGTYPE_p_char swig_types[100]
#define SWIGTYPE_p_difference_type swig_types[101]
#define SWIGTYPE_p_double swig_types[102]
#define SWIGTYPE_p_float swig_types[103]
#define SWIGTYPE_p_int swig_types[104]
#define SWIGTYPE_p_key_type swig_types[105]
#define SWIGTYPE_p_long swig_types[106]
#define SWIGTYPE_p_long_double swig_types[107]
#define SWIGTYPE_p_mapped_type swig_types[108]
#define SWIGTYPE_p_signed_char swig_types[109]
#define SWIGTYPE_p_size_type swig_types[110]
#define SWIGTYPE_p_std__mapT_std__string_unsigned_int_t swig_types[111]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[112]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[113]
#define SWIGTYPE_p_unsigned_char swig_types[114]
#define SWIGTYPE_p_unsigned_int swig_types[115]
#define SWIGTYPE_p_unsigned_long swig_types[116]
static swig_type_info *swig_types[118];
static swig_module_info swig_module = {swig_types, 117, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "OSGToolbox"
#define SWIG_init      luaopen_OSGToolbox
#define SWIG_init_user luaopen_OSGToolbox_user

#define SWIG_LUACODE   luaopen_OSGToolbox_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <vector>


#include "OSGWindowEventProducer.h"
#include "OSGKeyEventDetails.h"

#include "OSGSound.h"
#include "OSGSoundGroup.h"
#include "OSGSoundManager.h"

#include "OSGAnimation.h"

#include "OSGComponent.h"
#include "OSGInternalWindow.h"
#include "OSGUIDrawingSurface.h"
#include "OSGScrollPanel.h"

#include "OSGParticleSystem.h"
#include "OSGDistribution1D.h"
#include "OSGDistribution2D.h"
#include "OSGDistribution3D.h"

#include "OSGPhysicsHandler.h"
#include "OSGPhysicsBody.h"
#include "OSGPhysicsSpace.h"
#include "OSGPhysicsWorld.h"

#include "OSGVideoWrapper.h"
#include "OSGVideoManager.h"

#include "OSGFieldContainerType.h"
#include "OSGFieldContainer.h"
#include "OSGFieldDescriptionBase.h"
#include "OSGBaseTypes.h"
#include "OSGAttachment.h"
#include "OSGAttachmentContainer.h"
#include "OSGNameAttachment.h"
#include "OSGAttachmentContainer.h"
#include "OSGSimpleGeometry.h"
#include "OSGGeoFunctions.h"
#include "OSGNode.h"
#include "OSGNodeCore.h"
#include "OSGGeometry.h"
#include "OSGViewport.h"
#include "OSGCamera.h"
#include "OSGImage.h"
#include "OSGTextureObjChunk.h"
#include "OSGMathFields.h"
#include "OSGSysFields.h"
#include "OSGBaseFields.h"
#include "OSGVecFields.h"
#include "OSGFieldContainerFields.h"
#include "OSGContainerUtils.h"
#include "OSGActivity.h"
#include "OSGEventProducerType.h"
#include "OSGActivity.h"
#include "OSGWindow.h"
#include "OSGLuaActivity.h"
#include "OSGGenericEventDetails.h"
#include "OSGCgFXMaterial.h"
        

SWIGINTERN unsigned int std_vector_Sl_OSG_UInt32_Sg____getitem__(std::vector< OSG::UInt32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_OSG_UInt32_Sg____setitem__(std::vector< OSG::UInt32 > *self,unsigned int idx,unsigned int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN OSG::WindowEventProducerRefPtr OSG_WindowEventProducerRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::WindowEventProducer>(oIn);
        }

  int SWIG_lua_isnilstring(lua_State *L, int idx) {
    int ret = lua_isstring(L, idx);
    if (!ret)
     ret = lua_isnil(L, idx);
    return ret;
  }

SWIGINTERN OSG::PhysicsHandlerRefPtr OSG_PhysicsHandlerRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::PhysicsHandler>(oIn);
        }
SWIGINTERN void OSG_PhysicsHandler_attachUpdateProducer(OSG::PhysicsHandler *self,OSG::FieldContainerRefPtr producer){
            (self)->attachUpdateProducer(producer);
        }
SWIGINTERN OSG::PhysicsWorldRefPtr OSG_PhysicsWorldRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::PhysicsWorld>(oIn);
        }
SWIGINTERN OSG::PhysicsBodyRefPtr OSG_PhysicsBodyRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::PhysicsBody>(oIn);
        }
SWIGINTERN OSG::PhysicsSpaceRefPtr OSG_PhysicsSpaceRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::PhysicsSpace>(oIn);
        }
SWIGINTERN OSG::ParticleSystemRefPtr OSG_ParticleSystemRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::ParticleSystem>(oIn);
        }
SWIGINTERN void OSG_ParticleSystem_attachUpdateProducer(OSG::ParticleSystem *self,OSG::FieldContainerRefPtr producer){
            (self)->attachUpdateProducer(producer);
        }
SWIGINTERN OSG::ComponentRefPtr OSG_ComponentRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Component>(oIn);
        }
SWIGINTERN OSG::InternalWindowRefPtr OSG_InternalWindowRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::InternalWindow>(oIn);
        }
SWIGINTERN void OSG_InternalWindow_giveFocus__SWIG_0(OSG::InternalWindow *self,OSG::ComponentRefPtr const NewFocusedComponent,bool Temporary=false){
            (self)->giveFocus(NewFocusedComponent, Temporary);
        }
SWIGINTERN OSG::UIDrawingSurfaceRefPtr OSG_UIDrawingSurfaceRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::UIDrawingSurface>(oIn);
        }
SWIGINTERN void OSG_UIDrawingSurface_openWindow__SWIG_0(OSG::UIDrawingSurface *self,OSG::InternalWindowRefPtr const TheWindow,OSG::Int32 const Layer=-1){
            (self)->openWindow(TheWindow, Layer);
        }
SWIGINTERN void OSG_UIDrawingSurface_closeWindow(OSG::UIDrawingSurface *self,OSG::InternalWindowRefPtr const TheWindow){
            (self)->closeWindow(TheWindow);
        }
SWIGINTERN OSG::ScrollPanelRefPtr OSG_ScrollPanelRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::ScrollPanel>(oIn);
        }
SWIGINTERN OSG::SoundRefPtr OSG_SoundRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Sound>(oIn);
        }
SWIGINTERN void OSG_SoundManager_attachUpdateProducer(OSG::SoundManager *self,OSG::FieldContainerRefPtr producer){
            (self)->attachUpdateProducer(producer);
        }
SWIGINTERN OSG::SoundGroupRefPtr OSG_SoundGroupRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::SoundGroup>(oIn);
        }
SWIGINTERN OSG::AnimationRefPtr OSG_AnimationRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Animation>(oIn);
        }
SWIGINTERN void OSG_Animation_attachUpdateProducer(OSG::Animation *self,OSG::FieldContainerRefPtr producer){
            (self)->attachUpdateProducer(producer);
        }
SWIGINTERN bool OSG_VideoWrapper_open(OSG::VideoWrapper *self,std::string const &ThePath,OSG::FieldContainerRefPtr TheWindow){
            return (self)->open(ThePath, OSG::dynamic_pointer_cast<OSG::Window>(TheWindow));
        }
SWIGINTERN void OSG_VideoWrapper_attachUpdateProducer(OSG::VideoWrapper *self,OSG::FieldContainerRefPtr producer){
            (self)->attachUpdateProducer(producer);
        }
SWIGINTERN OSG::VideoWrapperRefPtr OSG_VideoWrapperRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::VideoWrapper>(oIn);
        }
SWIGINTERN OSG::Distribution1DRefPtr OSG_Distribution1DRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Distribution1D>(oIn);
        }
SWIGINTERN OSG::Distribution2DRefPtr OSG_Distribution2DRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Distribution2D>(oIn);
        }
SWIGINTERN OSG::Distribution3DRefPtr OSG_Distribution3DRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Distribution3D>(oIn);
        }
SWIGINTERN OSG::CgFXMaterialRefPtr OSG_CgFXMaterialRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::CgFXMaterial>(oIn);
        }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_UInt32Vec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(OSG::UInt32)>",0,0)
  result = (std::vector< OSG::UInt32 > *)new std::vector< OSG::UInt32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(OSG::UInt32)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector<(OSG::UInt32)>",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< OSG::UInt32 > *)new std::vector< OSG::UInt32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = 0 ;
  std::vector< OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(OSG::UInt32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector<(OSG::UInt32)>",1,"std::vector< OSG::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vec",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (std::vector< OSG::UInt32 > *)new std::vector< OSG::UInt32 >((std::vector< OSG::UInt32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::vector< OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(OSG::UInt32)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector<(OSG::UInt32)>",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector<(OSG::UInt32)>",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (std::vector< OSG::UInt32 > *)new std::vector< OSG::UInt32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Vec__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vec__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Vec__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt32Vec__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_UInt32Vec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< OSG::UInt32 >()\n"
    "    std::vector< OSG::UInt32 >(unsigned int)\n"
    "    std::vector< OSG::UInt32 >(std::vector< OSG::UInt32 > const &)\n"
    "    std::vector< OSG::UInt32 >(unsigned int,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vec_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::vector< OSG::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< OSG::UInt32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("max_size",1,"std::vector< OSG::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< OSG::UInt32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::vector< OSG::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (bool)((std::vector< OSG::UInt32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"std::vector< OSG::UInt32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("push_back",1,"std::vector< OSG::UInt32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("push_back",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  
  SWIG_check_num_args("pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pop_back",1,"std::vector< OSG::UInt32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("front",1,"std::vector< OSG::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< OSG::UInt32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("back",1,"std::vector< OSG::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< OSG::UInt32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__getitem__",1,"std::vector< OSG::UInt32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned int)std_vector_Sl_OSG_UInt32_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__setitem__",1,"std::vector< OSG::UInt32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("__setitem__",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_OSG_UInt32_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Vec(void *obj) {
std::vector< OSG::UInt32 > *arg1 = (std::vector< OSG::UInt32 > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_OSG_UInt32_Sg__methods[] = {
    {"size", _wrap_UInt32Vec_size}, 
    {"max_size", _wrap_UInt32Vec_max_size}, 
    {"empty", _wrap_UInt32Vec_empty}, 
    {"clear", _wrap_UInt32Vec_clear}, 
    {"push_back", _wrap_UInt32Vec_push_back}, 
    {"pop_back", _wrap_UInt32Vec_pop_back}, 
    {"front", _wrap_UInt32Vec_front}, 
    {"back", _wrap_UInt32Vec_back}, 
    {"__getitem", _wrap_UInt32Vec___getitem}, 
    {"__setitem", _wrap_UInt32Vec___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_OSG_UInt32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_OSG_UInt32_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_OSG_UInt32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_OSG_UInt32_Sg_ = { "UInt32Vec", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_wrap_new_UInt32Vec, swig_delete_UInt32Vec, swig_std_vector_Sl_OSG_UInt32_Sg__methods, swig_std_vector_Sl_OSG_UInt32_Sg__attributes, swig_std_vector_Sl_OSG_UInt32_Sg__bases, swig_std_vector_Sl_OSG_UInt32_Sg__base_names };

static int _wrap_new_WindowEventProducerRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::WindowEventProducerRefPtr",0,0)
  result = (OSG::WindowEventProducerRefPtr *)new OSG::WindowEventProducerRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WindowEventProducerRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = 0 ;
  OSG::WindowEventProducerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::WindowEventProducerRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::WindowEventProducerRefPtr",1,"OSG::WindowEventProducerRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("new_WindowEventProducerRefPtr",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::WindowEventProducerRefPtr *)new OSG::WindowEventProducerRefPtr((OSG::WindowEventProducerRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WindowEventProducerRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_WindowEventProducerRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WindowEventProducerRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_WindowEventProducerRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::WindowEventProducerRefPtr()\n"
    "    OSG::WindowEventProducerRefPtr(OSG::WindowEventProducerRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WindowEventProducerRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::WindowEventProducer *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::WindowEventProducerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr___deref__",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::WindowEventProducer *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__WindowEventProducer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::WindowEventProducerRefPtr result;
  
  SWIG_check_num_args("OSG_WindowEventProducerRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_WindowEventProducerRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_WindowEventProducerRefPtr_dcast(arg1);
  {
    OSG::WindowEventProducerRefPtr * resultptr = new OSG::WindowEventProducerRefPtr((const OSG::WindowEventProducerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_openWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Vec2f *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  
  SWIG_check_num_args("openWindow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("openWindow",3,"OSG::Vec2f const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("openWindow",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_openWindow",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_openWindow",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_openWindow",3,SWIGTYPE_p_OSG__Vec2f);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  (*arg1)->openWindow((OSG::Pnt2f const &)*arg2,(OSG::Vec2f const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_closeWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  
  SWIG_check_num_args("closeWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("closeWindow",1,"OSG::WindowEventProducerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_closeWindow",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  (*arg1)->closeWindow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Pnt2f arg2 ;
  OSG::Pnt2f *argp2 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"OSG::Pnt2f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setPosition",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setPosition",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  arg2 = *argp2;
  
  (*arg1)->setPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getPosition",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (*arg1)->getPosition();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getSize",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (*arg1)->getSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setFocused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFocused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFocused",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFocused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setFocused",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setFocused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getFocused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFocused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFocused",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getFocused",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->getFocused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisible",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setVisible",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getVisible(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisible",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getVisible",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->getVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setIconify(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setIconify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIconify",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setIconify",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setIconify",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setIconify(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getIconify(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getIconify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getIconify",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getIconify",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->getIconify();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFullscreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFullscreen",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFullscreen",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setFullscreen",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setFullscreen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFullscreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFullscreen",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getFullscreen",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->getFullscreen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setTitle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTitle",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setTitle",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setTitle",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (*arg1)->setTitle((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getTitle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getTitle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTitle",1,"OSG::WindowEventProducerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getTitle",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (*arg1)->getTitle();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setRisizable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setRisizable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRisizable",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setRisizable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setRisizable",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setRisizable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getRisizable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getRisizable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRisizable",1,"OSG::WindowEventProducerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getRisizable",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->getRisizable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setShowCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setShowCursor",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setShowCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setShowCursor",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setShowCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getShowCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getShowCursor",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getShowCursor",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->getShowCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAttachMouseToCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttachMouseToCursor",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAttachMouseToCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setAttachMouseToCursor",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setAttachMouseToCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getAttachMouseToCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttachMouseToCursor",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getAttachMouseToCursor",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->getAttachMouseToCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getDesktopSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getDesktopSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDesktopSize",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getDesktopSize",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (*arg1)->getDesktopSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getKeyModifiers(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getKeyModifiers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getKeyModifiers",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getKeyModifiers",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getKeyModifiers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getMousePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMousePosition",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getMousePosition",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (*arg1)->getMousePosition();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_windowToViewport(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::ViewportRefPtr result;
  
  SWIG_check_num_args("windowToViewport",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("windowToViewport",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("windowToViewport",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("windowToViewport",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_windowToViewport",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_windowToViewport",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_windowToViewport",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (*arg1)->windowToViewport((OSG::Pnt2f const &)*arg2,*arg3);
  {
    OSG::ViewportRefPtr * resultptr = new OSG::ViewportRefPtr((const OSG::ViewportRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ViewportRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getClipboard(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getClipboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipboard",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getClipboard",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (*arg1)->getClipboard();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_putClipboard(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("putClipboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putClipboard",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("putClipboard",2,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_putClipboard",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (*arg1)->putClipboard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getCursorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getCursorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCursorType",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getCursorType",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getCursorType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_setCursorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("setCursorType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCursorType",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCursorType",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_setCursorType",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->setCursorType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_blockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("blockInputConnections",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blockInputConnections",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("blockInputConnections",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_blockInputConnections",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->blockInputConnections(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_isBlockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isBlockInputConnections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isBlockInputConnections",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_isBlockInputConnections",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->isBlockInputConnections();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_addAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_addAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WindowEventProducerRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'WindowEventProducerRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::WindowEventProducerRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::WindowEventProducerRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WindowEventProducerRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_subAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_subAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WindowEventProducerRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'WindowEventProducerRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::WindowEventProducerRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::WindowEventProducerRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WindowEventProducerRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'WindowEventProducerRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::WindowEventProducerRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::WindowEventProducerRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::WindowEventProducerRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::WindowEventProducerRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WindowEventProducerRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::WindowEventProducerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getType",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getTypeId",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getGroupId",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getTypeName",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getProducerType",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getId",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getNumFields",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::WindowEventProducerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_attachActivity",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::WindowEventProducerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::WindowEventProducerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::WindowEventProducerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::WindowEventProducerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::WindowEventProducerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::WindowEventProducerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'WindowEventProducerRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::WindowEventProducerRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::WindowEventProducerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_WindowEventProducerRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::WindowEventProducerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::WindowEventProducerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr,0))){
    SWIG_fail_ptr("WindowEventProducerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__WindowEventProducerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__WindowEventProducerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_WindowEventProducerRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'WindowEventProducerRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::WindowEventProducerRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::WindowEventProducerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_WindowEventProducerRefPtr(void *obj) {
OSG::WindowEventProducerRefPtr *arg1 = (OSG::WindowEventProducerRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_WindowEventProducerRefPtr_methods[] = {
    {"__deref__", _wrap_WindowEventProducerRefPtr___deref__}, 
    {"openWindow", _wrap_WindowEventProducerRefPtr_openWindow}, 
    {"closeWindow", _wrap_WindowEventProducerRefPtr_closeWindow}, 
    {"setPosition", _wrap_WindowEventProducerRefPtr_setPosition}, 
    {"getPosition", _wrap_WindowEventProducerRefPtr_getPosition}, 
    {"getSize", _wrap_WindowEventProducerRefPtr_getSize}, 
    {"setFocused", _wrap_WindowEventProducerRefPtr_setFocused}, 
    {"getFocused", _wrap_WindowEventProducerRefPtr_getFocused}, 
    {"setVisible", _wrap_WindowEventProducerRefPtr_setVisible}, 
    {"getVisible", _wrap_WindowEventProducerRefPtr_getVisible}, 
    {"setIconify", _wrap_WindowEventProducerRefPtr_setIconify}, 
    {"getIconify", _wrap_WindowEventProducerRefPtr_getIconify}, 
    {"setFullscreen", _wrap_WindowEventProducerRefPtr_setFullscreen}, 
    {"getFullscreen", _wrap_WindowEventProducerRefPtr_getFullscreen}, 
    {"setTitle", _wrap_WindowEventProducerRefPtr_setTitle}, 
    {"getTitle", _wrap_WindowEventProducerRefPtr_getTitle}, 
    {"setRisizable", _wrap_WindowEventProducerRefPtr_setRisizable}, 
    {"getRisizable", _wrap_WindowEventProducerRefPtr_getRisizable}, 
    {"setShowCursor", _wrap_WindowEventProducerRefPtr_setShowCursor}, 
    {"getShowCursor", _wrap_WindowEventProducerRefPtr_getShowCursor}, 
    {"setAttachMouseToCursor", _wrap_WindowEventProducerRefPtr_setAttachMouseToCursor}, 
    {"getAttachMouseToCursor", _wrap_WindowEventProducerRefPtr_getAttachMouseToCursor}, 
    {"getDesktopSize", _wrap_WindowEventProducerRefPtr_getDesktopSize}, 
    {"getKeyModifiers", _wrap_WindowEventProducerRefPtr_getKeyModifiers}, 
    {"getMousePosition", _wrap_WindowEventProducerRefPtr_getMousePosition}, 
    {"windowToViewport", _wrap_WindowEventProducerRefPtr_windowToViewport}, 
    {"getClipboard", _wrap_WindowEventProducerRefPtr_getClipboard}, 
    {"putClipboard", _wrap_WindowEventProducerRefPtr_putClipboard}, 
    {"getCursorType", _wrap_WindowEventProducerRefPtr_getCursorType}, 
    {"setCursorType", _wrap_WindowEventProducerRefPtr_setCursorType}, 
    {"blockInputConnections", _wrap_WindowEventProducerRefPtr_blockInputConnections}, 
    {"isBlockInputConnections", _wrap_WindowEventProducerRefPtr_isBlockInputConnections}, 
    {"addAttachment", _wrap_WindowEventProducerRefPtr_addAttachment}, 
    {"subAttachment", _wrap_WindowEventProducerRefPtr_subAttachment}, 
    {"findAttachment", _wrap_WindowEventProducerRefPtr_findAttachment}, 
    {"getType", _wrap_WindowEventProducerRefPtr_getType}, 
    {"shallowCopy", _wrap_WindowEventProducerRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_WindowEventProducerRefPtr_getTypeId}, 
    {"getGroupId", _wrap_WindowEventProducerRefPtr_getGroupId}, 
    {"getTypeName", _wrap_WindowEventProducerRefPtr_getTypeName}, 
    {"getProducerType", _wrap_WindowEventProducerRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_WindowEventProducerRefPtr_getContainerSize}, 
    {"getId", _wrap_WindowEventProducerRefPtr_getId}, 
    {"getNumFields", _wrap_WindowEventProducerRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_WindowEventProducerRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_WindowEventProducerRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_WindowEventProducerRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_WindowEventProducerRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_WindowEventProducerRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_WindowEventProducerRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_WindowEventProducerRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_WindowEventProducerRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_WindowEventProducerRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_WindowEventProducerRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_WindowEventProducerRefPtr_bases[] = {0,0};
static const char *swig_OSG_WindowEventProducerRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_WindowEventProducerRefPtr = { "WindowEventProducerRefPtr", &SWIGTYPE_p_OSG__WindowEventProducerRefPtr,_wrap_new_WindowEventProducerRefPtr, swig_delete_WindowEventProducerRefPtr, swig_OSG_WindowEventProducerRefPtr_methods, swig_OSG_WindowEventProducerRefPtr_attributes, swig_OSG_WindowEventProducerRefPtr_bases, swig_OSG_WindowEventProducerRefPtr_base_names };

static int _wrap_WindowEventProducer_openWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Vec2f *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  
  SWIG_check_num_args("openWindow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"OSG::WindowEventProducer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("openWindow",3,"OSG::Vec2f const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("openWindow",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_openWindow",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_openWindow",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("WindowEventProducer_openWindow",3,SWIGTYPE_p_OSG__Vec2f);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  (arg1)->openWindow((OSG::Pnt2f const &)*arg2,(OSG::Vec2f const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_closeWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  
  SWIG_check_num_args("closeWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("closeWindow",1,"OSG::WindowEventProducer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_closeWindow",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  (arg1)->closeWindow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::Pnt2f arg2 ;
  OSG::Pnt2f *argp2 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"OSG::WindowEventProducer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"OSG::Pnt2f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setPosition",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_setPosition",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  arg2 = *argp2;
  
  (arg1)->setPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getPosition",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = ((OSG::WindowEventProducer const *)arg1)->getPosition();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getSize",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = ((OSG::WindowEventProducer const *)arg1)->getSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setFocused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFocused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFocused",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFocused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setFocused",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setFocused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getFocused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFocused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFocused",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getFocused",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)((OSG::WindowEventProducer const *)arg1)->getFocused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisible",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setVisible",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getVisible(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisible",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getVisible",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)((OSG::WindowEventProducer const *)arg1)->getVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setIconify(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setIconify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIconify",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setIconify",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setIconify",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIconify(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getIconify(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getIconify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getIconify",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getIconify",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)((OSG::WindowEventProducer const *)arg1)->getIconify();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFullscreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFullscreen",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFullscreen",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setFullscreen",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setFullscreen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFullscreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFullscreen",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getFullscreen",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)((OSG::WindowEventProducer const *)arg1)->getFullscreen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setTitle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTitle",1,"OSG::WindowEventProducer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setTitle",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setTitle",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setTitle((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getTitle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getTitle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTitle",1,"OSG::WindowEventProducer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getTitle",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (arg1)->getTitle();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setRisizable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setRisizable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRisizable",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setRisizable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setRisizable",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRisizable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getRisizable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getRisizable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRisizable",1,"OSG::WindowEventProducer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getRisizable",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)(arg1)->getRisizable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setShowCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setShowCursor",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setShowCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setShowCursor",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setShowCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getShowCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getShowCursor",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getShowCursor",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)((OSG::WindowEventProducer const *)arg1)->getShowCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAttachMouseToCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttachMouseToCursor",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAttachMouseToCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setAttachMouseToCursor",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAttachMouseToCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getAttachMouseToCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttachMouseToCursor",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getAttachMouseToCursor",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)((OSG::WindowEventProducer const *)arg1)->getAttachMouseToCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getDesktopSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getDesktopSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDesktopSize",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getDesktopSize",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = ((OSG::WindowEventProducer const *)arg1)->getDesktopSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getKeyModifiers(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getKeyModifiers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getKeyModifiers",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getKeyModifiers",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (OSG::UInt32)((OSG::WindowEventProducer const *)arg1)->getKeyModifiers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getMousePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMousePosition",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getMousePosition",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = ((OSG::WindowEventProducer const *)arg1)->getMousePosition();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_windowToViewport(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::ViewportRefPtr result;
  
  SWIG_check_num_args("windowToViewport",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("windowToViewport",1,"OSG::WindowEventProducer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("windowToViewport",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("windowToViewport",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_windowToViewport",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_windowToViewport",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_windowToViewport",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (arg1)->windowToViewport((OSG::Pnt2f const &)*arg2,*arg3);
  {
    OSG::ViewportRefPtr * resultptr = new OSG::ViewportRefPtr((const OSG::ViewportRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ViewportRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getClipboard(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getClipboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipboard",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getClipboard",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = ((OSG::WindowEventProducer const *)arg1)->getClipboard();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_putClipboard(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("putClipboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putClipboard",1,"OSG::WindowEventProducer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("putClipboard",2,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_putClipboard",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->putClipboard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getCursorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getCursorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCursorType",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getCursorType",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (OSG::UInt32)((OSG::WindowEventProducer const *)arg1)->getCursorType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setCursorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("setCursorType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCursorType",1,"OSG::WindowEventProducer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCursorType",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setCursorType",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->setCursorType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_blockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("blockInputConnections",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blockInputConnections",1,"OSG::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("blockInputConnections",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_blockInputConnections",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->blockInputConnections(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_isBlockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  OSG::WindowEventProducer *arg1 = (OSG::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("isBlockInputConnections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isBlockInputConnections",1,"OSG::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_isBlockInputConnections",1,SWIGTYPE_p_OSG__WindowEventProducer);
  }
  
  result = (bool)((OSG::WindowEventProducer const *)arg1)->isBlockInputConnections();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_WindowEventProducer_methods[] = {
    {"openWindow", _wrap_WindowEventProducer_openWindow}, 
    {"closeWindow", _wrap_WindowEventProducer_closeWindow}, 
    {"setPosition", _wrap_WindowEventProducer_setPosition}, 
    {"getPosition", _wrap_WindowEventProducer_getPosition}, 
    {"getSize", _wrap_WindowEventProducer_getSize}, 
    {"setFocused", _wrap_WindowEventProducer_setFocused}, 
    {"getFocused", _wrap_WindowEventProducer_getFocused}, 
    {"setVisible", _wrap_WindowEventProducer_setVisible}, 
    {"getVisible", _wrap_WindowEventProducer_getVisible}, 
    {"setIconify", _wrap_WindowEventProducer_setIconify}, 
    {"getIconify", _wrap_WindowEventProducer_getIconify}, 
    {"setFullscreen", _wrap_WindowEventProducer_setFullscreen}, 
    {"getFullscreen", _wrap_WindowEventProducer_getFullscreen}, 
    {"setTitle", _wrap_WindowEventProducer_setTitle}, 
    {"getTitle", _wrap_WindowEventProducer_getTitle}, 
    {"setRisizable", _wrap_WindowEventProducer_setRisizable}, 
    {"getRisizable", _wrap_WindowEventProducer_getRisizable}, 
    {"setShowCursor", _wrap_WindowEventProducer_setShowCursor}, 
    {"getShowCursor", _wrap_WindowEventProducer_getShowCursor}, 
    {"setAttachMouseToCursor", _wrap_WindowEventProducer_setAttachMouseToCursor}, 
    {"getAttachMouseToCursor", _wrap_WindowEventProducer_getAttachMouseToCursor}, 
    {"getDesktopSize", _wrap_WindowEventProducer_getDesktopSize}, 
    {"getKeyModifiers", _wrap_WindowEventProducer_getKeyModifiers}, 
    {"getMousePosition", _wrap_WindowEventProducer_getMousePosition}, 
    {"windowToViewport", _wrap_WindowEventProducer_windowToViewport}, 
    {"getClipboard", _wrap_WindowEventProducer_getClipboard}, 
    {"putClipboard", _wrap_WindowEventProducer_putClipboard}, 
    {"getCursorType", _wrap_WindowEventProducer_getCursorType}, 
    {"setCursorType", _wrap_WindowEventProducer_setCursorType}, 
    {"blockInputConnections", _wrap_WindowEventProducer_blockInputConnections}, 
    {"isBlockInputConnections", _wrap_WindowEventProducer_isBlockInputConnections}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_WindowEventProducer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_WindowEventProducer_bases[] = {0,0};
static const char *swig_OSG_WindowEventProducer_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_WindowEventProducer = { "WindowEventProducer", &SWIGTYPE_p_OSG__WindowEventProducer,0,0, swig_OSG_WindowEventProducer_methods, swig_OSG_WindowEventProducer_attributes, swig_OSG_WindowEventProducer_bases, swig_OSG_WindowEventProducer_base_names };

static int _wrap_new_PhysicsHandlerRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsHandlerRefPtr",0,0)
  result = (OSG::PhysicsHandlerRefPtr *)new OSG::PhysicsHandlerRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsHandlerRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = 0 ;
  OSG::PhysicsHandlerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsHandlerRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::PhysicsHandlerRefPtr",1,"OSG::PhysicsHandlerRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("new_PhysicsHandlerRefPtr",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::PhysicsHandlerRefPtr *)new OSG::PhysicsHandlerRefPtr((OSG::PhysicsHandlerRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsHandlerRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsHandlerRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsHandlerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsHandlerRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PhysicsHandlerRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::PhysicsHandlerRefPtr()\n"
    "    OSG::PhysicsHandlerRefPtr(OSG::PhysicsHandlerRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsHandlerRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::PhysicsHandler *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::PhysicsHandlerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr___deref__",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::PhysicsHandler *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsHandler,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::PhysicsHandlerRefPtr result;
  
  SWIG_check_num_args("OSG_PhysicsHandlerRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_PhysicsHandlerRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_PhysicsHandlerRefPtr_dcast(arg1);
  {
    OSG::PhysicsHandlerRefPtr * resultptr = new OSG::PhysicsHandlerRefPtr((const OSG::PhysicsHandlerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::PhysicsHandlerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_detachUpdateProducer",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  (*arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::PhysicsHandlerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_attachUpdateProducer",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_PhysicsHandler_attachUpdateProducer((OSG::PhysicsHandler*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::PhysicsHandlerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getType",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getTypeId",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getGroupId",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getTypeName",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getProducerType",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getId",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getNumFields",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::PhysicsHandlerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::PhysicsHandlerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_attachActivity",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::PhysicsHandlerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::PhysicsHandlerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::PhysicsHandlerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::PhysicsHandlerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsHandlerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsHandlerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsHandlerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsHandlerRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsHandlerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsHandlerRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsHandlerRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::PhysicsHandlerRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::PhysicsHandlerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsHandlerRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsHandlerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsHandlerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsHandlerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsHandlerRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsHandlerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsHandlerRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsHandlerRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::PhysicsHandlerRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::PhysicsHandlerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_PhysicsHandlerRefPtr(void *obj) {
OSG::PhysicsHandlerRefPtr *arg1 = (OSG::PhysicsHandlerRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_PhysicsHandlerRefPtr_methods[] = {
    {"__deref__", _wrap_PhysicsHandlerRefPtr___deref__}, 
    {"detachUpdateProducer", _wrap_PhysicsHandlerRefPtr_detachUpdateProducer}, 
    {"attachUpdateProducer", _wrap_PhysicsHandlerRefPtr_attachUpdateProducer}, 
    {"getType", _wrap_PhysicsHandlerRefPtr_getType}, 
    {"shallowCopy", _wrap_PhysicsHandlerRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_PhysicsHandlerRefPtr_getTypeId}, 
    {"getGroupId", _wrap_PhysicsHandlerRefPtr_getGroupId}, 
    {"getTypeName", _wrap_PhysicsHandlerRefPtr_getTypeName}, 
    {"getProducerType", _wrap_PhysicsHandlerRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_PhysicsHandlerRefPtr_getContainerSize}, 
    {"getId", _wrap_PhysicsHandlerRefPtr_getId}, 
    {"getNumFields", _wrap_PhysicsHandlerRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_PhysicsHandlerRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_PhysicsHandlerRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_PhysicsHandlerRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_PhysicsHandlerRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_PhysicsHandlerRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_PhysicsHandlerRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_PhysicsHandlerRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_PhysicsHandlerRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_PhysicsHandlerRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsHandlerRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsHandlerRefPtr_bases[] = {0,0};
static const char *swig_OSG_PhysicsHandlerRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_PhysicsHandlerRefPtr = { "PhysicsHandlerRefPtr", &SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,_wrap_new_PhysicsHandlerRefPtr, swig_delete_PhysicsHandlerRefPtr, swig_OSG_PhysicsHandlerRefPtr_methods, swig_OSG_PhysicsHandlerRefPtr_attributes, swig_OSG_PhysicsHandlerRefPtr_bases, swig_OSG_PhysicsHandlerRefPtr_base_names };

static int _wrap_PhysicsHandler_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandler *arg1 = (OSG::PhysicsHandler *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::PhysicsHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandler,0))){
    SWIG_fail_ptr("PhysicsHandler_detachUpdateProducer",1,SWIGTYPE_p_OSG__PhysicsHandler);
  }
  
  (arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandler_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsHandler *arg1 = (OSG::PhysicsHandler *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::PhysicsHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsHandler,0))){
    SWIG_fail_ptr("PhysicsHandler_attachUpdateProducer",1,SWIGTYPE_p_OSG__PhysicsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("PhysicsHandler_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_PhysicsHandler_attachUpdateProducer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_PhysicsHandler_methods[] = {
    {"detachUpdateProducer", _wrap_PhysicsHandler_detachUpdateProducer}, 
    {"attachUpdateProducer", _wrap_PhysicsHandler_attachUpdateProducer}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsHandler_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsHandler_bases[] = {0,0};
static const char *swig_OSG_PhysicsHandler_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_PhysicsHandler = { "PhysicsHandler", &SWIGTYPE_p_OSG__PhysicsHandler,0,0, swig_OSG_PhysicsHandler_methods, swig_OSG_PhysicsHandler_attributes, swig_OSG_PhysicsHandler_bases, swig_OSG_PhysicsHandler_base_names };

static int _wrap_new_PhysicsWorldRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsWorldRefPtr",0,0)
  result = (OSG::PhysicsWorldRefPtr *)new OSG::PhysicsWorldRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsWorldRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = 0 ;
  OSG::PhysicsWorldRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsWorldRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::PhysicsWorldRefPtr",1,"OSG::PhysicsWorldRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("new_PhysicsWorldRefPtr",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::PhysicsWorldRefPtr *)new OSG::PhysicsWorldRefPtr((OSG::PhysicsWorldRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsWorldRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsWorldRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsWorldRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsWorldRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PhysicsWorldRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::PhysicsWorldRefPtr()\n"
    "    OSG::PhysicsWorldRefPtr(OSG::PhysicsWorldRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorldRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::PhysicsWorld *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::PhysicsWorldRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr___deref__",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::PhysicsWorld *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsWorld,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::PhysicsWorldRefPtr result;
  
  SWIG_check_num_args("OSG_PhysicsWorldRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_PhysicsWorldRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_PhysicsWorldRefPtr_dcast(arg1);
  {
    OSG::PhysicsWorldRefPtr * resultptr = new OSG::PhysicsWorldRefPtr((const OSG::PhysicsWorldRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_impulseToForce(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("impulseToForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("impulseToForce",1,"OSG::PhysicsWorldRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("impulseToForce",2,"OSG::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("impulseToForce",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_impulseToForce",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_impulseToForce",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (*arg1)->impulseToForce(arg2,(OSG::Vec3f const &)*arg3);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_initWorld(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  
  SWIG_check_num_args("initWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initWorld",1,"OSG::PhysicsWorldRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_initWorld",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  (*arg1)->initWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getParentHandler(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::PhysicsHandlerRefPtr result;
  
  SWIG_check_num_args("getParentHandler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentHandler",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getParentHandler",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (*arg1)->getParentHandler();
  {
    OSG::PhysicsHandlerRefPtr * resultptr = new OSG::PhysicsHandlerRefPtr((const OSG::PhysicsHandlerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::PhysicsWorldRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getType",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getTypeId",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getGroupId",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getTypeName",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getProducerType",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getId",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getNumFields",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::PhysicsWorldRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::PhysicsWorldRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_attachActivity",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::PhysicsWorldRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::PhysicsWorldRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::PhysicsWorldRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::PhysicsWorldRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsWorldRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsWorldRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsWorldRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorldRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsWorldRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorldRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsWorldRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::PhysicsWorldRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::PhysicsWorldRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorldRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsWorldRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsWorldRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsWorldRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsWorldRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorldRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsWorldRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorldRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsWorldRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::PhysicsWorldRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::PhysicsWorldRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_PhysicsWorldRefPtr(void *obj) {
OSG::PhysicsWorldRefPtr *arg1 = (OSG::PhysicsWorldRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_PhysicsWorldRefPtr_methods[] = {
    {"__deref__", _wrap_PhysicsWorldRefPtr___deref__}, 
    {"impulseToForce", _wrap_PhysicsWorldRefPtr_impulseToForce}, 
    {"initWorld", _wrap_PhysicsWorldRefPtr_initWorld}, 
    {"getParentHandler", _wrap_PhysicsWorldRefPtr_getParentHandler}, 
    {"getType", _wrap_PhysicsWorldRefPtr_getType}, 
    {"shallowCopy", _wrap_PhysicsWorldRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_PhysicsWorldRefPtr_getTypeId}, 
    {"getGroupId", _wrap_PhysicsWorldRefPtr_getGroupId}, 
    {"getTypeName", _wrap_PhysicsWorldRefPtr_getTypeName}, 
    {"getProducerType", _wrap_PhysicsWorldRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_PhysicsWorldRefPtr_getContainerSize}, 
    {"getId", _wrap_PhysicsWorldRefPtr_getId}, 
    {"getNumFields", _wrap_PhysicsWorldRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_PhysicsWorldRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_PhysicsWorldRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_PhysicsWorldRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_PhysicsWorldRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_PhysicsWorldRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_PhysicsWorldRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_PhysicsWorldRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_PhysicsWorldRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_PhysicsWorldRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsWorldRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsWorldRefPtr_bases[] = {0,0};
static const char *swig_OSG_PhysicsWorldRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_PhysicsWorldRefPtr = { "PhysicsWorldRefPtr", &SWIGTYPE_p_OSG__PhysicsWorldRefPtr,_wrap_new_PhysicsWorldRefPtr, swig_delete_PhysicsWorldRefPtr, swig_OSG_PhysicsWorldRefPtr_methods, swig_OSG_PhysicsWorldRefPtr_attributes, swig_OSG_PhysicsWorldRefPtr_bases, swig_OSG_PhysicsWorldRefPtr_base_names };

static int _wrap_PhysicsWorld_impulseToForce(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorld *arg1 = (OSG::PhysicsWorld *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("impulseToForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("impulseToForce",1,"OSG::PhysicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("impulseToForce",2,"OSG::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("impulseToForce",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_impulseToForce",1,SWIGTYPE_p_OSG__PhysicsWorld);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsWorld_impulseToForce",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (arg1)->impulseToForce(arg2,(OSG::Vec3f const &)*arg3);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_initWorld(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorld *arg1 = (OSG::PhysicsWorld *) 0 ;
  
  SWIG_check_num_args("initWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initWorld",1,"OSG::PhysicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_initWorld",1,SWIGTYPE_p_OSG__PhysicsWorld);
  }
  
  (arg1)->initWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_getParentHandler(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorld *arg1 = (OSG::PhysicsWorld *) 0 ;
  OSG::PhysicsHandlerRefPtr result;
  
  SWIG_check_num_args("getParentHandler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentHandler",1,"OSG::PhysicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_getParentHandler",1,SWIGTYPE_p_OSG__PhysicsWorld);
  }
  
  result = ((OSG::PhysicsWorld const *)arg1)->getParentHandler();
  {
    OSG::PhysicsHandlerRefPtr * resultptr = new OSG::PhysicsHandlerRefPtr((const OSG::PhysicsHandlerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsHandlerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_PhysicsWorld_methods[] = {
    {"impulseToForce", _wrap_PhysicsWorld_impulseToForce}, 
    {"initWorld", _wrap_PhysicsWorld_initWorld}, 
    {"getParentHandler", _wrap_PhysicsWorld_getParentHandler}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsWorld_bases[] = {0,0};
static const char *swig_OSG_PhysicsWorld_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_PhysicsWorld = { "PhysicsWorld", &SWIGTYPE_p_OSG__PhysicsWorld,0,0, swig_OSG_PhysicsWorld_methods, swig_OSG_PhysicsWorld_attributes, swig_OSG_PhysicsWorld_bases, swig_OSG_PhysicsWorld_base_names };

static int _wrap_new_PhysicsBodyRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsBodyRefPtr",0,0)
  result = (OSG::PhysicsBodyRefPtr *)new OSG::PhysicsBodyRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsBodyRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = 0 ;
  OSG::PhysicsBodyRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsBodyRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::PhysicsBodyRefPtr",1,"OSG::PhysicsBodyRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("new_PhysicsBodyRefPtr",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::PhysicsBodyRefPtr *)new OSG::PhysicsBodyRefPtr((OSG::PhysicsBodyRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsBodyRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsBodyRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsBodyRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsBodyRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PhysicsBodyRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::PhysicsBodyRefPtr()\n"
    "    OSG::PhysicsBodyRefPtr(OSG::PhysicsBodyRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsBodyRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::PhysicsBody *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr___deref__",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::PhysicsBody *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::PhysicsBodyRefPtr result;
  
  SWIG_check_num_args("OSG_PhysicsBodyRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_PhysicsBodyRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_PhysicsBodyRefPtr_dcast(arg1);
  {
    OSG::PhysicsBodyRefPtr * resultptr = new OSG::PhysicsBodyRefPtr((const OSG::PhysicsBodyRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_create(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::PhysicsWorldRefPtr arg2 ;
  OSG::PhysicsWorldRefPtr *argp2 ;
  OSG::PhysicsBodyRefPtr result;
  
  SWIG_check_num_args("create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("create",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("create",2,"OSG::PhysicsWorldRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_create",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_create",2,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  arg2 = *argp2;
  
  result = (*arg1)->create(arg2);
  {
    OSG::PhysicsBodyRefPtr * resultptr = new OSG::PhysicsBodyRefPtr((const OSG::PhysicsBodyRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setEnable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEnable",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setEnable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setEnable",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setEnable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getEnable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getEnable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEnable",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getEnable",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (bool)(*arg1)->getEnable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addForce(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForce",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForce",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForce",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForce",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addForce((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addTorque(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addTorque",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addTorque",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addTorque",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addTorque",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addTorque((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addRelForce(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForce",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForce",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForce",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForce",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addRelForce((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addRelTorque(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelTorque",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelTorque",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelTorque",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelTorque",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addRelTorque((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtPos",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForceAtPos",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForceAtPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForceAtPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addForceAtPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtRelPos",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtRelPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtRelPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForceAtRelPos",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForceAtRelPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addForceAtRelPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addForceAtRelPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addRelForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtPos",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForceAtPos",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForceAtPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForceAtPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addRelForceAtPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_addRelForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtRelPos",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtRelPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtRelPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForceAtRelPos",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForceAtRelPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_addRelForceAtRelPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->addRelForceAtRelPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getRelPointPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointPos",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointPos",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getRelPointPos",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getRelPointPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getRelPointPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->getRelPointPos((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getRelPointVel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointVel",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointVel",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointVel",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getRelPointVel",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getRelPointVel",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getRelPointVel",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->getRelPointVel((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getPointVel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPointVel",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPointVel",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPointVel",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getPointVel",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getPointVel",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getPointVel",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->getPointVel((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getPosRelPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPosRelPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosRelPoint",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPosRelPoint",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPosRelPoint",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getPosRelPoint",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getPosRelPoint",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getPosRelPoint",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->getPosRelPoint((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_vectorToWorld(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorToWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorToWorld",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorToWorld",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorToWorld",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_vectorToWorld",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_vectorToWorld",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_vectorToWorld",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->vectorToWorld((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_vectorFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorFromWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorFromWorld",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorFromWorld",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorFromWorld",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_vectorFromWorld",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_vectorFromWorld",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_vectorFromWorld",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->vectorFromWorld((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setAutoDisableDefaults(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  
  SWIG_check_num_args("setAutoDisableDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAutoDisableDefaults",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setAutoDisableDefaults",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  (*arg1)->setAutoDisableDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getNumJoints(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getNumJoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumJoints",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getNumJoints",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::Int32)(*arg1)->getNumJoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_initDefaults(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  
  SWIG_check_num_args("initDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initDefaults",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_initDefaults",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  (*arg1)->initDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_resetMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  
  SWIG_check_num_args("resetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetMass",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_resetMass",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  (*arg1)->resetMass();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setMassParams(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  OSG::Real32 arg6 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Real32 arg9 ;
  
  SWIG_check_num_args("setMassParams",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMassParams",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setMassParams",2,"OSG::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setMassParams",3,"OSG::Vec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setMassParams",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setMassParams",5,"OSG::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setMassParams",6,"OSG::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setMassParams",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("setMassParams",8,"OSG::Real32");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("setMassParams",9,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setMassParams",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setMassParams",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  arg9 = (OSG::Real32)lua_tonumber(L, 9);
  (*arg1)->setMassParams(arg2,(OSG::Vec3f const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setSphereMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMass",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMass",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMass",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setSphereMass",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (*arg1)->setSphereMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setSphereMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMassTotal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMassTotal",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMassTotal",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMassTotal",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setSphereMassTotal",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (*arg1)->setSphereMassTotal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setCapsuleMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMass",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMass",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMass",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMass",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMass",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setCapsuleMass",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (*arg1)->setCapsuleMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setCapsuleMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMassTotal",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMassTotal",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMassTotal",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMassTotal",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMassTotal",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setCapsuleMassTotal",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (*arg1)->setCapsuleMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setBoxMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMass",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMass",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMass",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMass",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMass",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setBoxMass",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (*arg1)->setBoxMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setBoxMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMassTotal",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMassTotal",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMassTotal",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMassTotal",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMassTotal",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setBoxMassTotal",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (*arg1)->setBoxMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_adjustMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("adjustMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adjustMass",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adjustMass",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_adjustMass",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (*arg1)->adjustMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_translateMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("translateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("translateMass",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("translateMass",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_translateMass",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_translateMass",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (*arg1)->translateMass((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_rotateMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("rotateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotateMass",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotateMass",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_rotateMass",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_rotateMass",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (*arg1)->rotateMass((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDamping",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setDamping",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setDamping",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setDamping",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (*arg1)->setDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_setDampingDefaults(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  
  SWIG_check_num_args("setDampingDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDampingDefaults",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_setDampingDefaults",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  (*arg1)->setDampingDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getType",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getTypeId",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getGroupId",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getTypeName",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getProducerType",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getId",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getNumFields",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::PhysicsBodyRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_attachActivity",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::PhysicsBodyRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::PhysicsBodyRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::PhysicsBodyRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::PhysicsBodyRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsBodyRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsBodyRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsBodyRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsBodyRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsBodyRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsBodyRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsBodyRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::PhysicsBodyRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::PhysicsBodyRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsBodyRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsBodyRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsBodyRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,0))){
    SWIG_fail_ptr("PhysicsBodyRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsBodyRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsBodyRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsBodyRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsBodyRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsBodyRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsBodyRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::PhysicsBodyRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::PhysicsBodyRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_PhysicsBodyRefPtr(void *obj) {
OSG::PhysicsBodyRefPtr *arg1 = (OSG::PhysicsBodyRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_PhysicsBodyRefPtr_methods[] = {
    {"__deref__", _wrap_PhysicsBodyRefPtr___deref__}, 
    {"create", _wrap_PhysicsBodyRefPtr_create}, 
    {"setEnable", _wrap_PhysicsBodyRefPtr_setEnable}, 
    {"getEnable", _wrap_PhysicsBodyRefPtr_getEnable}, 
    {"addForce", _wrap_PhysicsBodyRefPtr_addForce}, 
    {"addTorque", _wrap_PhysicsBodyRefPtr_addTorque}, 
    {"addRelForce", _wrap_PhysicsBodyRefPtr_addRelForce}, 
    {"addRelTorque", _wrap_PhysicsBodyRefPtr_addRelTorque}, 
    {"addForceAtPos", _wrap_PhysicsBodyRefPtr_addForceAtPos}, 
    {"addForceAtRelPos", _wrap_PhysicsBodyRefPtr_addForceAtRelPos}, 
    {"addRelForceAtPos", _wrap_PhysicsBodyRefPtr_addRelForceAtPos}, 
    {"addRelForceAtRelPos", _wrap_PhysicsBodyRefPtr_addRelForceAtRelPos}, 
    {"getRelPointPos", _wrap_PhysicsBodyRefPtr_getRelPointPos}, 
    {"getRelPointVel", _wrap_PhysicsBodyRefPtr_getRelPointVel}, 
    {"getPointVel", _wrap_PhysicsBodyRefPtr_getPointVel}, 
    {"getPosRelPoint", _wrap_PhysicsBodyRefPtr_getPosRelPoint}, 
    {"vectorToWorld", _wrap_PhysicsBodyRefPtr_vectorToWorld}, 
    {"vectorFromWorld", _wrap_PhysicsBodyRefPtr_vectorFromWorld}, 
    {"setAutoDisableDefaults", _wrap_PhysicsBodyRefPtr_setAutoDisableDefaults}, 
    {"getNumJoints", _wrap_PhysicsBodyRefPtr_getNumJoints}, 
    {"initDefaults", _wrap_PhysicsBodyRefPtr_initDefaults}, 
    {"resetMass", _wrap_PhysicsBodyRefPtr_resetMass}, 
    {"setMassParams", _wrap_PhysicsBodyRefPtr_setMassParams}, 
    {"setSphereMass", _wrap_PhysicsBodyRefPtr_setSphereMass}, 
    {"setSphereMassTotal", _wrap_PhysicsBodyRefPtr_setSphereMassTotal}, 
    {"setCapsuleMass", _wrap_PhysicsBodyRefPtr_setCapsuleMass}, 
    {"setCapsuleMassTotal", _wrap_PhysicsBodyRefPtr_setCapsuleMassTotal}, 
    {"setBoxMass", _wrap_PhysicsBodyRefPtr_setBoxMass}, 
    {"setBoxMassTotal", _wrap_PhysicsBodyRefPtr_setBoxMassTotal}, 
    {"adjustMass", _wrap_PhysicsBodyRefPtr_adjustMass}, 
    {"translateMass", _wrap_PhysicsBodyRefPtr_translateMass}, 
    {"rotateMass", _wrap_PhysicsBodyRefPtr_rotateMass}, 
    {"setDamping", _wrap_PhysicsBodyRefPtr_setDamping}, 
    {"setDampingDefaults", _wrap_PhysicsBodyRefPtr_setDampingDefaults}, 
    {"getType", _wrap_PhysicsBodyRefPtr_getType}, 
    {"shallowCopy", _wrap_PhysicsBodyRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_PhysicsBodyRefPtr_getTypeId}, 
    {"getGroupId", _wrap_PhysicsBodyRefPtr_getGroupId}, 
    {"getTypeName", _wrap_PhysicsBodyRefPtr_getTypeName}, 
    {"getProducerType", _wrap_PhysicsBodyRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_PhysicsBodyRefPtr_getContainerSize}, 
    {"getId", _wrap_PhysicsBodyRefPtr_getId}, 
    {"getNumFields", _wrap_PhysicsBodyRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_PhysicsBodyRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_PhysicsBodyRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_PhysicsBodyRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_PhysicsBodyRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_PhysicsBodyRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_PhysicsBodyRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_PhysicsBodyRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_PhysicsBodyRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_PhysicsBodyRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsBodyRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsBodyRefPtr_bases[] = {0,0};
static const char *swig_OSG_PhysicsBodyRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_PhysicsBodyRefPtr = { "PhysicsBodyRefPtr", &SWIGTYPE_p_OSG__PhysicsBodyRefPtr,_wrap_new_PhysicsBodyRefPtr, swig_delete_PhysicsBodyRefPtr, swig_OSG_PhysicsBodyRefPtr_methods, swig_OSG_PhysicsBodyRefPtr_attributes, swig_OSG_PhysicsBodyRefPtr_bases, swig_OSG_PhysicsBodyRefPtr_base_names };

static int _wrap_PhysicsBody_create(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsWorldRefPtr arg1 ;
  OSG::PhysicsWorldRefPtr *argp1 ;
  OSG::PhysicsBodyRefPtr result;
  
  SWIG_check_num_args("OSG::PhysicsBody::create",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::PhysicsBody::create",1,"OSG::PhysicsWorldRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr,0))){
    SWIG_fail_ptr("PhysicsBody_create",1,SWIGTYPE_p_OSG__PhysicsWorldRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG::PhysicsBody::create(arg1);
  {
    OSG::PhysicsBodyRefPtr * resultptr = new OSG::PhysicsBodyRefPtr((const OSG::PhysicsBodyRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsBodyRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setEnable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEnable",1,"OSG::PhysicsBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setEnable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setEnable",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setEnable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getEnable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("getEnable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEnable",1,"OSG::PhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getEnable",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  result = (bool)((OSG::PhysicsBody const *)arg1)->getEnable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addForce(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForce",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForce",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addForce",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForce",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addForce((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addTorque(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addTorque",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addTorque",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addTorque",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addTorque",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addTorque((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelForce(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForce",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForce",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForce",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForce",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addRelForce((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelTorque(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelTorque",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelTorque",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelTorque",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelTorque",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addRelTorque((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtPos",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtPos",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addForceAtPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtRelPos",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtRelPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtRelPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtRelPos",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtRelPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtRelPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addForceAtRelPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtPos",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtPos",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addRelForceAtPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtRelPos",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtRelPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtRelPos",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtRelPos",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtRelPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtRelPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->addRelForceAtRelPos((OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getRelPointPos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointPos",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointPos",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointPos",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointPos",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointPos",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointPos",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->getRelPointPos((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getRelPointVel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointVel",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointVel",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointVel",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointVel",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointVel",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointVel",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->getRelPointVel((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getPointVel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPointVel",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPointVel",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPointVel",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getPointVel",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPointVel",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPointVel",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->getPointVel((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getPosRelPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPosRelPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosRelPoint",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPosRelPoint",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPosRelPoint",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getPosRelPoint",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPosRelPoint",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPosRelPoint",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->getPosRelPoint((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_vectorToWorld(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorToWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorToWorld",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorToWorld",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorToWorld",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_vectorToWorld",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorToWorld",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorToWorld",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->vectorToWorld((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_vectorFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorFromWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorFromWorld",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorFromWorld",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorFromWorld",3,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_vectorFromWorld",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorFromWorld",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorFromWorld",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->vectorFromWorld((OSG::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setAutoDisableDefaults(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("setAutoDisableDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAutoDisableDefaults",1,"OSG::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setAutoDisableDefaults",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  (arg1)->setAutoDisableDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getNumJoints(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getNumJoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumJoints",1,"OSG::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getNumJoints",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  result = (OSG::Int32)(arg1)->getNumJoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_initDefaults(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("initDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initDefaults",1,"OSG::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_initDefaults",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  (arg1)->initDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_resetMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("resetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetMass",1,"OSG::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_resetMass",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  (arg1)->resetMass();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setMassParams(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  OSG::Real32 arg6 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Real32 arg9 ;
  
  SWIG_check_num_args("setMassParams",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMassParams",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setMassParams",2,"OSG::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setMassParams",3,"OSG::Vec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setMassParams",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setMassParams",5,"OSG::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setMassParams",6,"OSG::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setMassParams",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("setMassParams",8,"OSG::Real32");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("setMassParams",9,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setMassParams",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_setMassParams",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  arg9 = (OSG::Real32)lua_tonumber(L, 9);
  (arg1)->setMassParams(arg2,(OSG::Vec3f const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setSphereMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMass",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMass",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMass",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setSphereMass",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (arg1)->setSphereMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setSphereMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMassTotal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMassTotal",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMassTotal",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMassTotal",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setSphereMassTotal",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (arg1)->setSphereMassTotal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setCapsuleMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMass",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMass",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMass",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMass",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMass",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setCapsuleMass",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (arg1)->setCapsuleMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setCapsuleMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMassTotal",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMassTotal",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMassTotal",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMassTotal",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMassTotal",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setCapsuleMassTotal",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (arg1)->setCapsuleMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setBoxMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMass",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMass",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMass",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMass",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMass",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setBoxMass",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (arg1)->setBoxMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setBoxMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMassTotal",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMassTotal",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMassTotal",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMassTotal",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMassTotal",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setBoxMassTotal",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (arg1)->setBoxMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_adjustMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("adjustMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adjustMass",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adjustMass",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_adjustMass",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (arg1)->adjustMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_translateMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("translateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("translateMass",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("translateMass",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_translateMass",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_translateMass",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->translateMass((OSG::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_rotateMass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("rotateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotateMass",1,"OSG::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotateMass",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_rotateMass",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("PhysicsBody_rotateMass",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->rotateMass((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDamping",1,"OSG::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setDamping",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setDamping",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setDamping",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (arg1)->setDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setDampingDefaults(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsBody *arg1 = (OSG::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("setDampingDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDampingDefaults",1,"OSG::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setDampingDefaults",1,SWIGTYPE_p_OSG__PhysicsBody);
  }
  
  (arg1)->setDampingDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_PhysicsBody_methods[] = {
    {"setEnable", _wrap_PhysicsBody_setEnable}, 
    {"getEnable", _wrap_PhysicsBody_getEnable}, 
    {"addForce", _wrap_PhysicsBody_addForce}, 
    {"addTorque", _wrap_PhysicsBody_addTorque}, 
    {"addRelForce", _wrap_PhysicsBody_addRelForce}, 
    {"addRelTorque", _wrap_PhysicsBody_addRelTorque}, 
    {"addForceAtPos", _wrap_PhysicsBody_addForceAtPos}, 
    {"addForceAtRelPos", _wrap_PhysicsBody_addForceAtRelPos}, 
    {"addRelForceAtPos", _wrap_PhysicsBody_addRelForceAtPos}, 
    {"addRelForceAtRelPos", _wrap_PhysicsBody_addRelForceAtRelPos}, 
    {"getRelPointPos", _wrap_PhysicsBody_getRelPointPos}, 
    {"getRelPointVel", _wrap_PhysicsBody_getRelPointVel}, 
    {"getPointVel", _wrap_PhysicsBody_getPointVel}, 
    {"getPosRelPoint", _wrap_PhysicsBody_getPosRelPoint}, 
    {"vectorToWorld", _wrap_PhysicsBody_vectorToWorld}, 
    {"vectorFromWorld", _wrap_PhysicsBody_vectorFromWorld}, 
    {"setAutoDisableDefaults", _wrap_PhysicsBody_setAutoDisableDefaults}, 
    {"getNumJoints", _wrap_PhysicsBody_getNumJoints}, 
    {"initDefaults", _wrap_PhysicsBody_initDefaults}, 
    {"resetMass", _wrap_PhysicsBody_resetMass}, 
    {"setMassParams", _wrap_PhysicsBody_setMassParams}, 
    {"setSphereMass", _wrap_PhysicsBody_setSphereMass}, 
    {"setSphereMassTotal", _wrap_PhysicsBody_setSphereMassTotal}, 
    {"setCapsuleMass", _wrap_PhysicsBody_setCapsuleMass}, 
    {"setCapsuleMassTotal", _wrap_PhysicsBody_setCapsuleMassTotal}, 
    {"setBoxMass", _wrap_PhysicsBody_setBoxMass}, 
    {"setBoxMassTotal", _wrap_PhysicsBody_setBoxMassTotal}, 
    {"adjustMass", _wrap_PhysicsBody_adjustMass}, 
    {"translateMass", _wrap_PhysicsBody_translateMass}, 
    {"rotateMass", _wrap_PhysicsBody_rotateMass}, 
    {"setDamping", _wrap_PhysicsBody_setDamping}, 
    {"setDampingDefaults", _wrap_PhysicsBody_setDampingDefaults}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsBody_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsBody_bases[] = {0,0};
static const char *swig_OSG_PhysicsBody_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_PhysicsBody = { "PhysicsBody", &SWIGTYPE_p_OSG__PhysicsBody,0,0, swig_OSG_PhysicsBody_methods, swig_OSG_PhysicsBody_attributes, swig_OSG_PhysicsBody_bases, swig_OSG_PhysicsBody_base_names };

static int _wrap_PhysicsSpace_isPlaceable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpace *arg1 = (OSG::PhysicsSpace *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaceable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaceable",1,"OSG::PhysicsSpace const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpace,0))){
    SWIG_fail_ptr("PhysicsSpace_isPlaceable",1,SWIGTYPE_p_OSG__PhysicsSpace);
  }
  
  result = (bool)((OSG::PhysicsSpace const *)arg1)->isPlaceable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpace_discardLastCollision(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpace *arg1 = (OSG::PhysicsSpace *) 0 ;
  
  SWIG_check_num_args("discardLastCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("discardLastCollision",1,"OSG::PhysicsSpace *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpace,0))){
    SWIG_fail_ptr("PhysicsSpace_discardLastCollision",1,SWIGTYPE_p_OSG__PhysicsSpace);
  }
  
  (arg1)->discardLastCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_PhysicsSpace_methods[] = {
    {"isPlaceable", _wrap_PhysicsSpace_isPlaceable}, 
    {"discardLastCollision", _wrap_PhysicsSpace_discardLastCollision}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsSpace_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsSpace_bases[] = {0,0};
static const char *swig_OSG_PhysicsSpace_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_PhysicsSpace = { "PhysicsSpace", &SWIGTYPE_p_OSG__PhysicsSpace,0,0, swig_OSG_PhysicsSpace_methods, swig_OSG_PhysicsSpace_attributes, swig_OSG_PhysicsSpace_bases, swig_OSG_PhysicsSpace_base_names };

static int _wrap_new_PhysicsSpaceRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsSpaceRefPtr",0,0)
  result = (OSG::PhysicsSpaceRefPtr *)new OSG::PhysicsSpaceRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsSpaceRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = 0 ;
  OSG::PhysicsSpaceRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::PhysicsSpaceRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::PhysicsSpaceRefPtr",1,"OSG::PhysicsSpaceRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("new_PhysicsSpaceRefPtr",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::PhysicsSpaceRefPtr *)new OSG::PhysicsSpaceRefPtr((OSG::PhysicsSpaceRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsSpaceRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsSpaceRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsSpaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsSpaceRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PhysicsSpaceRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::PhysicsSpaceRefPtr()\n"
    "    OSG::PhysicsSpaceRefPtr(OSG::PhysicsSpaceRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsSpaceRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::PhysicsSpace *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::PhysicsSpaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr___deref__",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::PhysicsSpace *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__PhysicsSpace,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::PhysicsSpaceRefPtr result;
  
  SWIG_check_num_args("OSG_PhysicsSpaceRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_PhysicsSpaceRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_PhysicsSpaceRefPtr_dcast(arg1);
  {
    OSG::PhysicsSpaceRefPtr * resultptr = new OSG::PhysicsSpaceRefPtr((const OSG::PhysicsSpaceRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_isPlaceable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaceable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaceable",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_isPlaceable",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (bool)(*arg1)->isPlaceable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_discardLastCollision(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  
  SWIG_check_num_args("discardLastCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("discardLastCollision",1,"OSG::PhysicsSpaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_discardLastCollision",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  (*arg1)->discardLastCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::PhysicsSpaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getType",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getTypeId",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getGroupId",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getTypeName",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getProducerType",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getId",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getNumFields",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::PhysicsSpaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::PhysicsSpaceRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_attachActivity",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::PhysicsSpaceRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::PhysicsSpaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::PhysicsSpaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::PhysicsSpaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsSpaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::PhysicsSpaceRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsSpaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsSpaceRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsSpaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsSpaceRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsSpaceRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::PhysicsSpaceRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::PhysicsSpaceRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsSpaceRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsSpaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::PhysicsSpaceRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,0))){
    SWIG_fail_ptr("PhysicsSpaceRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__PhysicsSpaceRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsSpaceRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsSpaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsSpaceRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__PhysicsSpaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsSpaceRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsSpaceRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::PhysicsSpaceRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::PhysicsSpaceRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_PhysicsSpaceRefPtr(void *obj) {
OSG::PhysicsSpaceRefPtr *arg1 = (OSG::PhysicsSpaceRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_PhysicsSpaceRefPtr_methods[] = {
    {"__deref__", _wrap_PhysicsSpaceRefPtr___deref__}, 
    {"isPlaceable", _wrap_PhysicsSpaceRefPtr_isPlaceable}, 
    {"discardLastCollision", _wrap_PhysicsSpaceRefPtr_discardLastCollision}, 
    {"getType", _wrap_PhysicsSpaceRefPtr_getType}, 
    {"shallowCopy", _wrap_PhysicsSpaceRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_PhysicsSpaceRefPtr_getTypeId}, 
    {"getGroupId", _wrap_PhysicsSpaceRefPtr_getGroupId}, 
    {"getTypeName", _wrap_PhysicsSpaceRefPtr_getTypeName}, 
    {"getProducerType", _wrap_PhysicsSpaceRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_PhysicsSpaceRefPtr_getContainerSize}, 
    {"getId", _wrap_PhysicsSpaceRefPtr_getId}, 
    {"getNumFields", _wrap_PhysicsSpaceRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_PhysicsSpaceRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_PhysicsSpaceRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_PhysicsSpaceRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_PhysicsSpaceRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_PhysicsSpaceRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_PhysicsSpaceRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_PhysicsSpaceRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_PhysicsSpaceRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_PhysicsSpaceRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_PhysicsSpaceRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_PhysicsSpaceRefPtr_bases[] = {0,0};
static const char *swig_OSG_PhysicsSpaceRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_PhysicsSpaceRefPtr = { "PhysicsSpaceRefPtr", &SWIGTYPE_p_OSG__PhysicsSpaceRefPtr,_wrap_new_PhysicsSpaceRefPtr, swig_delete_PhysicsSpaceRefPtr, swig_OSG_PhysicsSpaceRefPtr_methods, swig_OSG_PhysicsSpaceRefPtr_attributes, swig_OSG_PhysicsSpaceRefPtr_bases, swig_OSG_PhysicsSpaceRefPtr_base_names };

static swig_lua_method swig_OSG_KeyEventDetails_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_KeyEventDetails_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_KeyEventDetails_bases[] = {0};
static const char *swig_OSG_KeyEventDetails_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_KeyEventDetails = { "KeyEventDetails", &SWIGTYPE_p_OSG__KeyEventDetails,0,0, swig_OSG_KeyEventDetails_methods, swig_OSG_KeyEventDetails_attributes, swig_OSG_KeyEventDetails_bases, swig_OSG_KeyEventDetails_base_names };

static int _wrap_new_ParticleSystemRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ParticleSystemRefPtr",0,0)
  result = (OSG::ParticleSystemRefPtr *)new OSG::ParticleSystemRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ParticleSystemRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleSystemRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = 0 ;
  OSG::ParticleSystemRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ParticleSystemRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::ParticleSystemRefPtr",1,"OSG::ParticleSystemRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("new_ParticleSystemRefPtr",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::ParticleSystemRefPtr *)new OSG::ParticleSystemRefPtr((OSG::ParticleSystemRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ParticleSystemRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleSystemRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParticleSystemRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ParticleSystemRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ParticleSystemRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::ParticleSystemRefPtr()\n"
    "    OSG::ParticleSystemRefPtr(OSG::ParticleSystemRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::ParticleSystemRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr___deref__",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::ParticleSystem *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::ParticleSystemRefPtr result;
  
  SWIG_check_num_args("OSG_ParticleSystemRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ParticleSystemRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_ParticleSystemRefPtr_dcast(arg1);
  {
    OSG::ParticleSystemRefPtr * resultptr = new OSG::ParticleSystemRefPtr((const OSG::ParticleSystemRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ParticleSystemRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getNumParticles(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumParticles",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getNumParticles",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumParticles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPosition",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getPosition",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Pnt3f *) &(*arg1)->getPosition((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getSecPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecPosition",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecPosition",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getSecPosition",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Pnt3f *) &(*arg1)->getSecPosition((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getPositionChange(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("getPositionChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionChange",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPositionChange",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getPositionChange",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (*arg1)->getPositionChange((OSG::UInt32 const &)*arg2);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getNormal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getNormal",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getNormal",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &(*arg1)->getNormal((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getColor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Color4f *result = 0 ;
  
  SWIG_check_num_args("getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getColor",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getColor",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getColor",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Color4f *) &(*arg1)->getColor((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color4f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSize",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getSize",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &(*arg1)->getSize((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getLifespan(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getLifespan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLifespan",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getLifespan",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getLifespan",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Real32)(*arg1)->getLifespan((OSG::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getAge(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAge",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAge",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getAge",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Real32)(*arg1)->getAge((OSG::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocity",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocity",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getVelocity",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &(*arg1)->getVelocity((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSecVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecVelocity",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecVelocity",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getSecVelocity",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &(*arg1)->getSecVelocity((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getVelocityChange(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("getVelocityChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocityChange",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocityChange",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getVelocityChange",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (*arg1)->getVelocityChange((OSG::UInt32 const &)*arg2);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAcceleration",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAcceleration",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getAcceleration",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &(*arg1)->getAcceleration((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getAttribute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OSG::UInt32 temp2 ;
  std::string temp3 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttribute",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttribute",2,"OSG::UInt32 const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("getAttribute",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getAttribute",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (OSG::UInt32)(*arg1)->getAttribute((OSG::UInt32 const &)*arg2,(std::string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getID(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getID",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getID",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getID",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::UInt32)(*arg1)->getID((OSG::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getIndex(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int64 result;
  
  SWIG_check_num_args("getIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getIndex",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getIndex",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getIndex",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::Int64)(*arg1)->getIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getAttributes(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  std::map< std::string,OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("getAttributes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttributes",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttributes",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getAttributes",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (std::map< std::string,OSG::UInt32 > *) &(*arg1)->getAttributes((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setPosition",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setPosition",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setPosition",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setPosition((OSG::Pnt3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecPosition",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecPosition",2,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecPosition",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setSecPosition",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setSecPosition",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setSecPosition((OSG::Pnt3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setNormal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNormal",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setNormal",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setNormal",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setNormal",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setNormal",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setNormal((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setColor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Color4f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setColor",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setColor",2,"OSG::Color4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setColor",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setColor",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setColor",2,SWIGTYPE_p_OSG__Color4f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setColor((OSG::Color4f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSize",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSize",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSize",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setSize",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setSize",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setSize((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setLifespan(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::Time temp2 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setLifespan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLifespan",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setLifespan",2,"OSG::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setLifespan",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setLifespan",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setLifespan((OSG::Time const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setAge(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::Time temp2 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setAge",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAge",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAge",2,"OSG::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAge",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setAge",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setAge((OSG::Time const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocity",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocity",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVelocity",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setVelocity",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setVelocity",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setVelocity((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecVelocity",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecVelocity",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecVelocity",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setSecVelocity",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setSecVelocity",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setSecVelocity((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAcceleration",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAcceleration",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAcceleration",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setAcceleration",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setAcceleration",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setAcceleration((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setAttribute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 *arg4 = 0 ;
  std::string temp2 ;
  OSG::UInt32 temp4 ;
  
  SWIG_check_num_args("setAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttribute",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setAttribute",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAttribute",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setAttribute",4,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setAttribute",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  (*arg1)->setAttribute((std::string const &)*arg2,arg3,(OSG::UInt32 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_setAttributes(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  std::map< std::string,OSG::UInt32 > *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setAttributes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttributes",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAttributes",2,"std::map< std::string,OSG::UInt32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAttributes",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setAttributes",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_setAttributes",2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setAttributes((std::map< std::string,OSG::UInt32 > const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Color4f *arg5 = 0 ;
  OSG::Vec3f *arg6 = 0 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Vec3f *arg9 = 0 ;
  OSG::Vec3f *arg10 = 0 ;
  OSG::Vec3f *arg11 = 0 ;
  std::map< std::string,OSG::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addParticle",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addParticle",3,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addParticle",4,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addParticle",5,"OSG::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addParticle",6,"OSG::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addParticle",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addParticle",8,"OSG::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addParticle",9,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addParticle",10,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addParticle",11,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addParticle",12,"std::map< std::string,OSG::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",5,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",6,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",9,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",10,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",11,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(*arg1)->addParticle((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,(OSG::Vec3f const &)*arg4,(OSG::Color4f const &)*arg5,(OSG::Vec3f const &)*arg6,arg7,arg8,(OSG::Vec3f const &)*arg9,(OSG::Vec3f const &)*arg10,(OSG::Vec3f const &)*arg11,(std::map< std::string,OSG::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Color4f *arg4 = 0 ;
  OSG::Vec3f *arg5 = 0 ;
  OSG::Real32 arg6 ;
  OSG::Vec3f *arg7 = 0 ;
  OSG::Vec3f *arg8 = 0 ;
  bool result;
  
  SWIG_check_num_args("addParticle",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addParticle",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addParticle",3,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addParticle",4,"OSG::Color4f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addParticle",5,"OSG::Vec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("addParticle",6,"OSG::Real32");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("addParticle",7,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("addParticle",8,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",4,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",7,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addParticle",8,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)(*arg1)->addParticle((OSG::Pnt3f const &)*arg2,(OSG::Vec3f const &)*arg3,(OSG::Color4f const &)*arg4,(OSG::Vec3f const &)*arg5,arg6,(OSG::Vec3f const &)*arg7,(OSG::Vec3f const &)*arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addParticle(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ParticleSystemRefPtr_addParticle__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          void *ptr;
                          if (lua_isuserdata(L,argv[10])==0 || SWIG_ConvertPtr(L,argv[10], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                            _v = 0;
                          } else {
                            _v = 1;
                          }
                        }
                        if (_v) {
                          {
                            void *ptr;
                            if (lua_isuserdata(L,argv[11])==0 || SWIG_ConvertPtr(L,argv[11], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_unsigned_int_t, 0)) {
                              _v = 0;
                            } else {
                              _v = 1;
                            }
                          }
                          if (_v) {
                            return _wrap_ParticleSystemRefPtr_addParticle__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_addParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addParticle(OSG::ParticleSystemRefPtr *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &,OSG::Vec3f const &,std::map< std::string,OSG::UInt32 > const &)\n"
    "    addParticle(OSG::ParticleSystemRefPtr *,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_addWorldSpaceParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Color4f *arg5 = 0 ;
  OSG::Vec3f *arg6 = 0 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Vec3f *arg9 = 0 ;
  OSG::Vec3f *arg10 = 0 ;
  OSG::Vec3f *arg11 = 0 ;
  std::map< std::string,OSG::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addWorldSpaceParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addWorldSpaceParticle",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addWorldSpaceParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addWorldSpaceParticle",3,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addWorldSpaceParticle",4,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addWorldSpaceParticle",5,"OSG::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addWorldSpaceParticle",6,"OSG::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addWorldSpaceParticle",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addWorldSpaceParticle",8,"OSG::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addWorldSpaceParticle",9,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addWorldSpaceParticle",10,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addWorldSpaceParticle",11,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addWorldSpaceParticle",12,"std::map< std::string,OSG::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",5,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",6,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",9,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",10,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",11,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(*arg1)->addWorldSpaceParticle((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,(OSG::Vec3f const &)*arg4,(OSG::Color4f const &)*arg5,(OSG::Vec3f const &)*arg6,arg7,arg8,(OSG::Vec3f const &)*arg9,(OSG::Vec3f const &)*arg10,(OSG::Vec3f const &)*arg11,(std::map< std::string,OSG::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addWorldSpaceParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Color4f *arg4 = 0 ;
  OSG::Vec3f *arg5 = 0 ;
  OSG::Real32 arg6 ;
  OSG::Vec3f *arg7 = 0 ;
  OSG::Vec3f *arg8 = 0 ;
  bool result;
  
  SWIG_check_num_args("addWorldSpaceParticle",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addWorldSpaceParticle",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addWorldSpaceParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addWorldSpaceParticle",3,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addWorldSpaceParticle",4,"OSG::Color4f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addWorldSpaceParticle",5,"OSG::Vec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("addWorldSpaceParticle",6,"OSG::Real32");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("addWorldSpaceParticle",7,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("addWorldSpaceParticle",8,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",4,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",7,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addWorldSpaceParticle",8,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)(*arg1)->addWorldSpaceParticle((OSG::Pnt3f const &)*arg2,(OSG::Vec3f const &)*arg3,(OSG::Color4f const &)*arg4,(OSG::Vec3f const &)*arg5,arg6,(OSG::Vec3f const &)*arg7,(OSG::Vec3f const &)*arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addWorldSpaceParticle(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ParticleSystemRefPtr_addWorldSpaceParticle__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          void *ptr;
                          if (lua_isuserdata(L,argv[10])==0 || SWIG_ConvertPtr(L,argv[10], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                            _v = 0;
                          } else {
                            _v = 1;
                          }
                        }
                        if (_v) {
                          {
                            void *ptr;
                            if (lua_isuserdata(L,argv[11])==0 || SWIG_ConvertPtr(L,argv[11], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_unsigned_int_t, 0)) {
                              _v = 0;
                            } else {
                              _v = 1;
                            }
                          }
                          if (_v) {
                            return _wrap_ParticleSystemRefPtr_addWorldSpaceParticle__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_addWorldSpaceParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addWorldSpaceParticle(OSG::ParticleSystemRefPtr *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &,OSG::Vec3f const &,std::map< std::string,OSG::UInt32 > const &)\n"
    "    addWorldSpaceParticle(OSG::ParticleSystemRefPtr *,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_killParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("killParticle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticle",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticle",2,"OSG::UInt32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("killParticle",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_killParticle",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(*arg1)->killParticle(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_killParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("killParticle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticle",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticle",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_killParticle",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->killParticle(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_killParticle(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_killParticle__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_killParticle__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_killParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    killParticle(OSG::ParticleSystemRefPtr *,OSG::UInt32,bool)\n"
    "    killParticle(OSG::ParticleSystemRefPtr *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_killParticleByID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("killParticleByID",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticleByID",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticleByID",2,"OSG::UInt32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("killParticleByID",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_killParticleByID",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(*arg1)->killParticleByID(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_killParticleByID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("killParticleByID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticleByID",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticleByID",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_killParticleByID",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->killParticleByID(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_killParticleByID(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_killParticleByID__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_killParticleByID__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_killParticleByID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    killParticleByID(OSG::ParticleSystemRefPtr *,OSG::UInt32,bool)\n"
    "    killParticleByID(OSG::ParticleSystemRefPtr *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::ParticleSystemRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_detachUpdateProducer",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  (*arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  bool arg5 ;
  OSG::NodeRefPtr arg6 ;
  OSG::NodeRefPtr *argp6 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("intersect",5,"bool");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("intersect",6,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",6,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg6 = *argp6;
  
  result = (*arg1)->intersect((OSG::Line const &)*arg2,arg3,arg4,arg5,arg6);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  bool arg5 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("intersect",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (*arg1)->intersect((OSG::Line const &)*arg2,arg3,arg4,arg5);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  result = (*arg1)->intersect((OSG::Line const &)*arg2,arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Real32 arg4 ;
  OSG::NodeRefPtr arg5 ;
  OSG::NodeRefPtr *argp5 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("intersect",5,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",5,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg5 = *argp5;
  
  result = (*arg1)->intersect((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,arg4,arg5);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Real32 arg4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  result = (*arg1)->intersect((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Volume *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::NodeRefPtr arg4 ;
  OSG::NodeRefPtr *argp4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Volume const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__Volume);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",4,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg4 = *argp4;
  
  result = (*arg1)->intersect((OSG::Volume const &)*arg2,arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Volume *arg2 = 0 ;
  OSG::Real32 arg3 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Volume const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__Volume);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  result = (*arg1)->intersect((OSG::Volume const &)*arg2,arg3);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::NodeRefPtr arg2 ;
  bool arg3 ;
  OSG::NodeRefPtr arg4 ;
  OSG::NodeRefPtr *argp2 ;
  OSG::NodeRefPtr *argp4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::NodeRefPtr const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("intersect",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",4,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg4 = *argp4;
  
  result = (*arg1)->intersect(arg2,arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::NodeRefPtr arg2 ;
  bool arg3 ;
  OSG::NodeRefPtr *argp2 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::NodeRefPtr const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("intersect",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (*arg1)->intersect(arg2,arg3);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::NodeRefPtr arg2 ;
  OSG::NodeRefPtr *argp2 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::NodeRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_intersect",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  result = (*arg1)->intersect(arg2);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_intersect(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_intersect__SWIG_9(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_intersect__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_intersect__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystemRefPtr_intersect__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleSystemRefPtr_intersect__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystemRefPtr_intersect__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleSystemRefPtr_intersect__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_ParticleSystemRefPtr_intersect__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ParticleSystemRefPtr_intersect__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ParticleSystemRefPtr_intersect__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::Line const &,OSG::Real32,OSG::Real32,bool,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::Line const &,OSG::Real32,OSG::Real32,bool)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::Line const &,OSG::Real32,OSG::Real32)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Real32,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Real32)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::Volume const &,OSG::Real32,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::Volume const &,OSG::Real32)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::NodeRefPtr const,bool,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::NodeRefPtr const,bool)\n"
    "    intersect(OSG::ParticleSystemRefPtr const *,OSG::NodeRefPtr const)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_attachUpdateProducer",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_ParticleSystem_attachUpdateProducer((OSG::ParticleSystem*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::ParticleSystemRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::ParticleSystemRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::ParticleSystemRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::ParticleSystemRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::ParticleSystemRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::ParticleSystemRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::ParticleSystemRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::ParticleSystemRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ParticleSystemRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getType",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getTypeId",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getGroupId",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getTypeName",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getProducerType",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getId",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getNumFields",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ParticleSystemRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_attachActivity",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ParticleSystemRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ParticleSystemRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ParticleSystemRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ParticleSystemRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ParticleSystemRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ParticleSystemRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ParticleSystemRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ParticleSystemRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystemRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ParticleSystemRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ParticleSystemRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_ParticleSystemRefPtr(void *obj) {
OSG::ParticleSystemRefPtr *arg1 = (OSG::ParticleSystemRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ParticleSystemRefPtr_methods[] = {
    {"__deref__", _wrap_ParticleSystemRefPtr___deref__}, 
    {"getNumParticles", _wrap_ParticleSystemRefPtr_getNumParticles}, 
    {"getPosition", _wrap_ParticleSystemRefPtr_getPosition}, 
    {"getSecPosition", _wrap_ParticleSystemRefPtr_getSecPosition}, 
    {"getPositionChange", _wrap_ParticleSystemRefPtr_getPositionChange}, 
    {"getNormal", _wrap_ParticleSystemRefPtr_getNormal}, 
    {"getColor", _wrap_ParticleSystemRefPtr_getColor}, 
    {"getSize", _wrap_ParticleSystemRefPtr_getSize}, 
    {"getLifespan", _wrap_ParticleSystemRefPtr_getLifespan}, 
    {"getAge", _wrap_ParticleSystemRefPtr_getAge}, 
    {"getVelocity", _wrap_ParticleSystemRefPtr_getVelocity}, 
    {"getSecVelocity", _wrap_ParticleSystemRefPtr_getSecVelocity}, 
    {"getVelocityChange", _wrap_ParticleSystemRefPtr_getVelocityChange}, 
    {"getAcceleration", _wrap_ParticleSystemRefPtr_getAcceleration}, 
    {"getAttribute", _wrap_ParticleSystemRefPtr_getAttribute}, 
    {"getID", _wrap_ParticleSystemRefPtr_getID}, 
    {"getIndex", _wrap_ParticleSystemRefPtr_getIndex}, 
    {"getAttributes", _wrap_ParticleSystemRefPtr_getAttributes}, 
    {"setPosition", _wrap_ParticleSystemRefPtr_setPosition}, 
    {"setSecPosition", _wrap_ParticleSystemRefPtr_setSecPosition}, 
    {"setNormal", _wrap_ParticleSystemRefPtr_setNormal}, 
    {"setColor", _wrap_ParticleSystemRefPtr_setColor}, 
    {"setSize", _wrap_ParticleSystemRefPtr_setSize}, 
    {"setLifespan", _wrap_ParticleSystemRefPtr_setLifespan}, 
    {"setAge", _wrap_ParticleSystemRefPtr_setAge}, 
    {"setVelocity", _wrap_ParticleSystemRefPtr_setVelocity}, 
    {"setSecVelocity", _wrap_ParticleSystemRefPtr_setSecVelocity}, 
    {"setAcceleration", _wrap_ParticleSystemRefPtr_setAcceleration}, 
    {"setAttribute", _wrap_ParticleSystemRefPtr_setAttribute}, 
    {"setAttributes", _wrap_ParticleSystemRefPtr_setAttributes}, 
    {"addParticle", _wrap_ParticleSystemRefPtr_addParticle}, 
    {"addWorldSpaceParticle", _wrap_ParticleSystemRefPtr_addWorldSpaceParticle}, 
    {"killParticle", _wrap_ParticleSystemRefPtr_killParticle}, 
    {"killParticleByID", _wrap_ParticleSystemRefPtr_killParticleByID}, 
    {"detachUpdateProducer", _wrap_ParticleSystemRefPtr_detachUpdateProducer}, 
    {"intersect", _wrap_ParticleSystemRefPtr_intersect}, 
    {"attachUpdateProducer", _wrap_ParticleSystemRefPtr_attachUpdateProducer}, 
    {"addAttachment", _wrap_ParticleSystemRefPtr_addAttachment}, 
    {"subAttachment", _wrap_ParticleSystemRefPtr_subAttachment}, 
    {"findAttachment", _wrap_ParticleSystemRefPtr_findAttachment}, 
    {"getType", _wrap_ParticleSystemRefPtr_getType}, 
    {"shallowCopy", _wrap_ParticleSystemRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_ParticleSystemRefPtr_getTypeId}, 
    {"getGroupId", _wrap_ParticleSystemRefPtr_getGroupId}, 
    {"getTypeName", _wrap_ParticleSystemRefPtr_getTypeName}, 
    {"getProducerType", _wrap_ParticleSystemRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_ParticleSystemRefPtr_getContainerSize}, 
    {"getId", _wrap_ParticleSystemRefPtr_getId}, 
    {"getNumFields", _wrap_ParticleSystemRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_ParticleSystemRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_ParticleSystemRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_ParticleSystemRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ParticleSystemRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ParticleSystemRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ParticleSystemRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_ParticleSystemRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_ParticleSystemRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_ParticleSystemRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ParticleSystemRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ParticleSystemRefPtr_bases[] = {0,0};
static const char *swig_OSG_ParticleSystemRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_ParticleSystemRefPtr = { "ParticleSystemRefPtr", &SWIGTYPE_p_OSG__ParticleSystemRefPtr,_wrap_new_ParticleSystemRefPtr, swig_delete_ParticleSystemRefPtr, swig_OSG_ParticleSystemRefPtr_methods, swig_OSG_ParticleSystemRefPtr_attributes, swig_OSG_ParticleSystemRefPtr_bases, swig_OSG_ParticleSystemRefPtr_base_names };

static int _wrap_ParticleSystem_getNumParticles(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumParticles",1,"OSG::ParticleSystem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getNumParticles",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  result = (OSG::UInt32)((OSG::ParticleSystem const *)arg1)->getNumParticles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPosition",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getPosition",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Pnt3f *) &((OSG::ParticleSystem const *)arg1)->getPosition((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getSecPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecPosition",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecPosition",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getSecPosition",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Pnt3f *) &((OSG::ParticleSystem const *)arg1)->getSecPosition((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getPositionChange(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("getPositionChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionChange",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPositionChange",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getPositionChange",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = ((OSG::ParticleSystem const *)arg1)->getPositionChange((OSG::UInt32 const &)*arg2);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getNormal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getNormal",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getNormal",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &((OSG::ParticleSystem const *)arg1)->getNormal((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getColor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Color4f *result = 0 ;
  
  SWIG_check_num_args("getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getColor",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getColor",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getColor",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Color4f *) &((OSG::ParticleSystem const *)arg1)->getColor((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color4f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSize",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getSize",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &((OSG::ParticleSystem const *)arg1)->getSize((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getLifespan(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getLifespan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLifespan",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getLifespan",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getLifespan",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Real32)((OSG::ParticleSystem const *)arg1)->getLifespan((OSG::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAge(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAge",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAge",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAge",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Real32)((OSG::ParticleSystem const *)arg1)->getAge((OSG::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocity",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocity",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getVelocity",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &((OSG::ParticleSystem const *)arg1)->getVelocity((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSecVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecVelocity",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecVelocity",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getSecVelocity",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &((OSG::ParticleSystem const *)arg1)->getSecVelocity((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getVelocityChange(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("getVelocityChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocityChange",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocityChange",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getVelocityChange",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = ((OSG::ParticleSystem const *)arg1)->getVelocityChange((OSG::UInt32 const &)*arg2);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAcceleration",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAcceleration",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAcceleration",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::Vec3f *) &((OSG::ParticleSystem const *)arg1)->getAcceleration((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAttribute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OSG::UInt32 temp2 ;
  std::string temp3 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttribute",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttribute",2,"OSG::UInt32 const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("getAttribute",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAttribute",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (OSG::UInt32)((OSG::ParticleSystem const *)arg1)->getAttribute((OSG::UInt32 const &)*arg2,(std::string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getID(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getID",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getID",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getID",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (OSG::UInt32)((OSG::ParticleSystem const *)arg1)->getID((OSG::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getIndex(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int64 result;
  
  SWIG_check_num_args("getIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getIndex",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getIndex",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getIndex",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::Int64)((OSG::ParticleSystem const *)arg1)->getIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAttributes(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 temp2 ;
  std::map< std::string,OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("getAttributes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttributes",1,"OSG::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttributes",2,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAttributes",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(OSG::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (std::map< std::string,OSG::UInt32 > *) &((OSG::ParticleSystem const *)arg1)->getAttributes((OSG::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setPosition",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setPosition",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_setPosition",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setPosition((OSG::Pnt3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecPosition",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecPosition",2,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecPosition",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setSecPosition",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_setSecPosition",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setSecPosition((OSG::Pnt3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setNormal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNormal",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setNormal",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setNormal",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setNormal",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setNormal",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setNormal((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setColor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Color4f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setColor",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setColor",2,"OSG::Color4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setColor",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setColor",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_setColor",2,SWIGTYPE_p_OSG__Color4f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setColor((OSG::Color4f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSize",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSize",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSize",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setSize",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setSize",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setSize((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setLifespan(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::Time temp2 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setLifespan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLifespan",1,"OSG::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setLifespan",2,"OSG::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setLifespan",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setLifespan",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setLifespan((OSG::Time const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setAge(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::Time temp2 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setAge",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAge",1,"OSG::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAge",2,"OSG::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAge",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setAge",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setAge((OSG::Time const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocity",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocity",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVelocity",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setVelocity",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setVelocity",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setVelocity((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecVelocity",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecVelocity",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecVelocity",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setSecVelocity",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setSecVelocity",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setSecVelocity((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAcceleration",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAcceleration",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAcceleration",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setAcceleration",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setAcceleration",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setAcceleration((OSG::Vec3f const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setAttribute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  std::string *arg2 = 0 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 *arg4 = 0 ;
  std::string temp2 ;
  OSG::UInt32 temp4 ;
  
  SWIG_check_num_args("setAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttribute",1,"OSG::ParticleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setAttribute",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAttribute",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setAttribute",4,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setAttribute",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->setAttribute((std::string const &)*arg2,arg3,(OSG::UInt32 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setAttributes(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  std::map< std::string,OSG::UInt32 > *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 temp3 ;
  
  SWIG_check_num_args("setAttributes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttributes",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAttributes",2,"std::map< std::string,OSG::UInt32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAttributes",3,"OSG::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setAttributes",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystem_setAttributes",2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(OSG::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setAttributes((std::map< std::string,OSG::UInt32 > const &)*arg2,(OSG::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Color4f *arg5 = 0 ;
  OSG::Vec3f *arg6 = 0 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Vec3f *arg9 = 0 ;
  OSG::Vec3f *arg10 = 0 ;
  OSG::Vec3f *arg11 = 0 ;
  std::map< std::string,OSG::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addParticle",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addParticle",3,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addParticle",4,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addParticle",5,"OSG::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addParticle",6,"OSG::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addParticle",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addParticle",8,"OSG::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addParticle",9,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addParticle",10,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addParticle",11,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addParticle",12,"std::map< std::string,OSG::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",5,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",6,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",9,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",10,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",11,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(arg1)->addParticle((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,(OSG::Vec3f const &)*arg4,(OSG::Color4f const &)*arg5,(OSG::Vec3f const &)*arg6,arg7,arg8,(OSG::Vec3f const &)*arg9,(OSG::Vec3f const &)*arg10,(OSG::Vec3f const &)*arg11,(std::map< std::string,OSG::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addWorldSpaceParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Color4f *arg5 = 0 ;
  OSG::Vec3f *arg6 = 0 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Vec3f *arg9 = 0 ;
  OSG::Vec3f *arg10 = 0 ;
  OSG::Vec3f *arg11 = 0 ;
  std::map< std::string,OSG::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addWorldSpaceParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addWorldSpaceParticle",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addWorldSpaceParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addWorldSpaceParticle",3,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addWorldSpaceParticle",4,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addWorldSpaceParticle",5,"OSG::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addWorldSpaceParticle",6,"OSG::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addWorldSpaceParticle",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addWorldSpaceParticle",8,"OSG::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addWorldSpaceParticle",9,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addWorldSpaceParticle",10,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addWorldSpaceParticle",11,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addWorldSpaceParticle",12,"std::map< std::string,OSG::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",5,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",6,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",9,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",10,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",11,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(arg1)->addWorldSpaceParticle((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,(OSG::Vec3f const &)*arg4,(OSG::Color4f const &)*arg5,(OSG::Vec3f const &)*arg6,arg7,arg8,(OSG::Vec3f const &)*arg9,(OSG::Vec3f const &)*arg10,(OSG::Vec3f const &)*arg11,(std::map< std::string,OSG::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Color4f *arg4 = 0 ;
  OSG::Vec3f *arg5 = 0 ;
  OSG::Real32 arg6 ;
  OSG::Vec3f *arg7 = 0 ;
  OSG::Vec3f *arg8 = 0 ;
  bool result;
  
  SWIG_check_num_args("addParticle",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addParticle",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addParticle",3,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addParticle",4,"OSG::Color4f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addParticle",5,"OSG::Vec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("addParticle",6,"OSG::Real32");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("addParticle",7,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("addParticle",8,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",4,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",7,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",8,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)(arg1)->addParticle((OSG::Pnt3f const &)*arg2,(OSG::Vec3f const &)*arg3,(OSG::Color4f const &)*arg4,(OSG::Vec3f const &)*arg5,arg6,(OSG::Vec3f const &)*arg7,(OSG::Vec3f const &)*arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addParticle(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ParticleSystem_addParticle__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          void *ptr;
                          if (lua_isuserdata(L,argv[10])==0 || SWIG_ConvertPtr(L,argv[10], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                            _v = 0;
                          } else {
                            _v = 1;
                          }
                        }
                        if (_v) {
                          {
                            void *ptr;
                            if (lua_isuserdata(L,argv[11])==0 || SWIG_ConvertPtr(L,argv[11], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_unsigned_int_t, 0)) {
                              _v = 0;
                            } else {
                              _v = 1;
                            }
                          }
                          if (_v) {
                            return _wrap_ParticleSystem_addParticle__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystem_addParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addParticle(OSG::ParticleSystem *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &,OSG::Vec3f const &,std::map< std::string,OSG::UInt32 > const &)\n"
    "    addParticle(OSG::ParticleSystem *,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_addWorldSpaceParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Color4f *arg4 = 0 ;
  OSG::Vec3f *arg5 = 0 ;
  OSG::Real32 arg6 ;
  OSG::Vec3f *arg7 = 0 ;
  OSG::Vec3f *arg8 = 0 ;
  bool result;
  
  SWIG_check_num_args("addWorldSpaceParticle",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addWorldSpaceParticle",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addWorldSpaceParticle",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addWorldSpaceParticle",3,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addWorldSpaceParticle",4,"OSG::Color4f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addWorldSpaceParticle",5,"OSG::Vec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("addWorldSpaceParticle",6,"OSG::Real32");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("addWorldSpaceParticle",7,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("addWorldSpaceParticle",8,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",4,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",7,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",8,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)(arg1)->addWorldSpaceParticle((OSG::Pnt3f const &)*arg2,(OSG::Vec3f const &)*arg3,(OSG::Color4f const &)*arg4,(OSG::Vec3f const &)*arg5,arg6,(OSG::Vec3f const &)*arg7,(OSG::Vec3f const &)*arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addWorldSpaceParticle(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ParticleSystem_addWorldSpaceParticle__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          void *ptr;
                          if (lua_isuserdata(L,argv[10])==0 || SWIG_ConvertPtr(L,argv[10], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                            _v = 0;
                          } else {
                            _v = 1;
                          }
                        }
                        if (_v) {
                          {
                            void *ptr;
                            if (lua_isuserdata(L,argv[11])==0 || SWIG_ConvertPtr(L,argv[11], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_unsigned_int_t, 0)) {
                              _v = 0;
                            } else {
                              _v = 1;
                            }
                          }
                          if (_v) {
                            return _wrap_ParticleSystem_addWorldSpaceParticle__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystem_addWorldSpaceParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addWorldSpaceParticle(OSG::ParticleSystem *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &,OSG::Vec3f const &,std::map< std::string,OSG::UInt32 > const &)\n"
    "    addWorldSpaceParticle(OSG::ParticleSystem *,OSG::Pnt3f const &,OSG::Vec3f const &,OSG::Color4f const &,OSG::Vec3f const &,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_killParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("killParticle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticle",1,"OSG::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticle",2,"OSG::UInt32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("killParticle",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_killParticle",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->killParticle(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_killParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("killParticle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticle",1,"OSG::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticle",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_killParticle",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->killParticle(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_killParticle(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_killParticle__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_killParticle__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystem_killParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    killParticle(OSG::ParticleSystem *,OSG::UInt32,bool)\n"
    "    killParticle(OSG::ParticleSystem *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_killParticleByID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("killParticleByID",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticleByID",1,"OSG::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticleByID",2,"OSG::UInt32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("killParticleByID",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_killParticleByID",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->killParticleByID(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_killParticleByID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("killParticleByID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticleByID",1,"OSG::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticleByID",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_killParticleByID",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->killParticleByID(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_killParticleByID(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystem_killParticleByID__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_killParticleByID__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystem_killParticleByID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    killParticleByID(OSG::ParticleSystem *,OSG::UInt32,bool)\n"
    "    killParticleByID(OSG::ParticleSystem *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_detachUpdateProducer",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  (arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  bool arg5 ;
  OSG::NodeRefPtr arg6 ;
  OSG::NodeRefPtr *argp6 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("intersect",5,"bool");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("intersect",6,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",6,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg6 = *argp6;
  
  result = ((OSG::ParticleSystem const *)arg1)->intersect((OSG::Line const &)*arg2,arg3,arg4,arg5,arg6);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  bool arg5 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("intersect",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((OSG::ParticleSystem const *)arg1)->intersect((OSG::Line const &)*arg2,arg3,arg4,arg5);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  result = ((OSG::ParticleSystem const *)arg1)->intersect((OSG::Line const &)*arg2,arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Real32 arg4 ;
  OSG::NodeRefPtr arg5 ;
  OSG::NodeRefPtr *argp5 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("intersect",5,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",5,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg5 = *argp5;
  
  result = ((OSG::ParticleSystem const *)arg1)->intersect((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,arg4,arg5);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Real32 arg4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  result = ((OSG::ParticleSystem const *)arg1)->intersect((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Volume *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::NodeRefPtr arg4 ;
  OSG::NodeRefPtr *argp4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Volume const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__Volume);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",4,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg4 = *argp4;
  
  result = ((OSG::ParticleSystem const *)arg1)->intersect((OSG::Volume const &)*arg2,arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::Volume *arg2 = 0 ;
  OSG::Real32 arg3 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Volume const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__Volume);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  result = ((OSG::ParticleSystem const *)arg1)->intersect((OSG::Volume const &)*arg2,arg3);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::NodeRefPtr arg2 ;
  bool arg3 ;
  OSG::NodeRefPtr arg4 ;
  OSG::NodeRefPtr *argp2 ;
  OSG::NodeRefPtr *argp4 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::NodeRefPtr const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("intersect",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",4,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg4 = *argp4;
  
  result = ((OSG::ParticleSystem const *)arg1)->intersect(arg2,arg3,arg4);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::NodeRefPtr arg2 ;
  bool arg3 ;
  OSG::NodeRefPtr *argp2 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::NodeRefPtr const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("intersect",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((OSG::ParticleSystem const *)arg1)->intersect(arg2,arg3);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::NodeRefPtr arg2 ;
  OSG::NodeRefPtr *argp2 ;
  std::vector< OSG::UInt32 > result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::NodeRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  result = ((OSG::ParticleSystem const *)arg1)->intersect(arg2);
  {
    std::vector< OSG::UInt32 > * resultptr = new std::vector< OSG::UInt32 >((const std::vector< OSG::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystem_intersect__SWIG_9(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_intersect__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_intersect__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_intersect__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleSystem_intersect__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_intersect__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleSystem_intersect__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_ParticleSystem_intersect__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ParticleSystem_intersect__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ParticleSystem_intersect__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystem_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(OSG::ParticleSystem const *,OSG::Line const &,OSG::Real32,OSG::Real32,bool,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::Line const &,OSG::Real32,OSG::Real32,bool)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::Line const &,OSG::Real32,OSG::Real32)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Real32,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Real32)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::Volume const &,OSG::Real32,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::Volume const &,OSG::Real32)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::NodeRefPtr const,bool,OSG::NodeRefPtr)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::NodeRefPtr const,bool)\n"
    "    intersect(OSG::ParticleSystem const *,OSG::NodeRefPtr const)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ParticleSystem *arg1 = (OSG::ParticleSystem *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_attachUpdateProducer",1,SWIGTYPE_p_OSG__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ParticleSystem_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_ParticleSystem_attachUpdateProducer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_ParticleSystem_methods[] = {
    {"getNumParticles", _wrap_ParticleSystem_getNumParticles}, 
    {"getPosition", _wrap_ParticleSystem_getPosition}, 
    {"getSecPosition", _wrap_ParticleSystem_getSecPosition}, 
    {"getPositionChange", _wrap_ParticleSystem_getPositionChange}, 
    {"getNormal", _wrap_ParticleSystem_getNormal}, 
    {"getColor", _wrap_ParticleSystem_getColor}, 
    {"getSize", _wrap_ParticleSystem_getSize}, 
    {"getLifespan", _wrap_ParticleSystem_getLifespan}, 
    {"getAge", _wrap_ParticleSystem_getAge}, 
    {"getVelocity", _wrap_ParticleSystem_getVelocity}, 
    {"getSecVelocity", _wrap_ParticleSystem_getSecVelocity}, 
    {"getVelocityChange", _wrap_ParticleSystem_getVelocityChange}, 
    {"getAcceleration", _wrap_ParticleSystem_getAcceleration}, 
    {"getAttribute", _wrap_ParticleSystem_getAttribute}, 
    {"getID", _wrap_ParticleSystem_getID}, 
    {"getIndex", _wrap_ParticleSystem_getIndex}, 
    {"getAttributes", _wrap_ParticleSystem_getAttributes}, 
    {"setPosition", _wrap_ParticleSystem_setPosition}, 
    {"setSecPosition", _wrap_ParticleSystem_setSecPosition}, 
    {"setNormal", _wrap_ParticleSystem_setNormal}, 
    {"setColor", _wrap_ParticleSystem_setColor}, 
    {"setSize", _wrap_ParticleSystem_setSize}, 
    {"setLifespan", _wrap_ParticleSystem_setLifespan}, 
    {"setAge", _wrap_ParticleSystem_setAge}, 
    {"setVelocity", _wrap_ParticleSystem_setVelocity}, 
    {"setSecVelocity", _wrap_ParticleSystem_setSecVelocity}, 
    {"setAcceleration", _wrap_ParticleSystem_setAcceleration}, 
    {"setAttribute", _wrap_ParticleSystem_setAttribute}, 
    {"setAttributes", _wrap_ParticleSystem_setAttributes}, 
    {"addParticle", _wrap_ParticleSystem_addParticle}, 
    {"addWorldSpaceParticle", _wrap_ParticleSystem_addWorldSpaceParticle}, 
    {"killParticle", _wrap_ParticleSystem_killParticle}, 
    {"killParticleByID", _wrap_ParticleSystem_killParticleByID}, 
    {"detachUpdateProducer", _wrap_ParticleSystem_detachUpdateProducer}, 
    {"intersect", _wrap_ParticleSystem_intersect}, 
    {"attachUpdateProducer", _wrap_ParticleSystem_attachUpdateProducer}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ParticleSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ParticleSystem_bases[] = {0,0};
static const char *swig_OSG_ParticleSystem_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_ParticleSystem = { "ParticleSystem", &SWIGTYPE_p_OSG__ParticleSystem,0,0, swig_OSG_ParticleSystem_methods, swig_OSG_ParticleSystem_attributes, swig_OSG_ParticleSystem_bases, swig_OSG_ParticleSystem_base_names };

static int _wrap_new_ComponentRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ComponentRefPtr",0,0)
  result = (OSG::ComponentRefPtr *)new OSG::ComponentRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ComponentRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComponentRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = 0 ;
  OSG::ComponentRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ComponentRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::ComponentRefPtr",1,"OSG::ComponentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("new_ComponentRefPtr",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::ComponentRefPtr *)new OSG::ComponentRefPtr((OSG::ComponentRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ComponentRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComponentRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComponentRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComponentRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ComponentRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::ComponentRefPtr()\n"
    "    OSG::ComponentRefPtr(OSG::ComponentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Component *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr___deref__",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::Component *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Component,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::ComponentRefPtr result;
  
  SWIG_check_num_args("OSG_ComponentRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ComponentRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_ComponentRefPtr_dcast(arg1);
  {
    OSG::ComponentRefPtr * resultptr = new OSG::ComponentRefPtr((const OSG::ComponentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ComponentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"OSG::ComponentRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBounds",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getClipBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipBounds",1,"OSG::ComponentRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClipBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getClipBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getClipBounds",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getClipBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getClipBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getClipBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getInsideBorderBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getInsideBorderBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInsideBorderBounds",1,"OSG::ComponentRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInsideBorderBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getInsideBorderBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getInsideBorderBounds",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getInsideBorderBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getInsideBorderBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getInsideBorderBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getBoundsRenderingSurfaceSpace(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBoundsRenderingSurfaceSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",1,"OSG::ComponentRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBoundsRenderingSurfaceSpace",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBoundsRenderingSurfaceSpace",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBoundsRenderingSurfaceSpace",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getBoundsRenderingSurfaceSpace(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_updateContainerLayout(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  
  SWIG_check_num_args("updateContainerLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateContainerLayout",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_updateContainerLayout",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  (*arg1)->updateContainerLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_updateClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  
  SWIG_check_num_args("updateClipBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateClipBounds",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_updateClipBounds",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  (*arg1)->updateClipBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRequestedSize",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getRequestedSize",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (*arg1)->getRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getContentRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getContentRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentRequestedSize",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getContentRequestedSize",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (*arg1)->getContentRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getBorderingLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getBorderingLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBorderingLength",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBorderingLength",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (*arg1)->getBorderingLength();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_setMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setMouseContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMouseContained",1,"OSG::ComponentRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setMouseContained",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_setMouseContained",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setMouseContained(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getMouseContained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMouseContained",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getMouseContained",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (bool)(*arg1)->getMouseContained();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_takeFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::ComponentRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("takeFocus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_takeFocus",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(*arg1)->takeFocus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_takeFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_takeFocus",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (bool)(*arg1)->takeFocus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_takeFocus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComponentRefPtr_takeFocus__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentRefPtr_takeFocus__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentRefPtr_takeFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    takeFocus(OSG::ComponentRefPtr *,bool)\n"
    "    takeFocus(OSG::ComponentRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentRefPtr_isContained__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("isContained",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::ComponentRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("isContained",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_isContained",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(*arg1)->isContained((OSG::Pnt2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_isContained__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::ComponentRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_isContained",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (bool)(*arg1)->isContained((OSG::Pnt2f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_isContained(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentRefPtr_isContained__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentRefPtr_isContained__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentRefPtr_isContained'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isContained(OSG::ComponentRefPtr const *,OSG::Pnt2f const &,bool)\n"
    "    isContained(OSG::ComponentRefPtr const *,OSG::Pnt2f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentRefPtr_getBaseline(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 temp2 ;
  OSG::Real32 temp3 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getBaseline",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBaseline",1,"OSG::ComponentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBaseline",2,"OSG::Real32 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getBaseline",3,"OSG::Real32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getBaseline",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  temp2=(OSG::Real32)lua_tonumber(L,2); arg2=&temp2;
  temp3=(OSG::Real32)lua_tonumber(L,3); arg3=&temp3;
  result = (OSG::Real32)(*arg1)->getBaseline((OSG::Real32 const &)*arg2,(OSG::Real32 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_setToolTipText(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setToolTipText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipText",1,"OSG::ComponentRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setToolTipText",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_setToolTipText",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (*arg1)->setToolTipText((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_isToolTipActive(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isToolTipActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isToolTipActive",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_isToolTipActive",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (bool)(*arg1)->isToolTipActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_activateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  
  SWIG_check_num_args("activateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("activateToolTip",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_activateToolTip",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  (*arg1)->activateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_deactivateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  
  SWIG_check_num_args("deactivateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deactivateToolTip",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_deactivateToolTip",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  (*arg1)->deactivateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_setToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("setToolTipLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipLocation",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setToolTipLocation",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_setToolTipLocation",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_setToolTipLocation",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->setToolTipLocation((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getToolTipLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToolTipLocation",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getToolTipLocation",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (*arg1)->getToolTipLocation();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getPreferredScrollableViewportSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getPreferredScrollableViewportSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPreferredScrollableViewportSize",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getPreferredScrollableViewportSize",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (*arg1)->getPreferredScrollableViewportSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getScrollableBlockIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableBlockIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableBlockIncrement",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableBlockIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableBlockIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableBlockIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableBlockIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableBlockIncrement",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableBlockIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableBlockIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(*arg1)->getScrollableBlockIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getScrollableTracksViewportHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportHeight",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableTracksViewportHeight",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportHeight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getScrollableTracksViewportWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportWidth",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableTracksViewportWidth",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportWidth();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getScrollableUnitIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableUnitIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableUnitIncrement",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableUnitIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableUnitIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableUnitIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableUnitIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableUnitIncrement",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableUnitIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getScrollableUnitIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(*arg1)->getScrollableUnitIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_scrollToPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("scrollToPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollToPoint",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scrollToPoint",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_scrollToPoint",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_scrollToPoint",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->scrollToPoint((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getParentToLocal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getParentToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentToLocal",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParentToLocal",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getParentToLocal",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getParentToLocal",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (*arg1)->getParentToLocal((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getLocalToParent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getLocalToParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalToParent",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getLocalToParent",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getLocalToParent",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ComponentRefPtr_getLocalToParent",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (*arg1)->getLocalToParent((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::ComponentRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::ComponentRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::ComponentRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::ComponentRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ComponentRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ComponentRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ComponentRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::ComponentRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::ComponentRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::ComponentRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::ComponentRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getType",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getTypeId",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getGroupId",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getTypeName",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getProducerType",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getId",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getNumFields",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ComponentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ComponentRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_attachActivity",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ComponentRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ComponentRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ComponentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ComponentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ComponentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ComponentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ComponentRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ComponentRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ComponentRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ComponentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ComponentRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("ComponentRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ComponentRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ComponentRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_ComponentRefPtr(void *obj) {
OSG::ComponentRefPtr *arg1 = (OSG::ComponentRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ComponentRefPtr_methods[] = {
    {"__deref__", _wrap_ComponentRefPtr___deref__}, 
    {"getBounds", _wrap_ComponentRefPtr_getBounds}, 
    {"getClipBounds", _wrap_ComponentRefPtr_getClipBounds}, 
    {"getInsideBorderBounds", _wrap_ComponentRefPtr_getInsideBorderBounds}, 
    {"getBoundsRenderingSurfaceSpace", _wrap_ComponentRefPtr_getBoundsRenderingSurfaceSpace}, 
    {"updateContainerLayout", _wrap_ComponentRefPtr_updateContainerLayout}, 
    {"updateClipBounds", _wrap_ComponentRefPtr_updateClipBounds}, 
    {"getRequestedSize", _wrap_ComponentRefPtr_getRequestedSize}, 
    {"getContentRequestedSize", _wrap_ComponentRefPtr_getContentRequestedSize}, 
    {"getBorderingLength", _wrap_ComponentRefPtr_getBorderingLength}, 
    {"setMouseContained", _wrap_ComponentRefPtr_setMouseContained}, 
    {"getMouseContained", _wrap_ComponentRefPtr_getMouseContained}, 
    {"takeFocus", _wrap_ComponentRefPtr_takeFocus}, 
    {"isContained", _wrap_ComponentRefPtr_isContained}, 
    {"getBaseline", _wrap_ComponentRefPtr_getBaseline}, 
    {"setToolTipText", _wrap_ComponentRefPtr_setToolTipText}, 
    {"isToolTipActive", _wrap_ComponentRefPtr_isToolTipActive}, 
    {"activateToolTip", _wrap_ComponentRefPtr_activateToolTip}, 
    {"deactivateToolTip", _wrap_ComponentRefPtr_deactivateToolTip}, 
    {"setToolTipLocation", _wrap_ComponentRefPtr_setToolTipLocation}, 
    {"getToolTipLocation", _wrap_ComponentRefPtr_getToolTipLocation}, 
    {"getPreferredScrollableViewportSize", _wrap_ComponentRefPtr_getPreferredScrollableViewportSize}, 
    {"getScrollableBlockIncrement", _wrap_ComponentRefPtr_getScrollableBlockIncrement}, 
    {"getScrollableTracksViewportHeight", _wrap_ComponentRefPtr_getScrollableTracksViewportHeight}, 
    {"getScrollableTracksViewportWidth", _wrap_ComponentRefPtr_getScrollableTracksViewportWidth}, 
    {"getScrollableUnitIncrement", _wrap_ComponentRefPtr_getScrollableUnitIncrement}, 
    {"scrollToPoint", _wrap_ComponentRefPtr_scrollToPoint}, 
    {"getParentToLocal", _wrap_ComponentRefPtr_getParentToLocal}, 
    {"getLocalToParent", _wrap_ComponentRefPtr_getLocalToParent}, 
    {"addAttachment", _wrap_ComponentRefPtr_addAttachment}, 
    {"subAttachment", _wrap_ComponentRefPtr_subAttachment}, 
    {"findAttachment", _wrap_ComponentRefPtr_findAttachment}, 
    {"getType", _wrap_ComponentRefPtr_getType}, 
    {"shallowCopy", _wrap_ComponentRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_ComponentRefPtr_getTypeId}, 
    {"getGroupId", _wrap_ComponentRefPtr_getGroupId}, 
    {"getTypeName", _wrap_ComponentRefPtr_getTypeName}, 
    {"getProducerType", _wrap_ComponentRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_ComponentRefPtr_getContainerSize}, 
    {"getId", _wrap_ComponentRefPtr_getId}, 
    {"getNumFields", _wrap_ComponentRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_ComponentRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_ComponentRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_ComponentRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ComponentRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ComponentRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ComponentRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_ComponentRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_ComponentRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_ComponentRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ComponentRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ComponentRefPtr_bases[] = {0,0};
static const char *swig_OSG_ComponentRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_ComponentRefPtr = { "ComponentRefPtr", &SWIGTYPE_p_OSG__ComponentRefPtr,_wrap_new_ComponentRefPtr, swig_delete_ComponentRefPtr, swig_OSG_ComponentRefPtr_methods, swig_OSG_ComponentRefPtr_attributes, swig_OSG_ComponentRefPtr_bases, swig_OSG_ComponentRefPtr_base_names };

static int _wrap_Component_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"OSG::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getBounds",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  ((OSG::Component const *)arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getClipBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipBounds",1,"OSG::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClipBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getClipBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getClipBounds",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getClipBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getClipBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  ((OSG::Component const *)arg1)->getClipBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getInsideBorderBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getInsideBorderBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInsideBorderBounds",1,"OSG::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInsideBorderBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getInsideBorderBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getInsideBorderBounds",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getInsideBorderBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getInsideBorderBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  ((OSG::Component const *)arg1)->getInsideBorderBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getBoundsRenderingSurfaceSpace(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBoundsRenderingSurfaceSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",1,"OSG::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getBoundsRenderingSurfaceSpace",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBoundsRenderingSurfaceSpace",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBoundsRenderingSurfaceSpace",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  ((OSG::Component const *)arg1)->getBoundsRenderingSurfaceSpace(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_updateContainerLayout(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  
  SWIG_check_num_args("updateContainerLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateContainerLayout",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_updateContainerLayout",1,SWIGTYPE_p_OSG__Component);
  }
  
  (arg1)->updateContainerLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_updateClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  
  SWIG_check_num_args("updateClipBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateClipBounds",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_updateClipBounds",1,SWIGTYPE_p_OSG__Component);
  }
  
  (arg1)->updateClipBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRequestedSize",1,"OSG::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getRequestedSize",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = ((OSG::Component const *)arg1)->getRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getContentRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getContentRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentRequestedSize",1,"OSG::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getContentRequestedSize",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = ((OSG::Component const *)arg1)->getContentRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getBorderingLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getBorderingLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBorderingLength",1,"OSG::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getBorderingLength",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = ((OSG::Component const *)arg1)->getBorderingLength();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_setMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setMouseContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMouseContained",1,"OSG::Component *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setMouseContained",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_setMouseContained",1,SWIGTYPE_p_OSG__Component);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setMouseContained(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("getMouseContained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMouseContained",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getMouseContained",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = (bool)(arg1)->getMouseContained();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_takeFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::Component *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("takeFocus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_takeFocus",1,SWIGTYPE_p_OSG__Component);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->takeFocus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_takeFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_takeFocus",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = (bool)(arg1)->takeFocus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_takeFocus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Component_takeFocus__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Component_takeFocus__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Component_takeFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    takeFocus(OSG::Component *,bool)\n"
    "    takeFocus(OSG::Component *)\n");
  lua_error(L);return 0;
}


static int _wrap_Component_isContained__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("isContained",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("isContained",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_isContained",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((OSG::Component const *)arg1)->isContained((OSG::Pnt2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_isContained__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_isContained",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (bool)((OSG::Component const *)arg1)->isContained((OSG::Pnt2f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_isContained(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Component_isContained__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Component_isContained__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Component_isContained'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isContained(OSG::Component const *,OSG::Pnt2f const &,bool)\n"
    "    isContained(OSG::Component const *,OSG::Pnt2f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Component_getBaseline(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 temp2 ;
  OSG::Real32 temp3 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getBaseline",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBaseline",1,"OSG::Component const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBaseline",2,"OSG::Real32 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getBaseline",3,"OSG::Real32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getBaseline",1,SWIGTYPE_p_OSG__Component);
  }
  
  temp2=(OSG::Real32)lua_tonumber(L,2); arg2=&temp2;
  temp3=(OSG::Real32)lua_tonumber(L,3); arg3=&temp3;
  result = (OSG::Real32)((OSG::Component const *)arg1)->getBaseline((OSG::Real32 const &)*arg2,(OSG::Real32 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_setToolTipText(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setToolTipText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipText",1,"OSG::Component *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setToolTipText",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_setToolTipText",1,SWIGTYPE_p_OSG__Component);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setToolTipText((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_isToolTipActive(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("isToolTipActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isToolTipActive",1,"OSG::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_isToolTipActive",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = (bool)((OSG::Component const *)arg1)->isToolTipActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_activateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  
  SWIG_check_num_args("activateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("activateToolTip",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_activateToolTip",1,SWIGTYPE_p_OSG__Component);
  }
  
  (arg1)->activateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_deactivateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  
  SWIG_check_num_args("deactivateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deactivateToolTip",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_deactivateToolTip",1,SWIGTYPE_p_OSG__Component);
  }
  
  (arg1)->deactivateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_setToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("setToolTipLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipLocation",1,"OSG::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setToolTipLocation",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_setToolTipLocation",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_setToolTipLocation",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (arg1)->setToolTipLocation((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getToolTipLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToolTipLocation",1,"OSG::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getToolTipLocation",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = ((OSG::Component const *)arg1)->getToolTipLocation();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getPreferredScrollableViewportSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getPreferredScrollableViewportSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPreferredScrollableViewportSize",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getPreferredScrollableViewportSize",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = (arg1)->getPreferredScrollableViewportSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableBlockIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableBlockIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableBlockIncrement",1,"OSG::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableBlockIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableBlockIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableBlockIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableBlockIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getScrollableBlockIncrement",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableBlockIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableBlockIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(arg1)->getScrollableBlockIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableTracksViewportHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportHeight",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getScrollableTracksViewportHeight",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = (bool)(arg1)->getScrollableTracksViewportHeight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableTracksViewportWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportWidth",1,"OSG::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getScrollableTracksViewportWidth",1,SWIGTYPE_p_OSG__Component);
  }
  
  result = (bool)(arg1)->getScrollableTracksViewportWidth();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableUnitIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableUnitIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableUnitIncrement",1,"OSG::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableUnitIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableUnitIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableUnitIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableUnitIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getScrollableUnitIncrement",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableUnitIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableUnitIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(arg1)->getScrollableUnitIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_scrollToPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("scrollToPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollToPoint",1,"OSG::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scrollToPoint",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_scrollToPoint",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_scrollToPoint",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (arg1)->scrollToPoint((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getParentToLocal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getParentToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentToLocal",1,"OSG::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParentToLocal",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getParentToLocal",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getParentToLocal",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (arg1)->getParentToLocal((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getLocalToParent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Component *arg1 = (OSG::Component *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getLocalToParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalToParent",1,"OSG::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getLocalToParent",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Component,0))){
    SWIG_fail_ptr("Component_getLocalToParent",1,SWIGTYPE_p_OSG__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Component_getLocalToParent",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (arg1)->getLocalToParent((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Component_methods[] = {
    {"getBounds", _wrap_Component_getBounds}, 
    {"getClipBounds", _wrap_Component_getClipBounds}, 
    {"getInsideBorderBounds", _wrap_Component_getInsideBorderBounds}, 
    {"getBoundsRenderingSurfaceSpace", _wrap_Component_getBoundsRenderingSurfaceSpace}, 
    {"updateContainerLayout", _wrap_Component_updateContainerLayout}, 
    {"updateClipBounds", _wrap_Component_updateClipBounds}, 
    {"getRequestedSize", _wrap_Component_getRequestedSize}, 
    {"getContentRequestedSize", _wrap_Component_getContentRequestedSize}, 
    {"getBorderingLength", _wrap_Component_getBorderingLength}, 
    {"setMouseContained", _wrap_Component_setMouseContained}, 
    {"getMouseContained", _wrap_Component_getMouseContained}, 
    {"takeFocus", _wrap_Component_takeFocus}, 
    {"isContained", _wrap_Component_isContained}, 
    {"getBaseline", _wrap_Component_getBaseline}, 
    {"setToolTipText", _wrap_Component_setToolTipText}, 
    {"isToolTipActive", _wrap_Component_isToolTipActive}, 
    {"activateToolTip", _wrap_Component_activateToolTip}, 
    {"deactivateToolTip", _wrap_Component_deactivateToolTip}, 
    {"setToolTipLocation", _wrap_Component_setToolTipLocation}, 
    {"getToolTipLocation", _wrap_Component_getToolTipLocation}, 
    {"getPreferredScrollableViewportSize", _wrap_Component_getPreferredScrollableViewportSize}, 
    {"getScrollableBlockIncrement", _wrap_Component_getScrollableBlockIncrement}, 
    {"getScrollableTracksViewportHeight", _wrap_Component_getScrollableTracksViewportHeight}, 
    {"getScrollableTracksViewportWidth", _wrap_Component_getScrollableTracksViewportWidth}, 
    {"getScrollableUnitIncrement", _wrap_Component_getScrollableUnitIncrement}, 
    {"scrollToPoint", _wrap_Component_scrollToPoint}, 
    {"getParentToLocal", _wrap_Component_getParentToLocal}, 
    {"getLocalToParent", _wrap_Component_getLocalToParent}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Component_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Component_bases[] = {0,0};
static const char *swig_OSG_Component_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Component = { "Component", &SWIGTYPE_p_OSG__Component,0,0, swig_OSG_Component_methods, swig_OSG_Component_attributes, swig_OSG_Component_bases, swig_OSG_Component_base_names };

static int _wrap_new_InternalWindowRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::InternalWindowRefPtr",0,0)
  result = (OSG::InternalWindowRefPtr *)new OSG::InternalWindowRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__InternalWindowRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalWindowRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = 0 ;
  OSG::InternalWindowRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::InternalWindowRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::InternalWindowRefPtr",1,"OSG::InternalWindowRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("new_InternalWindowRefPtr",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::InternalWindowRefPtr *)new OSG::InternalWindowRefPtr((OSG::InternalWindowRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__InternalWindowRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalWindowRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_InternalWindowRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_InternalWindowRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_InternalWindowRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::InternalWindowRefPtr()\n"
    "    OSG::InternalWindowRefPtr(OSG::InternalWindowRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::InternalWindow *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr___deref__",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::InternalWindow *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__InternalWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::InternalWindowRefPtr result;
  
  SWIG_check_num_args("OSG_InternalWindowRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_InternalWindowRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_InternalWindowRefPtr_dcast(arg1);
  {
    OSG::InternalWindowRefPtr * resultptr = new OSG::InternalWindowRefPtr((const OSG::InternalWindowRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__InternalWindowRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_takeFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("takeFocus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_takeFocus",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(*arg1)->takeFocus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_takeFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_takeFocus",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (bool)(*arg1)->takeFocus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_takeFocus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_InternalWindowRefPtr_takeFocus__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_takeFocus__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_takeFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    takeFocus(OSG::InternalWindowRefPtr *,bool)\n"
    "    takeFocus(OSG::InternalWindowRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr_open(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_open",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->open();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_close(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("close",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_close",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_detachFromEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("detachFromEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachFromEventProducer",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_detachFromEventProducer",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->detachFromEventProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_giveFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::ComponentRefPtr arg2 ;
  bool arg3 ;
  OSG::ComponentRefPtr *argp2 ;
  
  SWIG_check_num_args("giveFocus",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("giveFocus",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("giveFocus",2,"OSG::ComponentRefPtr const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("giveFocus",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_giveFocus",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_giveFocus",2,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  OSG_InternalWindow_giveFocus__SWIG_0((OSG::InternalWindow*)(arg1)->operator ->(),arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_giveFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::ComponentRefPtr arg2 ;
  OSG::ComponentRefPtr *argp2 ;
  
  SWIG_check_num_args("giveFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("giveFocus",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("giveFocus",2,"OSG::ComponentRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_giveFocus",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_giveFocus",2,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  arg2 = *argp2;
  
  OSG_InternalWindow_giveFocus__SWIG_0((OSG::InternalWindow*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_giveFocus(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_giveFocus__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_InternalWindowRefPtr_giveFocus__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_giveFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    giveFocus(OSG::InternalWindowRefPtr *,OSG::ComponentRefPtr const,bool)\n"
    "    giveFocus(OSG::InternalWindowRefPtr *,OSG::ComponentRefPtr const)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBounds",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getClipBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipBounds",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClipBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getClipBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getClipBounds",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getClipBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getClipBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getClipBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getInsideBorderBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getInsideBorderBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInsideBorderBounds",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInsideBorderBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getInsideBorderBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getInsideBorderBounds",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getInsideBorderBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getInsideBorderBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getInsideBorderBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getBoundsRenderingSurfaceSpace(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBoundsRenderingSurfaceSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBoundsRenderingSurfaceSpace",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBoundsRenderingSurfaceSpace",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBoundsRenderingSurfaceSpace",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getBoundsRenderingSurfaceSpace(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_updateContainerLayout(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("updateContainerLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateContainerLayout",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_updateContainerLayout",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->updateContainerLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_updateClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("updateClipBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateClipBounds",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_updateClipBounds",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->updateClipBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRequestedSize",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getRequestedSize",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (*arg1)->getRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getContentRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getContentRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentRequestedSize",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getContentRequestedSize",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (*arg1)->getContentRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getBorderingLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getBorderingLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBorderingLength",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBorderingLength",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (*arg1)->getBorderingLength();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_setMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setMouseContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMouseContained",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setMouseContained",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_setMouseContained",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setMouseContained(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getMouseContained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMouseContained",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getMouseContained",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (bool)(*arg1)->getMouseContained();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_isContained__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("isContained",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("isContained",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_isContained",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(*arg1)->isContained((OSG::Pnt2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_isContained__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_isContained",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (bool)(*arg1)->isContained((OSG::Pnt2f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_isContained(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_isContained__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_InternalWindowRefPtr_isContained__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_isContained'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isContained(OSG::InternalWindowRefPtr const *,OSG::Pnt2f const &,bool)\n"
    "    isContained(OSG::InternalWindowRefPtr const *,OSG::Pnt2f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr_getBaseline(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 temp2 ;
  OSG::Real32 temp3 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getBaseline",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBaseline",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBaseline",2,"OSG::Real32 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getBaseline",3,"OSG::Real32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getBaseline",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  temp2=(OSG::Real32)lua_tonumber(L,2); arg2=&temp2;
  temp3=(OSG::Real32)lua_tonumber(L,3); arg3=&temp3;
  result = (OSG::Real32)(*arg1)->getBaseline((OSG::Real32 const &)*arg2,(OSG::Real32 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_setToolTipText(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setToolTipText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipText",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setToolTipText",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_setToolTipText",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (*arg1)->setToolTipText((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_isToolTipActive(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isToolTipActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isToolTipActive",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_isToolTipActive",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (bool)(*arg1)->isToolTipActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_activateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("activateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("activateToolTip",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_activateToolTip",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->activateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_deactivateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("deactivateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deactivateToolTip",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_deactivateToolTip",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->deactivateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_setToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("setToolTipLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipLocation",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setToolTipLocation",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_setToolTipLocation",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_setToolTipLocation",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->setToolTipLocation((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getToolTipLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToolTipLocation",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getToolTipLocation",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (*arg1)->getToolTipLocation();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getPreferredScrollableViewportSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getPreferredScrollableViewportSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPreferredScrollableViewportSize",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getPreferredScrollableViewportSize",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (*arg1)->getPreferredScrollableViewportSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getScrollableBlockIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableBlockIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableBlockIncrement",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableBlockIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableBlockIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableBlockIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableBlockIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableBlockIncrement",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableBlockIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableBlockIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(*arg1)->getScrollableBlockIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getScrollableTracksViewportHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportHeight",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableTracksViewportHeight",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportHeight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getScrollableTracksViewportWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportWidth",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableTracksViewportWidth",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportWidth();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getScrollableUnitIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableUnitIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableUnitIncrement",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableUnitIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableUnitIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableUnitIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableUnitIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableUnitIncrement",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableUnitIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getScrollableUnitIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(*arg1)->getScrollableUnitIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_scrollToPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("scrollToPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollToPoint",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scrollToPoint",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_scrollToPoint",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_scrollToPoint",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->scrollToPoint((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getParentToLocal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getParentToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentToLocal",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParentToLocal",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getParentToLocal",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getParentToLocal",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (*arg1)->getParentToLocal((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getLocalToParent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getLocalToParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalToParent",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getLocalToParent",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getLocalToParent",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getLocalToParent",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (*arg1)->getLocalToParent((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_addAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_addAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InternalWindowRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::InternalWindowRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::InternalWindowRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_subAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_subAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InternalWindowRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::InternalWindowRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::InternalWindowRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_findAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_findAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_findAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_findAttachment",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InternalWindowRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InternalWindowRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::InternalWindowRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::InternalWindowRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::InternalWindowRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::InternalWindowRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getType",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getTypeId",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getGroupId",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getTypeName",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getProducerType",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getId",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getNumFields",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::InternalWindowRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_attachActivity",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::InternalWindowRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::InternalWindowRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::InternalWindowRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::InternalWindowRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::InternalWindowRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindowRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::InternalWindowRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::InternalWindowRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("InternalWindowRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindowRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_InternalWindowRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindowRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::InternalWindowRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::InternalWindowRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_InternalWindowRefPtr(void *obj) {
OSG::InternalWindowRefPtr *arg1 = (OSG::InternalWindowRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_InternalWindowRefPtr_methods[] = {
    {"__deref__", _wrap_InternalWindowRefPtr___deref__}, 
    {"takeFocus", _wrap_InternalWindowRefPtr_takeFocus}, 
    {"open", _wrap_InternalWindowRefPtr_open}, 
    {"close", _wrap_InternalWindowRefPtr_close}, 
    {"detachFromEventProducer", _wrap_InternalWindowRefPtr_detachFromEventProducer}, 
    {"giveFocus", _wrap_InternalWindowRefPtr_giveFocus}, 
    {"getBounds", _wrap_InternalWindowRefPtr_getBounds}, 
    {"getClipBounds", _wrap_InternalWindowRefPtr_getClipBounds}, 
    {"getInsideBorderBounds", _wrap_InternalWindowRefPtr_getInsideBorderBounds}, 
    {"getBoundsRenderingSurfaceSpace", _wrap_InternalWindowRefPtr_getBoundsRenderingSurfaceSpace}, 
    {"updateContainerLayout", _wrap_InternalWindowRefPtr_updateContainerLayout}, 
    {"updateClipBounds", _wrap_InternalWindowRefPtr_updateClipBounds}, 
    {"getRequestedSize", _wrap_InternalWindowRefPtr_getRequestedSize}, 
    {"getContentRequestedSize", _wrap_InternalWindowRefPtr_getContentRequestedSize}, 
    {"getBorderingLength", _wrap_InternalWindowRefPtr_getBorderingLength}, 
    {"setMouseContained", _wrap_InternalWindowRefPtr_setMouseContained}, 
    {"getMouseContained", _wrap_InternalWindowRefPtr_getMouseContained}, 
    {"isContained", _wrap_InternalWindowRefPtr_isContained}, 
    {"getBaseline", _wrap_InternalWindowRefPtr_getBaseline}, 
    {"setToolTipText", _wrap_InternalWindowRefPtr_setToolTipText}, 
    {"isToolTipActive", _wrap_InternalWindowRefPtr_isToolTipActive}, 
    {"activateToolTip", _wrap_InternalWindowRefPtr_activateToolTip}, 
    {"deactivateToolTip", _wrap_InternalWindowRefPtr_deactivateToolTip}, 
    {"setToolTipLocation", _wrap_InternalWindowRefPtr_setToolTipLocation}, 
    {"getToolTipLocation", _wrap_InternalWindowRefPtr_getToolTipLocation}, 
    {"getPreferredScrollableViewportSize", _wrap_InternalWindowRefPtr_getPreferredScrollableViewportSize}, 
    {"getScrollableBlockIncrement", _wrap_InternalWindowRefPtr_getScrollableBlockIncrement}, 
    {"getScrollableTracksViewportHeight", _wrap_InternalWindowRefPtr_getScrollableTracksViewportHeight}, 
    {"getScrollableTracksViewportWidth", _wrap_InternalWindowRefPtr_getScrollableTracksViewportWidth}, 
    {"getScrollableUnitIncrement", _wrap_InternalWindowRefPtr_getScrollableUnitIncrement}, 
    {"scrollToPoint", _wrap_InternalWindowRefPtr_scrollToPoint}, 
    {"getParentToLocal", _wrap_InternalWindowRefPtr_getParentToLocal}, 
    {"getLocalToParent", _wrap_InternalWindowRefPtr_getLocalToParent}, 
    {"addAttachment", _wrap_InternalWindowRefPtr_addAttachment}, 
    {"subAttachment", _wrap_InternalWindowRefPtr_subAttachment}, 
    {"findAttachment", _wrap_InternalWindowRefPtr_findAttachment}, 
    {"getType", _wrap_InternalWindowRefPtr_getType}, 
    {"shallowCopy", _wrap_InternalWindowRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_InternalWindowRefPtr_getTypeId}, 
    {"getGroupId", _wrap_InternalWindowRefPtr_getGroupId}, 
    {"getTypeName", _wrap_InternalWindowRefPtr_getTypeName}, 
    {"getProducerType", _wrap_InternalWindowRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_InternalWindowRefPtr_getContainerSize}, 
    {"getId", _wrap_InternalWindowRefPtr_getId}, 
    {"getNumFields", _wrap_InternalWindowRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_InternalWindowRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_InternalWindowRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_InternalWindowRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_InternalWindowRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_InternalWindowRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_InternalWindowRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_InternalWindowRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_InternalWindowRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_InternalWindowRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_InternalWindowRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_InternalWindowRefPtr_bases[] = {0,0};
static const char *swig_OSG_InternalWindowRefPtr_base_names[] = {"OSG::ComponentRefPtr *",0};
static swig_lua_class _wrap_class_OSG_InternalWindowRefPtr = { "InternalWindowRefPtr", &SWIGTYPE_p_OSG__InternalWindowRefPtr,_wrap_new_InternalWindowRefPtr, swig_delete_InternalWindowRefPtr, swig_OSG_InternalWindowRefPtr_methods, swig_OSG_InternalWindowRefPtr_attributes, swig_OSG_InternalWindowRefPtr_bases, swig_OSG_InternalWindowRefPtr_base_names };

static int _wrap_InternalWindow_takeFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindow *arg1 = (OSG::InternalWindow *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::InternalWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("takeFocus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindow,0))){
    SWIG_fail_ptr("InternalWindow_takeFocus",1,SWIGTYPE_p_OSG__InternalWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->takeFocus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindow_takeFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindow *arg1 = (OSG::InternalWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::InternalWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindow,0))){
    SWIG_fail_ptr("InternalWindow_takeFocus",1,SWIGTYPE_p_OSG__InternalWindow);
  }
  
  result = (bool)(arg1)->takeFocus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindow_takeFocus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_InternalWindow_takeFocus__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_InternalWindow_takeFocus__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindow_takeFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    takeFocus(OSG::InternalWindow *,bool)\n"
    "    takeFocus(OSG::InternalWindow *)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalWindow_open(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindow *arg1 = (OSG::InternalWindow *) 0 ;
  
  SWIG_check_num_args("open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"OSG::InternalWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindow,0))){
    SWIG_fail_ptr("InternalWindow_open",1,SWIGTYPE_p_OSG__InternalWindow);
  }
  
  (arg1)->open();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindow_close(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindow *arg1 = (OSG::InternalWindow *) 0 ;
  
  SWIG_check_num_args("close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("close",1,"OSG::InternalWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindow,0))){
    SWIG_fail_ptr("InternalWindow_close",1,SWIGTYPE_p_OSG__InternalWindow);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindow_detachFromEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindow *arg1 = (OSG::InternalWindow *) 0 ;
  
  SWIG_check_num_args("detachFromEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachFromEventProducer",1,"OSG::InternalWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindow,0))){
    SWIG_fail_ptr("InternalWindow_detachFromEventProducer",1,SWIGTYPE_p_OSG__InternalWindow);
  }
  
  (arg1)->detachFromEventProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindow_giveFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindow *arg1 = (OSG::InternalWindow *) 0 ;
  OSG::ComponentRefPtr arg2 ;
  bool arg3 ;
  OSG::ComponentRefPtr *argp2 ;
  
  SWIG_check_num_args("giveFocus",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("giveFocus",1,"OSG::InternalWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("giveFocus",2,"OSG::ComponentRefPtr const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("giveFocus",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindow,0))){
    SWIG_fail_ptr("InternalWindow_giveFocus",1,SWIGTYPE_p_OSG__InternalWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("InternalWindow_giveFocus",2,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  OSG_InternalWindow_giveFocus__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindow_giveFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::InternalWindow *arg1 = (OSG::InternalWindow *) 0 ;
  OSG::ComponentRefPtr arg2 ;
  OSG::ComponentRefPtr *argp2 ;
  
  SWIG_check_num_args("giveFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("giveFocus",1,"OSG::InternalWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("giveFocus",2,"OSG::ComponentRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__InternalWindow,0))){
    SWIG_fail_ptr("InternalWindow_giveFocus",1,SWIGTYPE_p_OSG__InternalWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ComponentRefPtr,0))){
    SWIG_fail_ptr("InternalWindow_giveFocus",2,SWIGTYPE_p_OSG__ComponentRefPtr);
  }
  arg2 = *argp2;
  
  OSG_InternalWindow_giveFocus__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InternalWindow_giveFocus(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InternalWindow_giveFocus__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__ComponentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_InternalWindow_giveFocus__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'InternalWindow_giveFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    giveFocus(OSG::InternalWindow *,OSG::ComponentRefPtr const,bool)\n"
    "    giveFocus(OSG::InternalWindow *,OSG::ComponentRefPtr const)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_InternalWindow_methods[] = {
    {"takeFocus", _wrap_InternalWindow_takeFocus}, 
    {"open", _wrap_InternalWindow_open}, 
    {"close", _wrap_InternalWindow_close}, 
    {"detachFromEventProducer", _wrap_InternalWindow_detachFromEventProducer}, 
    {"giveFocus", _wrap_InternalWindow_giveFocus}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_InternalWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_InternalWindow_bases[] = {0,0};
static const char *swig_OSG_InternalWindow_base_names[] = {"OSG::Component *",0};
static swig_lua_class _wrap_class_OSG_InternalWindow = { "InternalWindow", &SWIGTYPE_p_OSG__InternalWindow,0,0, swig_OSG_InternalWindow_methods, swig_OSG_InternalWindow_attributes, swig_OSG_InternalWindow_bases, swig_OSG_InternalWindow_base_names };

static int _wrap_new_UIDrawingSurfaceRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::UIDrawingSurfaceRefPtr",0,0)
  result = (OSG::UIDrawingSurfaceRefPtr *)new OSG::UIDrawingSurfaceRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UIDrawingSurfaceRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = 0 ;
  OSG::UIDrawingSurfaceRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::UIDrawingSurfaceRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::UIDrawingSurfaceRefPtr",1,"OSG::UIDrawingSurfaceRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("new_UIDrawingSurfaceRefPtr",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UIDrawingSurfaceRefPtr *)new OSG::UIDrawingSurfaceRefPtr((OSG::UIDrawingSurfaceRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UIDrawingSurfaceRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UIDrawingSurfaceRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UIDrawingSurfaceRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_UIDrawingSurfaceRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::UIDrawingSurfaceRefPtr()\n"
    "    OSG::UIDrawingSurfaceRefPtr(OSG::UIDrawingSurfaceRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UIDrawingSurfaceRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UIDrawingSurface *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::UIDrawingSurfaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr___deref__",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UIDrawingSurface *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__UIDrawingSurface,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::UIDrawingSurfaceRefPtr result;
  
  SWIG_check_num_args("OSG_UIDrawingSurfaceRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_UIDrawingSurfaceRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_UIDrawingSurfaceRefPtr_dcast(arg1);
  {
    OSG::UIDrawingSurfaceRefPtr * resultptr = new OSG::UIDrawingSurfaceRefPtr((const OSG::UIDrawingSurfaceRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_detachFromEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  
  SWIG_check_num_args("detachFromEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachFromEventProducer",1,"OSG::UIDrawingSurfaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_detachFromEventProducer",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  (*arg1)->detachFromEventProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getMousePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMousePosition",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getMousePosition",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (*arg1)->getMousePosition();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getNumWindowLayers(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumWindowLayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumWindowLayers",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getNumWindowLayers",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumWindowLayers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_openWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::InternalWindowRefPtr arg2 ;
  OSG::Int32 arg3 ;
  OSG::InternalWindowRefPtr *argp2 ;
  
  SWIG_check_num_args("openWindow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"OSG::InternalWindowRefPtr const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("openWindow",3,"OSG::Int32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_openWindow",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_openWindow",2,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (OSG::Int32 const)lua_tonumber(L, 3);
  OSG_UIDrawingSurface_openWindow__SWIG_0((OSG::UIDrawingSurface*)(arg1)->operator ->(),arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_openWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::InternalWindowRefPtr arg2 ;
  OSG::InternalWindowRefPtr *argp2 ;
  
  SWIG_check_num_args("openWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"OSG::InternalWindowRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_openWindow",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_openWindow",2,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  arg2 = *argp2;
  
  OSG_UIDrawingSurface_openWindow__SWIG_0((OSG::UIDrawingSurface*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_openWindow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_openWindow__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UIDrawingSurfaceRefPtr_openWindow__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UIDrawingSurfaceRefPtr_openWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    openWindow(OSG::UIDrawingSurfaceRefPtr *,OSG::InternalWindowRefPtr const,OSG::Int32 const)\n"
    "    openWindow(OSG::UIDrawingSurfaceRefPtr *,OSG::InternalWindowRefPtr const)\n");
  lua_error(L);return 0;
}


static int _wrap_UIDrawingSurfaceRefPtr_closeWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::InternalWindowRefPtr arg2 ;
  OSG::InternalWindowRefPtr *argp2 ;
  
  SWIG_check_num_args("closeWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("closeWindow",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("closeWindow",2,"OSG::InternalWindowRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_closeWindow",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_closeWindow",2,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  arg2 = *argp2;
  
  OSG_UIDrawingSurface_closeWindow((OSG::UIDrawingSurface*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_addAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_addAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UIDrawingSurfaceRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UIDrawingSurfaceRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UIDrawingSurfaceRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_subAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_subAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UIDrawingSurfaceRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UIDrawingSurfaceRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_findAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_findAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_findAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_findAttachment",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UIDrawingSurfaceRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UIDrawingSurfaceRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::UIDrawingSurfaceRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UIDrawingSurfaceRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::UIDrawingSurfaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getType",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getTypeId",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getGroupId",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getTypeName",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getProducerType",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getId",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getNumFields",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::UIDrawingSurfaceRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_attachActivity",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::UIDrawingSurfaceRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::UIDrawingSurfaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::UIDrawingSurfaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::UIDrawingSurfaceRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::UIDrawingSurfaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::UIDrawingSurfaceRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UIDrawingSurfaceRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::UIDrawingSurfaceRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::UIDrawingSurfaceRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_UIDrawingSurfaceRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::UIDrawingSurfaceRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::UIDrawingSurfaceRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurfaceRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurfaceRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_UIDrawingSurfaceRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UIDrawingSurfaceRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::UIDrawingSurfaceRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::UIDrawingSurfaceRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_UIDrawingSurfaceRefPtr(void *obj) {
OSG::UIDrawingSurfaceRefPtr *arg1 = (OSG::UIDrawingSurfaceRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_UIDrawingSurfaceRefPtr_methods[] = {
    {"__deref__", _wrap_UIDrawingSurfaceRefPtr___deref__}, 
    {"detachFromEventProducer", _wrap_UIDrawingSurfaceRefPtr_detachFromEventProducer}, 
    {"getMousePosition", _wrap_UIDrawingSurfaceRefPtr_getMousePosition}, 
    {"getNumWindowLayers", _wrap_UIDrawingSurfaceRefPtr_getNumWindowLayers}, 
    {"openWindow", _wrap_UIDrawingSurfaceRefPtr_openWindow}, 
    {"closeWindow", _wrap_UIDrawingSurfaceRefPtr_closeWindow}, 
    {"addAttachment", _wrap_UIDrawingSurfaceRefPtr_addAttachment}, 
    {"subAttachment", _wrap_UIDrawingSurfaceRefPtr_subAttachment}, 
    {"findAttachment", _wrap_UIDrawingSurfaceRefPtr_findAttachment}, 
    {"getType", _wrap_UIDrawingSurfaceRefPtr_getType}, 
    {"shallowCopy", _wrap_UIDrawingSurfaceRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_UIDrawingSurfaceRefPtr_getTypeId}, 
    {"getGroupId", _wrap_UIDrawingSurfaceRefPtr_getGroupId}, 
    {"getTypeName", _wrap_UIDrawingSurfaceRefPtr_getTypeName}, 
    {"getProducerType", _wrap_UIDrawingSurfaceRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_UIDrawingSurfaceRefPtr_getContainerSize}, 
    {"getId", _wrap_UIDrawingSurfaceRefPtr_getId}, 
    {"getNumFields", _wrap_UIDrawingSurfaceRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_UIDrawingSurfaceRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_UIDrawingSurfaceRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_UIDrawingSurfaceRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_UIDrawingSurfaceRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_UIDrawingSurfaceRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_UIDrawingSurfaceRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_UIDrawingSurfaceRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_UIDrawingSurfaceRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_UIDrawingSurfaceRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_UIDrawingSurfaceRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_UIDrawingSurfaceRefPtr_bases[] = {0,0};
static const char *swig_OSG_UIDrawingSurfaceRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_UIDrawingSurfaceRefPtr = { "UIDrawingSurfaceRefPtr", &SWIGTYPE_p_OSG__UIDrawingSurfaceRefPtr,_wrap_new_UIDrawingSurfaceRefPtr, swig_delete_UIDrawingSurfaceRefPtr, swig_OSG_UIDrawingSurfaceRefPtr_methods, swig_OSG_UIDrawingSurfaceRefPtr_attributes, swig_OSG_UIDrawingSurfaceRefPtr_bases, swig_OSG_UIDrawingSurfaceRefPtr_base_names };

static int _wrap_UIDrawingSurface_detachFromEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurface *arg1 = (OSG::UIDrawingSurface *) 0 ;
  
  SWIG_check_num_args("detachFromEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachFromEventProducer",1,"OSG::UIDrawingSurface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurface,0))){
    SWIG_fail_ptr("UIDrawingSurface_detachFromEventProducer",1,SWIGTYPE_p_OSG__UIDrawingSurface);
  }
  
  (arg1)->detachFromEventProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurface_getMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurface *arg1 = (OSG::UIDrawingSurface *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getMousePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMousePosition",1,"OSG::UIDrawingSurface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurface,0))){
    SWIG_fail_ptr("UIDrawingSurface_getMousePosition",1,SWIGTYPE_p_OSG__UIDrawingSurface);
  }
  
  result = ((OSG::UIDrawingSurface const *)arg1)->getMousePosition();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurface_getNumWindowLayers(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurface *arg1 = (OSG::UIDrawingSurface *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumWindowLayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumWindowLayers",1,"OSG::UIDrawingSurface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurface,0))){
    SWIG_fail_ptr("UIDrawingSurface_getNumWindowLayers",1,SWIGTYPE_p_OSG__UIDrawingSurface);
  }
  
  result = (OSG::UInt32)((OSG::UIDrawingSurface const *)arg1)->getNumWindowLayers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurface_openWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurface *arg1 = (OSG::UIDrawingSurface *) 0 ;
  OSG::InternalWindowRefPtr arg2 ;
  OSG::Int32 arg3 ;
  OSG::InternalWindowRefPtr *argp2 ;
  
  SWIG_check_num_args("openWindow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"OSG::UIDrawingSurface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"OSG::InternalWindowRefPtr const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("openWindow",3,"OSG::Int32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurface,0))){
    SWIG_fail_ptr("UIDrawingSurface_openWindow",1,SWIGTYPE_p_OSG__UIDrawingSurface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurface_openWindow",2,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  arg2 = *argp2;
  
  arg3 = (OSG::Int32 const)lua_tonumber(L, 3);
  OSG_UIDrawingSurface_openWindow__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurface_openWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurface *arg1 = (OSG::UIDrawingSurface *) 0 ;
  OSG::InternalWindowRefPtr arg2 ;
  OSG::InternalWindowRefPtr *argp2 ;
  
  SWIG_check_num_args("openWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"OSG::UIDrawingSurface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"OSG::InternalWindowRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurface,0))){
    SWIG_fail_ptr("UIDrawingSurface_openWindow",1,SWIGTYPE_p_OSG__UIDrawingSurface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurface_openWindow",2,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  arg2 = *argp2;
  
  OSG_UIDrawingSurface_openWindow__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIDrawingSurface_openWindow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UIDrawingSurface_openWindow__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__UIDrawingSurface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__InternalWindowRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UIDrawingSurface_openWindow__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UIDrawingSurface_openWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    openWindow(OSG::UIDrawingSurface *,OSG::InternalWindowRefPtr const,OSG::Int32 const)\n"
    "    openWindow(OSG::UIDrawingSurface *,OSG::InternalWindowRefPtr const)\n");
  lua_error(L);return 0;
}


static int _wrap_UIDrawingSurface_closeWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UIDrawingSurface *arg1 = (OSG::UIDrawingSurface *) 0 ;
  OSG::InternalWindowRefPtr arg2 ;
  OSG::InternalWindowRefPtr *argp2 ;
  
  SWIG_check_num_args("closeWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("closeWindow",1,"OSG::UIDrawingSurface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("closeWindow",2,"OSG::InternalWindowRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__UIDrawingSurface,0))){
    SWIG_fail_ptr("UIDrawingSurface_closeWindow",1,SWIGTYPE_p_OSG__UIDrawingSurface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__InternalWindowRefPtr,0))){
    SWIG_fail_ptr("UIDrawingSurface_closeWindow",2,SWIGTYPE_p_OSG__InternalWindowRefPtr);
  }
  arg2 = *argp2;
  
  OSG_UIDrawingSurface_closeWindow(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_UIDrawingSurface_methods[] = {
    {"detachFromEventProducer", _wrap_UIDrawingSurface_detachFromEventProducer}, 
    {"getMousePosition", _wrap_UIDrawingSurface_getMousePosition}, 
    {"getNumWindowLayers", _wrap_UIDrawingSurface_getNumWindowLayers}, 
    {"openWindow", _wrap_UIDrawingSurface_openWindow}, 
    {"closeWindow", _wrap_UIDrawingSurface_closeWindow}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_UIDrawingSurface_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_UIDrawingSurface_bases[] = {0,0};
static const char *swig_OSG_UIDrawingSurface_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_UIDrawingSurface = { "UIDrawingSurface", &SWIGTYPE_p_OSG__UIDrawingSurface,0,0, swig_OSG_UIDrawingSurface_methods, swig_OSG_UIDrawingSurface_attributes, swig_OSG_UIDrawingSurface_bases, swig_OSG_UIDrawingSurface_base_names };

static int _wrap_new_ScrollPanelRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ScrollPanelRefPtr",0,0)
  result = (OSG::ScrollPanelRefPtr *)new OSG::ScrollPanelRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ScrollPanelRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScrollPanelRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = 0 ;
  OSG::ScrollPanelRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ScrollPanelRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::ScrollPanelRefPtr",1,"OSG::ScrollPanelRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("new_ScrollPanelRefPtr",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::ScrollPanelRefPtr *)new OSG::ScrollPanelRefPtr((OSG::ScrollPanelRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ScrollPanelRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScrollPanelRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ScrollPanelRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ScrollPanelRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ScrollPanelRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::ScrollPanelRefPtr()\n"
    "    OSG::ScrollPanelRefPtr(OSG::ScrollPanelRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPanelRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::ScrollPanel *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr___deref__",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::ScrollPanel *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ScrollPanel,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::ScrollPanelRefPtr result;
  
  SWIG_check_num_args("OSG_ScrollPanelRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ScrollPanelRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_ScrollPanelRefPtr_dcast(arg1);
  {
    OSG::ScrollPanelRefPtr * resultptr = new OSG::ScrollPanelRefPtr((const OSG::ScrollPanelRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ScrollPanelRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_updateLayout(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  
  SWIG_check_num_args("updateLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateLayout",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_updateLayout",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  (*arg1)->updateLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_scrollHorizontalUnit(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollHorizontalUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollHorizontalUnit",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollHorizontalUnit",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_scrollHorizontalUnit",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (*arg1)->scrollHorizontalUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_scrollHorizontalBlock(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollHorizontalBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollHorizontalBlock",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollHorizontalBlock",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_scrollHorizontalBlock",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (*arg1)->scrollHorizontalBlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_scrollVerticalUnit(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollVerticalUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollVerticalUnit",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollVerticalUnit",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_scrollVerticalUnit",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (*arg1)->scrollVerticalUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_scrollVerticalBlock(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollVerticalBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollVerticalBlock",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollVerticalBlock",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_scrollVerticalBlock",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (*arg1)->scrollVerticalBlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBounds",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getClipBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipBounds",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClipBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getClipBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getClipBounds",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getClipBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getClipBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getClipBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getInsideBorderBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getInsideBorderBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInsideBorderBounds",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInsideBorderBounds",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getInsideBorderBounds",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getInsideBorderBounds",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getInsideBorderBounds",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getInsideBorderBounds",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getInsideBorderBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getBoundsRenderingSurfaceSpace(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBoundsRenderingSurfaceSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",2,"OSG::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",3,"OSG::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBoundsRenderingSurfaceSpace",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBoundsRenderingSurfaceSpace",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBoundsRenderingSurfaceSpace",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->getBoundsRenderingSurfaceSpace(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_updateContainerLayout(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  
  SWIG_check_num_args("updateContainerLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateContainerLayout",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_updateContainerLayout",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  (*arg1)->updateContainerLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_updateClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  
  SWIG_check_num_args("updateClipBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateClipBounds",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_updateClipBounds",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  (*arg1)->updateClipBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRequestedSize",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getRequestedSize",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (*arg1)->getRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getContentRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getContentRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentRequestedSize",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getContentRequestedSize",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (*arg1)->getContentRequestedSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getBorderingLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getBorderingLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBorderingLength",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBorderingLength",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (*arg1)->getBorderingLength();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_setMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setMouseContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMouseContained",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setMouseContained",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_setMouseContained",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setMouseContained(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getMouseContained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMouseContained",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getMouseContained",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (bool)(*arg1)->getMouseContained();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_takeFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("takeFocus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_takeFocus",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(*arg1)->takeFocus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_takeFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_takeFocus",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (bool)(*arg1)->takeFocus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_takeFocus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ScrollPanelRefPtr_takeFocus__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_takeFocus__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ScrollPanelRefPtr_takeFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    takeFocus(OSG::ScrollPanelRefPtr *,bool)\n"
    "    takeFocus(OSG::ScrollPanelRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPanelRefPtr_isContained__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("isContained",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("isContained",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_isContained",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(*arg1)->isContained((OSG::Pnt2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_isContained__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_isContained",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_isContained",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (bool)(*arg1)->isContained((OSG::Pnt2f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_isContained(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_isContained__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ScrollPanelRefPtr_isContained__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ScrollPanelRefPtr_isContained'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isContained(OSG::ScrollPanelRefPtr const *,OSG::Pnt2f const &,bool)\n"
    "    isContained(OSG::ScrollPanelRefPtr const *,OSG::Pnt2f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPanelRefPtr_getBaseline(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 temp2 ;
  OSG::Real32 temp3 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getBaseline",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBaseline",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBaseline",2,"OSG::Real32 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getBaseline",3,"OSG::Real32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getBaseline",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  temp2=(OSG::Real32)lua_tonumber(L,2); arg2=&temp2;
  temp3=(OSG::Real32)lua_tonumber(L,3); arg3=&temp3;
  result = (OSG::Real32)(*arg1)->getBaseline((OSG::Real32 const &)*arg2,(OSG::Real32 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_setToolTipText(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setToolTipText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipText",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setToolTipText",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_setToolTipText",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (*arg1)->setToolTipText((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_isToolTipActive(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isToolTipActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isToolTipActive",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_isToolTipActive",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (bool)(*arg1)->isToolTipActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_activateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  
  SWIG_check_num_args("activateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("activateToolTip",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_activateToolTip",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  (*arg1)->activateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_deactivateToolTip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  
  SWIG_check_num_args("deactivateToolTip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deactivateToolTip",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_deactivateToolTip",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  (*arg1)->deactivateToolTip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_setToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("setToolTipLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToolTipLocation",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setToolTipLocation",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_setToolTipLocation",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_setToolTipLocation",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->setToolTipLocation((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getToolTipLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToolTipLocation",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getToolTipLocation",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (*arg1)->getToolTipLocation();
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getPreferredScrollableViewportSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("getPreferredScrollableViewportSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPreferredScrollableViewportSize",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getPreferredScrollableViewportSize",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (*arg1)->getPreferredScrollableViewportSize();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getScrollableBlockIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableBlockIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableBlockIncrement",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableBlockIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableBlockIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableBlockIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableBlockIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableBlockIncrement",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableBlockIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableBlockIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(*arg1)->getScrollableBlockIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getScrollableTracksViewportHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportHeight",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableTracksViewportHeight",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportHeight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getScrollableTracksViewportWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportWidth",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableTracksViewportWidth",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportWidth();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getScrollableUnitIncrement(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::Int32 *arg5 = 0 ;
  OSG::UInt32 temp4 ;
  OSG::Int32 temp5 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getScrollableUnitIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableUnitIncrement",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableUnitIncrement",2,"OSG::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableUnitIncrement",3,"OSG::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableUnitIncrement",4,"OSG::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableUnitIncrement",5,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableUnitIncrement",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableUnitIncrement",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getScrollableUnitIncrement",3,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(OSG::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(OSG::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (OSG::Int32)(*arg1)->getScrollableUnitIncrement((OSG::Pnt2f const &)*arg2,(OSG::Pnt2f const &)*arg3,(OSG::UInt32 const &)*arg4,(OSG::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_scrollToPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("scrollToPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollToPoint",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scrollToPoint",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_scrollToPoint",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_scrollToPoint",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (*arg1)->scrollToPoint((OSG::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getParentToLocal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getParentToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentToLocal",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParentToLocal",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getParentToLocal",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getParentToLocal",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (*arg1)->getParentToLocal((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getLocalToParent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Pnt2f *arg2 = 0 ;
  OSG::Pnt2f result;
  
  SWIG_check_num_args("getLocalToParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalToParent",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getLocalToParent",2,"OSG::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getLocalToParent",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getLocalToParent",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (*arg1)->getLocalToParent((OSG::Pnt2f const &)*arg2);
  {
    OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ScrollPanelRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ScrollPanelRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::ScrollPanelRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::ScrollPanelRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPanelRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ScrollPanelRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ScrollPanelRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::ScrollPanelRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::ScrollPanelRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPanelRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ScrollPanelRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ScrollPanelRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ScrollPanelRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::ScrollPanelRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::ScrollPanelRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::ScrollPanelRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::ScrollPanelRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPanelRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getType",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getTypeId",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getGroupId",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getTypeName",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getProducerType",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getId",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getNumFields",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ScrollPanelRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_attachActivity",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ScrollPanelRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ScrollPanelRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ScrollPanelRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ScrollPanelRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ScrollPanelRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ScrollPanelRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPanelRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ScrollPanelRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ScrollPanelRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanelRefPtr,0))){
    SWIG_fail_ptr("ScrollPanelRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ScrollPanelRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanelRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ScrollPanelRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScrollPanelRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ScrollPanelRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ScrollPanelRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ScrollPanelRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_ScrollPanelRefPtr(void *obj) {
OSG::ScrollPanelRefPtr *arg1 = (OSG::ScrollPanelRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ScrollPanelRefPtr_methods[] = {
    {"__deref__", _wrap_ScrollPanelRefPtr___deref__}, 
    {"updateLayout", _wrap_ScrollPanelRefPtr_updateLayout}, 
    {"scrollHorizontalUnit", _wrap_ScrollPanelRefPtr_scrollHorizontalUnit}, 
    {"scrollHorizontalBlock", _wrap_ScrollPanelRefPtr_scrollHorizontalBlock}, 
    {"scrollVerticalUnit", _wrap_ScrollPanelRefPtr_scrollVerticalUnit}, 
    {"scrollVerticalBlock", _wrap_ScrollPanelRefPtr_scrollVerticalBlock}, 
    {"getBounds", _wrap_ScrollPanelRefPtr_getBounds}, 
    {"getClipBounds", _wrap_ScrollPanelRefPtr_getClipBounds}, 
    {"getInsideBorderBounds", _wrap_ScrollPanelRefPtr_getInsideBorderBounds}, 
    {"getBoundsRenderingSurfaceSpace", _wrap_ScrollPanelRefPtr_getBoundsRenderingSurfaceSpace}, 
    {"updateContainerLayout", _wrap_ScrollPanelRefPtr_updateContainerLayout}, 
    {"updateClipBounds", _wrap_ScrollPanelRefPtr_updateClipBounds}, 
    {"getRequestedSize", _wrap_ScrollPanelRefPtr_getRequestedSize}, 
    {"getContentRequestedSize", _wrap_ScrollPanelRefPtr_getContentRequestedSize}, 
    {"getBorderingLength", _wrap_ScrollPanelRefPtr_getBorderingLength}, 
    {"setMouseContained", _wrap_ScrollPanelRefPtr_setMouseContained}, 
    {"getMouseContained", _wrap_ScrollPanelRefPtr_getMouseContained}, 
    {"takeFocus", _wrap_ScrollPanelRefPtr_takeFocus}, 
    {"isContained", _wrap_ScrollPanelRefPtr_isContained}, 
    {"getBaseline", _wrap_ScrollPanelRefPtr_getBaseline}, 
    {"setToolTipText", _wrap_ScrollPanelRefPtr_setToolTipText}, 
    {"isToolTipActive", _wrap_ScrollPanelRefPtr_isToolTipActive}, 
    {"activateToolTip", _wrap_ScrollPanelRefPtr_activateToolTip}, 
    {"deactivateToolTip", _wrap_ScrollPanelRefPtr_deactivateToolTip}, 
    {"setToolTipLocation", _wrap_ScrollPanelRefPtr_setToolTipLocation}, 
    {"getToolTipLocation", _wrap_ScrollPanelRefPtr_getToolTipLocation}, 
    {"getPreferredScrollableViewportSize", _wrap_ScrollPanelRefPtr_getPreferredScrollableViewportSize}, 
    {"getScrollableBlockIncrement", _wrap_ScrollPanelRefPtr_getScrollableBlockIncrement}, 
    {"getScrollableTracksViewportHeight", _wrap_ScrollPanelRefPtr_getScrollableTracksViewportHeight}, 
    {"getScrollableTracksViewportWidth", _wrap_ScrollPanelRefPtr_getScrollableTracksViewportWidth}, 
    {"getScrollableUnitIncrement", _wrap_ScrollPanelRefPtr_getScrollableUnitIncrement}, 
    {"scrollToPoint", _wrap_ScrollPanelRefPtr_scrollToPoint}, 
    {"getParentToLocal", _wrap_ScrollPanelRefPtr_getParentToLocal}, 
    {"getLocalToParent", _wrap_ScrollPanelRefPtr_getLocalToParent}, 
    {"addAttachment", _wrap_ScrollPanelRefPtr_addAttachment}, 
    {"subAttachment", _wrap_ScrollPanelRefPtr_subAttachment}, 
    {"findAttachment", _wrap_ScrollPanelRefPtr_findAttachment}, 
    {"getType", _wrap_ScrollPanelRefPtr_getType}, 
    {"shallowCopy", _wrap_ScrollPanelRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_ScrollPanelRefPtr_getTypeId}, 
    {"getGroupId", _wrap_ScrollPanelRefPtr_getGroupId}, 
    {"getTypeName", _wrap_ScrollPanelRefPtr_getTypeName}, 
    {"getProducerType", _wrap_ScrollPanelRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_ScrollPanelRefPtr_getContainerSize}, 
    {"getId", _wrap_ScrollPanelRefPtr_getId}, 
    {"getNumFields", _wrap_ScrollPanelRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_ScrollPanelRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_ScrollPanelRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_ScrollPanelRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ScrollPanelRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ScrollPanelRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ScrollPanelRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_ScrollPanelRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_ScrollPanelRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_ScrollPanelRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ScrollPanelRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ScrollPanelRefPtr_bases[] = {0,0};
static const char *swig_OSG_ScrollPanelRefPtr_base_names[] = {"OSG::ComponentRefPtr *",0};
static swig_lua_class _wrap_class_OSG_ScrollPanelRefPtr = { "ScrollPanelRefPtr", &SWIGTYPE_p_OSG__ScrollPanelRefPtr,_wrap_new_ScrollPanelRefPtr, swig_delete_ScrollPanelRefPtr, swig_OSG_ScrollPanelRefPtr_methods, swig_OSG_ScrollPanelRefPtr_attributes, swig_OSG_ScrollPanelRefPtr_bases, swig_OSG_ScrollPanelRefPtr_base_names };

static int _wrap_ScrollPanel_updateLayout(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanel *arg1 = (OSG::ScrollPanel *) 0 ;
  
  SWIG_check_num_args("updateLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateLayout",1,"OSG::ScrollPanel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanel,0))){
    SWIG_fail_ptr("ScrollPanel_updateLayout",1,SWIGTYPE_p_OSG__ScrollPanel);
  }
  
  (arg1)->updateLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanel_scrollHorizontalUnit(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanel *arg1 = (OSG::ScrollPanel *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollHorizontalUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollHorizontalUnit",1,"OSG::ScrollPanel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollHorizontalUnit",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanel,0))){
    SWIG_fail_ptr("ScrollPanel_scrollHorizontalUnit",1,SWIGTYPE_p_OSG__ScrollPanel);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (arg1)->scrollHorizontalUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanel_scrollHorizontalBlock(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanel *arg1 = (OSG::ScrollPanel *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollHorizontalBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollHorizontalBlock",1,"OSG::ScrollPanel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollHorizontalBlock",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanel,0))){
    SWIG_fail_ptr("ScrollPanel_scrollHorizontalBlock",1,SWIGTYPE_p_OSG__ScrollPanel);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (arg1)->scrollHorizontalBlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanel_scrollVerticalUnit(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanel *arg1 = (OSG::ScrollPanel *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollVerticalUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollVerticalUnit",1,"OSG::ScrollPanel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollVerticalUnit",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanel,0))){
    SWIG_fail_ptr("ScrollPanel_scrollVerticalUnit",1,SWIGTYPE_p_OSG__ScrollPanel);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (arg1)->scrollVerticalUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPanel_scrollVerticalBlock(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ScrollPanel *arg1 = (OSG::ScrollPanel *) 0 ;
  OSG::Int32 arg2 ;
  
  SWIG_check_num_args("scrollVerticalBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollVerticalBlock",1,"OSG::ScrollPanel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scrollVerticalBlock",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ScrollPanel,0))){
    SWIG_fail_ptr("ScrollPanel_scrollVerticalBlock",1,SWIGTYPE_p_OSG__ScrollPanel);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  (arg1)->scrollVerticalBlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_ScrollPanel_methods[] = {
    {"updateLayout", _wrap_ScrollPanel_updateLayout}, 
    {"scrollHorizontalUnit", _wrap_ScrollPanel_scrollHorizontalUnit}, 
    {"scrollHorizontalBlock", _wrap_ScrollPanel_scrollHorizontalBlock}, 
    {"scrollVerticalUnit", _wrap_ScrollPanel_scrollVerticalUnit}, 
    {"scrollVerticalBlock", _wrap_ScrollPanel_scrollVerticalBlock}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ScrollPanel_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ScrollPanel_bases[] = {0,0};
static const char *swig_OSG_ScrollPanel_base_names[] = {"OSG::Component *",0};
static swig_lua_class _wrap_class_OSG_ScrollPanel = { "ScrollPanel", &SWIGTYPE_p_OSG__ScrollPanel,0,0, swig_OSG_ScrollPanel_methods, swig_OSG_ScrollPanel_attributes, swig_OSG_ScrollPanel_bases, swig_OSG_ScrollPanel_base_names };

static int _wrap_new_SoundRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SoundRefPtr",0,0)
  result = (OSG::SoundRefPtr *)new OSG::SoundRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SoundRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = 0 ;
  OSG::SoundRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SoundRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::SoundRefPtr",1,"OSG::SoundRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("new_SoundRefPtr",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::SoundRefPtr *)new OSG::SoundRefPtr((OSG::SoundRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SoundRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SoundRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SoundRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SoundRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::SoundRefPtr()\n"
    "    OSG::SoundRefPtr(OSG::SoundRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Sound *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::SoundRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr___deref__",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::Sound *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::SoundRefPtr result;
  
  SWIG_check_num_args("OSG_SoundRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_SoundRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_SoundRefPtr_dcast(arg1);
  {
    OSG::SoundRefPtr * resultptr = new OSG::SoundRefPtr((const OSG::SoundRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SoundRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_play(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("play",1,"OSG::SoundRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_play",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->play();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getLength",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::Real32)(*arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getNumChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumChannels",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getNumChannels",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getNumPlayingChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingChannels",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getNumPlayingChannels",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumPlayingChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPlaying",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_isPlaying",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isPlaying(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_isValid(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isValid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isValid",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_isValid",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isValid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stop",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_stop",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->stop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pause",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_pause",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("unpause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("unpause",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_unpause",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->unpause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_pauseToggle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("pauseToggle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseToggle",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pauseToggle",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_pauseToggle",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->pauseToggle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPaused",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_isPaused",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isPaused(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_seek(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("seek",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_seek",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (*arg1)->seek(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getTime(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTime",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getTime",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getTime",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::Real32)(*arg1)->getTime(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_setChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelPosition",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelPosition",2,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelPosition",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_setChannelPosition",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("SoundRefPtr_setChannelPosition",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (*arg1)->setChannelPosition((OSG::Pnt3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Pnt3f result;
  
  SWIG_check_num_args("getChannelPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelPosition",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelPosition",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getChannelPosition",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->getChannelPosition(arg2);
  {
    OSG::Pnt3f * resultptr = new OSG::Pnt3f((const OSG::Pnt3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_setChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVelocity",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelVelocity",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVelocity",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_setChannelVelocity",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("SoundRefPtr_setChannelVelocity",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (*arg1)->setChannelVelocity((OSG::Vec3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("getChannelVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVelocity",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVelocity",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getChannelVelocity",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->getChannelVelocity(arg2);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_setChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVolume",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVolume",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setChannelVolume",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVolume",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_setChannelVolume",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (*arg1)->setChannelVolume(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getChannelVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVolume",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVolume",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getChannelVolume",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::Real32)(*arg1)->getChannelVolume(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getMute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("getMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMute",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMute",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getMute",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->getMute(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_mute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  bool arg2 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("mute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mute",1,"OSG::SoundRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mute",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mute",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_mute",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (*arg1)->mute(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_setAllChannelsVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("setAllChannelsVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelsVolume",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAllChannelsVolume",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_setAllChannelsVolume",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (*arg1)->setAllChannelsVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_stopAllChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  
  SWIG_check_num_args("stopAllChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stopAllChannels",1,"OSG::SoundRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_stopAllChannels",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  (*arg1)->stopAllChannels();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_setAllChannelPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelPaused",1,"OSG::SoundRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelPaused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_setAllChannelPaused",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setAllChannelPaused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_setAllChannelMute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelMute",1,"OSG::SoundRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelMute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_setAllChannelMute",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setAllChannelMute(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_create(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::SoundRefPtr result;
  
  SWIG_check_num_args("create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("create",1,"OSG::SoundRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_create",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (*arg1)->create();
  {
    OSG::SoundRefPtr * resultptr = new OSG::SoundRefPtr((const OSG::SoundRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SoundRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_addAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_addAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::SoundRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::SoundRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_subAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_subAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::SoundRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::SoundRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("SoundRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("SoundRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::SoundRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::SoundRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::SoundRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::SoundRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::SoundRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getType",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getTypeId",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getGroupId",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getTypeName",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getProducerType",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getId",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getNumFields",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::SoundRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_attachActivity",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("SoundRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::SoundRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::SoundRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::SoundRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::SoundRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::SoundRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::SoundRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::SoundRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundRefPtr,0))){
    SWIG_fail_ptr("SoundRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__SoundRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::SoundRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::SoundRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SoundRefPtr(void *obj) {
OSG::SoundRefPtr *arg1 = (OSG::SoundRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_SoundRefPtr_methods[] = {
    {"__deref__", _wrap_SoundRefPtr___deref__}, 
    {"play", _wrap_SoundRefPtr_play}, 
    {"getLength", _wrap_SoundRefPtr_getLength}, 
    {"getNumChannels", _wrap_SoundRefPtr_getNumChannels}, 
    {"getNumPlayingChannels", _wrap_SoundRefPtr_getNumPlayingChannels}, 
    {"isPlaying", _wrap_SoundRefPtr_isPlaying}, 
    {"isValid", _wrap_SoundRefPtr_isValid}, 
    {"stop", _wrap_SoundRefPtr_stop}, 
    {"pause", _wrap_SoundRefPtr_pause}, 
    {"unpause", _wrap_SoundRefPtr_unpause}, 
    {"pauseToggle", _wrap_SoundRefPtr_pauseToggle}, 
    {"isPaused", _wrap_SoundRefPtr_isPaused}, 
    {"seek", _wrap_SoundRefPtr_seek}, 
    {"getTime", _wrap_SoundRefPtr_getTime}, 
    {"setChannelPosition", _wrap_SoundRefPtr_setChannelPosition}, 
    {"getChannelPosition", _wrap_SoundRefPtr_getChannelPosition}, 
    {"setChannelVelocity", _wrap_SoundRefPtr_setChannelVelocity}, 
    {"getChannelVelocity", _wrap_SoundRefPtr_getChannelVelocity}, 
    {"setChannelVolume", _wrap_SoundRefPtr_setChannelVolume}, 
    {"getChannelVolume", _wrap_SoundRefPtr_getChannelVolume}, 
    {"getMute", _wrap_SoundRefPtr_getMute}, 
    {"mute", _wrap_SoundRefPtr_mute}, 
    {"setAllChannelsVolume", _wrap_SoundRefPtr_setAllChannelsVolume}, 
    {"stopAllChannels", _wrap_SoundRefPtr_stopAllChannels}, 
    {"setAllChannelPaused", _wrap_SoundRefPtr_setAllChannelPaused}, 
    {"setAllChannelMute", _wrap_SoundRefPtr_setAllChannelMute}, 
    {"create", _wrap_SoundRefPtr_create}, 
    {"addAttachment", _wrap_SoundRefPtr_addAttachment}, 
    {"subAttachment", _wrap_SoundRefPtr_subAttachment}, 
    {"findAttachment", _wrap_SoundRefPtr_findAttachment}, 
    {"getType", _wrap_SoundRefPtr_getType}, 
    {"shallowCopy", _wrap_SoundRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_SoundRefPtr_getTypeId}, 
    {"getGroupId", _wrap_SoundRefPtr_getGroupId}, 
    {"getTypeName", _wrap_SoundRefPtr_getTypeName}, 
    {"getProducerType", _wrap_SoundRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_SoundRefPtr_getContainerSize}, 
    {"getId", _wrap_SoundRefPtr_getId}, 
    {"getNumFields", _wrap_SoundRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_SoundRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_SoundRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_SoundRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_SoundRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_SoundRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_SoundRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_SoundRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_SoundRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_SoundRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_SoundRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_SoundRefPtr_bases[] = {0,0};
static const char *swig_OSG_SoundRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_SoundRefPtr = { "SoundRefPtr", &SWIGTYPE_p_OSG__SoundRefPtr,_wrap_new_SoundRefPtr, swig_delete_SoundRefPtr, swig_OSG_SoundRefPtr_methods, swig_OSG_SoundRefPtr_attributes, swig_OSG_SoundRefPtr_bases, swig_OSG_SoundRefPtr_base_names };

static int _wrap_Sound_play(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("play",1,"OSG::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_play",1,SWIGTYPE_p_OSG__Sound);
  }
  
  result = (OSG::UInt32)(arg1)->play();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"OSG::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getLength",1,SWIGTYPE_p_OSG__Sound);
  }
  
  result = (OSG::Real32)((OSG::Sound const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getNumChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumChannels",1,"OSG::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getNumChannels",1,SWIGTYPE_p_OSG__Sound);
  }
  
  result = (OSG::UInt32)((OSG::Sound const *)arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getNumPlayingChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingChannels",1,"OSG::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getNumPlayingChannels",1,SWIGTYPE_p_OSG__Sound);
  }
  
  result = (OSG::UInt32)((OSG::Sound const *)arg1)->getNumPlayingChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPlaying",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_isPlaying",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)((OSG::Sound const *)arg1)->isPlaying(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isValid(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isValid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isValid",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_isValid",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)((OSG::Sound const *)arg1)->isValid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stop",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_stop",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->stop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pause",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_pause",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("unpause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("unpause",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_unpause",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->unpause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_pauseToggle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("pauseToggle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseToggle",1,"OSG::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pauseToggle",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_pauseToggle",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->pauseToggle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPaused",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_isPaused",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)((OSG::Sound const *)arg1)->isPaused(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_seek(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::Real32 arg2 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"OSG::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("seek",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_seek",1,SWIGTYPE_p_OSG__Sound);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (arg1)->seek(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getTime(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTime",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getTime",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getTime",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::Real32)((OSG::Sound const *)arg1)->getTime(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelPosition",1,"OSG::Sound *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelPosition",2,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelPosition",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_setChannelPosition",1,SWIGTYPE_p_OSG__Sound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Sound_setChannelPosition",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (arg1)->setChannelPosition((OSG::Pnt3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Pnt3f result;
  
  SWIG_check_num_args("getChannelPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelPosition",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelPosition",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getChannelPosition",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = ((OSG::Sound const *)arg1)->getChannelPosition(arg2);
  {
    OSG::Pnt3f * resultptr = new OSG::Pnt3f((const OSG::Pnt3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVelocity",1,"OSG::Sound *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelVelocity",2,"OSG::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVelocity",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_setChannelVelocity",1,SWIGTYPE_p_OSG__Sound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Sound_setChannelVelocity",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (arg1)->setChannelVelocity((OSG::Vec3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("getChannelVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVelocity",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVelocity",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getChannelVelocity",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = ((OSG::Sound const *)arg1)->getChannelVelocity(arg2);
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::Real32 arg2 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVolume",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVolume",1,"OSG::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setChannelVolume",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVolume",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_setChannelVolume",1,SWIGTYPE_p_OSG__Sound);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (arg1)->setChannelVolume(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getChannelVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVolume",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVolume",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getChannelVolume",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::Real32)((OSG::Sound const *)arg1)->getChannelVolume(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getMute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("getMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMute",1,"OSG::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMute",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_getMute",1,SWIGTYPE_p_OSG__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)((OSG::Sound const *)arg1)->getMute(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_mute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  bool arg2 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("mute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mute",1,"OSG::Sound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mute",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mute",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_mute",1,SWIGTYPE_p_OSG__Sound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  (arg1)->mute(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setAllChannelsVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("setAllChannelsVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelsVolume",1,"OSG::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAllChannelsVolume",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_setAllChannelsVolume",1,SWIGTYPE_p_OSG__Sound);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (arg1)->setAllChannelsVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_stopAllChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  
  SWIG_check_num_args("stopAllChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stopAllChannels",1,"OSG::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_stopAllChannels",1,SWIGTYPE_p_OSG__Sound);
  }
  
  (arg1)->stopAllChannels();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setAllChannelPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelPaused",1,"OSG::Sound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelPaused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_setAllChannelPaused",1,SWIGTYPE_p_OSG__Sound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAllChannelPaused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setAllChannelMute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Sound *arg1 = (OSG::Sound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelMute",1,"OSG::Sound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelMute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Sound,0))){
    SWIG_fail_ptr("Sound_setAllChannelMute",1,SWIGTYPE_p_OSG__Sound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAllChannelMute(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_create(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundRefPtr result;
  
  SWIG_check_num_args("OSG::Sound::create",0,0)
  result = OSG::Sound::create();
  {
    OSG::SoundRefPtr * resultptr = new OSG::SoundRefPtr((const OSG::SoundRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SoundRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Sound_methods[] = {
    {"play", _wrap_Sound_play}, 
    {"getLength", _wrap_Sound_getLength}, 
    {"getNumChannels", _wrap_Sound_getNumChannels}, 
    {"getNumPlayingChannels", _wrap_Sound_getNumPlayingChannels}, 
    {"isPlaying", _wrap_Sound_isPlaying}, 
    {"isValid", _wrap_Sound_isValid}, 
    {"stop", _wrap_Sound_stop}, 
    {"pause", _wrap_Sound_pause}, 
    {"unpause", _wrap_Sound_unpause}, 
    {"pauseToggle", _wrap_Sound_pauseToggle}, 
    {"isPaused", _wrap_Sound_isPaused}, 
    {"seek", _wrap_Sound_seek}, 
    {"getTime", _wrap_Sound_getTime}, 
    {"setChannelPosition", _wrap_Sound_setChannelPosition}, 
    {"getChannelPosition", _wrap_Sound_getChannelPosition}, 
    {"setChannelVelocity", _wrap_Sound_setChannelVelocity}, 
    {"getChannelVelocity", _wrap_Sound_getChannelVelocity}, 
    {"setChannelVolume", _wrap_Sound_setChannelVolume}, 
    {"getChannelVolume", _wrap_Sound_getChannelVolume}, 
    {"getMute", _wrap_Sound_getMute}, 
    {"mute", _wrap_Sound_mute}, 
    {"setAllChannelsVolume", _wrap_Sound_setAllChannelsVolume}, 
    {"stopAllChannels", _wrap_Sound_stopAllChannels}, 
    {"setAllChannelPaused", _wrap_Sound_setAllChannelPaused}, 
    {"setAllChannelMute", _wrap_Sound_setAllChannelMute}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Sound_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Sound_bases[] = {0,0};
static const char *swig_OSG_Sound_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Sound = { "Sound", &SWIGTYPE_p_OSG__Sound,0,0, swig_OSG_Sound_methods, swig_OSG_Sound_attributes, swig_OSG_Sound_bases, swig_OSG_Sound_base_names };

static int _wrap_SoundManager_the(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundManager *result = 0 ;
  
  SWIG_check_num_args("OSG::SoundManager::the",0,0)
  result = (OSG::SoundManager *)OSG::SoundManager::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SoundManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_createSound(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundManager *arg1 = (OSG::SoundManager *) 0 ;
  OSG::SoundRefPtr result;
  
  SWIG_check_num_args("createSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createSound",1,"OSG::SoundManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_createSound",1,SWIGTYPE_p_OSG__SoundManager);
  }
  
  result = ((OSG::SoundManager const *)arg1)->createSound();
  {
    OSG::SoundRefPtr * resultptr = new OSG::SoundRefPtr((const OSG::SoundRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SoundRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_setCamera(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundManager *arg1 = (OSG::SoundManager *) 0 ;
  OSG::CameraRefPtr arg2 ;
  OSG::CameraRefPtr *argp2 ;
  
  SWIG_check_num_args("setCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCamera",1,"OSG::SoundManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setCamera",2,"OSG::CameraRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_setCamera",1,SWIGTYPE_p_OSG__SoundManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("SoundManager_setCamera",2,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  arg2 = *argp2;
  
  (arg1)->setCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundManager *arg1 = (OSG::SoundManager *) 0 ;
  OSG::CameraRefPtr result;
  
  SWIG_check_num_args("getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCamera",1,"OSG::SoundManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_getCamera",1,SWIGTYPE_p_OSG__SoundManager);
  }
  
  result = ((OSG::SoundManager const *)arg1)->getCamera();
  {
    OSG::CameraRefPtr * resultptr = new OSG::CameraRefPtr((const OSG::CameraRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__CameraRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundManager *arg1 = (OSG::SoundManager *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::SoundManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_detachUpdateProducer",1,SWIGTYPE_p_OSG__SoundManager);
  }
  
  (arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundManager *arg1 = (OSG::SoundManager *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::SoundManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_attachUpdateProducer",1,SWIGTYPE_p_OSG__SoundManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("SoundManager_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_SoundManager_attachUpdateProducer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_SoundManager_methods[] = {
    {"createSound", _wrap_SoundManager_createSound}, 
    {"setCamera", _wrap_SoundManager_setCamera}, 
    {"getCamera", _wrap_SoundManager_getCamera}, 
    {"detachUpdateProducer", _wrap_SoundManager_detachUpdateProducer}, 
    {"attachUpdateProducer", _wrap_SoundManager_attachUpdateProducer}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_SoundManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_SoundManager_bases[] = {0};
static const char *swig_OSG_SoundManager_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_SoundManager = { "SoundManager", &SWIGTYPE_p_OSG__SoundManager,0,0, swig_OSG_SoundManager_methods, swig_OSG_SoundManager_attributes, swig_OSG_SoundManager_bases, swig_OSG_SoundManager_base_names };

static int _wrap_SoundGroup_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::SoundGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_stop",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  
  SWIG_check_num_args("pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::SoundGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_pause",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  (arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  
  SWIG_check_num_args("unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::SoundGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_unpause",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  (arg1)->unpause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_setVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("setVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVolume",1,"OSG::SoundGroup *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVolume",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_setVolume",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (arg1)->setVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_getVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVolume",1,"OSG::SoundGroup const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_getVolume",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  result = (OSG::Real32)((OSG::SoundGroup const *)arg1)->getVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_mute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("mute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mute",1,"OSG::SoundGroup *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_mute",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->mute(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_getNumSounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumSounds",1,"OSG::SoundGroup const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_getNumSounds",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  result = (OSG::UInt32)((OSG::SoundGroup const *)arg1)->getNumSounds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_getNumPlayingSounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingSounds",1,"OSG::SoundGroup const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_getNumPlayingSounds",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  result = (OSG::UInt32)((OSG::SoundGroup const *)arg1)->getNumPlayingSounds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroup_getNumPlayingChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroup *arg1 = (OSG::SoundGroup *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingChannels",1,"OSG::SoundGroup const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroup,0))){
    SWIG_fail_ptr("SoundGroup_getNumPlayingChannels",1,SWIGTYPE_p_OSG__SoundGroup);
  }
  
  result = (OSG::UInt32)((OSG::SoundGroup const *)arg1)->getNumPlayingChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_SoundGroup_methods[] = {
    {"stop", _wrap_SoundGroup_stop}, 
    {"pause", _wrap_SoundGroup_pause}, 
    {"unpause", _wrap_SoundGroup_unpause}, 
    {"setVolume", _wrap_SoundGroup_setVolume}, 
    {"getVolume", _wrap_SoundGroup_getVolume}, 
    {"mute", _wrap_SoundGroup_mute}, 
    {"getNumSounds", _wrap_SoundGroup_getNumSounds}, 
    {"getNumPlayingSounds", _wrap_SoundGroup_getNumPlayingSounds}, 
    {"getNumPlayingChannels", _wrap_SoundGroup_getNumPlayingChannels}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_SoundGroup_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_SoundGroup_bases[] = {0,0};
static const char *swig_OSG_SoundGroup_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_SoundGroup = { "SoundGroup", &SWIGTYPE_p_OSG__SoundGroup,0,0, swig_OSG_SoundGroup_methods, swig_OSG_SoundGroup_attributes, swig_OSG_SoundGroup_bases, swig_OSG_SoundGroup_base_names };

static int _wrap_new_SoundGroupRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SoundGroupRefPtr",0,0)
  result = (OSG::SoundGroupRefPtr *)new OSG::SoundGroupRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SoundGroupRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundGroupRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = 0 ;
  OSG::SoundGroupRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SoundGroupRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::SoundGroupRefPtr",1,"OSG::SoundGroupRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("new_SoundGroupRefPtr",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::SoundGroupRefPtr *)new OSG::SoundGroupRefPtr((OSG::SoundGroupRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SoundGroupRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundGroupRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SoundGroupRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SoundGroupRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SoundGroupRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::SoundGroupRefPtr()\n"
    "    OSG::SoundGroupRefPtr(OSG::SoundGroupRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundGroupRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::SoundGroup *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::SoundGroupRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr___deref__",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::SoundGroup *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SoundGroup,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::SoundGroupRefPtr result;
  
  SWIG_check_num_args("OSG_SoundGroupRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_SoundGroupRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_SoundGroupRefPtr_dcast(arg1);
  {
    OSG::SoundGroupRefPtr * resultptr = new OSG::SoundGroupRefPtr((const OSG::SoundGroupRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SoundGroupRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::SoundGroupRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_stop",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  (*arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  
  SWIG_check_num_args("pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::SoundGroupRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_pause",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  (*arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  
  SWIG_check_num_args("unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::SoundGroupRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_unpause",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  (*arg1)->unpause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_setVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("setVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVolume",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setVolume",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_setVolume",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (*arg1)->setVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVolume",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getVolume",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::Real32)(*arg1)->getVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_mute(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("mute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mute",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_mute",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->mute(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getNumSounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumSounds",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getNumSounds",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumSounds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getNumPlayingSounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingSounds",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getNumPlayingSounds",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumPlayingSounds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getNumPlayingChannels(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingChannels",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getNumPlayingChannels",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumPlayingChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_addAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_addAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundGroupRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundGroupRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::SoundGroupRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::SoundGroupRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundGroupRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_subAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_subAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundGroupRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundGroupRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::SoundGroupRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::SoundGroupRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundGroupRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundGroupRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundGroupRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundGroupRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::SoundGroupRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::SoundGroupRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::SoundGroupRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::SoundGroupRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundGroupRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::SoundGroupRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getType",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getTypeId",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getGroupId",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getTypeName",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getProducerType",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getId",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getNumFields",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::SoundGroupRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_attachActivity",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::SoundGroupRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::SoundGroupRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::SoundGroupRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::SoundGroupRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::SoundGroupRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::SoundGroupRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundGroupRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::SoundGroupRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::SoundGroupRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundGroupRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::SoundGroupRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::SoundGroupRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SoundGroupRefPtr,0))){
    SWIG_fail_ptr("SoundGroupRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__SoundGroupRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundGroupRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SoundGroupRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundGroupRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundGroupRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::SoundGroupRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::SoundGroupRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SoundGroupRefPtr(void *obj) {
OSG::SoundGroupRefPtr *arg1 = (OSG::SoundGroupRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_SoundGroupRefPtr_methods[] = {
    {"__deref__", _wrap_SoundGroupRefPtr___deref__}, 
    {"stop", _wrap_SoundGroupRefPtr_stop}, 
    {"pause", _wrap_SoundGroupRefPtr_pause}, 
    {"unpause", _wrap_SoundGroupRefPtr_unpause}, 
    {"setVolume", _wrap_SoundGroupRefPtr_setVolume}, 
    {"getVolume", _wrap_SoundGroupRefPtr_getVolume}, 
    {"mute", _wrap_SoundGroupRefPtr_mute}, 
    {"getNumSounds", _wrap_SoundGroupRefPtr_getNumSounds}, 
    {"getNumPlayingSounds", _wrap_SoundGroupRefPtr_getNumPlayingSounds}, 
    {"getNumPlayingChannels", _wrap_SoundGroupRefPtr_getNumPlayingChannels}, 
    {"addAttachment", _wrap_SoundGroupRefPtr_addAttachment}, 
    {"subAttachment", _wrap_SoundGroupRefPtr_subAttachment}, 
    {"findAttachment", _wrap_SoundGroupRefPtr_findAttachment}, 
    {"getType", _wrap_SoundGroupRefPtr_getType}, 
    {"shallowCopy", _wrap_SoundGroupRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_SoundGroupRefPtr_getTypeId}, 
    {"getGroupId", _wrap_SoundGroupRefPtr_getGroupId}, 
    {"getTypeName", _wrap_SoundGroupRefPtr_getTypeName}, 
    {"getProducerType", _wrap_SoundGroupRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_SoundGroupRefPtr_getContainerSize}, 
    {"getId", _wrap_SoundGroupRefPtr_getId}, 
    {"getNumFields", _wrap_SoundGroupRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_SoundGroupRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_SoundGroupRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_SoundGroupRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_SoundGroupRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_SoundGroupRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_SoundGroupRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_SoundGroupRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_SoundGroupRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_SoundGroupRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_SoundGroupRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_SoundGroupRefPtr_bases[] = {0,0};
static const char *swig_OSG_SoundGroupRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_SoundGroupRefPtr = { "SoundGroupRefPtr", &SWIGTYPE_p_OSG__SoundGroupRefPtr,_wrap_new_SoundGroupRefPtr, swig_delete_SoundGroupRefPtr, swig_OSG_SoundGroupRefPtr_methods, swig_OSG_SoundGroupRefPtr_attributes, swig_OSG_SoundGroupRefPtr_bases, swig_OSG_SoundGroupRefPtr_base_names };

static int _wrap_new_AnimationRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::AnimationRefPtr",0,0)
  result = (OSG::AnimationRefPtr *)new OSG::AnimationRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__AnimationRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnimationRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = 0 ;
  OSG::AnimationRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::AnimationRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::AnimationRefPtr",1,"OSG::AnimationRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("new_AnimationRefPtr",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::AnimationRefPtr *)new OSG::AnimationRefPtr((OSG::AnimationRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__AnimationRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnimationRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AnimationRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AnimationRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AnimationRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::AnimationRefPtr()\n"
    "    OSG::AnimationRefPtr(OSG::AnimationRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Animation *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::AnimationRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr___deref__",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::Animation *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Animation,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::AnimationRefPtr result;
  
  SWIG_check_num_args("OSG_AnimationRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_AnimationRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_AnimationRefPtr_dcast(arg1);
  {
    OSG::AnimationRefPtr * resultptr = new OSG::AnimationRefPtr((const OSG::AnimationRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AnimationRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getLength",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::Real32)(*arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getCycleLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getCycleLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCycleLength",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getCycleLength",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::Real32)(*arg1)->getCycleLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_start__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::Time temp2 ;
  
  SWIG_check_num_args("start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("start",1,"OSG::AnimationRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("start",2,"OSG::Time const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_start",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  (*arg1)->start((OSG::Time const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_start__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  
  SWIG_check_num_args("start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("start",1,"OSG::AnimationRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_start",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  (*arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_start(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AnimationRefPtr_start__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationRefPtr_start__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationRefPtr_start'\n"
    "  Possible C/C++ prototypes are:\n"
    "    start(OSG::AnimationRefPtr *,OSG::Time const &)\n"
    "    start(OSG::AnimationRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationRefPtr_seek(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::Time temp2 ;
  
  SWIG_check_num_args("seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"OSG::AnimationRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"OSG::Time const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_seek",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  (*arg1)->seek((OSG::Time const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::AnimationRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pause",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_pause",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_isPaused",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (bool)(*arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_isPlaying",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (bool)(*arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_stop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::AnimationRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stop",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_stop",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->stop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_stop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::AnimationRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_stop",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  (*arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_stop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AnimationRefPtr_stop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationRefPtr_stop__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationRefPtr_stop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stop(OSG::AnimationRefPtr *,bool)\n"
    "    stop(OSG::AnimationRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationRefPtr_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::AnimationRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_detachUpdateProducer",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  (*arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::AnimationRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_attachUpdateProducer",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_Animation_attachUpdateProducer((OSG::Animation*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_addAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_addAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::AnimationRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::AnimationRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_subAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_subAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::AnimationRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::AnimationRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("AnimationRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AnimationRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("AnimationRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::AnimationRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::AnimationRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::AnimationRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::AnimationRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::AnimationRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getType",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getTypeId",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getGroupId",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getTypeName",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getProducerType",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getId",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getNumFields",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::AnimationRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::AnimationRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_attachActivity",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("AnimationRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::AnimationRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::AnimationRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::AnimationRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::AnimationRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::AnimationRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::AnimationRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::AnimationRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::AnimationRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::AnimationRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::AnimationRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("AnimationRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AnimationRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::AnimationRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::AnimationRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_AnimationRefPtr(void *obj) {
OSG::AnimationRefPtr *arg1 = (OSG::AnimationRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_AnimationRefPtr_methods[] = {
    {"__deref__", _wrap_AnimationRefPtr___deref__}, 
    {"getLength", _wrap_AnimationRefPtr_getLength}, 
    {"getCycleLength", _wrap_AnimationRefPtr_getCycleLength}, 
    {"start", _wrap_AnimationRefPtr_start}, 
    {"seek", _wrap_AnimationRefPtr_seek}, 
    {"pause", _wrap_AnimationRefPtr_pause}, 
    {"isPaused", _wrap_AnimationRefPtr_isPaused}, 
    {"isPlaying", _wrap_AnimationRefPtr_isPlaying}, 
    {"stop", _wrap_AnimationRefPtr_stop}, 
    {"detachUpdateProducer", _wrap_AnimationRefPtr_detachUpdateProducer}, 
    {"attachUpdateProducer", _wrap_AnimationRefPtr_attachUpdateProducer}, 
    {"addAttachment", _wrap_AnimationRefPtr_addAttachment}, 
    {"subAttachment", _wrap_AnimationRefPtr_subAttachment}, 
    {"findAttachment", _wrap_AnimationRefPtr_findAttachment}, 
    {"getType", _wrap_AnimationRefPtr_getType}, 
    {"shallowCopy", _wrap_AnimationRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_AnimationRefPtr_getTypeId}, 
    {"getGroupId", _wrap_AnimationRefPtr_getGroupId}, 
    {"getTypeName", _wrap_AnimationRefPtr_getTypeName}, 
    {"getProducerType", _wrap_AnimationRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_AnimationRefPtr_getContainerSize}, 
    {"getId", _wrap_AnimationRefPtr_getId}, 
    {"getNumFields", _wrap_AnimationRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_AnimationRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_AnimationRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_AnimationRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_AnimationRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_AnimationRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_AnimationRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_AnimationRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_AnimationRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_AnimationRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_AnimationRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_AnimationRefPtr_bases[] = {0,0};
static const char *swig_OSG_AnimationRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_AnimationRefPtr = { "AnimationRefPtr", &SWIGTYPE_p_OSG__AnimationRefPtr,_wrap_new_AnimationRefPtr, swig_delete_AnimationRefPtr, swig_OSG_AnimationRefPtr_methods, swig_OSG_AnimationRefPtr_attributes, swig_OSG_AnimationRefPtr_bases, swig_OSG_AnimationRefPtr_base_names };

static int _wrap_Animation_getLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"OSG::Animation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_getLength",1,SWIGTYPE_p_OSG__Animation);
  }
  
  result = (OSG::Real32)((OSG::Animation const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_getCycleLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getCycleLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCycleLength",1,"OSG::Animation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_getCycleLength",1,SWIGTYPE_p_OSG__Animation);
  }
  
  result = (OSG::Real32)((OSG::Animation const *)arg1)->getCycleLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_start__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::Time temp2 ;
  
  SWIG_check_num_args("start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("start",1,"OSG::Animation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("start",2,"OSG::Time const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_start",1,SWIGTYPE_p_OSG__Animation);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->start((OSG::Time const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_start__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  
  SWIG_check_num_args("start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("start",1,"OSG::Animation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_start",1,SWIGTYPE_p_OSG__Animation);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_start(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Animation, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Animation_start__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Animation, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Animation_start__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Animation_start'\n"
    "  Possible C/C++ prototypes are:\n"
    "    start(OSG::Animation *,OSG::Time const &)\n"
    "    start(OSG::Animation *)\n");
  lua_error(L);return 0;
}


static int _wrap_Animation_seek(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  OSG::Time *arg2 = 0 ;
  OSG::Time temp2 ;
  
  SWIG_check_num_args("seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"OSG::Animation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"OSG::Time const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_seek",1,SWIGTYPE_p_OSG__Animation);
  }
  
  temp2=(OSG::Time)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->seek((OSG::Time const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::Animation *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pause",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_pause",1,SWIGTYPE_p_OSG__Animation);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::Animation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_isPaused",1,SWIGTYPE_p_OSG__Animation);
  }
  
  result = (bool)((OSG::Animation const *)arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::Animation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_isPlaying",1,SWIGTYPE_p_OSG__Animation);
  }
  
  result = (bool)((OSG::Animation const *)arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_stop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::Animation *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stop",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_stop",1,SWIGTYPE_p_OSG__Animation);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->stop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_stop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::Animation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_stop",1,SWIGTYPE_p_OSG__Animation);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_stop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Animation, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Animation_stop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Animation, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Animation_stop__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Animation_stop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stop(OSG::Animation *,bool)\n"
    "    stop(OSG::Animation *)\n");
  lua_error(L);return 0;
}


static int _wrap_Animation_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::Animation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_detachUpdateProducer",1,SWIGTYPE_p_OSG__Animation);
  }
  
  (arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Animation_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Animation *arg1 = (OSG::Animation *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::Animation *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Animation,0))){
    SWIG_fail_ptr("Animation_attachUpdateProducer",1,SWIGTYPE_p_OSG__Animation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("Animation_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_Animation_attachUpdateProducer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Animation_methods[] = {
    {"getLength", _wrap_Animation_getLength}, 
    {"getCycleLength", _wrap_Animation_getCycleLength}, 
    {"start", _wrap_Animation_start}, 
    {"seek", _wrap_Animation_seek}, 
    {"pause", _wrap_Animation_pause}, 
    {"isPaused", _wrap_Animation_isPaused}, 
    {"isPlaying", _wrap_Animation_isPlaying}, 
    {"stop", _wrap_Animation_stop}, 
    {"detachUpdateProducer", _wrap_Animation_detachUpdateProducer}, 
    {"attachUpdateProducer", _wrap_Animation_attachUpdateProducer}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Animation_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Animation_bases[] = {0,0};
static const char *swig_OSG_Animation_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Animation = { "Animation", &SWIGTYPE_p_OSG__Animation,0,0, swig_OSG_Animation_methods, swig_OSG_Animation_attributes, swig_OSG_Animation_bases, swig_OSG_Animation_base_names };

static int _wrap_VideoWrapper_seek(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real64 arg2 ;
  bool result;
  
  SWIG_check_num_args("seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"OSG::VideoWrapper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"OSG::Real64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_seek",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  arg2 = (OSG::Real64)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_jump(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real64 arg2 ;
  bool result;
  
  SWIG_check_num_args("jump",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jump",1,"OSG::VideoWrapper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jump",2,"OSG::Real64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_jump",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  arg2 = (OSG::Real64)lua_tonumber(L, 2);
  result = (bool)(arg1)->jump(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_setRate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real64 arg2 ;
  bool result;
  
  SWIG_check_num_args("setRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRate",1,"OSG::VideoWrapper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setRate",2,"OSG::Real64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_setRate",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  arg2 = (OSG::Real64)lua_tonumber(L, 2);
  result = (bool)(arg1)->setRate(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_getRate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real64 result;
  
  SWIG_check_num_args("getRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRate",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_getRate",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (OSG::Real64)((OSG::VideoWrapper const *)arg1)->getRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_play(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("play",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_play",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)(arg1)->play();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_pause",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)(arg1)->pause();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_unpause",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)(arg1)->unpause();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_pauseToggle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("pauseToggle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseToggle",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_pauseToggle",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)(arg1)->pauseToggle();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_stop",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)(arg1)->stop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_close(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("close",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_close",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_isPlaying",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_isPaused",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInitialized",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_isInitialized",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_isStopped(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("isStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isStopped",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_isStopped",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->isStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_canSeekForward(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("canSeekForward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("canSeekForward",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_canSeekForward",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->canSeekForward();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_canSeekBackward(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("canSeekBackward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("canSeekBackward",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_canSeekBackward",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->canSeekBackward();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real64 result;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_getPosition",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (OSG::Real64)((OSG::VideoWrapper const *)arg1)->getPosition();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_getDuration(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real64 result;
  
  SWIG_check_num_args("getDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDuration",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_getDuration",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (OSG::Real64)((OSG::VideoWrapper const *)arg1)->getDuration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWidth",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_getWidth",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (OSG::UInt32)((OSG::VideoWrapper const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHeight",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_getHeight",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (OSG::UInt32)((OSG::VideoWrapper const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_hasAudio(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasAudio",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_hasAudio",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->hasAudio();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_enableAudio(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  
  SWIG_check_num_args("enableAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enableAudio",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_enableAudio",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  (arg1)->enableAudio();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_disableAudio(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  
  SWIG_check_num_args("disableAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disableAudio",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_disableAudio",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  (arg1)->disableAudio();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_isAudioEnabled(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAudioEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAudioEnabled",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_isAudioEnabled",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)((OSG::VideoWrapper const *)arg1)->isAudioEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_getAudioVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getAudioVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAudioVolume",1,"OSG::VideoWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_getAudioVolume",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (OSG::Real32)((OSG::VideoWrapper const *)arg1)->getAudioVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_setAudioVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("setAudioVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAudioVolume",1,"OSG::VideoWrapper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAudioVolume",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_setAudioVolume",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (arg1)->setAudioVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_updateImage(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  bool result;
  
  SWIG_check_num_args("updateImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateImage",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_updateImage",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  result = (bool)(arg1)->updateImage();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::VideoWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_detachUpdateProducer",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  (arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_open(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  std::string *arg2 = 0 ;
  OSG::FieldContainerRefPtr arg3 ;
  std::string temp2 ;
  OSG::FieldContainerRefPtr *argp3 ;
  bool result;
  
  SWIG_check_num_args("open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"OSG::VideoWrapper *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("open",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open",3,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_open",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("VideoWrapper_open",3,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg3 = *argp3;
  
  result = (bool)OSG_VideoWrapper_open(arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapper_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapper *arg1 = (OSG::VideoWrapper *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::VideoWrapper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapper,0))){
    SWIG_fail_ptr("VideoWrapper_attachUpdateProducer",1,SWIGTYPE_p_OSG__VideoWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("VideoWrapper_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_VideoWrapper_attachUpdateProducer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_VideoWrapper_methods[] = {
    {"seek", _wrap_VideoWrapper_seek}, 
    {"jump", _wrap_VideoWrapper_jump}, 
    {"setRate", _wrap_VideoWrapper_setRate}, 
    {"getRate", _wrap_VideoWrapper_getRate}, 
    {"play", _wrap_VideoWrapper_play}, 
    {"pause", _wrap_VideoWrapper_pause}, 
    {"unpause", _wrap_VideoWrapper_unpause}, 
    {"pauseToggle", _wrap_VideoWrapper_pauseToggle}, 
    {"stop", _wrap_VideoWrapper_stop}, 
    {"close", _wrap_VideoWrapper_close}, 
    {"isPlaying", _wrap_VideoWrapper_isPlaying}, 
    {"isPaused", _wrap_VideoWrapper_isPaused}, 
    {"isInitialized", _wrap_VideoWrapper_isInitialized}, 
    {"isStopped", _wrap_VideoWrapper_isStopped}, 
    {"canSeekForward", _wrap_VideoWrapper_canSeekForward}, 
    {"canSeekBackward", _wrap_VideoWrapper_canSeekBackward}, 
    {"getPosition", _wrap_VideoWrapper_getPosition}, 
    {"getDuration", _wrap_VideoWrapper_getDuration}, 
    {"getWidth", _wrap_VideoWrapper_getWidth}, 
    {"getHeight", _wrap_VideoWrapper_getHeight}, 
    {"hasAudio", _wrap_VideoWrapper_hasAudio}, 
    {"enableAudio", _wrap_VideoWrapper_enableAudio}, 
    {"disableAudio", _wrap_VideoWrapper_disableAudio}, 
    {"isAudioEnabled", _wrap_VideoWrapper_isAudioEnabled}, 
    {"getAudioVolume", _wrap_VideoWrapper_getAudioVolume}, 
    {"setAudioVolume", _wrap_VideoWrapper_setAudioVolume}, 
    {"updateImage", _wrap_VideoWrapper_updateImage}, 
    {"detachUpdateProducer", _wrap_VideoWrapper_detachUpdateProducer}, 
    {"open", _wrap_VideoWrapper_open}, 
    {"attachUpdateProducer", _wrap_VideoWrapper_attachUpdateProducer}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_VideoWrapper_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_VideoWrapper_bases[] = {0,0};
static const char *swig_OSG_VideoWrapper_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_VideoWrapper = { "VideoWrapper", &SWIGTYPE_p_OSG__VideoWrapper,0,0, swig_OSG_VideoWrapper_methods, swig_OSG_VideoWrapper_attributes, swig_OSG_VideoWrapper_bases, swig_OSG_VideoWrapper_base_names };

static int _wrap_new_VideoWrapperRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::VideoWrapperRefPtr",0,0)
  result = (OSG::VideoWrapperRefPtr *)new OSG::VideoWrapperRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__VideoWrapperRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VideoWrapperRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = 0 ;
  OSG::VideoWrapperRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::VideoWrapperRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::VideoWrapperRefPtr",1,"OSG::VideoWrapperRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("new_VideoWrapperRefPtr",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::VideoWrapperRefPtr *)new OSG::VideoWrapperRefPtr((OSG::VideoWrapperRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__VideoWrapperRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VideoWrapperRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VideoWrapperRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_VideoWrapperRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_VideoWrapperRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::VideoWrapperRefPtr()\n"
    "    OSG::VideoWrapperRefPtr(OSG::VideoWrapperRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VideoWrapperRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::VideoWrapper *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr___deref__",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::VideoWrapper *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__VideoWrapper,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::VideoWrapperRefPtr result;
  
  SWIG_check_num_args("OSG_VideoWrapperRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_VideoWrapperRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_VideoWrapperRefPtr_dcast(arg1);
  {
    OSG::VideoWrapperRefPtr * resultptr = new OSG::VideoWrapperRefPtr((const OSG::VideoWrapperRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__VideoWrapperRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_seek(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real64 arg2 ;
  bool result;
  
  SWIG_check_num_args("seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"OSG::Real64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_seek",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  arg2 = (OSG::Real64)lua_tonumber(L, 2);
  result = (bool)(*arg1)->seek(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_jump(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real64 arg2 ;
  bool result;
  
  SWIG_check_num_args("jump",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jump",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jump",2,"OSG::Real64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_jump",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  arg2 = (OSG::Real64)lua_tonumber(L, 2);
  result = (bool)(*arg1)->jump(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_setRate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real64 arg2 ;
  bool result;
  
  SWIG_check_num_args("setRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRate",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setRate",2,"OSG::Real64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_setRate",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  arg2 = (OSG::Real64)lua_tonumber(L, 2);
  result = (bool)(*arg1)->setRate(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getRate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real64 result;
  
  SWIG_check_num_args("getRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRate",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getRate",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::Real64)(*arg1)->getRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_play(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("play",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_play",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->play();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_pause",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->pause();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_unpause",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->unpause();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_pauseToggle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("pauseToggle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseToggle",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_pauseToggle",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->pauseToggle();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_stop",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->stop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_close(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("close",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_close",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_isPlaying",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_isPaused",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInitialized",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_isInitialized",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_isStopped(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isStopped",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_isStopped",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->isStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_canSeekForward(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("canSeekForward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("canSeekForward",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_canSeekForward",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->canSeekForward();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_canSeekBackward(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("canSeekBackward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("canSeekBackward",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_canSeekBackward",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->canSeekBackward();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real64 result;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getPosition",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::Real64)(*arg1)->getPosition();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getDuration(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real64 result;
  
  SWIG_check_num_args("getDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDuration",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getDuration",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::Real64)(*arg1)->getDuration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWidth",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getWidth",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHeight",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getHeight",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_hasAudio(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasAudio",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_hasAudio",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->hasAudio();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_enableAudio(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  
  SWIG_check_num_args("enableAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enableAudio",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_enableAudio",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  (*arg1)->enableAudio();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_disableAudio(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  
  SWIG_check_num_args("disableAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disableAudio",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_disableAudio",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  (*arg1)->disableAudio();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_isAudioEnabled(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAudioEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAudioEnabled",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_isAudioEnabled",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->isAudioEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getAudioVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getAudioVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAudioVolume",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getAudioVolume",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::Real32)(*arg1)->getAudioVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_setAudioVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("setAudioVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAudioVolume",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAudioVolume",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_setAudioVolume",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (*arg1)->setAudioVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_updateImage(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("updateImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateImage",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_updateImage",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->updateImage();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  
  SWIG_check_num_args("detachUpdateProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_detachUpdateProducer",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  (*arg1)->detachUpdateProducer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_open(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  OSG::FieldContainerRefPtr arg3 ;
  std::string temp2 ;
  OSG::FieldContainerRefPtr *argp3 ;
  bool result;
  
  SWIG_check_num_args("open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("open",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open",3,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_open",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_open",3,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg3 = *argp3;
  
  result = (bool)OSG_VideoWrapper_open((OSG::VideoWrapper*)(arg1)->operator ->(),(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::FieldContainerRefPtr arg2 ;
  OSG::FieldContainerRefPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_attachUpdateProducer",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_attachUpdateProducer",2,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg2 = *argp2;
  
  OSG_VideoWrapper_attachUpdateProducer((OSG::VideoWrapper*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_addAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_addAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VideoWrapperRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VideoWrapperRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::VideoWrapperRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::VideoWrapperRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VideoWrapperRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_subAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_subAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VideoWrapperRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VideoWrapperRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::VideoWrapperRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::VideoWrapperRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VideoWrapperRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_findAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_findAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_findAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_findAttachment",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VideoWrapperRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VideoWrapperRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VideoWrapperRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::VideoWrapperRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::VideoWrapperRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::VideoWrapperRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::VideoWrapperRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_VideoWrapperRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getType",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getTypeId",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getGroupId",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getTypeName",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getProducerType",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getId",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getNumFields",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::VideoWrapperRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_attachActivity",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::VideoWrapperRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::VideoWrapperRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::VideoWrapperRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::VideoWrapperRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::VideoWrapperRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::VideoWrapperRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VideoWrapperRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::VideoWrapperRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::VideoWrapperRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_VideoWrapperRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::VideoWrapperRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::VideoWrapperRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoWrapperRefPtr,0))){
    SWIG_fail_ptr("VideoWrapperRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__VideoWrapperRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoWrapperRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__VideoWrapperRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_VideoWrapperRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VideoWrapperRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::VideoWrapperRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::VideoWrapperRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_VideoWrapperRefPtr(void *obj) {
OSG::VideoWrapperRefPtr *arg1 = (OSG::VideoWrapperRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_VideoWrapperRefPtr_methods[] = {
    {"__deref__", _wrap_VideoWrapperRefPtr___deref__}, 
    {"seek", _wrap_VideoWrapperRefPtr_seek}, 
    {"jump", _wrap_VideoWrapperRefPtr_jump}, 
    {"setRate", _wrap_VideoWrapperRefPtr_setRate}, 
    {"getRate", _wrap_VideoWrapperRefPtr_getRate}, 
    {"play", _wrap_VideoWrapperRefPtr_play}, 
    {"pause", _wrap_VideoWrapperRefPtr_pause}, 
    {"unpause", _wrap_VideoWrapperRefPtr_unpause}, 
    {"pauseToggle", _wrap_VideoWrapperRefPtr_pauseToggle}, 
    {"stop", _wrap_VideoWrapperRefPtr_stop}, 
    {"close", _wrap_VideoWrapperRefPtr_close}, 
    {"isPlaying", _wrap_VideoWrapperRefPtr_isPlaying}, 
    {"isPaused", _wrap_VideoWrapperRefPtr_isPaused}, 
    {"isInitialized", _wrap_VideoWrapperRefPtr_isInitialized}, 
    {"isStopped", _wrap_VideoWrapperRefPtr_isStopped}, 
    {"canSeekForward", _wrap_VideoWrapperRefPtr_canSeekForward}, 
    {"canSeekBackward", _wrap_VideoWrapperRefPtr_canSeekBackward}, 
    {"getPosition", _wrap_VideoWrapperRefPtr_getPosition}, 
    {"getDuration", _wrap_VideoWrapperRefPtr_getDuration}, 
    {"getWidth", _wrap_VideoWrapperRefPtr_getWidth}, 
    {"getHeight", _wrap_VideoWrapperRefPtr_getHeight}, 
    {"hasAudio", _wrap_VideoWrapperRefPtr_hasAudio}, 
    {"enableAudio", _wrap_VideoWrapperRefPtr_enableAudio}, 
    {"disableAudio", _wrap_VideoWrapperRefPtr_disableAudio}, 
    {"isAudioEnabled", _wrap_VideoWrapperRefPtr_isAudioEnabled}, 
    {"getAudioVolume", _wrap_VideoWrapperRefPtr_getAudioVolume}, 
    {"setAudioVolume", _wrap_VideoWrapperRefPtr_setAudioVolume}, 
    {"updateImage", _wrap_VideoWrapperRefPtr_updateImage}, 
    {"detachUpdateProducer", _wrap_VideoWrapperRefPtr_detachUpdateProducer}, 
    {"open", _wrap_VideoWrapperRefPtr_open}, 
    {"attachUpdateProducer", _wrap_VideoWrapperRefPtr_attachUpdateProducer}, 
    {"addAttachment", _wrap_VideoWrapperRefPtr_addAttachment}, 
    {"subAttachment", _wrap_VideoWrapperRefPtr_subAttachment}, 
    {"findAttachment", _wrap_VideoWrapperRefPtr_findAttachment}, 
    {"getType", _wrap_VideoWrapperRefPtr_getType}, 
    {"shallowCopy", _wrap_VideoWrapperRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_VideoWrapperRefPtr_getTypeId}, 
    {"getGroupId", _wrap_VideoWrapperRefPtr_getGroupId}, 
    {"getTypeName", _wrap_VideoWrapperRefPtr_getTypeName}, 
    {"getProducerType", _wrap_VideoWrapperRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_VideoWrapperRefPtr_getContainerSize}, 
    {"getId", _wrap_VideoWrapperRefPtr_getId}, 
    {"getNumFields", _wrap_VideoWrapperRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_VideoWrapperRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_VideoWrapperRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_VideoWrapperRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_VideoWrapperRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_VideoWrapperRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_VideoWrapperRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_VideoWrapperRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_VideoWrapperRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_VideoWrapperRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_VideoWrapperRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_VideoWrapperRefPtr_bases[] = {0,0};
static const char *swig_OSG_VideoWrapperRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_VideoWrapperRefPtr = { "VideoWrapperRefPtr", &SWIGTYPE_p_OSG__VideoWrapperRefPtr,_wrap_new_VideoWrapperRefPtr, swig_delete_VideoWrapperRefPtr, swig_OSG_VideoWrapperRefPtr_methods, swig_OSG_VideoWrapperRefPtr_attributes, swig_OSG_VideoWrapperRefPtr_bases, swig_OSG_VideoWrapperRefPtr_base_names };

static int _wrap_VideoManager_init(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoManager *arg1 = (OSG::VideoManager *) 0 ;
  
  SWIG_check_num_args("init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"OSG::VideoManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_init",1,SWIGTYPE_p_OSG__VideoManager);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_exit(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoManager *arg1 = (OSG::VideoManager *) 0 ;
  
  SWIG_check_num_args("exit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exit",1,"OSG::VideoManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_exit",1,SWIGTYPE_p_OSG__VideoManager);
  }
  
  (arg1)->exit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_createVideoWrapper(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoManager *arg1 = (OSG::VideoManager *) 0 ;
  OSG::VideoWrapperRefPtr result;
  
  SWIG_check_num_args("createVideoWrapper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createVideoWrapper",1,"OSG::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_createVideoWrapper",1,SWIGTYPE_p_OSG__VideoManager);
  }
  
  result = ((OSG::VideoManager const *)arg1)->createVideoWrapper();
  {
    OSG::VideoWrapperRefPtr * resultptr = new OSG::VideoWrapperRefPtr((const OSG::VideoWrapperRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__VideoWrapperRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VideoManager(void *obj) {
OSG::VideoManager *arg1 = (OSG::VideoManager *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_VideoManager_methods[] = {
    {"init", _wrap_VideoManager_init}, 
    {"exit", _wrap_VideoManager_exit}, 
    {"createVideoWrapper", _wrap_VideoManager_createVideoWrapper}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_VideoManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_VideoManager_bases[] = {0};
static const char *swig_OSG_VideoManager_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_VideoManager = { "VideoManager", &SWIGTYPE_p_OSG__VideoManager,0, swig_delete_VideoManager, swig_OSG_VideoManager_methods, swig_OSG_VideoManager_attributes, swig_OSG_VideoManager_bases, swig_OSG_VideoManager_base_names };

static int _wrap_getDefaultVideoManager(lua_State* L) {
  int SWIG_arg = 0;
  OSG::VideoManagerPtr result;
  
  SWIG_check_num_args("OSG::getDefaultVideoManager",0,0)
  result = (OSG::VideoManagerPtr)OSG::getDefaultVideoManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__VideoManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1D_generate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1D *arg1 = (OSG::Distribution1D *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("generate",1,"OSG::Distribution1D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1D,0))){
    SWIG_fail_ptr("Distribution1D_generate",1,SWIGTYPE_p_OSG__Distribution1D);
  }
  
  result = (OSG::Real32)((OSG::Distribution1D const *)arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Distribution1D_methods[] = {
    {"generate", _wrap_Distribution1D_generate}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Distribution1D_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Distribution1D_bases[] = {0,0};
static const char *swig_OSG_Distribution1D_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Distribution1D = { "Distribution1D", &SWIGTYPE_p_OSG__Distribution1D,0,0, swig_OSG_Distribution1D_methods, swig_OSG_Distribution1D_attributes, swig_OSG_Distribution1D_bases, swig_OSG_Distribution1D_base_names };

static int _wrap_new_Distribution1DRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::Distribution1DRefPtr",0,0)
  result = (OSG::Distribution1DRefPtr *)new OSG::Distribution1DRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution1DRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Distribution1DRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = 0 ;
  OSG::Distribution1DRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::Distribution1DRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Distribution1DRefPtr",1,"OSG::Distribution1DRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("new_Distribution1DRefPtr",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::Distribution1DRefPtr *)new OSG::Distribution1DRefPtr((OSG::Distribution1DRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution1DRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Distribution1DRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Distribution1DRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Distribution1DRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Distribution1DRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Distribution1DRefPtr()\n"
    "    OSG::Distribution1DRefPtr(OSG::Distribution1DRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution1DRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::Distribution1D *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::Distribution1DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr___deref__",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::Distribution1D *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution1D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::Distribution1DRefPtr result;
  
  SWIG_check_num_args("OSG_Distribution1DRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_Distribution1DRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_Distribution1DRefPtr_dcast(arg1);
  {
    OSG::Distribution1DRefPtr * resultptr = new OSG::Distribution1DRefPtr((const OSG::Distribution1DRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Distribution1DRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_generate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("generate",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_generate",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::Real32)(*arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_addAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_addAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution1DRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution1DRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::Distribution1DRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::Distribution1DRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution1DRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_subAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_subAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution1DRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution1DRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::Distribution1DRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::Distribution1DRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution1DRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution1DRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution1DRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution1DRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::Distribution1DRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::Distribution1DRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::Distribution1DRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::Distribution1DRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution1DRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::Distribution1DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getType",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getTypeId",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getGroupId",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getTypeName",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getProducerType",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getId",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getNumFields",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::Distribution1DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_attachActivity",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::Distribution1DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::Distribution1DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::Distribution1DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::Distribution1DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::Distribution1DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::Distribution1DRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution1DRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::Distribution1DRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::Distribution1DRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution1DRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::Distribution1DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::Distribution1DRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution1DRefPtr,0))){
    SWIG_fail_ptr("Distribution1DRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__Distribution1DRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution1DRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution1DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution1DRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution1DRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::Distribution1DRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::Distribution1DRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Distribution1DRefPtr(void *obj) {
OSG::Distribution1DRefPtr *arg1 = (OSG::Distribution1DRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Distribution1DRefPtr_methods[] = {
    {"__deref__", _wrap_Distribution1DRefPtr___deref__}, 
    {"generate", _wrap_Distribution1DRefPtr_generate}, 
    {"addAttachment", _wrap_Distribution1DRefPtr_addAttachment}, 
    {"subAttachment", _wrap_Distribution1DRefPtr_subAttachment}, 
    {"findAttachment", _wrap_Distribution1DRefPtr_findAttachment}, 
    {"getType", _wrap_Distribution1DRefPtr_getType}, 
    {"shallowCopy", _wrap_Distribution1DRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_Distribution1DRefPtr_getTypeId}, 
    {"getGroupId", _wrap_Distribution1DRefPtr_getGroupId}, 
    {"getTypeName", _wrap_Distribution1DRefPtr_getTypeName}, 
    {"getProducerType", _wrap_Distribution1DRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_Distribution1DRefPtr_getContainerSize}, 
    {"getId", _wrap_Distribution1DRefPtr_getId}, 
    {"getNumFields", _wrap_Distribution1DRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_Distribution1DRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_Distribution1DRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_Distribution1DRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_Distribution1DRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_Distribution1DRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_Distribution1DRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_Distribution1DRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_Distribution1DRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_Distribution1DRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Distribution1DRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Distribution1DRefPtr_bases[] = {0,0};
static const char *swig_OSG_Distribution1DRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_Distribution1DRefPtr = { "Distribution1DRefPtr", &SWIGTYPE_p_OSG__Distribution1DRefPtr,_wrap_new_Distribution1DRefPtr, swig_delete_Distribution1DRefPtr, swig_OSG_Distribution1DRefPtr_methods, swig_OSG_Distribution1DRefPtr_attributes, swig_OSG_Distribution1DRefPtr_bases, swig_OSG_Distribution1DRefPtr_base_names };

static int _wrap_Distribution2D_generate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2D *arg1 = (OSG::Distribution2D *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("generate",1,"OSG::Distribution2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2D,0))){
    SWIG_fail_ptr("Distribution2D_generate",1,SWIGTYPE_p_OSG__Distribution2D);
  }
  
  result = ((OSG::Distribution2D const *)arg1)->generate();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Distribution2D_methods[] = {
    {"generate", _wrap_Distribution2D_generate}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Distribution2D_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Distribution2D_bases[] = {0,0};
static const char *swig_OSG_Distribution2D_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Distribution2D = { "Distribution2D", &SWIGTYPE_p_OSG__Distribution2D,0,0, swig_OSG_Distribution2D_methods, swig_OSG_Distribution2D_attributes, swig_OSG_Distribution2D_bases, swig_OSG_Distribution2D_base_names };

static int _wrap_new_Distribution2DRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::Distribution2DRefPtr",0,0)
  result = (OSG::Distribution2DRefPtr *)new OSG::Distribution2DRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution2DRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Distribution2DRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = 0 ;
  OSG::Distribution2DRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::Distribution2DRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Distribution2DRefPtr",1,"OSG::Distribution2DRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("new_Distribution2DRefPtr",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::Distribution2DRefPtr *)new OSG::Distribution2DRefPtr((OSG::Distribution2DRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution2DRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Distribution2DRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Distribution2DRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Distribution2DRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Distribution2DRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Distribution2DRefPtr()\n"
    "    OSG::Distribution2DRefPtr(OSG::Distribution2DRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution2DRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::Distribution2D *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::Distribution2DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr___deref__",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::Distribution2D *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::Distribution2DRefPtr result;
  
  SWIG_check_num_args("OSG_Distribution2DRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_Distribution2DRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_Distribution2DRefPtr_dcast(arg1);
  {
    OSG::Distribution2DRefPtr * resultptr = new OSG::Distribution2DRefPtr((const OSG::Distribution2DRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Distribution2DRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_generate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::Vec2f result;
  
  SWIG_check_num_args("generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("generate",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_generate",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (*arg1)->generate();
  {
    OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_addAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_addAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution2DRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution2DRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::Distribution2DRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::Distribution2DRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution2DRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_subAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_subAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution2DRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution2DRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::Distribution2DRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::Distribution2DRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution2DRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution2DRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution2DRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution2DRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::Distribution2DRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::Distribution2DRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::Distribution2DRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::Distribution2DRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution2DRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::Distribution2DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getType",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getTypeId",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getGroupId",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getTypeName",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getProducerType",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getId",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getNumFields",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::Distribution2DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_attachActivity",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::Distribution2DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::Distribution2DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::Distribution2DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::Distribution2DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::Distribution2DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::Distribution2DRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution2DRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::Distribution2DRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::Distribution2DRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution2DRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::Distribution2DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::Distribution2DRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution2DRefPtr,0))){
    SWIG_fail_ptr("Distribution2DRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__Distribution2DRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution2DRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution2DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution2DRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution2DRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::Distribution2DRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::Distribution2DRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Distribution2DRefPtr(void *obj) {
OSG::Distribution2DRefPtr *arg1 = (OSG::Distribution2DRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Distribution2DRefPtr_methods[] = {
    {"__deref__", _wrap_Distribution2DRefPtr___deref__}, 
    {"generate", _wrap_Distribution2DRefPtr_generate}, 
    {"addAttachment", _wrap_Distribution2DRefPtr_addAttachment}, 
    {"subAttachment", _wrap_Distribution2DRefPtr_subAttachment}, 
    {"findAttachment", _wrap_Distribution2DRefPtr_findAttachment}, 
    {"getType", _wrap_Distribution2DRefPtr_getType}, 
    {"shallowCopy", _wrap_Distribution2DRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_Distribution2DRefPtr_getTypeId}, 
    {"getGroupId", _wrap_Distribution2DRefPtr_getGroupId}, 
    {"getTypeName", _wrap_Distribution2DRefPtr_getTypeName}, 
    {"getProducerType", _wrap_Distribution2DRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_Distribution2DRefPtr_getContainerSize}, 
    {"getId", _wrap_Distribution2DRefPtr_getId}, 
    {"getNumFields", _wrap_Distribution2DRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_Distribution2DRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_Distribution2DRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_Distribution2DRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_Distribution2DRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_Distribution2DRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_Distribution2DRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_Distribution2DRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_Distribution2DRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_Distribution2DRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Distribution2DRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Distribution2DRefPtr_bases[] = {0,0};
static const char *swig_OSG_Distribution2DRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_Distribution2DRefPtr = { "Distribution2DRefPtr", &SWIGTYPE_p_OSG__Distribution2DRefPtr,_wrap_new_Distribution2DRefPtr, swig_delete_Distribution2DRefPtr, swig_OSG_Distribution2DRefPtr_methods, swig_OSG_Distribution2DRefPtr_attributes, swig_OSG_Distribution2DRefPtr_bases, swig_OSG_Distribution2DRefPtr_base_names };

static int _wrap_Distribution3D_generate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3D *arg1 = (OSG::Distribution3D *) 0 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("generate",1,"OSG::Distribution3D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3D,0))){
    SWIG_fail_ptr("Distribution3D_generate",1,SWIGTYPE_p_OSG__Distribution3D);
  }
  
  result = ((OSG::Distribution3D const *)arg1)->generate();
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Distribution3D_methods[] = {
    {"generate", _wrap_Distribution3D_generate}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Distribution3D_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Distribution3D_bases[] = {0,0};
static const char *swig_OSG_Distribution3D_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Distribution3D = { "Distribution3D", &SWIGTYPE_p_OSG__Distribution3D,0,0, swig_OSG_Distribution3D_methods, swig_OSG_Distribution3D_attributes, swig_OSG_Distribution3D_bases, swig_OSG_Distribution3D_base_names };

static int _wrap_new_Distribution3DRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::Distribution3DRefPtr",0,0)
  result = (OSG::Distribution3DRefPtr *)new OSG::Distribution3DRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution3DRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Distribution3DRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = 0 ;
  OSG::Distribution3DRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::Distribution3DRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Distribution3DRefPtr",1,"OSG::Distribution3DRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("new_Distribution3DRefPtr",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::Distribution3DRefPtr *)new OSG::Distribution3DRefPtr((OSG::Distribution3DRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution3DRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Distribution3DRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Distribution3DRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Distribution3DRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Distribution3DRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Distribution3DRefPtr()\n"
    "    OSG::Distribution3DRefPtr(OSG::Distribution3DRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution3DRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::Distribution3D *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::Distribution3DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr___deref__",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::Distribution3D *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Distribution3D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::Distribution3DRefPtr result;
  
  SWIG_check_num_args("OSG_Distribution3DRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_Distribution3DRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_Distribution3DRefPtr_dcast(arg1);
  {
    OSG::Distribution3DRefPtr * resultptr = new OSG::Distribution3DRefPtr((const OSG::Distribution3DRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Distribution3DRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_generate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::Vec3f result;
  
  SWIG_check_num_args("generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("generate",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_generate",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (*arg1)->generate();
  {
    OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_addAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_addAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution3DRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution3DRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::Distribution3DRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::Distribution3DRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution3DRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_subAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_subAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution3DRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution3DRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::Distribution3DRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::Distribution3DRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution3DRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_findAttachment",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution3DRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Distribution3DRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution3DRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::Distribution3DRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::Distribution3DRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::Distribution3DRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::Distribution3DRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution3DRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::Distribution3DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getType",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getTypeId",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getGroupId",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getTypeName",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getProducerType",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getId",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getNumFields",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::Distribution3DRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_attachActivity",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::Distribution3DRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::Distribution3DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::Distribution3DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::Distribution3DRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::Distribution3DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::Distribution3DRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution3DRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::Distribution3DRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::Distribution3DRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Distribution3DRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::Distribution3DRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::Distribution3DRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Distribution3DRefPtr,0))){
    SWIG_fail_ptr("Distribution3DRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__Distribution3DRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distribution3DRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Distribution3DRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Distribution3DRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Distribution3DRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::Distribution3DRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::Distribution3DRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Distribution3DRefPtr(void *obj) {
OSG::Distribution3DRefPtr *arg1 = (OSG::Distribution3DRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Distribution3DRefPtr_methods[] = {
    {"__deref__", _wrap_Distribution3DRefPtr___deref__}, 
    {"generate", _wrap_Distribution3DRefPtr_generate}, 
    {"addAttachment", _wrap_Distribution3DRefPtr_addAttachment}, 
    {"subAttachment", _wrap_Distribution3DRefPtr_subAttachment}, 
    {"findAttachment", _wrap_Distribution3DRefPtr_findAttachment}, 
    {"getType", _wrap_Distribution3DRefPtr_getType}, 
    {"shallowCopy", _wrap_Distribution3DRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_Distribution3DRefPtr_getTypeId}, 
    {"getGroupId", _wrap_Distribution3DRefPtr_getGroupId}, 
    {"getTypeName", _wrap_Distribution3DRefPtr_getTypeName}, 
    {"getProducerType", _wrap_Distribution3DRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_Distribution3DRefPtr_getContainerSize}, 
    {"getId", _wrap_Distribution3DRefPtr_getId}, 
    {"getNumFields", _wrap_Distribution3DRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_Distribution3DRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_Distribution3DRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_Distribution3DRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_Distribution3DRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_Distribution3DRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_Distribution3DRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_Distribution3DRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_Distribution3DRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_Distribution3DRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Distribution3DRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Distribution3DRefPtr_bases[] = {0,0};
static const char *swig_OSG_Distribution3DRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_Distribution3DRefPtr = { "Distribution3DRefPtr", &SWIGTYPE_p_OSG__Distribution3DRefPtr,_wrap_new_Distribution3DRefPtr, swig_delete_Distribution3DRefPtr, swig_OSG_Distribution3DRefPtr_methods, swig_OSG_Distribution3DRefPtr_attributes, swig_OSG_Distribution3DRefPtr_bases, swig_OSG_Distribution3DRefPtr_base_names };

static int _wrap_CgFXMaterial_setActiveTechnique(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterial *arg1 = (OSG::CgFXMaterial *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("setActiveTechnique",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setActiveTechnique",1,"OSG::CgFXMaterial *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setActiveTechnique",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterial,0))){
    SWIG_fail_ptr("CgFXMaterial_setActiveTechnique",1,SWIGTYPE_p_OSG__CgFXMaterial);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (bool)(arg1)->setActiveTechnique(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterial_getAvailableTechniques(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterial *arg1 = (OSG::CgFXMaterial *) 0 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("getAvailableTechniques",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAvailableTechniques",1,"OSG::CgFXMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterial,0))){
    SWIG_fail_ptr("CgFXMaterial_getAvailableTechniques",1,SWIGTYPE_p_OSG__CgFXMaterial);
  }
  
  result = (arg1)->getAvailableTechniques();
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_CgFXMaterial_methods[] = {
    {"setActiveTechnique", _wrap_CgFXMaterial_setActiveTechnique}, 
    {"getAvailableTechniques", _wrap_CgFXMaterial_getAvailableTechniques}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_CgFXMaterial_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_CgFXMaterial_bases[] = {0,0};
static const char *swig_OSG_CgFXMaterial_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_CgFXMaterial = { "CgFXMaterial", &SWIGTYPE_p_OSG__CgFXMaterial,0,0, swig_OSG_CgFXMaterial_methods, swig_OSG_CgFXMaterial_attributes, swig_OSG_CgFXMaterial_bases, swig_OSG_CgFXMaterial_base_names };

static int _wrap_new_CgFXMaterialRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::CgFXMaterialRefPtr",0,0)
  result = (OSG::CgFXMaterialRefPtr *)new OSG::CgFXMaterialRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CgFXMaterialRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = 0 ;
  OSG::CgFXMaterialRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::CgFXMaterialRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::CgFXMaterialRefPtr",1,"OSG::CgFXMaterialRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("new_CgFXMaterialRefPtr",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::CgFXMaterialRefPtr *)new OSG::CgFXMaterialRefPtr((OSG::CgFXMaterialRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CgFXMaterialRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CgFXMaterialRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CgFXMaterialRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CgFXMaterialRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::CgFXMaterialRefPtr()\n"
    "    OSG::CgFXMaterialRefPtr(OSG::CgFXMaterialRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CgFXMaterialRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::CgFXMaterial *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::CgFXMaterialRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr___deref__",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::CgFXMaterial *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__CgFXMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::CgFXMaterialRefPtr result;
  
  SWIG_check_num_args("OSG_CgFXMaterialRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_CgFXMaterialRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_CgFXMaterialRefPtr_dcast(arg1);
  {
    OSG::CgFXMaterialRefPtr * resultptr = new OSG::CgFXMaterialRefPtr((const OSG::CgFXMaterialRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_setActiveTechnique(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("setActiveTechnique",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setActiveTechnique",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setActiveTechnique",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_setActiveTechnique",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (bool)(*arg1)->setActiveTechnique(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getAvailableTechniques(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("getAvailableTechniques",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAvailableTechniques",1,"OSG::CgFXMaterialRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getAvailableTechniques",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (*arg1)->getAvailableTechniques();
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_addAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_addAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CgFXMaterialRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CgFXMaterialRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::CgFXMaterialRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::CgFXMaterialRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CgFXMaterialRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_subAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_subAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CgFXMaterialRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CgFXMaterialRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::CgFXMaterialRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::CgFXMaterialRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CgFXMaterialRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CgFXMaterialRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::CgFXMaterialRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::CgFXMaterialRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::CgFXMaterialRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::CgFXMaterialRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CgFXMaterialRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::CgFXMaterialRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getType",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getTypeId",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getGroupId",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getTypeName",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getProducerType",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getId",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getNumFields",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::CgFXMaterialRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_attachActivity",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::CgFXMaterialRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::CgFXMaterialRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::CgFXMaterialRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::CgFXMaterialRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::CgFXMaterialRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::CgFXMaterialRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CgFXMaterialRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::CgFXMaterialRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::CgFXMaterialRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_CgFXMaterialRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::CgFXMaterialRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::CgFXMaterialRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr,0))){
    SWIG_fail_ptr("CgFXMaterialRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__CgFXMaterialRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CgFXMaterialRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CgFXMaterialRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CgFXMaterialRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CgFXMaterialRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::CgFXMaterialRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::CgFXMaterialRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_CgFXMaterialRefPtr(void *obj) {
OSG::CgFXMaterialRefPtr *arg1 = (OSG::CgFXMaterialRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_CgFXMaterialRefPtr_methods[] = {
    {"__deref__", _wrap_CgFXMaterialRefPtr___deref__}, 
    {"setActiveTechnique", _wrap_CgFXMaterialRefPtr_setActiveTechnique}, 
    {"getAvailableTechniques", _wrap_CgFXMaterialRefPtr_getAvailableTechniques}, 
    {"addAttachment", _wrap_CgFXMaterialRefPtr_addAttachment}, 
    {"subAttachment", _wrap_CgFXMaterialRefPtr_subAttachment}, 
    {"findAttachment", _wrap_CgFXMaterialRefPtr_findAttachment}, 
    {"getType", _wrap_CgFXMaterialRefPtr_getType}, 
    {"shallowCopy", _wrap_CgFXMaterialRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_CgFXMaterialRefPtr_getTypeId}, 
    {"getGroupId", _wrap_CgFXMaterialRefPtr_getGroupId}, 
    {"getTypeName", _wrap_CgFXMaterialRefPtr_getTypeName}, 
    {"getProducerType", _wrap_CgFXMaterialRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_CgFXMaterialRefPtr_getContainerSize}, 
    {"getId", _wrap_CgFXMaterialRefPtr_getId}, 
    {"getNumFields", _wrap_CgFXMaterialRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_CgFXMaterialRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_CgFXMaterialRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_CgFXMaterialRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_CgFXMaterialRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_CgFXMaterialRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_CgFXMaterialRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_CgFXMaterialRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_CgFXMaterialRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_CgFXMaterialRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_CgFXMaterialRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_CgFXMaterialRefPtr_bases[] = {0,0};
static const char *swig_OSG_CgFXMaterialRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_CgFXMaterialRefPtr = { "CgFXMaterialRefPtr", &SWIGTYPE_p_OSG__CgFXMaterialRefPtr,_wrap_new_CgFXMaterialRefPtr, swig_delete_CgFXMaterialRefPtr, swig_OSG_CgFXMaterialRefPtr_methods, swig_OSG_CgFXMaterialRefPtr_attributes, swig_OSG_CgFXMaterialRefPtr_bases, swig_OSG_CgFXMaterialRefPtr_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "WindowEventProducerRefPtr_dcast", _wrap_WindowEventProducerRefPtr_dcast},
    { "PhysicsHandlerRefPtr_dcast", _wrap_PhysicsHandlerRefPtr_dcast},
    { "PhysicsWorldRefPtr_dcast", _wrap_PhysicsWorldRefPtr_dcast},
    { "PhysicsBodyRefPtr_dcast", _wrap_PhysicsBodyRefPtr_dcast},
    { "PhysicsBody_create", _wrap_PhysicsBody_create},
    { "PhysicsSpaceRefPtr_dcast", _wrap_PhysicsSpaceRefPtr_dcast},
    { "ParticleSystemRefPtr_dcast", _wrap_ParticleSystemRefPtr_dcast},
    { "ComponentRefPtr_dcast", _wrap_ComponentRefPtr_dcast},
    { "InternalWindowRefPtr_dcast", _wrap_InternalWindowRefPtr_dcast},
    { "UIDrawingSurfaceRefPtr_dcast", _wrap_UIDrawingSurfaceRefPtr_dcast},
    { "ScrollPanelRefPtr_dcast", _wrap_ScrollPanelRefPtr_dcast},
    { "SoundRefPtr_dcast", _wrap_SoundRefPtr_dcast},
    { "Sound_create", _wrap_Sound_create},
    { "SoundManager_the", _wrap_SoundManager_the},
    { "SoundGroupRefPtr_dcast", _wrap_SoundGroupRefPtr_dcast},
    { "AnimationRefPtr_dcast", _wrap_AnimationRefPtr_dcast},
    { "VideoWrapperRefPtr_dcast", _wrap_VideoWrapperRefPtr_dcast},
    { "getDefaultVideoManager", _wrap_getDefaultVideoManager},
    { "Distribution1DRefPtr_dcast", _wrap_Distribution1DRefPtr_dcast},
    { "Distribution2DRefPtr_dcast", _wrap_Distribution2DRefPtr_dcast},
    { "Distribution3DRefPtr_dcast", _wrap_Distribution3DRefPtr_dcast},
    { "CgFXMaterialRefPtr_dcast", _wrap_CgFXMaterialRefPtr_dcast},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_POINTER", (long) OSG::WindowEventProducer::CURSOR_POINTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_HAND", (long) OSG::WindowEventProducer::CURSOR_HAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_I_BEAM", (long) OSG::WindowEventProducer::CURSOR_I_BEAM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_WAIT", (long) OSG::WindowEventProducer::CURSOR_WAIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_W_TO_E", (long) OSG::WindowEventProducer::CURSOR_RESIZE_W_TO_E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_N_TO_S", (long) OSG::WindowEventProducer::CURSOR_RESIZE_N_TO_S, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_NW_TO_SE", (long) OSG::WindowEventProducer::CURSOR_RESIZE_NW_TO_SE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_SW_TO_NE", (long) OSG::WindowEventProducer::CURSOR_RESIZE_SW_TO_NE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_ALL", (long) OSG::WindowEventProducer::CURSOR_RESIZE_ALL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_NONE", (long) OSG::WindowEventProducer::CURSOR_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_UNKNOWN", (long) OSG::KeyEventDetails::KEY_MODIFIER_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_SHIFT", (long) OSG::KeyEventDetails::KEY_MODIFIER_SHIFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_CONTROL", (long) OSG::KeyEventDetails::KEY_MODIFIER_CONTROL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_ALT", (long) OSG::KeyEventDetails::KEY_MODIFIER_ALT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_META", (long) OSG::KeyEventDetails::KEY_MODIFIER_META, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_CAPS_LOCK", (long) OSG::KeyEventDetails::KEY_MODIFIER_CAPS_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_NUM_LOCK", (long) OSG::KeyEventDetails::KEY_MODIFIER_NUM_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_SCROLL_LOCK", (long) OSG::KeyEventDetails::KEY_MODIFIER_SCROLL_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MODIFIER_COMMAND", (long) OSG::KeyEventDetails::KEY_MODIFIER_COMMAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_UNKNOWN", (long) OSG::KeyEventDetails::KEY_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_BACK_SPACE", (long) OSG::KeyEventDetails::KEY_BACK_SPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_TAB", (long) OSG::KeyEventDetails::KEY_TAB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_ESCAPE", (long) OSG::KeyEventDetails::KEY_ESCAPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_SPACE", (long) OSG::KeyEventDetails::KEY_SPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_EXCLAMATION_MARK", (long) OSG::KeyEventDetails::KEY_EXCLAMATION_MARK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_QUOTE", (long) OSG::KeyEventDetails::KEY_QUOTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMBER_SIGN", (long) OSG::KeyEventDetails::KEY_NUMBER_SIGN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_DOLLAR", (long) OSG::KeyEventDetails::KEY_DOLLAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PERCENT", (long) OSG::KeyEventDetails::KEY_PERCENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_AMPERSAND", (long) OSG::KeyEventDetails::KEY_AMPERSAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_APOSTROPHE", (long) OSG::KeyEventDetails::KEY_APOSTROPHE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_LEFT_PARENTHESIS", (long) OSG::KeyEventDetails::KEY_LEFT_PARENTHESIS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_RIGHT_PARENTHESIS", (long) OSG::KeyEventDetails::KEY_RIGHT_PARENTHESIS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_ASTERISK", (long) OSG::KeyEventDetails::KEY_ASTERISK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PLUS", (long) OSG::KeyEventDetails::KEY_PLUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_COMMA", (long) OSG::KeyEventDetails::KEY_COMMA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MINUS", (long) OSG::KeyEventDetails::KEY_MINUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PERIOD", (long) OSG::KeyEventDetails::KEY_PERIOD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_SLASH", (long) OSG::KeyEventDetails::KEY_SLASH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_0", (long) OSG::KeyEventDetails::KEY_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_1", (long) OSG::KeyEventDetails::KEY_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_2", (long) OSG::KeyEventDetails::KEY_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_3", (long) OSG::KeyEventDetails::KEY_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_4", (long) OSG::KeyEventDetails::KEY_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_5", (long) OSG::KeyEventDetails::KEY_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_6", (long) OSG::KeyEventDetails::KEY_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_7", (long) OSG::KeyEventDetails::KEY_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_8", (long) OSG::KeyEventDetails::KEY_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_9", (long) OSG::KeyEventDetails::KEY_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_COLON", (long) OSG::KeyEventDetails::KEY_COLON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_SEMICOLON", (long) OSG::KeyEventDetails::KEY_SEMICOLON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_LESS", (long) OSG::KeyEventDetails::KEY_LESS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_EQUALS", (long) OSG::KeyEventDetails::KEY_EQUALS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_GREATER", (long) OSG::KeyEventDetails::KEY_GREATER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_QUESTION_MARK", (long) OSG::KeyEventDetails::KEY_QUESTION_MARK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_AT", (long) OSG::KeyEventDetails::KEY_AT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_A", (long) OSG::KeyEventDetails::KEY_A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_B", (long) OSG::KeyEventDetails::KEY_B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_C", (long) OSG::KeyEventDetails::KEY_C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_D", (long) OSG::KeyEventDetails::KEY_D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_E", (long) OSG::KeyEventDetails::KEY_E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F", (long) OSG::KeyEventDetails::KEY_F, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_G", (long) OSG::KeyEventDetails::KEY_G, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_H", (long) OSG::KeyEventDetails::KEY_H, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_I", (long) OSG::KeyEventDetails::KEY_I, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_J", (long) OSG::KeyEventDetails::KEY_J, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_K", (long) OSG::KeyEventDetails::KEY_K, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_L", (long) OSG::KeyEventDetails::KEY_L, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_M", (long) OSG::KeyEventDetails::KEY_M, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_N", (long) OSG::KeyEventDetails::KEY_N, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_O", (long) OSG::KeyEventDetails::KEY_O, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_P", (long) OSG::KeyEventDetails::KEY_P, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_Q", (long) OSG::KeyEventDetails::KEY_Q, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_R", (long) OSG::KeyEventDetails::KEY_R, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_S", (long) OSG::KeyEventDetails::KEY_S, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_T", (long) OSG::KeyEventDetails::KEY_T, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_U", (long) OSG::KeyEventDetails::KEY_U, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_V", (long) OSG::KeyEventDetails::KEY_V, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_W", (long) OSG::KeyEventDetails::KEY_W, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_X", (long) OSG::KeyEventDetails::KEY_X, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_Y", (long) OSG::KeyEventDetails::KEY_Y, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_Z", (long) OSG::KeyEventDetails::KEY_Z, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_OPEN_BRACKET", (long) OSG::KeyEventDetails::KEY_OPEN_BRACKET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_BACK_SLASH", (long) OSG::KeyEventDetails::KEY_BACK_SLASH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_CLOSE_BRACKET", (long) OSG::KeyEventDetails::KEY_CLOSE_BRACKET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_CIRCUMFLEX", (long) OSG::KeyEventDetails::KEY_CIRCUMFLEX, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_UNDERSCORE", (long) OSG::KeyEventDetails::KEY_UNDERSCORE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_BACK_QUOTE", (long) OSG::KeyEventDetails::KEY_BACK_QUOTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_BRACE_LEFT", (long) OSG::KeyEventDetails::KEY_BRACE_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PIPE", (long) OSG::KeyEventDetails::KEY_PIPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_BRACE_RIGHT", (long) OSG::KeyEventDetails::KEY_BRACE_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_TILDE", (long) OSG::KeyEventDetails::KEY_TILDE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_DELETE", (long) OSG::KeyEventDetails::KEY_DELETE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_INVERTED_EXCLAMATION_MARK", (long) OSG::KeyEventDetails::KEY_INVERTED_EXCLAMATION_MARK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_ALT", (long) OSG::KeyEventDetails::KEY_ALT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_CONTROL", (long) OSG::KeyEventDetails::KEY_CONTROL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_CAPS_LOCK", (long) OSG::KeyEventDetails::KEY_CAPS_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_SCROLL_LOCK", (long) OSG::KeyEventDetails::KEY_SCROLL_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUM_LOCK", (long) OSG::KeyEventDetails::KEY_NUM_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_SHIFT", (long) OSG::KeyEventDetails::KEY_SHIFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MENU", (long) OSG::KeyEventDetails::KEY_MENU, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_META", (long) OSG::KeyEventDetails::KEY_META, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_ENTER", (long) OSG::KeyEventDetails::KEY_ENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_CANCEL", (long) OSG::KeyEventDetails::KEY_CANCEL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_CLEAR", (long) OSG::KeyEventDetails::KEY_CLEAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_COPY", (long) OSG::KeyEventDetails::KEY_COPY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_CUT", (long) OSG::KeyEventDetails::KEY_CUT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_END", (long) OSG::KeyEventDetails::KEY_END, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_INSERT", (long) OSG::KeyEventDetails::KEY_INSERT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_HOME", (long) OSG::KeyEventDetails::KEY_HOME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PAGE_DOWN", (long) OSG::KeyEventDetails::KEY_PAGE_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PAGE_UP", (long) OSG::KeyEventDetails::KEY_PAGE_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_FIND", (long) OSG::KeyEventDetails::KEY_FIND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_HELP", (long) OSG::KeyEventDetails::KEY_HELP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PASTE", (long) OSG::KeyEventDetails::KEY_PASTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PAUSE", (long) OSG::KeyEventDetails::KEY_PAUSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_PRINTSCREEN", (long) OSG::KeyEventDetails::KEY_PRINTSCREEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_STOP", (long) OSG::KeyEventDetails::KEY_STOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_UNDO", (long) OSG::KeyEventDetails::KEY_UNDO, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F1", (long) OSG::KeyEventDetails::KEY_F1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F2", (long) OSG::KeyEventDetails::KEY_F2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F3", (long) OSG::KeyEventDetails::KEY_F3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F4", (long) OSG::KeyEventDetails::KEY_F4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F5", (long) OSG::KeyEventDetails::KEY_F5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F6", (long) OSG::KeyEventDetails::KEY_F6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F7", (long) OSG::KeyEventDetails::KEY_F7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F8", (long) OSG::KeyEventDetails::KEY_F8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F9", (long) OSG::KeyEventDetails::KEY_F9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F10", (long) OSG::KeyEventDetails::KEY_F10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F11", (long) OSG::KeyEventDetails::KEY_F11, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F12", (long) OSG::KeyEventDetails::KEY_F12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F13", (long) OSG::KeyEventDetails::KEY_F13, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F14", (long) OSG::KeyEventDetails::KEY_F14, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F15", (long) OSG::KeyEventDetails::KEY_F15, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F16", (long) OSG::KeyEventDetails::KEY_F16, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F17", (long) OSG::KeyEventDetails::KEY_F17, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F18", (long) OSG::KeyEventDetails::KEY_F18, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F19", (long) OSG::KeyEventDetails::KEY_F19, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F20", (long) OSG::KeyEventDetails::KEY_F20, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F21", (long) OSG::KeyEventDetails::KEY_F21, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F22", (long) OSG::KeyEventDetails::KEY_F22, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F23", (long) OSG::KeyEventDetails::KEY_F23, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_F24", (long) OSG::KeyEventDetails::KEY_F24, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_RIGHT", (long) OSG::KeyEventDetails::KEY_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_LEFT", (long) OSG::KeyEventDetails::KEY_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_UP", (long) OSG::KeyEventDetails::KEY_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_DOWN", (long) OSG::KeyEventDetails::KEY_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_MULTIPLY", (long) OSG::KeyEventDetails::KEY_MULTIPLY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_DECIMAL", (long) OSG::KeyEventDetails::KEY_DECIMAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_ADD", (long) OSG::KeyEventDetails::KEY_ADD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_DIVIDE", (long) OSG::KeyEventDetails::KEY_DIVIDE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_SUBTRACT", (long) OSG::KeyEventDetails::KEY_SUBTRACT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_KEYPAD_UP", (long) OSG::KeyEventDetails::KEY_KEYPAD_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_KEYPAD_DOWN", (long) OSG::KeyEventDetails::KEY_KEYPAD_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_KEYPAD_LEFT", (long) OSG::KeyEventDetails::KEY_KEYPAD_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_KEYPAD_RIGHT", (long) OSG::KeyEventDetails::KEY_KEYPAD_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NONE", (long) OSG::KeyEventDetails::KEY_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_0", (long) OSG::KeyEventDetails::KEY_NUMPAD_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_1", (long) OSG::KeyEventDetails::KEY_NUMPAD_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_2", (long) OSG::KeyEventDetails::KEY_NUMPAD_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_3", (long) OSG::KeyEventDetails::KEY_NUMPAD_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_4", (long) OSG::KeyEventDetails::KEY_NUMPAD_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_5", (long) OSG::KeyEventDetails::KEY_NUMPAD_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_6", (long) OSG::KeyEventDetails::KEY_NUMPAD_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_7", (long) OSG::KeyEventDetails::KEY_NUMPAD_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_8", (long) OSG::KeyEventDetails::KEY_NUMPAD_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_9", (long) OSG::KeyEventDetails::KEY_NUMPAD_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_NUMPAD_EQUALS", (long) OSG::KeyEventDetails::KEY_NUMPAD_EQUALS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_COMMAND", (long) OSG::KeyEventDetails::KEY_COMMAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_UNDEFINED", (long) OSG::KeyEventDetails::KEY_UNDEFINED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_STATE_UP", (long) OSG::KeyEventDetails::KEY_STATE_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_STATE_DOWN", (long) OSG::KeyEventDetails::KEY_STATE_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEventDetails_KEY_STATE_TOGGLED", (long) OSG::KeyEventDetails::KEY_STATE_TOGGLED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_SCROLLBAR_AS_NEEDED", (long) OSG::ScrollPanel::SCROLLBAR_AS_NEEDED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_SCROLLBAR_AS_ALWAYS", (long) OSG::ScrollPanel::SCROLLBAR_AS_ALWAYS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_SCROLLBAR_AS_NEVER", (long) OSG::ScrollPanel::SCROLLBAR_AS_NEVER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_NO_RESIZE", (long) OSG::ScrollPanel::NO_RESIZE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_RESIZE_TO_VIEW", (long) OSG::ScrollPanel::RESIZE_TO_VIEW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_SCROLLBAR_ALIGN_TOP", (long) OSG::ScrollPanel::SCROLLBAR_ALIGN_TOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_SCROLLBAR_ALIGN_BOTTOM", (long) OSG::ScrollPanel::SCROLLBAR_ALIGN_BOTTOM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_SCROLLBAR_ALIGN_LEFT", (long) OSG::ScrollPanel::SCROLLBAR_ALIGN_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ScrollPanel_SCROLLBAR_ALIGN_RIGHT", (long) OSG::ScrollPanel::SCROLLBAR_ALIGN_RIGHT, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OSG__LuaActivityTo_p_OSG__Activity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Activity *)  ((OSG::LuaActivity *) x));
}
static void *_p_OSG__Vec2fTo_p_OSG__Pnt2f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Pnt2f *)  ((OSG::Vec2f *) x));
}
static void *_p_OSG__PhysicsBodyTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsBody *) x));
}
static void *_p_OSG__Distribution1DTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Distribution1D *) x));
}
static void *_p_OSG__ScrollPanelTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::Component *) ((OSG::ScrollPanel *) x));
}
static void *_p_OSG__SoundTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Sound *) x));
}
static void *_p_OSG__NodeTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Node *) x));
}
static void *_p_OSG__ComponentTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Component *) x));
}
static void *_p_OSG__InternalWindowTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::Component *) ((OSG::InternalWindow *) x));
}
static void *_p_OSG__SoundGroupTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::SoundGroup *) x));
}
static void *_p_OSG__AnimationTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Animation *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Viewport *) x));
}
static void *_p_OSG__CameraTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Camera *) x));
}
static void *_p_OSG__CgFXMaterialTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::CgFXMaterial *) x));
}
static void *_p_OSG__AttachmentTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::Attachment *) x));
}
static void *_p_OSG__PhysicsHandlerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsHandler *) x));
}
static void *_p_OSG__ParticleSystemTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::ParticleSystem *) x));
}
static void *_p_OSG__GenericEventDetailsTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::EventDetails *) ((OSG::GenericEventDetails *) x));
}
static void *_p_OSG__EventDetailsTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::EventDetails *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::NodeCore *) x));
}
static void *_p_OSG__AttachmentContainerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::AttachmentContainer *) x));
}
static void *_p_OSG__FieldContainerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *)  ((OSG::FieldContainer *) x));
}
static void *_p_OSG__WindowEventProducerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::WindowEventProducer *) x));
}
static void *_p_OSG__PhysicsSpaceTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsSpace *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Activity *) x));
}
static void *_p_OSG__Distribution3DTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Distribution3D *) x));
}
static void *_p_OSG__ImageTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Image *) x));
}
static void *_p_OSG__PhysicsWorldTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsWorld *) x));
}
static void *_p_OSG__UIDrawingSurfaceTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::UIDrawingSurface *) x));
}
static void *_p_OSG__VideoWrapperTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::VideoWrapper *) x));
}
static void *_p_OSG__TextureObjChunkTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::TextureObjChunk *) x));
}
static void *_p_OSG__Distribution2DTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Distribution2D *) x));
}
static void *_p_OSG__PhysicsBodyTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsBody *) x));
}
static void *_p_OSG__Distribution1DTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Distribution1D *) x));
}
static void *_p_OSG__ScrollPanelTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::Component *) ((OSG::ScrollPanel *) x));
}
static void *_p_OSG__SoundTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Sound *) x));
}
static void *_p_OSG__NodeTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Node *) x));
}
static void *_p_OSG__ComponentTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Component *) x));
}
static void *_p_OSG__InternalWindowTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::Component *) ((OSG::InternalWindow *) x));
}
static void *_p_OSG__SoundGroupTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::SoundGroup *) x));
}
static void *_p_OSG__AnimationTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Animation *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Viewport *) x));
}
static void *_p_OSG__CameraTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Camera *) x));
}
static void *_p_OSG__CgFXMaterialTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::CgFXMaterial *) x));
}
static void *_p_OSG__AttachmentTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::Attachment *) x));
}
static void *_p_OSG__PhysicsHandlerTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsHandler *) x));
}
static void *_p_OSG__ParticleSystemTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::ParticleSystem *) x));
}
static void *_p_OSG__GenericEventDetailsTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::EventDetails *) ((OSG::GenericEventDetails *) x));
}
static void *_p_OSG__EventDetailsTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::EventDetails *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::NodeCore *) x));
}
static void *_p_OSG__AttachmentContainerTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::AttachmentContainer *) x));
}
static void *_p_OSG__WindowEventProducerTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::WindowEventProducer *) x));
}
static void *_p_OSG__PhysicsSpaceTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsSpace *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Activity *) x));
}
static void *_p_OSG__Distribution3DTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Distribution3D *) x));
}
static void *_p_OSG__ImageTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Image *) x));
}
static void *_p_OSG__PhysicsWorldTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsWorld *) x));
}
static void *_p_OSG__UIDrawingSurfaceTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::UIDrawingSurface *) x));
}
static void *_p_OSG__VideoWrapperTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::VideoWrapper *) x));
}
static void *_p_OSG__TextureObjChunkTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::TextureObjChunk *) x));
}
static void *_p_OSG__Distribution2DTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Distribution2D *) x));
}
static void *_p_OSG__Distribution1DTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Distribution1D *) x));
}
static void *_p_OSG__ScrollPanelTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::Component *) ((OSG::ScrollPanel *) x));
}
static void *_p_OSG__SoundTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Sound *) x));
}
static void *_p_OSG__InternalWindowTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::Component *) ((OSG::InternalWindow *) x));
}
static void *_p_OSG__ComponentTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Component *) x));
}
static void *_p_OSG__NodeTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Node *) x));
}
static void *_p_OSG__SoundGroupTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::SoundGroup *) x));
}
static void *_p_OSG__AnimationTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Animation *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Viewport *) x));
}
static void *_p_OSG__CameraTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Camera *) x));
}
static void *_p_OSG__CgFXMaterialTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::CgFXMaterial *) x));
}
static void *_p_OSG__ParticleSystemTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::ParticleSystem *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::NodeCore *) x));
}
static void *_p_OSG__WindowEventProducerTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::WindowEventProducer *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Activity *) x));
}
static void *_p_OSG__Distribution3DTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Distribution3D *) x));
}
static void *_p_OSG__ImageTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Image *) x));
}
static void *_p_OSG__UIDrawingSurfaceTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::UIDrawingSurface *) x));
}
static void *_p_OSG__VideoWrapperTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::VideoWrapper *) x));
}
static void *_p_OSG__Distribution2DTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Distribution2D *) x));
}
static void *_p_OSG__Vec3fTo_p_OSG__Pnt3f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Pnt3f *)  ((OSG::Vec3f *) x));
}
static void *_p_OSG__InternalWindowTo_p_OSG__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Component *)  ((OSG::InternalWindow *) x));
}
static void *_p_OSG__ScrollPanelTo_p_OSG__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Component *)  ((OSG::ScrollPanel *) x));
}
static void *_p_OSG__InternalWindowRefPtrTo_p_OSG__ComponentRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ComponentRefPtr *)  ((OSG::InternalWindowRefPtr *) x));
}
static void *_p_OSG__ScrollPanelRefPtrTo_p_OSG__ComponentRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ComponentRefPtr *)  ((OSG::ScrollPanelRefPtr *) x));
}
static void *_p_OSG__WindowEventProducerRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::WindowEventProducerRefPtr *) x));
}
static void *_p_OSG__ViewportRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ViewportRefPtr *) x));
}
static void *_p_OSG__AttachmentContainerRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::AttachmentContainerRefPtr *) x));
}
static void *_p_OSG__AttachmentRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::AttachmentRefPtr *) x));
}
static void *_p_OSG__PhysicsHandlerRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsHandlerRefPtr *) x));
}
static void *_p_OSG__PhysicsWorldRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsWorldRefPtr *) x));
}
static void *_p_OSG__ComponentRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ComponentRefPtr *) x));
}
static void *_p_OSG__ScrollPanelRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::ComponentRefPtr *) ((OSG::ScrollPanelRefPtr *) x));
}
static void *_p_OSG__SoundRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::SoundRefPtr *) x));
}
static void *_p_OSG__SoundGroupRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::SoundGroupRefPtr *) x));
}
static void *_p_OSG__AnimationRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::AnimationRefPtr *) x));
}
static void *_p_OSG__VideoWrapperRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::VideoWrapperRefPtr *) x));
}
static void *_p_OSG__Distribution1DRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::Distribution1DRefPtr *) x));
}
static void *_p_OSG__Distribution2DRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::Distribution2DRefPtr *) x));
}
static void *_p_OSG__Distribution3DRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::Distribution3DRefPtr *) x));
}
static void *_p_OSG__CgFXMaterialRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::CgFXMaterialRefPtr *) x));
}
static void *_p_OSG__LuaActivityRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::ActivityRefPtr *) ((OSG::LuaActivityRefPtr *) x));
}
static void *_p_OSG__ActivityRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ActivityRefPtr *) x));
}
static void *_p_OSG__GenericEventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::EventDetailsRefPtr *) ((OSG::GenericEventDetailsRefPtr *) x));
}
static void *_p_OSG__EventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::EventDetailsRefPtr *) x));
}
static void *_p_OSG__TextureObjChunkRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::TextureObjChunkRefPtr *) x));
}
static void *_p_OSG__ImageRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ImageRefPtr *) x));
}
static void *_p_OSG__CameraRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::CameraRefPtr *) x));
}
static void *_p_OSG__NodeRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::NodeRefPtr *) x));
}
static void *_p_OSG__GeometryRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::NodeCoreRefPtr *) ((OSG::GeometryRefPtr *) x));
}
static void *_p_OSG__NodeCoreRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::NodeCoreRefPtr *) x));
}
static void *_p_OSG__PhysicsBodyRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsBodyRefPtr *) x));
}
static void *_p_OSG__PhysicsSpaceRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsSpaceRefPtr *) x));
}
static void *_p_OSG__ParticleSystemRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ParticleSystemRefPtr *) x));
}
static void *_p_OSG__InternalWindowRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::ComponentRefPtr *) ((OSG::InternalWindowRefPtr *) x));
}
static void *_p_OSG__UIDrawingSurfaceRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::UIDrawingSurfaceRefPtr *) x));
}
static void *_p_OSG__ScrollPanelRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::ComponentRefPtr *) ((OSG::ScrollPanelRefPtr *) x));
}
static void *_p_OSG__ComponentRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ComponentRefPtr *) x));
}
static void *_p_OSG__WindowEventProducerRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::WindowEventProducerRefPtr *) x));
}
static void *_p_OSG__ViewportRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ViewportRefPtr *) x));
}
static void *_p_OSG__SoundRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::SoundRefPtr *) x));
}
static void *_p_OSG__SoundGroupRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::SoundGroupRefPtr *) x));
}
static void *_p_OSG__AnimationRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::AnimationRefPtr *) x));
}
static void *_p_OSG__VideoWrapperRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::VideoWrapperRefPtr *) x));
}
static void *_p_OSG__Distribution1DRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::Distribution1DRefPtr *) x));
}
static void *_p_OSG__Distribution2DRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::Distribution2DRefPtr *) x));
}
static void *_p_OSG__Distribution3DRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::Distribution3DRefPtr *) x));
}
static void *_p_OSG__CgFXMaterialRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::CgFXMaterialRefPtr *) x));
}
static void *_p_OSG__UIDrawingSurfaceRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::UIDrawingSurfaceRefPtr *) x));
}
static void *_p_OSG__InternalWindowRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::ComponentRefPtr *) ((OSG::InternalWindowRefPtr *) x));
}
static void *_p_OSG__ParticleSystemRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ParticleSystemRefPtr *) x));
}
static void *_p_OSG__LuaActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::ActivityRefPtr *) ((OSG::LuaActivityRefPtr *) x));
}
static void *_p_OSG__ActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ActivityRefPtr *) x));
}
static void *_p_OSG__ImageRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ImageRefPtr *) x));
}
static void *_p_OSG__CameraRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::CameraRefPtr *) x));
}
static void *_p_OSG__NodeRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::NodeRefPtr *) x));
}
static void *_p_OSG__GeometryRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::NodeCoreRefPtr *) ((OSG::GeometryRefPtr *) x));
}
static void *_p_OSG__NodeCoreRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::NodeCoreRefPtr *) x));
}
static void *_p_OSG__BoxVolumeTo_p_OSG__Volume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Volume *)  ((OSG::BoxVolume *) x));
}
static void *_p_OSG__FrustumVolumeTo_p_OSG__Volume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Volume *)  ((OSG::FrustumVolume *) x));
}
static swig_type_info _swigt__p_Inherited = {"_p_Inherited", "Inherited *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MFChildrenType = {"_p_MFChildrenType", "MFChildrenType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixType = {"_p_MatrixType", "MatrixType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Activity = {"_p_OSG__Activity", "OSG::Activity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__LuaActivity = {"_p_OSG__LuaActivity", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Animation = {"_p_OSG__Animation", "OSG::Animation *", 0, 0, (void*)&_wrap_class_OSG_Animation, 0};
static swig_type_info _swigt__p_OSG__AnimationRefPtr = {"_p_OSG__AnimationRefPtr", "OSG::AnimationRefPtr *", 0, 0, (void*)&_wrap_class_OSG_AnimationRefPtr, 0};
static swig_type_info _swigt__p_OSG__AttachmentContainer = {"_p_OSG__AttachmentContainer", "OSG::AttachmentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Camera = {"_p_OSG__Camera", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Viewport = {"_p_OSG__Viewport", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__NodeCore = {"_p_OSG__NodeCore", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Geometry = {"_p_OSG__Geometry", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Node = {"_p_OSG__Node", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Image = {"_p_OSG__Image", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__AttachmentContainerRefPtr = {"_p_OSG__AttachmentContainerRefPtr", "OSG::AttachmentContainerRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__LuaActivityRefPtr = {"_p_OSG__LuaActivityRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ActivityRefPtr = {"_p_OSG__ActivityRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ImageRefPtr = {"_p_OSG__ImageRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__GeometryRefPtr = {"_p_OSG__GeometryRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__NodeCoreRefPtr = {"_p_OSG__NodeCoreRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__AttachmentRefPtr = {"_p_OSG__AttachmentRefPtr", "OSG::AttachmentRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__CameraRefPtr = {"_p_OSG__CameraRefPtr", "OSG::CameraRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__CgFXMaterial = {"_p_OSG__CgFXMaterial", "OSG::CgFXMaterial *", 0, 0, (void*)&_wrap_class_OSG_CgFXMaterial, 0};
static swig_type_info _swigt__p_OSG__CgFXMaterialRefPtr = {"_p_OSG__CgFXMaterialRefPtr", "OSG::CgFXMaterialRefPtr *", 0, 0, (void*)&_wrap_class_OSG_CgFXMaterialRefPtr, 0};
static swig_type_info _swigt__p_OSG__Color4f = {"_p_OSG__Color4f", "OSG::Color4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Component = {"_p_OSG__Component", "OSG::Component *", 0, 0, (void*)&_wrap_class_OSG_Component, 0};
static swig_type_info _swigt__p_OSG__ComponentRefPtr = {"_p_OSG__ComponentRefPtr", "OSG::ComponentRefPtr *", 0, 0, (void*)&_wrap_class_OSG_ComponentRefPtr, 0};
static swig_type_info _swigt__p_OSG__Distribution1D = {"_p_OSG__Distribution1D", "OSG::Distribution1D *", 0, 0, (void*)&_wrap_class_OSG_Distribution1D, 0};
static swig_type_info _swigt__p_OSG__Distribution1DRefPtr = {"_p_OSG__Distribution1DRefPtr", "OSG::Distribution1DRefPtr *", 0, 0, (void*)&_wrap_class_OSG_Distribution1DRefPtr, 0};
static swig_type_info _swigt__p_OSG__Distribution2D = {"_p_OSG__Distribution2D", "OSG::Distribution2D *", 0, 0, (void*)&_wrap_class_OSG_Distribution2D, 0};
static swig_type_info _swigt__p_OSG__Distribution2DRefPtr = {"_p_OSG__Distribution2DRefPtr", "OSG::Distribution2DRefPtr *", 0, 0, (void*)&_wrap_class_OSG_Distribution2DRefPtr, 0};
static swig_type_info _swigt__p_OSG__Distribution3D = {"_p_OSG__Distribution3D", "OSG::Distribution3D *", 0, 0, (void*)&_wrap_class_OSG_Distribution3D, 0};
static swig_type_info _swigt__p_OSG__Distribution3DRefPtr = {"_p_OSG__Distribution3DRefPtr", "OSG::Distribution3DRefPtr *", 0, 0, (void*)&_wrap_class_OSG_Distribution3DRefPtr, 0};
static swig_type_info _swigt__p_OSG__EventDescription = {"_p_OSG__EventDescription", "OSG::EventDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__EventProducerType = {"_p_OSG__EventProducerType", "OSG::EventProducerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__FieldContainer = {"_p_OSG__FieldContainer", "OSG::FieldContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Attachment = {"_p_OSG__Attachment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__GenericEventDetails = {"_p_OSG__GenericEventDetails", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__EventDetails = {"_p_OSG__EventDetails", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__TextureObjChunk = {"_p_OSG__TextureObjChunk", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__FieldContainerRefPtr = {"_p_OSG__FieldContainerRefPtr", "OSG::FieldContainerRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__GenericEventDetailsRefPtr = {"_p_OSG__GenericEventDetailsRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__EventDetailsRefPtr = {"_p_OSG__EventDetailsRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__TextureObjChunkRefPtr = {"_p_OSG__TextureObjChunkRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__FieldContainerType = {"_p_OSG__FieldContainerType", "OSG::FieldContainerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__FieldDescriptionBase = {"_p_OSG__FieldDescriptionBase", "OSG::FieldDescriptionBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__InternalWindow = {"_p_OSG__InternalWindow", "OSG::InternalWindow *", 0, 0, (void*)&_wrap_class_OSG_InternalWindow, 0};
static swig_type_info _swigt__p_OSG__InternalWindowRefPtr = {"_p_OSG__InternalWindowRefPtr", "OSG::InternalWindowRefPtr *", 0, 0, (void*)&_wrap_class_OSG_InternalWindowRefPtr, 0};
static swig_type_info _swigt__p_OSG__KeyEventDetails = {"_p_OSG__KeyEventDetails", "OSG::KeyEventDetails *", 0, 0, (void*)&_wrap_class_OSG_KeyEventDetails, 0};
static swig_type_info _swigt__p_OSG__Line = {"_p_OSG__Line", "OSG::Line *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Matrix = {"_p_OSG__Matrix", "OSG::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__NodeRefPtr = {"_p_OSG__NodeRefPtr", "OSG::NodeRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__ParticleSystem = {"_p_OSG__ParticleSystem", "OSG::ParticleSystem *", 0, 0, (void*)&_wrap_class_OSG_ParticleSystem, 0};
static swig_type_info _swigt__p_OSG__ParticleSystemRefPtr = {"_p_OSG__ParticleSystemRefPtr", "OSG::ParticleSystemRefPtr *", 0, 0, (void*)&_wrap_class_OSG_ParticleSystemRefPtr, 0};
static swig_type_info _swigt__p_OSG__PhysicsBody = {"_p_OSG__PhysicsBody", "OSG::PhysicsBody *", 0, 0, (void*)&_wrap_class_OSG_PhysicsBody, 0};
static swig_type_info _swigt__p_OSG__PhysicsBodyRefPtr = {"_p_OSG__PhysicsBodyRefPtr", "OSG::PhysicsBodyRefPtr *", 0, 0, (void*)&_wrap_class_OSG_PhysicsBodyRefPtr, 0};
static swig_type_info _swigt__p_OSG__PhysicsHandler = {"_p_OSG__PhysicsHandler", "OSG::PhysicsHandler *", 0, 0, (void*)&_wrap_class_OSG_PhysicsHandler, 0};
static swig_type_info _swigt__p_OSG__PhysicsHandlerRefPtr = {"_p_OSG__PhysicsHandlerRefPtr", "OSG::PhysicsHandlerRefPtr *", 0, 0, (void*)&_wrap_class_OSG_PhysicsHandlerRefPtr, 0};
static swig_type_info _swigt__p_OSG__PhysicsSpace = {"_p_OSG__PhysicsSpace", "OSG::PhysicsSpace *", 0, 0, (void*)&_wrap_class_OSG_PhysicsSpace, 0};
static swig_type_info _swigt__p_OSG__PhysicsSpaceRefPtr = {"_p_OSG__PhysicsSpaceRefPtr", "OSG::PhysicsSpaceRefPtr *", 0, 0, (void*)&_wrap_class_OSG_PhysicsSpaceRefPtr, 0};
static swig_type_info _swigt__p_OSG__PhysicsWorld = {"_p_OSG__PhysicsWorld", "OSG::PhysicsWorld *", 0, 0, (void*)&_wrap_class_OSG_PhysicsWorld, 0};
static swig_type_info _swigt__p_OSG__PhysicsWorldRefPtr = {"_p_OSG__PhysicsWorldRefPtr", "OSG::PhysicsWorldRefPtr *", 0, 0, (void*)&_wrap_class_OSG_PhysicsWorldRefPtr, 0};
static swig_type_info _swigt__p_OSG__Pnt2f = {"_p_OSG__Pnt2f", "OSG::Pnt2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Pnt3f = {"_p_OSG__Pnt3f", "OSG::Pnt3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__ReflexiveContainer = {"_p_OSG__ReflexiveContainer", "OSG::ReflexiveContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__ScrollPanel = {"_p_OSG__ScrollPanel", "OSG::ScrollPanel *", 0, 0, (void*)&_wrap_class_OSG_ScrollPanel, 0};
static swig_type_info _swigt__p_OSG__ScrollPanelRefPtr = {"_p_OSG__ScrollPanelRefPtr", "OSG::ScrollPanelRefPtr *", 0, 0, (void*)&_wrap_class_OSG_ScrollPanelRefPtr, 0};
static swig_type_info _swigt__p_OSG__Sound = {"_p_OSG__Sound", "OSG::Sound *", 0, 0, (void*)&_wrap_class_OSG_Sound, 0};
static swig_type_info _swigt__p_OSG__SoundGroup = {"_p_OSG__SoundGroup", "OSG::SoundGroup *", 0, 0, (void*)&_wrap_class_OSG_SoundGroup, 0};
static swig_type_info _swigt__p_OSG__SoundGroupRefPtr = {"_p_OSG__SoundGroupRefPtr", "OSG::SoundGroupRefPtr *", 0, 0, (void*)&_wrap_class_OSG_SoundGroupRefPtr, 0};
static swig_type_info _swigt__p_OSG__SoundManager = {"_p_OSG__SoundManager", "OSG::SoundManager *", 0, 0, (void*)&_wrap_class_OSG_SoundManager, 0};
static swig_type_info _swigt__p_OSG__SoundRefPtr = {"_p_OSG__SoundRefPtr", "OSG::SoundRefPtr *", 0, 0, (void*)&_wrap_class_OSG_SoundRefPtr, 0};
static swig_type_info _swigt__p_OSG__UIDrawingSurface = {"_p_OSG__UIDrawingSurface", "OSG::UIDrawingSurface *", 0, 0, (void*)&_wrap_class_OSG_UIDrawingSurface, 0};
static swig_type_info _swigt__p_OSG__UIDrawingSurfaceRefPtr = {"_p_OSG__UIDrawingSurfaceRefPtr", "OSG::UIDrawingSurfaceRefPtr *", 0, 0, (void*)&_wrap_class_OSG_UIDrawingSurfaceRefPtr, 0};
static swig_type_info _swigt__p_OSG__Vec2f = {"_p_OSG__Vec2f", "OSG::Vec2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Vec3f = {"_p_OSG__Vec3f", "OSG::Vec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__VideoManager = {"_p_OSG__VideoManager", "OSG::VideoManagerPtr|OSG::VideoManager *", 0, 0, (void*)&_wrap_class_OSG_VideoManager, 0};
static swig_type_info _swigt__p_OSG__VideoWrapper = {"_p_OSG__VideoWrapper", "OSG::VideoWrapper *", 0, 0, (void*)&_wrap_class_OSG_VideoWrapper, 0};
static swig_type_info _swigt__p_OSG__VideoWrapperRefPtr = {"_p_OSG__VideoWrapperRefPtr", "OSG::VideoWrapperRefPtr *", 0, 0, (void*)&_wrap_class_OSG_VideoWrapperRefPtr, 0};
static swig_type_info _swigt__p_OSG__ViewportRefPtr = {"_p_OSG__ViewportRefPtr", "OSG::ViewportRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Volume = {"_p_OSG__Volume", "OSG::Volume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__BoxVolume = {"_p_OSG__BoxVolume", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__FrustumVolume = {"_p_OSG__FrustumVolume", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__WindowEventProducer = {"_p_OSG__WindowEventProducer", "OSG::WindowEventProducer *", 0, 0, (void*)&_wrap_class_OSG_WindowEventProducer, 0};
static swig_type_info _swigt__p_OSG__WindowEventProducerRefPtr = {"_p_OSG__WindowEventProducerRefPtr", "OSG::WindowEventProducerRefPtr *", 0, 0, (void*)&_wrap_class_OSG_WindowEventProducerRefPtr, 0};
static swig_type_info _swigt__p_ParentContainer = {"_p_ParentContainer", "ParentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlaneSet = {"_p_PlaneSet", "PlaneSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType = {"_p_PointType", "PointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType3f = {"_p_PointType3f", "PointType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuaternionType = {"_p_QuaternionType", "QuaternionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFCoreType = {"_p_SFCoreType", "SFCoreType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFParentType = {"_p_SFParentType", "SFParentType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFTravMaskType = {"_p_SFTravMaskType", "SFTravMaskType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFVolumeType = {"_p_SFVolumeType", "SFVolumeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeObject = {"_p_TypeObject", "TypeObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType = {"_p_VectorType", "VectorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType3f = {"_p_VectorType3f", "VectorType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VolumeType = {"_p_VolumeType", "VolumeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__signals2__connection = {"_p_boost__signals2__connection", "boost::signals2::connection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|OSG::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "OSG::Time *|double *|OSG::Real64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|OSG::Real16 *|OSG::Real32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "OSG::Int16 *|int *|OSG::Int32 *|OSG::Int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "OSG::TimeStamp *|OSG::Int64 *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *|OSG::Real128 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|OSG::SChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_unsigned_int_t = {"_p_std__mapT_std__string_unsigned_int_t", "std::map< std::string,OSG::UInt32 > *|std::map< std::string,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< OSG::UInt32 > *|std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_OSG_UInt32_Sg_, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|OSG::UChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "OSG::UInt16 *|OSG::UInt32 *|unsigned int *|OSG::UInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "OSG::UInt64 *|unsigned long *|OSG::BitVector *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Inherited,
  &_swigt__p_MFChildrenType,
  &_swigt__p_MatrixType,
  &_swigt__p_OSG__Activity,
  &_swigt__p_OSG__ActivityRefPtr,
  &_swigt__p_OSG__Animation,
  &_swigt__p_OSG__AnimationRefPtr,
  &_swigt__p_OSG__Attachment,
  &_swigt__p_OSG__AttachmentContainer,
  &_swigt__p_OSG__AttachmentContainerRefPtr,
  &_swigt__p_OSG__AttachmentRefPtr,
  &_swigt__p_OSG__BoxVolume,
  &_swigt__p_OSG__Camera,
  &_swigt__p_OSG__CameraRefPtr,
  &_swigt__p_OSG__CgFXMaterial,
  &_swigt__p_OSG__CgFXMaterialRefPtr,
  &_swigt__p_OSG__Color4f,
  &_swigt__p_OSG__Component,
  &_swigt__p_OSG__ComponentRefPtr,
  &_swigt__p_OSG__Distribution1D,
  &_swigt__p_OSG__Distribution1DRefPtr,
  &_swigt__p_OSG__Distribution2D,
  &_swigt__p_OSG__Distribution2DRefPtr,
  &_swigt__p_OSG__Distribution3D,
  &_swigt__p_OSG__Distribution3DRefPtr,
  &_swigt__p_OSG__EventDescription,
  &_swigt__p_OSG__EventDetails,
  &_swigt__p_OSG__EventDetailsRefPtr,
  &_swigt__p_OSG__EventProducerType,
  &_swigt__p_OSG__FieldContainer,
  &_swigt__p_OSG__FieldContainerRefPtr,
  &_swigt__p_OSG__FieldContainerType,
  &_swigt__p_OSG__FieldDescriptionBase,
  &_swigt__p_OSG__FrustumVolume,
  &_swigt__p_OSG__GenericEventDetails,
  &_swigt__p_OSG__GenericEventDetailsRefPtr,
  &_swigt__p_OSG__Geometry,
  &_swigt__p_OSG__GeometryRefPtr,
  &_swigt__p_OSG__Image,
  &_swigt__p_OSG__ImageRefPtr,
  &_swigt__p_OSG__InternalWindow,
  &_swigt__p_OSG__InternalWindowRefPtr,
  &_swigt__p_OSG__KeyEventDetails,
  &_swigt__p_OSG__Line,
  &_swigt__p_OSG__LuaActivity,
  &_swigt__p_OSG__LuaActivityRefPtr,
  &_swigt__p_OSG__Matrix,
  &_swigt__p_OSG__Node,
  &_swigt__p_OSG__NodeCore,
  &_swigt__p_OSG__NodeCoreRefPtr,
  &_swigt__p_OSG__NodeRefPtr,
  &_swigt__p_OSG__ParticleSystem,
  &_swigt__p_OSG__ParticleSystemRefPtr,
  &_swigt__p_OSG__PhysicsBody,
  &_swigt__p_OSG__PhysicsBodyRefPtr,
  &_swigt__p_OSG__PhysicsHandler,
  &_swigt__p_OSG__PhysicsHandlerRefPtr,
  &_swigt__p_OSG__PhysicsSpace,
  &_swigt__p_OSG__PhysicsSpaceRefPtr,
  &_swigt__p_OSG__PhysicsWorld,
  &_swigt__p_OSG__PhysicsWorldRefPtr,
  &_swigt__p_OSG__Pnt2f,
  &_swigt__p_OSG__Pnt3f,
  &_swigt__p_OSG__ReflexiveContainer,
  &_swigt__p_OSG__ScrollPanel,
  &_swigt__p_OSG__ScrollPanelRefPtr,
  &_swigt__p_OSG__Sound,
  &_swigt__p_OSG__SoundGroup,
  &_swigt__p_OSG__SoundGroupRefPtr,
  &_swigt__p_OSG__SoundManager,
  &_swigt__p_OSG__SoundRefPtr,
  &_swigt__p_OSG__TextureObjChunk,
  &_swigt__p_OSG__TextureObjChunkRefPtr,
  &_swigt__p_OSG__UIDrawingSurface,
  &_swigt__p_OSG__UIDrawingSurfaceRefPtr,
  &_swigt__p_OSG__Vec2f,
  &_swigt__p_OSG__Vec3f,
  &_swigt__p_OSG__VideoManager,
  &_swigt__p_OSG__VideoWrapper,
  &_swigt__p_OSG__VideoWrapperRefPtr,
  &_swigt__p_OSG__Viewport,
  &_swigt__p_OSG__ViewportRefPtr,
  &_swigt__p_OSG__Volume,
  &_swigt__p_OSG__WindowEventProducer,
  &_swigt__p_OSG__WindowEventProducerRefPtr,
  &_swigt__p_ParentContainer,
  &_swigt__p_PlaneSet,
  &_swigt__p_PointType,
  &_swigt__p_PointType3f,
  &_swigt__p_QuaternionType,
  &_swigt__p_SFCoreType,
  &_swigt__p_SFParentType,
  &_swigt__p_SFTravMaskType,
  &_swigt__p_SFVolumeType,
  &_swigt__p_TypeObject,
  &_swigt__p_ValueType,
  &_swigt__p_VectorType,
  &_swigt__p_VectorType3f,
  &_swigt__p_VolumeType,
  &_swigt__p_boost__signals2__connection,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_mapped_type,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__mapT_std__string_unsigned_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_Inherited[] = {  {&_swigt__p_Inherited, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MFChildrenType[] = {  {&_swigt__p_MFChildrenType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixType[] = {  {&_swigt__p_MatrixType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaActivity[] = {{&_swigt__p_OSG__LuaActivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Activity[] = {  {&_swigt__p_OSG__Activity, 0, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__Activity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Animation[] = {  {&_swigt__p_OSG__Animation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AnimationRefPtr[] = {  {&_swigt__p_OSG__AnimationRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Camera[] = {{&_swigt__p_OSG__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Viewport[] = {{&_swigt__p_OSG__Viewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeCore[] = {{&_swigt__p_OSG__NodeCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Geometry[] = {{&_swigt__p_OSG__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Node[] = {{&_swigt__p_OSG__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Image[] = {{&_swigt__p_OSG__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentContainer[] = {  {&_swigt__p_OSG__Distribution1D, _p_OSG__Distribution1DTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__ScrollPanel, _p_OSG__ScrollPanelTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Sound, _p_OSG__SoundTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__InternalWindow, _p_OSG__InternalWindowTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Component, _p_OSG__ComponentTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Animation, _p_OSG__AnimationTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__SoundGroup, _p_OSG__SoundGroupTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__CgFXMaterial, _p_OSG__CgFXMaterialTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__ParticleSystem, _p_OSG__ParticleSystemTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, 0, 0, 0},  {&_swigt__p_OSG__WindowEventProducer, _p_OSG__WindowEventProducerTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Distribution3D, _p_OSG__Distribution3DTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__UIDrawingSurface, _p_OSG__UIDrawingSurfaceTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__VideoWrapper, _p_OSG__VideoWrapperTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Distribution2D, _p_OSG__Distribution2DTo_p_OSG__AttachmentContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaActivityRefPtr[] = {{&_swigt__p_OSG__LuaActivityRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ActivityRefPtr[] = {{&_swigt__p_OSG__ActivityRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ImageRefPtr[] = {{&_swigt__p_OSG__ImageRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GeometryRefPtr[] = {{&_swigt__p_OSG__GeometryRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeCoreRefPtr[] = {{&_swigt__p_OSG__NodeCoreRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentContainerRefPtr[] = {  {&_swigt__p_OSG__ScrollPanelRefPtr, _p_OSG__ScrollPanelRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ComponentRefPtr, _p_OSG__ComponentRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__WindowEventProducerRefPtr, _p_OSG__WindowEventProducerRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ViewportRefPtr, _p_OSG__ViewportRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SoundRefPtr, _p_OSG__SoundRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SoundGroupRefPtr, _p_OSG__SoundGroupRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AnimationRefPtr, _p_OSG__AnimationRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__VideoWrapperRefPtr, _p_OSG__VideoWrapperRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution1DRefPtr, _p_OSG__Distribution1DRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution2DRefPtr, _p_OSG__Distribution2DRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution3DRefPtr, _p_OSG__Distribution3DRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__CgFXMaterialRefPtr, _p_OSG__CgFXMaterialRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentContainerRefPtr, 0, 0, 0},  {&_swigt__p_OSG__InternalWindowRefPtr, _p_OSG__InternalWindowRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__UIDrawingSurfaceRefPtr, _p_OSG__UIDrawingSurfaceRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ParticleSystemRefPtr, _p_OSG__ParticleSystemRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaActivityRefPtr, _p_OSG__LuaActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ActivityRefPtr, _p_OSG__ActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ImageRefPtr, _p_OSG__ImageRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__CameraRefPtr, _p_OSG__CameraRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeRefPtr, _p_OSG__NodeRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GeometryRefPtr, _p_OSG__GeometryRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeCoreRefPtr, _p_OSG__NodeCoreRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentRefPtr[] = {  {&_swigt__p_OSG__AttachmentRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__CameraRefPtr[] = {  {&_swigt__p_OSG__CameraRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__CgFXMaterial[] = {  {&_swigt__p_OSG__CgFXMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__CgFXMaterialRefPtr[] = {  {&_swigt__p_OSG__CgFXMaterialRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Color4f[] = {  {&_swigt__p_OSG__Color4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Component[] = {  {&_swigt__p_OSG__Component, 0, 0, 0},  {&_swigt__p_OSG__InternalWindow, _p_OSG__InternalWindowTo_p_OSG__Component, 0, 0},  {&_swigt__p_OSG__ScrollPanel, _p_OSG__ScrollPanelTo_p_OSG__Component, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ComponentRefPtr[] = {  {&_swigt__p_OSG__InternalWindowRefPtr, _p_OSG__InternalWindowRefPtrTo_p_OSG__ComponentRefPtr, 0, 0},  {&_swigt__p_OSG__ComponentRefPtr, 0, 0, 0},  {&_swigt__p_OSG__ScrollPanelRefPtr, _p_OSG__ScrollPanelRefPtrTo_p_OSG__ComponentRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution1D[] = {  {&_swigt__p_OSG__Distribution1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution1DRefPtr[] = {  {&_swigt__p_OSG__Distribution1DRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution2D[] = {  {&_swigt__p_OSG__Distribution2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution2DRefPtr[] = {  {&_swigt__p_OSG__Distribution2DRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution3D[] = {  {&_swigt__p_OSG__Distribution3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution3DRefPtr[] = {  {&_swigt__p_OSG__Distribution3DRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDescription[] = {  {&_swigt__p_OSG__EventDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventProducerType[] = {  {&_swigt__p_OSG__EventProducerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Attachment[] = {{&_swigt__p_OSG__Attachment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GenericEventDetails[] = {{&_swigt__p_OSG__GenericEventDetails, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDetails[] = {{&_swigt__p_OSG__EventDetails, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TextureObjChunk[] = {{&_swigt__p_OSG__TextureObjChunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainer[] = {  {&_swigt__p_OSG__PhysicsBody, _p_OSG__PhysicsBodyTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Distribution1D, _p_OSG__Distribution1DTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__ScrollPanel, _p_OSG__ScrollPanelTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Sound, _p_OSG__SoundTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__InternalWindow, _p_OSG__InternalWindowTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Component, _p_OSG__ComponentTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Animation, _p_OSG__AnimationTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__SoundGroup, _p_OSG__SoundGroupTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__CgFXMaterial, _p_OSG__CgFXMaterialTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__PhysicsHandler, _p_OSG__PhysicsHandlerTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Attachment, _p_OSG__AttachmentTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__ParticleSystem, _p_OSG__ParticleSystemTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__GenericEventDetails, _p_OSG__GenericEventDetailsTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__EventDetails, _p_OSG__EventDetailsTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__FieldContainer, 0, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, _p_OSG__AttachmentContainerTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__WindowEventProducer, _p_OSG__WindowEventProducerTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__PhysicsSpace, _p_OSG__PhysicsSpaceTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Distribution3D, _p_OSG__Distribution3DTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__UIDrawingSurface, _p_OSG__UIDrawingSurfaceTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__VideoWrapper, _p_OSG__VideoWrapperTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__PhysicsWorld, _p_OSG__PhysicsWorldTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Distribution2D, _p_OSG__Distribution2DTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__TextureObjChunk, _p_OSG__TextureObjChunkTo_p_OSG__FieldContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GenericEventDetailsRefPtr[] = {{&_swigt__p_OSG__GenericEventDetailsRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDetailsRefPtr[] = {{&_swigt__p_OSG__EventDetailsRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TextureObjChunkRefPtr[] = {{&_swigt__p_OSG__TextureObjChunkRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerRefPtr[] = {  {&_swigt__p_OSG__CgFXMaterialRefPtr, _p_OSG__CgFXMaterialRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentContainerRefPtr, _p_OSG__AttachmentContainerRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentRefPtr, _p_OSG__AttachmentRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__PhysicsHandlerRefPtr, _p_OSG__PhysicsHandlerRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__PhysicsWorldRefPtr, _p_OSG__PhysicsWorldRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ComponentRefPtr, _p_OSG__ComponentRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ScrollPanelRefPtr, _p_OSG__ScrollPanelRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SoundRefPtr, _p_OSG__SoundRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SoundGroupRefPtr, _p_OSG__SoundGroupRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AnimationRefPtr, _p_OSG__AnimationRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__VideoWrapperRefPtr, _p_OSG__VideoWrapperRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution1DRefPtr, _p_OSG__Distribution1DRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__FieldContainerRefPtr, 0, 0, 0},  {&_swigt__p_OSG__Distribution3DRefPtr, _p_OSG__Distribution3DRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution2DRefPtr, _p_OSG__Distribution2DRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ViewportRefPtr, _p_OSG__ViewportRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__WindowEventProducerRefPtr, _p_OSG__WindowEventProducerRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__InternalWindowRefPtr, _p_OSG__InternalWindowRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__UIDrawingSurfaceRefPtr, _p_OSG__UIDrawingSurfaceRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ParticleSystemRefPtr, _p_OSG__ParticleSystemRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaActivityRefPtr, _p_OSG__LuaActivityRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ActivityRefPtr, _p_OSG__ActivityRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ImageRefPtr, _p_OSG__ImageRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__CameraRefPtr, _p_OSG__CameraRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeRefPtr, _p_OSG__NodeRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GeometryRefPtr, _p_OSG__GeometryRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeCoreRefPtr, _p_OSG__NodeCoreRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GenericEventDetailsRefPtr, _p_OSG__GenericEventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__EventDetailsRefPtr, _p_OSG__EventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__TextureObjChunkRefPtr, _p_OSG__TextureObjChunkRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__PhysicsBodyRefPtr, _p_OSG__PhysicsBodyRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__PhysicsSpaceRefPtr, _p_OSG__PhysicsSpaceRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerType[] = {  {&_swigt__p_OSG__FieldContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldDescriptionBase[] = {  {&_swigt__p_OSG__FieldDescriptionBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__InternalWindow[] = {  {&_swigt__p_OSG__InternalWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__InternalWindowRefPtr[] = {  {&_swigt__p_OSG__InternalWindowRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__KeyEventDetails[] = {  {&_swigt__p_OSG__KeyEventDetails, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Line[] = {  {&_swigt__p_OSG__Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Matrix[] = {  {&_swigt__p_OSG__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeRefPtr[] = {  {&_swigt__p_OSG__NodeRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ParticleSystem[] = {  {&_swigt__p_OSG__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ParticleSystemRefPtr[] = {  {&_swigt__p_OSG__ParticleSystemRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsBody[] = {  {&_swigt__p_OSG__PhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsBodyRefPtr[] = {  {&_swigt__p_OSG__PhysicsBodyRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsHandler[] = {  {&_swigt__p_OSG__PhysicsHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsHandlerRefPtr[] = {  {&_swigt__p_OSG__PhysicsHandlerRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsSpace[] = {  {&_swigt__p_OSG__PhysicsSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsSpaceRefPtr[] = {  {&_swigt__p_OSG__PhysicsSpaceRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsWorld[] = {  {&_swigt__p_OSG__PhysicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsWorldRefPtr[] = {  {&_swigt__p_OSG__PhysicsWorldRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Pnt2f[] = {  {&_swigt__p_OSG__Pnt2f, 0, 0, 0},  {&_swigt__p_OSG__Vec2f, _p_OSG__Vec2fTo_p_OSG__Pnt2f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Pnt3f[] = {  {&_swigt__p_OSG__Pnt3f, 0, 0, 0},  {&_swigt__p_OSG__Vec3f, _p_OSG__Vec3fTo_p_OSG__Pnt3f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ReflexiveContainer[] = {  {&_swigt__p_OSG__PhysicsBody, _p_OSG__PhysicsBodyTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Distribution1D, _p_OSG__Distribution1DTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__ScrollPanel, _p_OSG__ScrollPanelTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Sound, _p_OSG__SoundTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__InternalWindow, _p_OSG__InternalWindowTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Component, _p_OSG__ComponentTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Animation, _p_OSG__AnimationTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__SoundGroup, _p_OSG__SoundGroupTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__CgFXMaterial, _p_OSG__CgFXMaterialTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__PhysicsHandler, _p_OSG__PhysicsHandlerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Attachment, _p_OSG__AttachmentTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__ParticleSystem, _p_OSG__ParticleSystemTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__GenericEventDetails, _p_OSG__GenericEventDetailsTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__EventDetails, _p_OSG__EventDetailsTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__ReflexiveContainer, 0, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, _p_OSG__AttachmentContainerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__WindowEventProducer, _p_OSG__WindowEventProducerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__FieldContainer, _p_OSG__FieldContainerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__PhysicsSpace, _p_OSG__PhysicsSpaceTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Distribution3D, _p_OSG__Distribution3DTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__UIDrawingSurface, _p_OSG__UIDrawingSurfaceTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__VideoWrapper, _p_OSG__VideoWrapperTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__PhysicsWorld, _p_OSG__PhysicsWorldTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Distribution2D, _p_OSG__Distribution2DTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__TextureObjChunk, _p_OSG__TextureObjChunkTo_p_OSG__ReflexiveContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ScrollPanel[] = {  {&_swigt__p_OSG__ScrollPanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ScrollPanelRefPtr[] = {  {&_swigt__p_OSG__ScrollPanelRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Sound[] = {  {&_swigt__p_OSG__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SoundGroup[] = {  {&_swigt__p_OSG__SoundGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SoundGroupRefPtr[] = {  {&_swigt__p_OSG__SoundGroupRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SoundManager[] = {  {&_swigt__p_OSG__SoundManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SoundRefPtr[] = {  {&_swigt__p_OSG__SoundRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__UIDrawingSurface[] = {  {&_swigt__p_OSG__UIDrawingSurface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__UIDrawingSurfaceRefPtr[] = {  {&_swigt__p_OSG__UIDrawingSurfaceRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Vec2f[] = {  {&_swigt__p_OSG__Vec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Vec3f[] = {  {&_swigt__p_OSG__Vec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__VideoManager[] = {  {&_swigt__p_OSG__VideoManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__VideoWrapper[] = {  {&_swigt__p_OSG__VideoWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__VideoWrapperRefPtr[] = {  {&_swigt__p_OSG__VideoWrapperRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ViewportRefPtr[] = {  {&_swigt__p_OSG__ViewportRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__BoxVolume[] = {{&_swigt__p_OSG__BoxVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FrustumVolume[] = {{&_swigt__p_OSG__FrustumVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Volume[] = {  {&_swigt__p_OSG__BoxVolume, _p_OSG__BoxVolumeTo_p_OSG__Volume, 0, 0},  {&_swigt__p_OSG__Volume, 0, 0, 0},  {&_swigt__p_OSG__FrustumVolume, _p_OSG__FrustumVolumeTo_p_OSG__Volume, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__WindowEventProducer[] = {  {&_swigt__p_OSG__WindowEventProducer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__WindowEventProducerRefPtr[] = {  {&_swigt__p_OSG__WindowEventProducerRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParentContainer[] = {  {&_swigt__p_ParentContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlaneSet[] = {  {&_swigt__p_PlaneSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType[] = {  {&_swigt__p_PointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType3f[] = {  {&_swigt__p_PointType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuaternionType[] = {  {&_swigt__p_QuaternionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFCoreType[] = {  {&_swigt__p_SFCoreType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFParentType[] = {  {&_swigt__p_SFParentType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFTravMaskType[] = {  {&_swigt__p_SFTravMaskType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFVolumeType[] = {  {&_swigt__p_SFVolumeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeObject[] = {  {&_swigt__p_TypeObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType[] = {  {&_swigt__p_VectorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType3f[] = {  {&_swigt__p_VectorType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VolumeType[] = {  {&_swigt__p_VolumeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__signals2__connection[] = {  {&_swigt__p_boost__signals2__connection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_unsigned_int_t[] = {  {&_swigt__p_std__mapT_std__string_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Inherited,
  _swigc__p_MFChildrenType,
  _swigc__p_MatrixType,
  _swigc__p_OSG__Activity,
  _swigc__p_OSG__ActivityRefPtr,
  _swigc__p_OSG__Animation,
  _swigc__p_OSG__AnimationRefPtr,
  _swigc__p_OSG__Attachment,
  _swigc__p_OSG__AttachmentContainer,
  _swigc__p_OSG__AttachmentContainerRefPtr,
  _swigc__p_OSG__AttachmentRefPtr,
  _swigc__p_OSG__BoxVolume,
  _swigc__p_OSG__Camera,
  _swigc__p_OSG__CameraRefPtr,
  _swigc__p_OSG__CgFXMaterial,
  _swigc__p_OSG__CgFXMaterialRefPtr,
  _swigc__p_OSG__Color4f,
  _swigc__p_OSG__Component,
  _swigc__p_OSG__ComponentRefPtr,
  _swigc__p_OSG__Distribution1D,
  _swigc__p_OSG__Distribution1DRefPtr,
  _swigc__p_OSG__Distribution2D,
  _swigc__p_OSG__Distribution2DRefPtr,
  _swigc__p_OSG__Distribution3D,
  _swigc__p_OSG__Distribution3DRefPtr,
  _swigc__p_OSG__EventDescription,
  _swigc__p_OSG__EventDetails,
  _swigc__p_OSG__EventDetailsRefPtr,
  _swigc__p_OSG__EventProducerType,
  _swigc__p_OSG__FieldContainer,
  _swigc__p_OSG__FieldContainerRefPtr,
  _swigc__p_OSG__FieldContainerType,
  _swigc__p_OSG__FieldDescriptionBase,
  _swigc__p_OSG__FrustumVolume,
  _swigc__p_OSG__GenericEventDetails,
  _swigc__p_OSG__GenericEventDetailsRefPtr,
  _swigc__p_OSG__Geometry,
  _swigc__p_OSG__GeometryRefPtr,
  _swigc__p_OSG__Image,
  _swigc__p_OSG__ImageRefPtr,
  _swigc__p_OSG__InternalWindow,
  _swigc__p_OSG__InternalWindowRefPtr,
  _swigc__p_OSG__KeyEventDetails,
  _swigc__p_OSG__Line,
  _swigc__p_OSG__LuaActivity,
  _swigc__p_OSG__LuaActivityRefPtr,
  _swigc__p_OSG__Matrix,
  _swigc__p_OSG__Node,
  _swigc__p_OSG__NodeCore,
  _swigc__p_OSG__NodeCoreRefPtr,
  _swigc__p_OSG__NodeRefPtr,
  _swigc__p_OSG__ParticleSystem,
  _swigc__p_OSG__ParticleSystemRefPtr,
  _swigc__p_OSG__PhysicsBody,
  _swigc__p_OSG__PhysicsBodyRefPtr,
  _swigc__p_OSG__PhysicsHandler,
  _swigc__p_OSG__PhysicsHandlerRefPtr,
  _swigc__p_OSG__PhysicsSpace,
  _swigc__p_OSG__PhysicsSpaceRefPtr,
  _swigc__p_OSG__PhysicsWorld,
  _swigc__p_OSG__PhysicsWorldRefPtr,
  _swigc__p_OSG__Pnt2f,
  _swigc__p_OSG__Pnt3f,
  _swigc__p_OSG__ReflexiveContainer,
  _swigc__p_OSG__ScrollPanel,
  _swigc__p_OSG__ScrollPanelRefPtr,
  _swigc__p_OSG__Sound,
  _swigc__p_OSG__SoundGroup,
  _swigc__p_OSG__SoundGroupRefPtr,
  _swigc__p_OSG__SoundManager,
  _swigc__p_OSG__SoundRefPtr,
  _swigc__p_OSG__TextureObjChunk,
  _swigc__p_OSG__TextureObjChunkRefPtr,
  _swigc__p_OSG__UIDrawingSurface,
  _swigc__p_OSG__UIDrawingSurfaceRefPtr,
  _swigc__p_OSG__Vec2f,
  _swigc__p_OSG__Vec3f,
  _swigc__p_OSG__VideoManager,
  _swigc__p_OSG__VideoWrapper,
  _swigc__p_OSG__VideoWrapperRefPtr,
  _swigc__p_OSG__Viewport,
  _swigc__p_OSG__ViewportRefPtr,
  _swigc__p_OSG__Volume,
  _swigc__p_OSG__WindowEventProducer,
  _swigc__p_OSG__WindowEventProducerRefPtr,
  _swigc__p_ParentContainer,
  _swigc__p_PlaneSet,
  _swigc__p_PointType,
  _swigc__p_PointType3f,
  _swigc__p_QuaternionType,
  _swigc__p_SFCoreType,
  _swigc__p_SFParentType,
  _swigc__p_SFTravMaskType,
  _swigc__p_SFVolumeType,
  _swigc__p_TypeObject,
  _swigc__p_ValueType,
  _swigc__p_VectorType,
  _swigc__p_VectorType3f,
  _swigc__p_VolumeType,
  _swigc__p_boost__signals2__connection,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_mapped_type,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__mapT_std__string_unsigned_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

#include "OSGToolbox_wrap.h"
#include <boost/bind.hpp>
OSG::LuaManager::OpenBoundLuaLibFunctor getOSGToolboxLuaBindingsLibFunctor(void)
{
    return boost::bind(&luaopen_OSGToolbox, _1);
}

