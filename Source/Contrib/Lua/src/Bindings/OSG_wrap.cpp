/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Inherited swig_types[0]
#define SWIGTYPE_p_MFChildrenType swig_types[1]
#define SWIGTYPE_p_MatrixType swig_types[2]
#define SWIGTYPE_p_OSG__Activity swig_types[3]
#define SWIGTYPE_p_OSG__ActivityRefPtr swig_types[4]
#define SWIGTYPE_p_OSG__Attachment swig_types[5]
#define SWIGTYPE_p_OSG__AttachmentContainer swig_types[6]
#define SWIGTYPE_p_OSG__AttachmentContainerRefPtr swig_types[7]
#define SWIGTYPE_p_OSG__AttachmentRefPtr swig_types[8]
#define SWIGTYPE_p_OSG__BoxVolume swig_types[9]
#define SWIGTYPE_p_OSG__Camera swig_types[10]
#define SWIGTYPE_p_OSG__CameraRefPtr swig_types[11]
#define SWIGTYPE_p_OSG__Color3f swig_types[12]
#define SWIGTYPE_p_OSG__Color4f swig_types[13]
#define SWIGTYPE_p_OSG__DataType swig_types[14]
#define SWIGTYPE_p_OSG__EventDescription swig_types[15]
#define SWIGTYPE_p_OSG__EventDetails swig_types[16]
#define SWIGTYPE_p_OSG__EventDetailsRefPtr swig_types[17]
#define SWIGTYPE_p_OSG__EventProducerType swig_types[18]
#define SWIGTYPE_p_OSG__FactoryBase swig_types[19]
#define SWIGTYPE_p_OSG__FieldContainer swig_types[20]
#define SWIGTYPE_p_OSG__FieldContainerFactory swig_types[21]
#define SWIGTYPE_p_OSG__FieldContainerFactoryBase swig_types[22]
#define SWIGTYPE_p_OSG__FieldContainerRefPtr swig_types[23]
#define SWIGTYPE_p_OSG__FieldContainerType swig_types[24]
#define SWIGTYPE_p_OSG__FieldDescriptionBase swig_types[25]
#define SWIGTYPE_p_OSG__FieldType swig_types[26]
#define SWIGTYPE_p_OSG__FrustumVolume swig_types[27]
#define SWIGTYPE_p_OSG__GenericEventDetails swig_types[28]
#define SWIGTYPE_p_OSG__GenericEventDetailsRefPtr swig_types[29]
#define SWIGTYPE_p_OSG__Geometry swig_types[30]
#define SWIGTYPE_p_OSG__GeometryRefPtr swig_types[31]
#define SWIGTYPE_p_OSG__Image swig_types[32]
#define SWIGTYPE_p_OSG__ImageRefPtr swig_types[33]
#define SWIGTYPE_p_OSG__Line swig_types[34]
#define SWIGTYPE_p_OSG__LuaActivity swig_types[35]
#define SWIGTYPE_p_OSG__LuaActivityRefPtr swig_types[36]
#define SWIGTYPE_p_OSG__Matrix swig_types[37]
#define SWIGTYPE_p_OSG__Node swig_types[38]
#define SWIGTYPE_p_OSG__NodeCore swig_types[39]
#define SWIGTYPE_p_OSG__NodeCoreRefPtr swig_types[40]
#define SWIGTYPE_p_OSG__NodeRefPtr swig_types[41]
#define SWIGTYPE_p_OSG__Plane swig_types[42]
#define SWIGTYPE_p_OSG__Pnt2f swig_types[43]
#define SWIGTYPE_p_OSG__Pnt3f swig_types[44]
#define SWIGTYPE_p_OSG__Pnt4f swig_types[45]
#define SWIGTYPE_p_OSG__Quaternion swig_types[46]
#define SWIGTYPE_p_OSG__ReflexiveContainer swig_types[47]
#define SWIGTYPE_p_OSG__ReflexiveContainerType swig_types[48]
#define SWIGTYPE_p_OSG__TextureObjChunk swig_types[49]
#define SWIGTYPE_p_OSG__TextureObjChunkRefPtr swig_types[50]
#define SWIGTYPE_p_OSG__TypeBase swig_types[51]
#define SWIGTYPE_p_OSG__TypeFactory swig_types[52]
#define SWIGTYPE_p_OSG__Vec2f swig_types[53]
#define SWIGTYPE_p_OSG__Vec3f swig_types[54]
#define SWIGTYPE_p_OSG__Vec4f swig_types[55]
#define SWIGTYPE_p_OSG__Viewport swig_types[56]
#define SWIGTYPE_p_OSG__ViewportRefPtr swig_types[57]
#define SWIGTYPE_p_OSG__Volume swig_types[58]
#define SWIGTYPE_p_ParentContainer swig_types[59]
#define SWIGTYPE_p_PlaneSet swig_types[60]
#define SWIGTYPE_p_PointType swig_types[61]
#define SWIGTYPE_p_PointType3f swig_types[62]
#define SWIGTYPE_p_QuaternionType swig_types[63]
#define SWIGTYPE_p_SFCoreType swig_types[64]
#define SWIGTYPE_p_SFParentType swig_types[65]
#define SWIGTYPE_p_SFTravMaskType swig_types[66]
#define SWIGTYPE_p_SFVolumeType swig_types[67]
#define SWIGTYPE_p_TypeObject swig_types[68]
#define SWIGTYPE_p_ValueType swig_types[69]
#define SWIGTYPE_p_VectorType swig_types[70]
#define SWIGTYPE_p_VectorType3f swig_types[71]
#define SWIGTYPE_p_VolumeType swig_types[72]
#define SWIGTYPE_p_boost__signals2__connection swig_types[73]
#define SWIGTYPE_p_char swig_types[74]
#define SWIGTYPE_p_difference_type swig_types[75]
#define SWIGTYPE_p_double swig_types[76]
#define SWIGTYPE_p_float swig_types[77]
#define SWIGTYPE_p_int swig_types[78]
#define SWIGTYPE_p_key_type swig_types[79]
#define SWIGTYPE_p_long swig_types[80]
#define SWIGTYPE_p_long_double swig_types[81]
#define SWIGTYPE_p_mapped_type swig_types[82]
#define SWIGTYPE_p_signed_char swig_types[83]
#define SWIGTYPE_p_size_type swig_types[84]
#define SWIGTYPE_p_std__mapT_int_std__string_t swig_types[85]
#define SWIGTYPE_p_std__mapT_std__string_unsigned_int_t swig_types[86]
#define SWIGTYPE_p_std__string swig_types[87]
#define SWIGTYPE_p_unsigned_char swig_types[88]
#define SWIGTYPE_p_unsigned_int swig_types[89]
#define SWIGTYPE_p_unsigned_long swig_types[90]
static swig_type_info *swig_types[92];
static swig_module_info swig_module = {swig_types, 91, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "OSG"
#define SWIG_init      luaopen_OSG
#define SWIG_init_user luaopen_OSG_user

#define SWIG_LUACODE   luaopen_OSG_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include <string>


  int SWIG_lua_isnilstring(lua_State *L, int idx) {
    int ret = lua_isstring(L, idx);
    if (!ret)
     ret = lua_isnil(L, idx);
    return ret;
  }


#include "OSGConfig.h"
#include "OSGBaseFunctions.h"
#include "OSGColor.h"
#include "OSGVector.h"
#include "OSGMatrix.h"
#include "OSGMatrixUtility.h"
#include "OSGQuaternion.h"
#include "OSGLine.h"
#include "OSGPlane.h"
#include "OSGTypeBase.h"
#include "OSGDataType.h"
#include "OSGTypeFactory.h"
#include "OSGFieldType.h"
#include "OSGField.h"
/*#include "OSGFieldFactory.h"*/
#include "OSGTime.h"
#include "OSGVolume.h"
#include "OSGBoxVolume.h"
#include "OSGReal16.h"
#include "OSGLog.h"

    int OSGVersion(lua_State*L) // my native code
    {
      int SWIG_arg = 0;
      std::string result(OSG_VERSION_STRING);
      SWIG_check_num_args("version",0,0);
      
      lua_pushstring(L,result.c_str()); SWIG_arg++;
      return SWIG_arg;
      
      if(0) SWIG_fail;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }
    
    int OSGLogLOG(lua_State*L)
    {
      int SWIG_arg = 0;
      OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
      
      SWIG_check_num_args("LOG",1,1)
      if(!lua_isstring(L,1)) SWIG_fail_arg("LOG",1,"string");
      
      arg1 = (OSG::Char8 *)lua_tostring(L, 1);
      
      SLOG << arg1 << std::endl;
      return SWIG_arg;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }
    
    int OSGLogFATAL(lua_State*L)
    {
      int SWIG_arg = 0;
      OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
      
      SWIG_check_num_args("FATAL",1,1)
      if(!lua_isstring(L,1)) SWIG_fail_arg("FATAL",1,"string");
      
      arg1 = (OSG::Char8 *)lua_tostring(L, 1);
      
      SFATAL << arg1 << std::endl;
      return SWIG_arg;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }
    
    int OSGLogWARNING(lua_State*L)
    {
      int SWIG_arg = 0;
      OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
      
      SWIG_check_num_args("WARNING",1,1)
      if(!lua_isstring(L,1)) SWIG_fail_arg("WARNING",1,"string");
      
      arg1 = (OSG::Char8 *)lua_tostring(L, 1);
      
      SWARNING << arg1 << std::endl;
      return SWIG_arg;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }
    
    int OSGLogNOTICE(lua_State*L)
    {
      int SWIG_arg = 0;
      OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
      
      SWIG_check_num_args("NOTICE",1,1)
      if(!lua_isstring(L,1)) SWIG_fail_arg("NOTICE",1,"string");
      
      arg1 = (OSG::Char8 *)lua_tostring(L, 1);
      
      SNOTICE << arg1 << std::endl;
      return SWIG_arg;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }
    
    int OSGLogINFO(lua_State*L)
    {
      int SWIG_arg = 0;
      OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
      
      SWIG_check_num_args("INFO",1,1)
      if(!lua_isstring(L,1)) SWIG_fail_arg("INFO",1,"string");
      
      arg1 = (OSG::Char8 *)lua_tostring(L, 1);
      
      SINFO << arg1 << std::endl;
      return SWIG_arg;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }

SWIGINTERN OSG::UInt32 OSG_TypeFactory_registerType(OSG::TypeFactory *self,OSG::TypeBase *pType){
            return OSG::TypeFactory::the()->registerType(pType);
        }
SWIGINTERN OSG::UInt32 OSG_TypeFactory_findTypeId__SWIG_0(OSG::TypeFactory *self,OSG::Char8 const *szName,OSG::UInt32 const uiNameSpace=0){
            return OSG::TypeFactory::the()->findTypeId(szName,uiNameSpace);
        }
SWIGINTERN OSG::TypeBase *OSG_TypeFactory_findType__SWIG_0(OSG::TypeFactory *self,OSG::UInt32 uiTypeId){
            return OSG::TypeFactory::the()->findType(uiTypeId);
        }
SWIGINTERN OSG::TypeBase *OSG_TypeFactory_findType__SWIG_1(OSG::TypeFactory *self,OSG::Char8 const *szName,OSG::UInt32 const uiNameSpace=0){
            return OSG::TypeFactory::the()->findType(szName,uiNameSpace);
        }
SWIGINTERN OSG::UInt32 OSG_TypeFactory_getNumTypes(OSG::TypeFactory *self){
            return OSG::TypeFactory::the()->getNumTypes();
        }
SWIGINTERN void OSG_TypeFactory_writeTypeGraph(OSG::TypeFactory *self,OSG::Char8 const *szFilename){
            OSG::TypeFactory::the()->writeTypeGraph(szFilename);
        }
SWIGINTERN OSG::FieldType *OSG_FieldType_dcast(OSG::TypeBase *val){
            return dynamic_cast<OSG::FieldType  *>(val);
        }

#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include "OSGFieldContainerType.h"
#include "OSGFieldContainer.h"
#include "OSGFieldDescriptionBase.h"
#include "OSGBaseTypes.h"
#include "OSGAttachment.h"
#include "OSGAttachmentContainer.h"
#include "OSGNameAttachment.h"
#include "OSGAttachmentContainer.h"
#include "OSGSimpleGeometry.h"
#include "OSGGeoFunctions.h"
#include "OSGNode.h"
#include "OSGNodeCore.h"
#include "OSGGeometry.h"
#include "OSGViewport.h"
#include "OSGCamera.h"
#include "OSGImage.h"
#include "OSGTextureObjChunk.h"
#include "OSGMathFields.h"
#include "OSGSysFields.h"
#include "OSGBaseFields.h"
#include "OSGVecFields.h"
#include "OSGFieldContainerFields.h"
#include "OSGContainerUtils.h"
#include "OSGActivity.h"
#include "OSGEventProducerType.h"
#include "OSGActivity.h"
#include "OSGWindow.h"
#include "OSGEventDetails.h"
#include "OSGGenericEventDetails.h"
#include "OSGLuaActivity.h"
    
    int createFieldContainer(lua_State*L) // my native code
    {
      int SWIG_arg = 0;
      OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
      OSG::FieldContainerRefPtr result;
      
      SWIG_check_num_args("createFieldContainer",1,1)
      if(!lua_isstring(L,1)) SWIG_fail_arg("createFieldContainer",1,"string");
      
      arg1 = (OSG::Char8 *)lua_tostring(L, 1);
      
      result = OSG::FieldContainerFactory::the()->createContainer(arg1);
      if(result != NULL)
      {
        OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
        SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
      }
      else
      {
          lua_pushnil(L); SWIG_arg++;
      }
      return SWIG_arg;
      
      if(0) SWIG_fail;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }

    int getFieldContainer(lua_State*L) // my native code
    {
      int SWIG_arg = 0;
      OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
      OSG::FieldContainerRefPtr result;
      
      SWIG_check_num_args("getFieldContainer",1,1)
      if(!lua_isstring(L,1)) SWIG_fail_arg("getFieldContainer",1,"string");
      
      arg1 = (OSG::Char8 *)lua_tostring(L, 1);
      
      result = OSG::getFieldContainer(arg1);
      if(result != NULL)
      {
        OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
        SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
      }
      else
      {
          lua_pushnil(L); SWIG_arg++;
      }
      return SWIG_arg;
      
      if(0) SWIG_fail;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }
    
    int getFieldValue(lua_State*L) // my native code
    {
        int argc = lua_gettop(L);
        int SWIG_arg = 0;
        if (argc == 2) {
          OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
          OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
          std::string result;
          
          SWIG_check_num_args("getFieldValue",2,2)
          if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldValue",1,"OSG::FieldContainerRefPtr *");
          if(!lua_isstring(L,2)) SWIG_fail_arg("getFieldValue",2,"OSG::Char8 const *");
              
          if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
            SWIG_fail_ptr("getFieldValue",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
          }
          arg2 = (OSG::Char8 *)lua_tostring(L, 2);
          
          const OSG::GetFieldHandlePtr TheFieldHandle((*arg1)->getField(arg2));
          if( !TheFieldHandle.get() ||
              !TheFieldHandle->isValid())
          {
              lua_pushfstring(L,"Error in getFieldValue there is no field of name '%s' on type '%s'",arg2,(*arg1)->getTypeName());
              goto fail;
          }
          //Check that this is not a MultiField
          if(TheFieldHandle->getCardinality() == OSG::FieldType::MultiField)
          {
              lua_pushfstring(L,"Error in getFieldValue field of name '%s' on type '%s' is a multi-field, you must also supply the index.",arg2,(*arg1)->getTypeName());
              goto fail;
          }
          //Types
          const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
          
          //string
          if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
          {
              lua_pushstring(L,static_cast<const OSG::SFString*>(TheFieldHandle->getField())->getValue().c_str()); SWIG_arg++;
          }
          //UInt8
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFUInt8*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //UInt16
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt16>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFUInt16*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //UInt32
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFUInt32*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //UInt64
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFUInt64*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //BitVector
          else if(FieldContentType == OSG::FieldTraits<OSG::BitVector, 1>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFBitVector*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //GLenum
          else if(FieldContentType == OSG::FieldTraits<GLenum,1>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFGLenum*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Int8
          else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFInt8*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Int16
          else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFInt16*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Int32
          else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFInt32*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Int64
          else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFInt64*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Real16
          else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFReal16*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Real32
          else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFReal32*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Fixed32
          else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
          {
              lua_pushnumber(L,OSG::Fixed32::toDouble(static_cast<const
                             OSG::SFFixed32*>(TheFieldHandle->getField())->getValue())); SWIG_arg++;
          }
          //Time
          else if(FieldContentType == OSG::FieldTraits<OSG::Time, 1>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFTime*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Real64
          else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::SFReal64*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Color3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
          {
              OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) static_cast<const OSG::SFColor3f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
          }
          //Color4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
          {
              OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) static_cast<const OSG::SFColor4f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
          }
          //Vec2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
          {
              OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) static_cast<const OSG::SFVec2f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
          }
          //Vec3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
          {
              OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) static_cast<const OSG::SFVec3f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
          }
          //Vec4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
          {
              OSG::Vec4f * resultptr = new OSG::Vec4f((const OSG::Vec4f &) static_cast<const OSG::SFVec4f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
          }
          //Pnt2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
          {
              OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) static_cast<const OSG::SFPnt2f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
          }
          //Pnt3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
          {
              OSG::Pnt3f * resultptr = new OSG::Pnt3f((const OSG::Pnt3f &) static_cast<const OSG::SFPnt3f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
          }
          //Pnt4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
          {
              OSG::Pnt4f * resultptr = new OSG::Pnt4f((const OSG::Pnt4f &) static_cast<const OSG::SFPnt4f*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
          }
          //Matrix
          else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
          {
              OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) static_cast<const OSG::SFMatrix*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
          }
          //Quaternion
          else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
          {
              OSG::Quaternion * resultptr = new OSG::Quaternion((const OSG::Quaternion &) static_cast<const OSG::SFQuaternion*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++;
          }
          //StringToUInt32Map
          else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
          {
              OSG::StringToUInt32Map * resultptr = new OSG::StringToUInt32Map((const OSG::StringToUInt32Map &) static_cast<const OSG::SFStringToUInt32Map*>(TheFieldHandle->getField())->getValue());
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,1); SWIG_arg++;
          }
          //FieldContainerRefPtrs
          else if(TheFieldHandle->isPointerField())
          {
            OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr(static_cast<const OSG::SFUnrecFieldContainerPtr *>(TheFieldHandle->getField())->getValue());
            //check if the pointer is NULL
            if(resultptr &&
               *resultptr)
            {
                SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
            }
            else
            {
                lua_pushnil(L); SWIG_arg++;
            }
          }
          //bool
          else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
          {
              lua_pushboolean(L,static_cast<const OSG::SFBool*>(TheFieldHandle->getField())->getValue()); SWIG_arg++;
          }
          //Volumes
          //otherwise
          else
          {
              std::ostringstream TheSStream;
              OSG::OutStream TheOutStream(TheSStream);
              TheFieldHandle->pushValueToStream(TheOutStream);
              lua_pushstring(L,TheSStream.str().c_str()); SWIG_arg++;
          }
          return SWIG_arg;
          
          if(0) SWIG_fail;
        }

        //Multi Field get
        else if (argc == 3) {
          OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
          OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
          OSG::UInt32 arg3 ;
          std::string result;
          
          SWIG_check_num_args("getFieldValue",3,3)
          if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldValue",1,"OSG::FieldContainerRefPtr *");
          if(!lua_isstring(L,2)) SWIG_fail_arg("getFieldValue",2,"OSG::Char8 const *");
          if(!lua_isnumber(L,3)) SWIG_fail_arg("getFieldValue",3,"OSG::UInt32");
              
          if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
            SWIG_fail_ptr("getFieldValue",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
          }
          arg2 = (OSG::Char8 *)lua_tostring(L, 2);
          arg3 = (OSG::UInt32)lua_tonumber(L, 3);
          
          //Check that this is a valid field
          const OSG::GetFieldHandlePtr TheFieldHandle((*arg1)->getField(arg2));
          if( !TheFieldHandle.get() ||
              !TheFieldHandle->isValid())
          {
              lua_pushfstring(L,"Error in getFieldValue there is no field of name '%s' on type '%s'",arg2,(*arg1)->getTypeName());
              goto fail;
          }

          //Check that this is a MultiField
          if(TheFieldHandle->getCardinality() != OSG::FieldType::MultiField)
          {
              lua_pushfstring(L,"Error in getFieldValue field of name '%s' on type '%s' is a single-field, you do not need to supply an index..",arg2,(*arg1)->getTypeName());
              goto fail;
          }

          //Check if the index is out of bounds
          if(arg3 >= TheFieldHandle->size())
          {
              lua_pushfstring(L,"Error in getFieldValue: index %d out of bounds on field of name '%s' on type '%s' with size %d",
                              arg3,
                              arg2,
                              (*arg1)->getTypeName(),
                              TheFieldHandle->size());
              goto fail;
          }

          //Types
          const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
          //string
          if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
          {
              lua_pushstring(L,static_cast<const
                             OSG::MFString*>(TheFieldHandle->getField())->operator[](arg3).c_str()); SWIG_arg++;
          }
          //UInt8
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFUInt8*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //UInt16
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt16>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFUInt16*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //UInt32
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFUInt32*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //UInt64
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFUInt64*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //BitVector
          else if(FieldContentType == OSG::FieldTraits<OSG::BitVector, 1>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFBitVector*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //GLenum
          else if(FieldContentType == OSG::FieldTraits<GLenum, 1>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFGLenum*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Int8
          else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFInt8*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Int16
          else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFInt16*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Int32
          else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFInt32*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Int64
          else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFInt64*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Real16
          else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFReal16*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Real32
          else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFReal32*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Fixed32
          else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
          {
              lua_pushnumber(L,OSG::Fixed32::toDouble(static_cast<const
                                                      OSG::MFFixed32*>(TheFieldHandle->getField())->operator[](arg3))); SWIG_arg++;
          }
          //Time
          else if(FieldContentType == OSG::FieldTraits<OSG::Time, 1>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFTime*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Real64
          else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
          {
              lua_pushnumber(L,static_cast<const OSG::MFReal64*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Color3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
          {
              OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) static_cast<const OSG::MFColor3f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
          }
          //Color4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
          {
              OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) static_cast<const OSG::MFColor4f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
          }
          //Vec2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
          {
              OSG::Vec2f * resultptr = new OSG::Vec2f((const OSG::Vec2f &) static_cast<const OSG::MFVec2f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
          }
          //Vec3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
          {
              OSG::Vec3f * resultptr = new OSG::Vec3f((const OSG::Vec3f &) static_cast<const OSG::MFVec3f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
          }
          //Vec4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
          {
              OSG::Vec4f * resultptr = new OSG::Vec4f((const OSG::Vec4f &) static_cast<const OSG::MFVec4f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
          }
          //Pnt2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
          {
              OSG::Pnt2f * resultptr = new OSG::Pnt2f((const OSG::Pnt2f &) static_cast<const OSG::MFPnt2f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
          }
          //Pnt3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
          {
              OSG::Pnt3f * resultptr = new OSG::Pnt3f((const OSG::Pnt3f &) static_cast<const OSG::MFPnt3f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
          }
          //Pnt4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
          {
              OSG::Pnt4f * resultptr = new OSG::Pnt4f((const OSG::Pnt4f &) static_cast<const OSG::MFPnt4f*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
          }
          //Matrix
          else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
          {
              OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) static_cast<const OSG::MFMatrix*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
          }
          //Quaternion
          else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
          {
              OSG::Quaternion * resultptr = new OSG::Quaternion((const OSG::Quaternion &) static_cast<const OSG::MFQuaternion*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++;
          }
          //StringToUInt32Map
          else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
          {
              OSG::StringToUInt32Map * resultptr = new OSG::StringToUInt32Map((const OSG::StringToUInt32Map &) static_cast<const OSG::MFStringToUInt32Map*>(TheFieldHandle->getField())->operator[](arg3));
              SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,1); SWIG_arg++;
          }
          //FieldContainerRefPtrs
          else if(TheFieldHandle->isPointerField())
          {
            OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr(static_cast<const OSG::MFUnrecFieldContainerPtr *>(TheFieldHandle->getField())->operator[](arg3));
            //check if the pointer is NULL
            if(resultptr &&
               *resultptr)
            {
                SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
            }
            else
            {
                lua_pushnil(L); SWIG_arg++;
            }
          }
          //bool
          else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
          {
              lua_pushboolean(L,static_cast<const OSG::MFBool*>(TheFieldHandle->getField())->operator[](arg3)); SWIG_arg++;
          }
          //Volumes
          //otherwize
          else
          {
              ////TODO
              //TheField->getValueByStr(result, arg3);
              //lua_pushstring(L,result.c_str()); SWIG_arg++;
          }
          return SWIG_arg;
          
          if(0) SWIG_fail;
        }
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }
    
    bool LUA_BINDING_check_num_args(lua_State*L, const char* func_name,unsigned int a,unsigned int b)
    {
        if (lua_gettop(L)<a || lua_gettop(L)>b)
        {
            lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));
            lua_error(L);
            return false;
        }
        return true;
    }

    void LUA_BINDING_fail_arg(lua_State*L, const char* func_name, unsigned int argnum,const char* type)
    {
      lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'", func_name,argnum,type,SWIG_Lua_typename(L,argnum));
      lua_error(L);
    }

    void LUA_BINDING_fail_ptr(lua_State*L, const char* func_name, unsigned int argnum,swig_type_info* type)
    {
        LUA_BINDING_fail_arg(L, func_name, argnum,(type && type->str)?type->str:"void*");
    }

    int setFieldValue(lua_State*L) // my native code
    {
        int argc = lua_gettop(L);
        int SWIG_arg = 0;
        if (argc == 3) {
          OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
          OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
          
          //Check if there are the correct number of arguments
          if (!LUA_BINDING_check_num_args(L,"setFieldValue",3,3)){ return SWIG_arg;}
          //Check the type of argument 1
          if(!SWIG_isptrtype(L,1))
          {
              LUA_BINDING_fail_arg(L,"setFieldValue",1,"FieldContainerRefPtr *");
              return SWIG_arg;
          }
          //Check the type of argument 2
          if(!lua_isstring(L,2))
          {
              LUA_BINDING_fail_arg(L,"setFieldValue",2,"OSG::Char8 const *'");
              return SWIG_arg;
          }
              
          //Check the pointer convertion on arg 1
          if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
          {
              LUA_BINDING_fail_ptr(L,"setFieldValue",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
              return SWIG_arg;
          }
          //Cast arg 2 to a string
          arg2 = (OSG::Char8 *)lua_tostring(L, 2);
          
          //Check that arg1 is not NullFC
          if((*arg1) == NULL)
          {
              lua_pushfstring(L,"Error in setFieldValue the FieldContainer given is Null");
              lua_error(L);
              return SWIG_arg;
          }
          //Check that the field referenced exists
          OSG::EditFieldHandlePtr TheFieldHandle((*arg1)->editField(arg2));
          if( !TheFieldHandle.get() ||
              !TheFieldHandle->isValid())
          {
              lua_pushfstring(L,"Error in setFieldValue there is no field of name '%s' on type '%s'",arg2,(*arg1)->getTypeName());
              lua_error(L);
              return SWIG_arg;
          }
          const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
          //string
          if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
          {
              if(!lua_isstring(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"string'");
                  return SWIG_arg;
              }
              static_cast<OSG::SFString*>(TheFieldHandle->getField())->setValue(static_cast<const OSG::Char8*>(lua_tostring(L, 3)));
          }
          //UInt8
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt8'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFUInt8*>(TheFieldHandle->getField())->setValue(static_cast<OSG::UInt8>(lua_tonumber(L, 3)));
          }
          //UInt16
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFUInt16*>(TheFieldHandle->getField())->setValue(static_cast<OSG::UInt16>(lua_tonumber(L, 3)));
          }
          //UInt32
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType())
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFUInt32*>(TheFieldHandle->getField())->setValue(static_cast<OSG::UInt32>(lua_tonumber(L, 3)));
          }
          //UInt64
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFUInt64*>(TheFieldHandle->getField())->setValue(static_cast<OSG::UInt64>(lua_tonumber(L, 3)));
          }
          //BitVector
          else if(FieldContentType == OSG::FieldTraits<OSG::BitVector, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"BitVector'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFBitVector*>(TheFieldHandle->getField())->setValue(static_cast<OSG::BitVector>(lua_tonumber(L, 3)));
          }
          //GLenum
          else if(FieldContentType == OSG::FieldTraits<GLenum, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"GLenum'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFGLenum*>(TheFieldHandle->getField())->setValue(static_cast<GLenum>(lua_tonumber(L, 3)));
          }
          //Int8
          else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int8'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFInt8*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Int8>(lua_tonumber(L, 3)));
          }
          //Int16
          else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFInt16*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Int16>(lua_tonumber(L, 3)));
          }
          //Int32
          else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFInt32*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Int32>(lua_tonumber(L, 3)));
          }
          //Int64
          else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFInt64*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Int64>(lua_tonumber(L, 3)));
          }
          //Real16
          else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Real16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFReal16*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Real16>(lua_tonumber(L, 3)));
          }
          //Real32
          else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Real32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFReal32*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Real32>(lua_tonumber(L, 3)));
          }
          //Fixed32
          else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Fixed32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFFixed32*>(TheFieldHandle->getField())->setValue(OSG::Fixed32(lua_tonumber(L, 3)));
          }
          //Time
          else if(FieldContentType == OSG::FieldTraits<OSG::Time, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Time'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFTime*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Time>(lua_tonumber(L, 3)));
          }
          //Real64
          else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Real64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFReal64*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Real64>(lua_tonumber(L, 3)));
          }
          //Color3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
          {
              OSG::Color3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color3f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Color3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFColor3f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Color3f const &>(*arg3));
          }
          //Color4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
          {
              OSG::Color4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color4f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Color4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFColor4f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Color4f const &>(*arg3));
          }
          //Vec2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
          {
              OSG::Vec2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec2f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Vec2f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFVec2f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Vec2f const &>(*arg3));
          }
          //Vec3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
          {
              OSG::Vec3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Vec3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFVec3f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Vec3f const &>(*arg3));
          }
          //Vec4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
          {
              OSG::Vec4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec4f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Vec4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFVec4f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Vec4f const &>(*arg3));
          }
          //Pnt2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
          {
              OSG::Pnt2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Pnt2f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFPnt2f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Pnt2f const &>(*arg3));
          }
          //Pnt3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
          {
              OSG::Pnt3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Pnt3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFPnt3f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Pnt3f const &>(*arg3));
          }
          //Pnt4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
          {
              OSG::Pnt4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt4f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Pnt4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFPnt4f*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Pnt4f const &>(*arg3));
          }
          //Matrix
          else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
          {
              OSG::Matrix *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Matrix,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Matrix);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFMatrix*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Matrix const &>(*arg3));
          }
          //Quaternion
          else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
          {
              OSG::Quaternion *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Quaternion);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFQuaternion*>(TheFieldHandle->getField())->setValue(static_cast<OSG::Quaternion const &>(*arg3));
          }
          //StringToUInt32Map
          else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
          {
              OSG::StringToUInt32Map *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::SFStringToUInt32Map*>(TheFieldHandle->getField())->setValue(static_cast<OSG::StringToUInt32Map const &>(*arg3));
          }
          //FieldContainerRefPtrs
          else if(TheFieldHandle->isPointerField())
          {
              OSG::FieldContainerRefPtr *arg3 = (OSG::FieldContainerRefPtr *) 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
              {
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__FieldContainerRefPtr);
                  return SWIG_arg;
              }
              switch(TheFieldHandle->getType().getClass())
              {
                  case OSG::FieldType::ChildPtrField:
                       static_cast<OSG::ChildPointerSField <OSG::FieldContainer *,
                                   OSG::UnrecordedRefCountPolicy,1>*>(TheFieldHandle->getField())->setValue(*arg3);
                       break;
                  case OSG::FieldType::ParentPtrField:
                       lua_pushfstring(L,"Error in setFieldValue the FieldContainer given is of the ParentPtr class.  Cannot set the value of this field directly");
                       lua_error(L);
                       break;
                  case OSG::FieldType::PtrField:
                       static_cast<OSG::SFUnrecFieldContainerPtr*>(TheFieldHandle->getField())->setValue(*arg3);
                       break;
              }
          }
          //bool
          else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
          {
              if(!lua_isboolean(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"boolean'");
                  return SWIG_arg;
              }
                  static_cast<OSG::SFBool*>(TheFieldHandle->getField())->setValue(static_cast<bool>(lua_toboolean(L, 3)));
          }
          //Volumes
          //Otherwise
          else
          {
              if(!lua_isstring(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"string'");
                  return SWIG_arg;
              }
              TheFieldHandle->pushValueFromCString(lua_tostring(L, 3));
          }
        }
        else if (argc == 4) {
          OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
          OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
          OSG::UInt32 arg4 ;
          
          //Check if there are the correct number of arguments
          if (!LUA_BINDING_check_num_args(L,"setFieldValue",4,4)){ return SWIG_arg;}
          //Check the type of argument 1
          if(!SWIG_isptrtype(L,1))
          {
              LUA_BINDING_fail_arg(L,"setFieldValue",1,"FieldContainerRefPtr *");
              return SWIG_arg;
          }
          //Check the type of argument 2
          if(!lua_isstring(L,2))
          {
              LUA_BINDING_fail_arg(L,"setFieldValue",2,"OSG::Char8 const *'");
              return SWIG_arg;
          }
          if(!lua_isnumber(L,4))
          {
              LUA_BINDING_fail_arg(L,"setFieldValue",4,"OSG::UInt32'");
              return SWIG_arg;
          }
              
          //Check the pointer convertion on arg 1
          if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
          {
              LUA_BINDING_fail_ptr(L,"setFieldValue",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
              return SWIG_arg;
          }
          //Cast arg 2 to a string
          arg2 = (OSG::Char8 *)lua_tostring(L, 2);
          arg4 = (OSG::UInt32)lua_tonumber(L, 4);
          
          //Check that arg1 is not NullFC
          if((*arg1) == NULL)
          {
              lua_pushfstring(L,"Error in setFieldValue the FieldContainer given is Null");
              lua_error(L);
              return SWIG_arg;
          }
          //Check that the field referenced exists
          OSG::EditFieldHandlePtr TheFieldHandle((*arg1)->editField(arg2));
          if( !TheFieldHandle.get() ||
              !TheFieldHandle->isValid())
          {
              lua_pushfstring(L,"Error in setFieldValue there is no field of name '%s' on type '%s'",arg2,(*arg1)->getTypeName());
              lua_error(L);
              return SWIG_arg;
          }
          if(TheFieldHandle->getCardinality() == OSG::FieldType::SingleField)
          {
              lua_pushfstring(L,"Error in setFieldValue field of name '%s' on type '%s' is a single-field, you do not need to supply an index..",arg2,(*arg1)->getTypeName());
              lua_error(L);
              return SWIG_arg;
          }

          //Check if the index is out of bounds
          if(arg4 >= TheFieldHandle->size())
          {
              lua_pushfstring(L,"Error in setFieldValue: index %d out of bounds on field of name '%s' on type '%s' with size %d",
                              arg4,
                              arg2,
                              (*arg1)->getTypeName(),
                              TheFieldHandle->size());
              lua_error(L);
              return SWIG_arg;
          }
          const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
          //string
          if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
          {
              if(!lua_isstring(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"string'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFString*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<const OSG::Char8*>(lua_tostring(L, 3)));
          }
          //UInt8
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt8'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt8*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::UInt8>(lua_tonumber(L, 3)));
          }
          //UInt16
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt16*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::UInt16>(lua_tonumber(L, 3)));
          }
          //UInt32
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType())
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt32*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::UInt32>(lua_tonumber(L, 3)));
          }
          //UInt64
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"UInt64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt64*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::UInt64>(lua_tonumber(L, 3)));
          }
          //BitVector
          else if(FieldContentType == OSG::FieldTraits<OSG::BitVector, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"BitVector'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFBitVector*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::BitVector>(lua_tonumber(L, 3)));
          }
          //GLenum
          else if(FieldContentType == OSG::FieldTraits<GLenum, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"GLenum'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFGLenum*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<GLenum>(lua_tonumber(L, 3)));
          }
          //Int8
          else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int8'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt8*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Int8>(lua_tonumber(L, 3)));
          }
          //Int16
          else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt16*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Int16>(lua_tonumber(L, 3)));
          }
          //Int32
          else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt32*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Int32>(lua_tonumber(L, 3)));
          }
          //Int64
          else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Int64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt64*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Int64>(lua_tonumber(L, 3)));
          }
          //Real16
          else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Real16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFReal16*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Real16>(lua_tonumber(L, 3)));
          }
          //Real32
          else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Real32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFReal32*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Real32>(lua_tonumber(L, 3)));
          }
          //Fixed32
          else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Fixed32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFFixed32*>(TheFieldHandle->getField())->operator[](arg4) = (OSG::Fixed32(lua_tonumber(L, 3)));
          }
          //Time
          else if(FieldContentType == OSG::FieldTraits<OSG::Time, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Time'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFTime*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Time>(lua_tonumber(L, 3)));
          }
          //Real64
          else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"Real64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFReal64*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Real64>(lua_tonumber(L, 3)));
          }
          //Color3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
          {
              OSG::Color3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color3f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Color3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFColor3f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Color3f const &>(*arg3));
          }
          //Color4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
          {
              OSG::Color4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color4f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Color4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFColor4f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Color4f const &>(*arg3));
          }
          //Vec2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
          {
              OSG::Vec2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec2f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Vec2f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFVec2f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Vec2f const &>(*arg3));
          }
          //Vec3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
          {
              OSG::Vec3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Vec3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFVec3f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Vec3f const &>(*arg3));
          }
          //Vec4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
          {
              OSG::Vec4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec4f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Vec4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFVec4f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Vec4f const &>(*arg3));
          }
          //Pnt2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
          {
              OSG::Pnt2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Pnt2f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFPnt2f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Pnt2f const &>(*arg3));
          }
          //Pnt3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
          {
              OSG::Pnt3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Pnt3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFPnt3f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Pnt3f const &>(*arg3));
          }
          //Pnt4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
          {
              OSG::Pnt4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt4f,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Pnt4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFPnt4f*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Pnt4f const &>(*arg3));
          }
          //Matrix
          else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
          {
              OSG::Matrix *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Matrix,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Matrix);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFMatrix*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Matrix const &>(*arg3));
          }
          //Quaternion
          else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
          {
              OSG::Quaternion *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__Quaternion);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFQuaternion*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::Quaternion const &>(*arg3));
          }
          //StringToUInt32Map
          else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
          {
              OSG::StringToUInt32Map *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFStringToUInt32Map*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<OSG::StringToUInt32Map const &>(*arg3));
          }
          //FieldContainerRefPtrs
          else if(TheFieldHandle->isPointerField())
          {
              OSG::FieldContainerRefPtr *arg3 = (OSG::FieldContainerRefPtr *) 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
              {
                  LUA_BINDING_fail_ptr(L,"setFieldValue",3,SWIGTYPE_p_OSG__FieldContainerRefPtr);
                  return SWIG_arg;
              }
              //TODO
              switch(TheFieldHandle->getType().getClass())
              {
                  case OSG::FieldType::ChildPtrField:
                       static_cast<OSG::ChildPointerMField <OSG::FieldContainer *,
                                   OSG::UnrecordedRefCountPolicy,1>*>(TheFieldHandle->getField())->replace(arg4,*arg3);
                       break;
                  case OSG::FieldType::ParentPtrField:
                       lua_pushfstring(L,"Error in setFieldValue the FieldContainer given is of the ParentPtr class.  Cannot set the value of this field directly");
                       lua_error(L);
                       break;
                  case OSG::FieldType::PtrField:
                       static_cast<OSG::MFUnrecFieldContainerPtr*>(TheFieldHandle->getField())->replace(arg4,*arg3);
                       break;
              }
          }
          //bool
          else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
          {
              if(!lua_isboolean(L,3))
              {
                  LUA_BINDING_fail_arg(L,"setFieldValue",3,"boolean'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFBool*>(TheFieldHandle->getField())->operator[](arg4) = (static_cast<bool>(lua_toboolean(L, 3)));
          }
          //Volumes
          //Otherwise
          else
          {
              lua_pushfstring(L,"Error in setFieldValue field of name '%s' on type '%s', could not set the indexed value of the multi-field because that type is not supported in this biding.",arg2,(*arg1)->getTypeName());
              lua_error(L);
          }
        }

          return SWIG_arg;
    }

    int pushFieldValue(lua_State*L) // my native code
    {
        int SWIG_arg = 0;
          OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
          OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
          
          //Check if there are the correct number of arguments
          if (!LUA_BINDING_check_num_args(L,"pushFieldValue",3,3)){ return SWIG_arg;}
          //Check the type of argument 1
          if(!SWIG_isptrtype(L,1))
          {
              LUA_BINDING_fail_arg(L,"pushFieldValue",1,"FieldContainerRefPtr *");
              return SWIG_arg;
          }
          //Check the type of argument 2
          if(!lua_isstring(L,2))
          {
              LUA_BINDING_fail_arg(L,"pushFieldValue",2,"OSG::Char8 const *'");
              return SWIG_arg;
          }
              
          //Check the pointer convertion on arg 1
          if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
          {
              LUA_BINDING_fail_ptr(L,"pushFieldValue",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
              return SWIG_arg;
          }
          //Cast arg 2 to a string
          arg2 = (OSG::Char8 *)lua_tostring(L, 2);
          
          //Check that arg1 is not NullFC
          if((*arg1) == NULL)
          {
              lua_pushfstring(L,"Error in pushFieldValue the FieldContainer given is Null");
              lua_error(L);
              return SWIG_arg;
          }
          //Check that the field referenced exists
          OSG::EditFieldHandlePtr TheFieldHandle((*arg1)->editField(arg2));
          if( !TheFieldHandle.get() ||
              !TheFieldHandle->isValid())
          {
              lua_pushfstring(L,"Error in pushFieldValue there is no field of name '%s' on type '%s'",arg2,(*arg1)->getTypeName());
              lua_error(L);
              return SWIG_arg;
          }
          if(TheFieldHandle->getCardinality() == OSG::FieldType::SingleField)
          {
              lua_pushfstring(L,"Error in pushFieldValue field of name '%s' on type '%s' is a single-field.  Use setFieldValue instead.",arg2,(*arg1)->getTypeName());
              lua_error(L);
              return SWIG_arg;
          }
          const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
          //string
          if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
          {
              if(!lua_isstring(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"string'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFString*>(TheFieldHandle->getField())->push_back(static_cast<const OSG::Char8*>(lua_tostring(L, 3)));
          }
          //UInt8
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"UInt8'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt8*>(TheFieldHandle->getField())->push_back(static_cast<OSG::UInt8>(lua_tonumber(L, 3)));
          }
          //UInt16
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"UInt16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt16*>(TheFieldHandle->getField())->push_back(static_cast<OSG::UInt16>(lua_tonumber(L, 3)));
          }
          //UInt32
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType())
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"UInt32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt32*>(TheFieldHandle->getField())->push_back(static_cast<OSG::UInt32>(lua_tonumber(L, 3)));
          }
          //UInt64
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"UInt64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFUInt64*>(TheFieldHandle->getField())->push_back(static_cast<OSG::UInt64>(lua_tonumber(L, 3)));
          }
          //BitVector
          else if(FieldContentType == OSG::FieldTraits<OSG::BitVector, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"BitVector'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFBitVector*>(TheFieldHandle->getField())->push_back(static_cast<OSG::BitVector>(lua_tonumber(L, 3)));
          }
          //GLenum
          else if(FieldContentType == OSG::FieldTraits<GLenum, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"GLenum'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFGLenum*>(TheFieldHandle->getField())->push_back(static_cast<GLenum>(lua_tonumber(L, 3)));
          }
          //Int8
          else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Int8'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt8*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Int8>(lua_tonumber(L, 3)));
          }
          //Int16
          else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Int16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt16*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Int16>(lua_tonumber(L, 3)));
          }
          //Int32
          else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Int32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt32*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Int32>(lua_tonumber(L, 3)));
          }
          //Int64
          else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Int64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFInt64*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Int64>(lua_tonumber(L, 3)));
          }
          //Real16
          else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Real16'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFReal16*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Real16>(lua_tonumber(L, 3)));
          }
          //Real32
          else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Real32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFReal32*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Real32>(lua_tonumber(L, 3)));
          }
          //Fixed32
          else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Fixed32'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFFixed32*>(TheFieldHandle->getField())->push_back(OSG::Fixed32(lua_tonumber(L, 3)));
          }
          //Time
          else if(FieldContentType == OSG::FieldTraits<OSG::Time, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Time'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFTime*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Time>(lua_tonumber(L, 3)));
          }
          //Real64
          else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"Real64'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFReal64*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Real64>(lua_tonumber(L, 3)));
          }
          //Color3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
          {
              OSG::Color3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color3f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Color3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFColor3f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Color3f const &>(*arg3));
          }
          //Color4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
          {
              OSG::Color4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color4f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Color4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFColor4f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Color4f const &>(*arg3));
          }
          //Vec2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
          {
              OSG::Vec2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec2f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Vec2f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFVec2f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Vec2f const &>(*arg3));
          }
          //Vec3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
          {
              OSG::Vec3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Vec3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFVec3f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Vec3f const &>(*arg3));
          }
          //Vec4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
          {
              OSG::Vec4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec4f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Vec4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFVec4f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Vec4f const &>(*arg3));
          }
          //Pnt2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
          {
              OSG::Pnt2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Pnt2f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFPnt2f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Pnt2f const &>(*arg3));
          }
          //Pnt3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
          {
              OSG::Pnt3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Pnt3f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFPnt3f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Pnt3f const &>(*arg3));
          }
          //Pnt4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
          {
              OSG::Pnt4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt4f,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Pnt4f);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFPnt4f*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Pnt4f const &>(*arg3));
          }
          //Matrix
          else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
          {
              OSG::Matrix *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Matrix,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Matrix);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFMatrix*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Matrix const &>(*arg3));
          }
          //Quaternion
          else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
          {
              OSG::Quaternion *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__Quaternion);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFQuaternion*>(TheFieldHandle->getField())->push_back(static_cast<OSG::Quaternion const &>(*arg3));
          }
          //StringToUInt32Map
          else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
          {
              OSG::StringToUInt32Map *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
                  return SWIG_arg;
              }
              
                  static_cast<OSG::MFStringToUInt32Map*>(TheFieldHandle->getField())->push_back(static_cast<OSG::StringToUInt32Map const &>(*arg3));
          }
          //FieldContainerRefPtrs
          else if(TheFieldHandle->isPointerField())
          {
              OSG::FieldContainerRefPtr *arg3 = (OSG::FieldContainerRefPtr *) 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
              {
                  LUA_BINDING_fail_ptr(L,"pushFieldValue",3,SWIGTYPE_p_OSG__FieldContainerRefPtr);
                  return SWIG_arg;
              }
              //TODO
              switch(TheFieldHandle->getType().getClass())
              {
                  case OSG::FieldType::ChildPtrField:
                       static_cast<OSG::ChildPointerMField <OSG::FieldContainer *,
                                   OSG::UnrecordedRefCountPolicy,1>*>(TheFieldHandle->getField())->push_back(*arg3);
                       break;
                  case OSG::FieldType::ParentPtrField:
                       lua_pushfstring(L,"Error in pushFieldValue the FieldContainer given is of the ParentPtr class.  Cannot set the value of this field directly");
                       lua_error(L);
                       break;
                  case OSG::FieldType::PtrField:
                       static_cast<OSG::MFUnrecFieldContainerPtr*>(TheFieldHandle->getField())->push_back(*arg3);
                       break;
              }
          }
          //bool
          else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
          {
              if(!lua_isboolean(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"boolean'");
                  return SWIG_arg;
              }
                  static_cast<OSG::MFBool*>(TheFieldHandle->getField())->push_back(static_cast<bool>(lua_toboolean(L, 3)));
          }
          //Volumes
          //Otherwise
          else
          {
              if(!lua_isstring(L,3))
              {
                  LUA_BINDING_fail_arg(L,"pushFieldValue",3,"string'");
                  return SWIG_arg;
              }
                  TheFieldHandle->pushValueFromCString((OSG::Char8 *)lua_tostring(L, 3));
          }

          return SWIG_arg;
    }
    
    int insertFieldValue(lua_State*L) // my native code
    {
        int SWIG_arg = 0;
          OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
          OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
          OSG::UInt32 arg4 ;
          
          //Check if there are the correct number of arguments
          if (!LUA_BINDING_check_num_args(L,"insertFieldValue",4,4)){ return SWIG_arg;}
          //Check the type of argument 1
          if(!SWIG_isptrtype(L,1))
          {
              LUA_BINDING_fail_arg(L,"insertFieldValue",1,"FieldContainerRefPtr *");
              return SWIG_arg;
          }
          //Check the type of argument 2
          if(!lua_isstring(L,2))
          {
              LUA_BINDING_fail_arg(L,"insertFieldValue",2,"OSG::Char8 const *'");
              return SWIG_arg;
          }
          if(!lua_isnumber(L,4))
          {
              LUA_BINDING_fail_arg(L,"setFieldValue",4,"OSG::UInt32'");
              return SWIG_arg;
          }
              
          //Check the pointer convertion on arg 1
          if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
          {
              LUA_BINDING_fail_ptr(L,"insertFieldValue",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
              return SWIG_arg;
          }
          //Cast arg 2 to a string
          arg2 = (OSG::Char8 *)lua_tostring(L, 2);
          arg4 = (OSG::UInt32)lua_tonumber(L, 4);
          
          //Check that arg1 is not NullFC
          if((*arg1) == NULL)
          {
              lua_pushfstring(L,"Error in insertFieldValue the FieldContainer given is Null");
              lua_error(L);
              return SWIG_arg;
          }
          //Check that the field referenced exists
          OSG::EditFieldHandlePtr TheFieldHandle((*arg1)->editField(arg2));
          if( !TheFieldHandle.get() ||
              !TheFieldHandle->isValid())
          {
              lua_pushfstring(L,"Error in insertFieldValue there is no field of name '%s' on type '%s'",arg2,(*arg1)->getTypeName());
              lua_error(L);
              return SWIG_arg;
          }
          if(TheFieldHandle->getCardinality() == OSG::FieldType::SingleField)
          {
              lua_pushfstring(L,"Error in insertFieldValue field of name '%s' on type '%s' is a single-field.  Use setFieldValue instead.",arg2,(*arg1)->getTypeName());
              lua_error(L);
              return SWIG_arg;
          }

          //Check if the index is out of bounds
          if(arg4 > TheFieldHandle->size())
          {
              lua_pushfstring(L,"Error in insertFieldValue: index %d out of bounds on field of name '%s' on type '%s' with size %d",
                              arg4,
                              arg2,
                              (*arg1)->getTypeName(),
                              TheFieldHandle->size());
              lua_error(L);
              return SWIG_arg;
          }
          const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
          //string
          if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
          {
              if(!lua_isstring(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"string'");
                  return SWIG_arg;
              }
              OSG::MFString::iterator InsertItor(static_cast<OSG::MFString*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFString*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<const OSG::Char8*>(lua_tostring(L, 3)));
          }
          //UInt8
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"UInt8'");
                  return SWIG_arg;
              }
              OSG::MFUInt8::iterator InsertItor(static_cast<OSG::MFUInt8*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFUInt8*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::UInt8>(lua_tonumber(L, 3)));
          }
          //UInt16
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"UInt16'");
                  return SWIG_arg;
              }
              OSG::MFUInt16::iterator InsertItor(static_cast<OSG::MFUInt16*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFUInt16*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::UInt16>(lua_tonumber(L, 3)));
          }
          //UInt32
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType())
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"UInt32'");
                  return SWIG_arg;
              }
              OSG::MFUInt32::iterator InsertItor(static_cast<OSG::MFUInt32*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFUInt32*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::UInt32>(lua_tonumber(L, 3)));
          }
          //UInt64
          else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"UInt64'");
                  return SWIG_arg;
              }
              OSG::MFUInt64::iterator InsertItor(static_cast<OSG::MFUInt64*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFUInt64*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::UInt64>(lua_tonumber(L, 3)));
          }
          //BitVector
          else if(FieldContentType == OSG::FieldTraits<OSG::BitVector, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"BitVector'");
                  return SWIG_arg;
              }
              OSG::MFBitVector::iterator InsertItor(static_cast<OSG::MFBitVector*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFBitVector*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::BitVector>(lua_tonumber(L, 3)));
          }
          //GLenum
          else if(FieldContentType == OSG::FieldTraits<GLenum, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"GLenum'");
                  return SWIG_arg;
              }
              OSG::MFGLenum::iterator InsertItor(static_cast<OSG::MFGLenum*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFGLenum*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<GLenum>(lua_tonumber(L, 3)));
          }
          //Int8
          else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Int8'");
                  return SWIG_arg;
              }
              OSG::MFInt8::iterator InsertItor(static_cast<OSG::MFInt8*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFInt8*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Int8>(lua_tonumber(L, 3)));
          }
          //Int16
          else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Int16'");
                  return SWIG_arg;
              }
              OSG::MFInt16::iterator InsertItor(static_cast<OSG::MFInt16*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFInt16*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Int16>(lua_tonumber(L, 3)));
          }
          //Int32
          else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Int32'");
                  return SWIG_arg;
              }
              OSG::MFInt32::iterator InsertItor(static_cast<OSG::MFInt32*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFInt32*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Int32>(lua_tonumber(L, 3)));
          }
          //Int64
          else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Int64'");
                  return SWIG_arg;
              }
              OSG::MFInt64::iterator InsertItor(static_cast<OSG::MFInt64*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFInt64*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Int64>(lua_tonumber(L, 3)));
          }
          //Real16
          else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Real16'");
                  return SWIG_arg;
              }
              OSG::MFReal16::iterator InsertItor(static_cast<OSG::MFReal16*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFReal16*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Real16>(lua_tonumber(L, 3)));
          }
          //Real32
          else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Real32'");
                  return SWIG_arg;
              }
              OSG::MFReal32::iterator InsertItor(static_cast<OSG::MFReal32*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFReal32*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Real32>(lua_tonumber(L, 3)));
          }
          //Fixed32
          else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Fixed32'");
                  return SWIG_arg;
              }
              OSG::MFFixed32::iterator InsertItor(static_cast<OSG::MFFixed32*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFFixed32*>(TheFieldHandle->getField())->insert(InsertItor, OSG::Fixed32(lua_tonumber(L, 3)));
          }
          //Time
          else if(FieldContentType == OSG::FieldTraits<OSG::Time, 1>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Time'");
                  return SWIG_arg;
              }
              OSG::MFTime::iterator InsertItor(static_cast<OSG::MFTime*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFTime*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Time>(lua_tonumber(L, 3)));
          }
          //Real64
          else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
          {
              if(!lua_isnumber(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"Real64'");
                  return SWIG_arg;
              }
              OSG::MFReal64::iterator InsertItor(static_cast<OSG::MFReal64*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFReal64*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Real64>(lua_tonumber(L, 3)));
          }
          //Color3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
          {
              OSG::Color3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color3f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Color3f);
                  return SWIG_arg;
              }
              OSG::MFColor3f::iterator InsertItor(static_cast<OSG::MFColor3f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFColor3f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Color3f const &>(*arg3));
          }
          //Color4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
          {
              OSG::Color4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Color4f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Color4f);
                  return SWIG_arg;
              }
              OSG::MFColor4f::iterator InsertItor(static_cast<OSG::MFColor4f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFColor4f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Color4f const &>(*arg3));
          }
          //Vec2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
          {
              OSG::Vec2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec2f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Vec2f);
                  return SWIG_arg;
              }
              OSG::MFVec2f::iterator InsertItor(static_cast<OSG::MFVec2f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFVec2f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Vec2f const &>(*arg3));
          }
          //Vec3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
          {
              OSG::Vec3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Vec3f);
                  return SWIG_arg;
              }
              OSG::MFVec3f::iterator InsertItor(static_cast<OSG::MFVec3f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFVec3f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Vec3f const &>(*arg3));
          }
          //Vec4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
          {
              OSG::Vec4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec4f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Vec4f);
                  return SWIG_arg;
              }
              OSG::MFVec4f::iterator InsertItor(static_cast<OSG::MFVec4f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFVec4f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Vec4f const &>(*arg3));
          }
          //Pnt2f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
          {
              OSG::Pnt2f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt2f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Pnt2f);
                  return SWIG_arg;
              }
              OSG::MFPnt2f::iterator InsertItor(static_cast<OSG::MFPnt2f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFPnt2f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Pnt2f const &>(*arg3));
          }
          //Pnt3f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
          {
              OSG::Pnt3f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Pnt3f);
                  return SWIG_arg;
              }
              OSG::MFPnt3f::iterator InsertItor(static_cast<OSG::MFPnt3f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFPnt3f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Pnt3f const &>(*arg3));
          }
          //Pnt4f
          else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
          {
              OSG::Pnt4f *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt4f,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Pnt4f);
                  return SWIG_arg;
              }
              OSG::MFPnt4f::iterator InsertItor(static_cast<OSG::MFPnt4f*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFPnt4f*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Pnt4f const &>(*arg3));
          }
          //Matrix
          else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
          {
              OSG::Matrix *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Matrix,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Matrix);
                  return SWIG_arg;
              }
              OSG::MFMatrix::iterator InsertItor(static_cast<OSG::MFMatrix*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFMatrix*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Matrix const &>(*arg3));
          }
          //Quaternion
          else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
          {
              OSG::Quaternion *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__Quaternion);
                  return SWIG_arg;
              }
              OSG::MFQuaternion::iterator InsertItor(static_cast<OSG::MFQuaternion*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFQuaternion*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::Quaternion const &>(*arg3));
          }
          //StringToUInt32Map
          else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
          {
              OSG::StringToUInt32Map *arg3 = 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
                  return SWIG_arg;
              }
              OSG::MFStringToUInt32Map::iterator InsertItor(static_cast<OSG::MFStringToUInt32Map*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFStringToUInt32Map*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<OSG::StringToUInt32Map const &>(*arg3));
          }
          //FieldContainerRefPtrs
          else if(TheFieldHandle->isPointerField())
          {
              OSG::FieldContainerRefPtr *arg3 = (OSG::FieldContainerRefPtr *) 0 ;
              if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__FieldContainerRefPtr,0)))
              {
                  LUA_BINDING_fail_ptr(L,"insertFieldValue",3,SWIGTYPE_p_OSG__FieldContainerRefPtr);
                  return SWIG_arg;
              }
              //TODO
              switch(TheFieldHandle->getType().getClass())
              {
                  case OSG::FieldType::ChildPtrField:
                  {
                       OSG::ChildPointerMField <OSG::FieldContainer *,
                                   OSG::UnrecordedRefCountPolicy,1>::iterator InsertItor(static_cast<OSG::ChildPointerMField <OSG::FieldContainer *,
                                   OSG::UnrecordedRefCountPolicy,1>*>(TheFieldHandle->getField())->begin());
                       InsertItor += arg4;
                       static_cast<OSG::ChildPointerMField <OSG::FieldContainer *,
                                   OSG::UnrecordedRefCountPolicy,1>*>(TheFieldHandle->getField())->insert(InsertItor, *arg3);
                  }
                       break;
                  case OSG::FieldType::ParentPtrField:
                       lua_pushfstring(L,"Error in insertFieldValue the FieldContainer given is of the ParentPtr class.  Cannot set the value of this field directly");
                       lua_error(L);
                       break;
                  case OSG::FieldType::PtrField:
                  {
                       OSG::MFUnrecFieldContainerPtr::iterator InsertItor(static_cast<OSG::MFUnrecFieldContainerPtr*>(TheFieldHandle->getField())->begin());
                       InsertItor += arg4;
                       static_cast<OSG::MFUnrecFieldContainerPtr*>(TheFieldHandle->getField())->insert(InsertItor, *arg3);
                  }
                       break;
              }
          }
          //bool
          else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
          {
              if(!lua_isboolean(L,3))
              {
                  LUA_BINDING_fail_arg(L,"insertFieldValue",3,"boolean'");
                  return SWIG_arg;
              }
              OSG::MFBool::iterator InsertItor(static_cast<OSG::MFBool*>(TheFieldHandle->getField())->begin());
              InsertItor += arg4;
                  static_cast<OSG::MFBool*>(TheFieldHandle->getField())->insert(InsertItor, static_cast<bool>(lua_toboolean(L, 3)));
          }
          //Volumes
          //Otherwise
          else
          {
              lua_pushfstring(L,"Error in insertFieldValue field of name '%s' on type '%s', could not insert the value of the multi-field because that type is not supported in this biding.",arg2,(*arg1)->getTypeName());
              lua_error(L);
          }

          return SWIG_arg;
    }

SWIGINTERN unsigned int const &std_map_Sl_std_string_Sc_OSG_UInt32_Sg__get(std::map< std::string,OSG::UInt32 > *self,std::string const &key){
                std::map<std::string,unsigned int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_OSG_UInt32_Sg__set(std::map< std::string,OSG::UInt32 > *self,std::string const &key,unsigned int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_OSG_UInt32_Sg__del(std::map< std::string,OSG::UInt32 > *self,std::string const &key){
                std::map<std::string,unsigned int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_OSG_UInt32_Sg__has_key(std::map< std::string,OSG::UInt32 > *self,std::string const &key){
                std::map<std::string,unsigned int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::string const &std_map_Sl_OSG_Int32_Sc_std_string_Sg__get(std::map< OSG::Int32,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_OSG_Int32_Sc_std_string_Sg__set(std::map< OSG::Int32,std::string > *self,int const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_OSG_Int32_Sc_std_string_Sg__del(std::map< OSG::Int32,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_OSG_Int32_Sc_std_string_Sg__has_key(std::map< OSG::Int32,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN OSG::FieldContainerRefPtr OSG_FieldContainerRefPtr_getFCPtr(OSG::FieldContainerRefPtr *self){
            return (*self);
        }
SWIGINTERN void OSG_FieldContainerRefPtr_setName(OSG::FieldContainerRefPtr *self,OSG::Char8 *NewName){
            OSG::AttachmentContainerRefPtr AsAttachmentContainer(OSG::dynamic_pointer_cast<OSG::AttachmentContainer>(*self));
            if(AsAttachmentContainer == NULL)
            {
                throw("Error in setName: must be called on an AttachmentContainer.");
            }
            OSG::setName(AsAttachmentContainer, NewName);
        }
SWIGINTERN OSG::Char8 const *OSG_FieldContainerRefPtr_getName(OSG::FieldContainerRefPtr *self){
            OSG::AttachmentContainerRefPtr AsAttachmentContainer(OSG::dynamic_pointer_cast<OSG::AttachmentContainer>(*self));
            if(AsAttachmentContainer == NULL)
            {
                throw("Error in setName: must be called on an AttachmentContainer.");
            }
            return OSG::getName(AsAttachmentContainer);
        }
SWIGINTERN bool OSG_FieldContainerRefPtr_operator_Se__Se_(OSG::FieldContainerRefPtr *self,OSG::Int32 const &val){
            return (val == 0 && (*self) == NULL);
        }
SWIGINTERN OSG::FieldType::Cardinality OSG_FieldContainerRefPtr_getFieldCardinality(OSG::FieldContainerRefPtr *self,OSG::Char8 *FieldName){
              //Check that the field referenced exists
              OSG::GetFieldHandlePtr TheFieldHandle((*self)->getField(FieldName));
              if( !TheFieldHandle.get() ||
                  !TheFieldHandle->isValid())
              {
                  std::string ErrorString = "Error in getFieldCardinality: there is no field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "'";
                  throw(ErrorString.c_str());
              }
              return TheFieldHandle->getCardinality();
        }
SWIGINTERN OSG::FieldContainerRefPtr OSG_FieldContainerRefPtr_deepClone(OSG::FieldContainerRefPtr *self,std::string const &shareString){
            return OSG::deepClone((*self), shareString);
        }
SWIGINTERN OSG::UInt32 OSG_FieldContainerRefPtr_getFieldSize(OSG::FieldContainerRefPtr *self,OSG::Char8 *FieldName){
              //Check that the field referenced exists
              OSG::GetFieldHandlePtr TheFieldHandle((*self)->getField(FieldName));
              if( !TheFieldHandle.get() ||
                  !TheFieldHandle->isValid())
              {
                  std::string ErrorString = "Error in getFieldSize: there is no field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "'";
                  throw(ErrorString.c_str());
              }
              return TheFieldHandle->size();
        }
SWIGINTERN void OSG_FieldContainerRefPtr_clearField(OSG::FieldContainerRefPtr *self,OSG::Char8 *FieldName){
              //Check that the field referenced exists
              OSG::EditFieldHandlePtr TheFieldHandle((*self)->editField(FieldName));
              if( !TheFieldHandle.get() ||
                  !TheFieldHandle->isValid())
              {
                  std::string ErrorString = "Error in clear there is no field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "'";
                  throw(ErrorString.c_str());
              }
              //Make sure its a MultiField
              if(TheFieldHandle->getCardinality() == OSG::FieldType::SingleField)
              {
                  std::string ErrorString = "Error in clearField: field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "' is a single-field,  clearField: cannot be used on it.";
                  throw(ErrorString.c_str());
              }
              const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
              //string
              if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
              {
                  static_cast<OSG::MFString*>(TheFieldHandle->getField())->clear();
              }
              //Bool
              else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
              {
                      static_cast<OSG::MFBool*>(TheFieldHandle->getField())->clear();
              }
              //UInt8
              else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
              {
                      static_cast<OSG::MFUInt8*>(TheFieldHandle->getField())->clear();
              }
              //UInt16
              else if(FieldContentType == OSG::FieldTraits<OSG::UInt16>::getType() )
              {
                      static_cast<OSG::MFUInt16*>(TheFieldHandle->getField())->clear();
              }
              //UInt32
              else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType()) 
              {
                      static_cast<OSG::MFUInt32*>(TheFieldHandle->getField())->clear();
              }
              //UInt64
              else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
              {
                      static_cast<OSG::MFUInt64*>(TheFieldHandle->getField())->clear();
              }
              //BitVector
              else if(FieldContentType == OSG::FieldTraits<OSG::BitVector,1>::getType() )
              {
                      static_cast<OSG::MFBitVector*>(TheFieldHandle->getField())->clear();
              }
              //GLenum
              else if(FieldContentType == OSG::FieldTraits<GLenum,1>::getType() )
              {
                      static_cast<OSG::MFGLenum*>(TheFieldHandle->getField())->clear();
              }
              //Int8
              else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
              {
                      static_cast<OSG::MFInt8*>(TheFieldHandle->getField())->clear();
              }
              //Int16
              else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
              {
                      static_cast<OSG::MFInt16*>(TheFieldHandle->getField())->clear();
              }
              //Int32
              else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
              {
                      static_cast<OSG::MFInt32*>(TheFieldHandle->getField())->clear();
              }
              //Int64
              else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
              {
                      static_cast<OSG::MFInt64*>(TheFieldHandle->getField())->clear();
              }
              //Real16
              else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
              {
                      static_cast<OSG::MFReal16*>(TheFieldHandle->getField())->clear();
              }
              //Real32
              else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
              {
                      static_cast<OSG::MFReal32*>(TheFieldHandle->getField())->clear();
              }
              //Fixed32
              else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
              {
                      static_cast<OSG::MFFixed32*>(TheFieldHandle->getField())->clear();
              }
              //Time
              else if(FieldContentType == OSG::FieldTraits<OSG::Time,1>::getType() )
              {
                      static_cast<OSG::MFTime*>(TheFieldHandle->getField())->clear();
              }
              //Real64
              else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
              {
                      static_cast<OSG::MFReal64*>(TheFieldHandle->getField())->clear();
              }
              //Color3f
              else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
              {
                      static_cast<OSG::MFColor3f*>(TheFieldHandle->getField())->clear();
              }
              //Color4f
              else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
              {
                      static_cast<OSG::MFColor4f*>(TheFieldHandle->getField())->clear();
              }
              //Vec2f
              else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
              {
                      static_cast<OSG::MFVec2f*>(TheFieldHandle->getField())->clear();
              }
              //Vec3f
              else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
              {
                      static_cast<OSG::MFVec3f*>(TheFieldHandle->getField())->clear();
              }
              //Vec4f
              else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
              {
                      static_cast<OSG::MFVec4f*>(TheFieldHandle->getField())->clear();
              }
              //Pnt2f
              else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
              {
                      static_cast<OSG::MFPnt2f*>(TheFieldHandle->getField())->clear();
              }
              //Pnt3f
              else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
              {
                      static_cast<OSG::MFPnt3f*>(TheFieldHandle->getField())->clear();
              }
              //Pnt4f
              else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
              {
                      static_cast<OSG::MFPnt4f*>(TheFieldHandle->getField())->clear();
              }
              //Matrix
              else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
              {
                      static_cast<OSG::MFMatrix*>(TheFieldHandle->getField())->clear();
              }
              //Quaternion
              else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
              {
                      static_cast<OSG::MFQuaternion*>(TheFieldHandle->getField())->clear();
              }
              //StringToUInt32Map
              else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
              {
                      static_cast<OSG::MFStringToUInt32Map*>(TheFieldHandle->getField())->clear();
              }
              //FieldContainerRefPtrs
              else if(TheFieldHandle->isPointerField())
              {
                  switch(TheFieldHandle->getType().getClass())
                  {
                      case OSG::FieldType::ChildPtrField:
                           static_cast<OSG::ChildPointerMField <OSG::FieldContainer *,
                                       OSG::UnrecordedRefCountPolicy,1>*>(TheFieldHandle->getField())->clear();
                           break;
                      case OSG::FieldType::ParentPtrField:
              {
                  std::string ErrorString = "Error in clearField the FieldContainer given is of the ParentPtr class.  Cannot set the value of this field directly";
                           throw(ErrorString.c_str());
              }
                           break;
                      case OSG::FieldType::PtrField:
                           static_cast<OSG::MFUnrecFieldContainerPtr*>(TheFieldHandle->getField())->clear();
                           break;
                  }
              }
              //Volumes
              //Otherwise
              else
              {
                  std::string ErrorString = "Error in clearField: field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "' There is no clear method defined for this field type.";
                  throw(ErrorString.c_str());
              }
        }
SWIGINTERN void OSG_FieldContainerRefPtr_removeFieldValue(OSG::FieldContainerRefPtr *self,OSG::Char8 *FieldName,OSG::UInt32 Index){
              OSG::EditFieldHandlePtr TheFieldHandle((*self)->editField(FieldName));
              if( !TheFieldHandle.get() ||
                  !TheFieldHandle->isValid())
              {
                  std::string ErrorString = "Error in removeFieldValue: there is no field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "'";
                  throw(ErrorString.c_str());
              }
              if(TheFieldHandle->getCardinality() == OSG::FieldType::SingleField)
              {
                  std::string ErrorString = "Error in removeFieldValue: field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "' is a single-field,  removeFieldValue cannot be used on it.";
                  throw(ErrorString.c_str());
              }
              //Make sure the index is in range
              if(Index >= TheFieldHandle->size())
              {
                  std::string ErrorString = "Error in removeFieldValue: Index out of range.  Attempted to remove index: .";
                  //ErrorString += ;
                  //ErrorString += ", where the size is ";
                  //ErrorString += ;
                  throw("Error in removeFieldValue: Index out of range.  Attempted to remove index: .");
              }
              const OSG::DataType& FieldContentType(TheFieldHandle->getType().getContentType());
              //string
              if(FieldContentType == OSG::FieldTraits<std::string>::getType() )
              {
                  static_cast<OSG::MFString*>(TheFieldHandle->getField())->erase(Index);
              }
              //UInt8
              else if(FieldContentType == OSG::FieldTraits<OSG::UInt8>::getType() )
              {
                      static_cast<OSG::MFUInt8*>(TheFieldHandle->getField())->erase(Index);
              }
              //UInt32
              else if(FieldContentType == OSG::FieldTraits<OSG::UInt32>::getType()) 
              {
                      static_cast<OSG::MFUInt32*>(TheFieldHandle->getField())->erase(Index);
              }
              //UInt64
              else if(FieldContentType == OSG::FieldTraits<OSG::UInt64>::getType() )
              {
                      static_cast<OSG::MFUInt64*>(TheFieldHandle->getField())->erase(Index);
              }
              //BitVector
              else if(FieldContentType == OSG::FieldTraits<OSG::BitVector, 1>::getType() )
              {
                      static_cast<OSG::MFBitVector*>(TheFieldHandle->getField())->erase(Index);
              }
              //GLenum
              else if(FieldContentType == OSG::FieldTraits<GLenum, 1>::getType() )
              {
                      static_cast<OSG::MFGLenum*>(TheFieldHandle->getField())->erase(Index);
              }
              //Int8
              else if(FieldContentType == OSG::FieldTraits<OSG::Int8>::getType() )
              {
                      static_cast<OSG::MFInt8*>(TheFieldHandle->getField())->erase(Index);
              }
              //Int16
              else if(FieldContentType == OSG::FieldTraits<OSG::Int16>::getType() )
              {
                      static_cast<OSG::MFInt16*>(TheFieldHandle->getField())->erase(Index);
              }
              //Int32
              else if(FieldContentType == OSG::FieldTraits<OSG::Int32>::getType() )
              {
                      static_cast<OSG::MFInt32*>(TheFieldHandle->getField())->erase(Index);
              }
              //Int64
              else if(FieldContentType == OSG::FieldTraits<OSG::Int64>::getType() )
              {
                      static_cast<OSG::MFInt64*>(TheFieldHandle->getField())->erase(Index);
              }
              //Real16
              else if(FieldContentType == OSG::FieldTraits<OSG::Real16>::getType() )
              {
                      static_cast<OSG::MFReal16*>(TheFieldHandle->getField())->erase(Index);
              }
              //Real32
              else if(FieldContentType == OSG::FieldTraits<OSG::Real32>::getType() )
              {
                      static_cast<OSG::MFReal32*>(TheFieldHandle->getField())->erase(Index);
              }
              //Fixed32
              else if(FieldContentType == OSG::FieldTraits<OSG::Fixed32>::getType() )
              {
                      static_cast<OSG::MFFixed32*>(TheFieldHandle->getField())->erase(Index);
              }
              //Time
              else if(FieldContentType == OSG::FieldTraits<OSG::Time, 1>::getType() )
              {
                      static_cast<OSG::MFTime*>(TheFieldHandle->getField())->erase(Index);
              }
              //Real64
              else if(FieldContentType == OSG::FieldTraits<OSG::Real64>::getType() )
              {
                      static_cast<OSG::MFReal64*>(TheFieldHandle->getField())->erase(Index);
              }
              //Color3f
              else if(FieldContentType == OSG::FieldTraits<OSG::Color3f>::getType() )
              {
                      static_cast<OSG::MFColor3f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Color4f
              else if(FieldContentType == OSG::FieldTraits<OSG::Color4f>::getType() )
              {
                      static_cast<OSG::MFColor4f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Vec2f
              else if(FieldContentType == OSG::FieldTraits<OSG::Vec2f>::getType() )
              {
                      static_cast<OSG::MFVec2f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Vec3f
              else if(FieldContentType == OSG::FieldTraits<OSG::Vec3f>::getType() )
              {
                      static_cast<OSG::MFVec3f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Vec4f
              else if(FieldContentType == OSG::FieldTraits<OSG::Vec4f>::getType() )
              {
                      static_cast<OSG::MFVec4f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Pnt2f
              else if(FieldContentType == OSG::FieldTraits<OSG::Pnt2f>::getType() )
              {
                      static_cast<OSG::MFPnt2f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Pnt3f
              else if(FieldContentType == OSG::FieldTraits<OSG::Pnt3f>::getType() )
              {
                      static_cast<OSG::MFPnt3f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Pnt4f
              else if(FieldContentType == OSG::FieldTraits<OSG::Pnt4f>::getType() )
              {
                      static_cast<OSG::MFPnt4f*>(TheFieldHandle->getField())->erase(Index);
              }
              //Matrix
              else if(FieldContentType == OSG::FieldTraits<OSG::Matrix>::getType() )
              {
                      static_cast<OSG::MFMatrix*>(TheFieldHandle->getField())->erase(Index);
              }
              //Quaternion
              else if(FieldContentType == OSG::FieldTraits<OSG::Quaternion>::getType() )
              {
                      static_cast<OSG::MFQuaternion*>(TheFieldHandle->getField())->erase(Index);
              }
              //StringToUInt32Map
              else if(FieldContentType == OSG::FieldTraits<OSG::StringToUInt32Map>::getType() )
              {
                      static_cast<OSG::MFStringToUInt32Map*>(TheFieldHandle->getField())->erase(Index);
              }
              //FieldContainerRefPtrs
              else if(TheFieldHandle->isPointerField())
              {
                  //TODO
                  switch(TheFieldHandle->getType().getClass())
                  {
                      case OSG::FieldType::ChildPtrField:
                           static_cast<OSG::ChildPointerMField <OSG::FieldContainer *,
                                       OSG::UnrecordedRefCountPolicy,1>*>(TheFieldHandle->getField())->erase(Index);
                           break;
                      case OSG::FieldType::ParentPtrField:
              {
                  std::string ErrorString = "Error in removeFieldValue the FieldContainer given is of the ParentPtr class.  Cannot set the value of this field directly";
                  throw(ErrorString.c_str());
              }
                           break;
                      case OSG::FieldType::PtrField:
                           static_cast<OSG::MFUnrecFieldContainerPtr*>(TheFieldHandle->getField())->erase(Index);
                           break;
                  }
              }
              //bool
              else if(FieldContentType == OSG::FieldTraits<bool, 2>::getType() )
              {
                      static_cast<OSG::MFBool*>(TheFieldHandle->getField())->erase(Index);
              }
              //Volumes
              //Otherwise
              else
              {
                  std::string ErrorString = "Error in clear field of name '";
                  ErrorString += FieldName;
                  ErrorString += "' on type '";
                  ErrorString += (*self)->getTypeName();
                  ErrorString += "' There is no clear method defined for this field type.";
                  throw(ErrorString.c_str());
              }
        }
SWIGINTERN OSG::AttachmentRefPtr OSG_AttachmentRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Attachment>(oIn);
        }
SWIGINTERN OSG::AttachmentContainerRefPtr OSG_AttachmentContainerRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::AttachmentContainer>(oIn);
        }
SWIGINTERN OSG::NodeCoreRefPtr OSG_NodeCoreRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::NodeCore>(oIn);
        }
SWIGINTERN OSG::GeometryRefPtr OSG_GeometryRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Geometry>(oIn);
        }
SWIGINTERN OSG::NodeRefPtr OSG_NodeRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Node>(oIn);
        }
SWIGINTERN OSG::ViewportRefPtr OSG_ViewportRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Viewport>(oIn);
        }
SWIGINTERN OSG::CameraRefPtr OSG_CameraRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Camera>(oIn);
        }
SWIGINTERN bool OSG_Camera_calcViewRay__SWIG_0(OSG::Camera *self,OSG::Line &line,OSG::Int32 x,OSG::Int32 y,OSG::ViewportRefPtr const port,OSG::Real32 *t=NULL){
            return (self)->calcViewRay(line, x, y, (*port), t);
        }
SWIGINTERN OSG::ImageRefPtr OSG_ImageRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Image>(oIn);
        }
SWIGINTERN OSG::TextureObjChunkRefPtr OSG_TextureObjChunkRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::TextureObjChunk>(oIn);
        }
SWIGINTERN OSG::EventDetailsRefPtr OSG_EventDetailsRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::EventDetails>(oIn);
        }
SWIGINTERN OSG::GenericEventDetailsRefPtr OSG_GenericEventDetailsRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::GenericEventDetails>(oIn);
        }
SWIGINTERN OSG::GenericEventDetailsRefPtr OSG_GenericEventDetails_create__SWIG_0(OSG::FieldContainerRefPtr Source,OSG::Time TimeStamp,std::map< std::string,OSG::UInt32 > const &strToIntMap=std::map< std::string,OSG::UInt32 >()){
            OSG::GenericEventDetailsRecPtr event(OSG::GenericEventDetails::create(Source,TimeStamp,strToIntMap));
            return event;
        }
SWIGINTERN OSG::ActivityRefPtr OSG_ActivityRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Activity>(oIn);
        }
SWIGINTERN OSG::LuaActivityRefPtr OSG_LuaActivityRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::LuaActivity>(oIn);
        }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string()\n"
    "    std::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_Color3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Color3f",0,0)
  result = (OSG::Color3f *)new OSG::Color3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = 0 ;
  OSG::Color3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Color3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Color3f",1,"OSG::Color3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("new_Color3f",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = (OSG::Color3f *)new OSG::Color3f((OSG::Color3f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color3f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Color3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Color3f",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Color3f",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Color3f",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::Color3f",3,"OSG::Real32");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  result = (OSG::Color3f *)new OSG::Color3f(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color3f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color3f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color3f__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Color3f__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Color3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Color3f()\n"
    "    OSG::Color3f(OSG::Color3f const &)\n"
    "    OSG::Color3f(OSG::Real32,OSG::Real32,OSG::Real32)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f_clear(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"OSG::Color3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_clear",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setValuesRGB(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  
  SWIG_check_num_args("setValuesRGB",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesRGB",1,"OSG::Color3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesRGB",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesRGB",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesRGB",4,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_setValuesRGB",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  (arg1)->setValuesRGB(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  
  SWIG_check_num_args("setValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesHSV",1,"OSG::Color3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesHSV",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesHSV",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesHSV",4,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_setValuesHSV",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  (arg1)->setValuesHSV(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setRandom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  
  SWIG_check_num_args("setRandom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRandom",1,"OSG::Color3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_setRandom",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  (arg1)->setRandom();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setRGB(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("setRGB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRGB",1,"OSG::Color3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setRGB",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_setRGB",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->setRGB(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Color3f *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValue",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_setValue",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getRGB(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getRGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRGB",1,"OSG::Color3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_getRGB",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = (OSG::UInt32)((OSG::Color3f const *)arg1)->getRGB();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  
  SWIG_check_num_args("getValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesHSV",1,"OSG::Color3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesHSV",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValuesHSV",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValuesHSV",4,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",4,SWIGTYPE_p_float);
  }
  
  ((OSG::Color3f const *)arg1)->getValuesHSV(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_red(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("red",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("red",1,"OSG::Color3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_red",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = (OSG::Real32)((OSG::Color3f const *)arg1)->red();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_green(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("green",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("green",1,"OSG::Color3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_green",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = (OSG::Real32)((OSG::Color3f const *)arg1)->green();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_blue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("blue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blue",1,"OSG::Color3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_blue",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = (OSG::Real32)((OSG::Color3f const *)arg1)->blue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___mul(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color3f result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Color3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___mul",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color3f const *)arg1)->operator *(arg2);
  {
    OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color3f result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Color3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___div",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color3f const *)arg1)->operator /(arg2);
  {
    OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color3f result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Color3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator +",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___add",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color3f const *)arg1)->operator +(arg2);
  {
    OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color3f result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Color3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator -",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___sub",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color3f const *)arg1)->operator -(arg2);
  {
    OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Color3f *arg2 = 0 ;
  OSG::Color3f result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Color3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Color3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___add",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___add",2,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = ((OSG::Color3f const *)arg1)->operator +((OSG::Color3f const &)*arg2);
  {
    OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Color3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color3f___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color3f___add__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color3f___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator +(OSG::Color3f const *,OSG::Real32 const)\n"
    "    operator +(OSG::Color3f const *,OSG::Color3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Color3f *arg2 = 0 ;
  OSG::Color3f result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Color3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Color3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___sub",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___sub",2,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = ((OSG::Color3f const *)arg1)->operator -((OSG::Color3f const &)*arg2);
  {
    OSG::Color3f * resultptr = new OSG::Color3f((const OSG::Color3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Color3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color3f___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color3f___sub__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color3f___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -(OSG::Color3f const *,OSG::Real32 const)\n"
    "    operator -(OSG::Color3f const *,OSG::Color3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f_equals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Color3f *arg2 = 0 ;
  OSG::Real32 arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"OSG::Color3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"OSG::Color3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_equals",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f_equals",2,SWIGTYPE_p_OSG__Color3f);
  }
  
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  result = (bool)((OSG::Color3f const *)arg1)->equals((OSG::Color3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___lt(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Color3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"OSG::Color3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"OSG::Color3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___lt",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___lt",2,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = (bool)((OSG::Color3f const *)arg1)->operator <((OSG::Color3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color3f *arg1 = (OSG::Color3f *) 0 ;
  OSG::Color3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Color3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Color3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___eq",1,SWIGTYPE_p_OSG__Color3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color3f,0))){
    SWIG_fail_ptr("Color3f___eq",2,SWIGTYPE_p_OSG__Color3f);
  }
  
  result = (bool)((OSG::Color3f const *)arg1)->operator ==((OSG::Color3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color3f(void *obj) {
OSG::Color3f *arg1 = (OSG::Color3f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Color3f_methods[] = {
    {"clear", _wrap_Color3f_clear}, 
    {"setValuesRGB", _wrap_Color3f_setValuesRGB}, 
    {"setValuesHSV", _wrap_Color3f_setValuesHSV}, 
    {"setRandom", _wrap_Color3f_setRandom}, 
    {"setRGB", _wrap_Color3f_setRGB}, 
    {"setValue", _wrap_Color3f_setValue}, 
    {"getRGB", _wrap_Color3f_getRGB}, 
    {"getValuesHSV", _wrap_Color3f_getValuesHSV}, 
    {"red", _wrap_Color3f_red}, 
    {"green", _wrap_Color3f_green}, 
    {"blue", _wrap_Color3f_blue}, 
    {"__mul", _wrap_Color3f___mul}, 
    {"__div", _wrap_Color3f___div}, 
    {"__add", _wrap_Color3f___add}, 
    {"__sub", _wrap_Color3f___sub}, 
    {"equals", _wrap_Color3f_equals}, 
    {"__lt", _wrap_Color3f___lt}, 
    {"__eq", _wrap_Color3f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Color3f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Color3f_bases[] = {0};
static const char *swig_OSG_Color3f_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Color3f = { "Color3f", &SWIGTYPE_p_OSG__Color3f,_wrap_new_Color3f, swig_delete_Color3f, swig_OSG_Color3f_methods, swig_OSG_Color3f_attributes, swig_OSG_Color3f_bases, swig_OSG_Color3f_base_names };

static int _wrap_new_Color4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Color4f",0,0)
  result = (OSG::Color4f *)new OSG::Color4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = 0 ;
  OSG::Color4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Color4f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Color4f",1,"OSG::Color4f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("new_Color4f",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (OSG::Color4f *)new OSG::Color4f((OSG::Color4f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color4f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Color4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Color4f",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Color4f",1,"OSG::Real32 const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Color4f",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::Color4f",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::Color4f",4,"OSG::Real32 const");
  arg1 = (OSG::Real32 const)lua_tonumber(L, 1);
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  result = (OSG::Color4f *)new OSG::Color4f(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color4f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color4f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color4f__SWIG_1(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color4f__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Color4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Color4f()\n"
    "    OSG::Color4f(OSG::Color4f const &)\n"
    "    OSG::Color4f(OSG::Real32 const,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f_clear(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"OSG::Color4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_clear",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setValuesRGBA(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setValuesRGBA",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesRGBA",1,"OSG::Color4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesRGBA",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesRGBA",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesRGBA",4,"OSG::Real32 const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValuesRGBA",5,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_setValuesRGBA",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  arg5 = (OSG::Real32 const)lua_tonumber(L, 5);
  (arg1)->setValuesRGBA(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  
  SWIG_check_num_args("setValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesHSV",1,"OSG::Color4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesHSV",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesHSV",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesHSV",4,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_setValuesHSV",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  (arg1)->setValuesHSV(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setRandom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  
  SWIG_check_num_args("setRandom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRandom",1,"OSG::Color4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_setRandom",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  (arg1)->setRandom();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setRGBA(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("setRGBA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRGBA",1,"OSG::Color4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setRGBA",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_setRGBA",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->setRGBA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Color4f *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValue",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_setValue",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_getRGBA(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getRGBA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRGBA",1,"OSG::Color4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_getRGBA",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (OSG::UInt32)((OSG::Color4f const *)arg1)->getRGBA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_getValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  
  SWIG_check_num_args("getValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesHSV",1,"OSG::Color4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesHSV",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValuesHSV",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValuesHSV",4,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",4,SWIGTYPE_p_float);
  }
  
  ((OSG::Color4f const *)arg1)->getValuesHSV(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_red(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("red",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("red",1,"OSG::Color4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_red",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (OSG::Real32)((OSG::Color4f const *)arg1)->red();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_green(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("green",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("green",1,"OSG::Color4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_green",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (OSG::Real32)((OSG::Color4f const *)arg1)->green();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_blue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("blue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blue",1,"OSG::Color4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_blue",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (OSG::Real32)((OSG::Color4f const *)arg1)->blue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_alpha(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("alpha",1,"OSG::Color4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_alpha",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (OSG::Real32)((OSG::Color4f const *)arg1)->alpha();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___mul(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color4f result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Color4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___mul",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color4f const *)arg1)->operator *(arg2);
  {
    OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color4f result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Color4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___div",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color4f const *)arg1)->operator /(arg2);
  {
    OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color4f result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Color4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator +",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___add",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color4f const *)arg1)->operator +(arg2);
  {
    OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Color4f result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Color4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator -",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___sub",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = ((OSG::Color4f const *)arg1)->operator -(arg2);
  {
    OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Color4f *arg2 = 0 ;
  OSG::Color4f result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Color4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Color4f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___add",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___add",2,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = ((OSG::Color4f const *)arg1)->operator +((OSG::Color4f const &)*arg2);
  {
    OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color4f___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color4f___add__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color4f___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator +(OSG::Color4f const *,OSG::Real32 const)\n"
    "    operator +(OSG::Color4f const *,OSG::Color4f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Color4f *arg2 = 0 ;
  OSG::Color4f result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Color4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Color4f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___sub",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___sub",2,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = ((OSG::Color4f const *)arg1)->operator -((OSG::Color4f const &)*arg2);
  {
    OSG::Color4f * resultptr = new OSG::Color4f((const OSG::Color4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Color4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color4f___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Color4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color4f___sub__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color4f___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -(OSG::Color4f const *,OSG::Real32 const)\n"
    "    operator -(OSG::Color4f const *,OSG::Color4f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f_equals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Color4f *arg2 = 0 ;
  OSG::Real32 arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"OSG::Color4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"OSG::Color4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_equals",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f_equals",2,SWIGTYPE_p_OSG__Color4f);
  }
  
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  result = (bool)((OSG::Color4f const *)arg1)->equals((OSG::Color4f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___lt(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Color4f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"OSG::Color4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"OSG::Color4f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___lt",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___lt",2,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (bool)((OSG::Color4f const *)arg1)->operator <((OSG::Color4f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Color4f *arg1 = (OSG::Color4f *) 0 ;
  OSG::Color4f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Color4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Color4f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___eq",1,SWIGTYPE_p_OSG__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Color4f,0))){
    SWIG_fail_ptr("Color4f___eq",2,SWIGTYPE_p_OSG__Color4f);
  }
  
  result = (bool)((OSG::Color4f const *)arg1)->operator ==((OSG::Color4f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color4f(void *obj) {
OSG::Color4f *arg1 = (OSG::Color4f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Color4f_methods[] = {
    {"clear", _wrap_Color4f_clear}, 
    {"setValuesRGBA", _wrap_Color4f_setValuesRGBA}, 
    {"setValuesHSV", _wrap_Color4f_setValuesHSV}, 
    {"setRandom", _wrap_Color4f_setRandom}, 
    {"setRGBA", _wrap_Color4f_setRGBA}, 
    {"setValue", _wrap_Color4f_setValue}, 
    {"getRGBA", _wrap_Color4f_getRGBA}, 
    {"getValuesHSV", _wrap_Color4f_getValuesHSV}, 
    {"red", _wrap_Color4f_red}, 
    {"green", _wrap_Color4f_green}, 
    {"blue", _wrap_Color4f_blue}, 
    {"alpha", _wrap_Color4f_alpha}, 
    {"__mul", _wrap_Color4f___mul}, 
    {"__div", _wrap_Color4f___div}, 
    {"__add", _wrap_Color4f___add}, 
    {"__sub", _wrap_Color4f___sub}, 
    {"equals", _wrap_Color4f_equals}, 
    {"__lt", _wrap_Color4f___lt}, 
    {"__eq", _wrap_Color4f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Color4f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Color4f_bases[] = {0};
static const char *swig_OSG_Color4f_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Color4f = { "Color4f", &SWIGTYPE_p_OSG__Color4f,_wrap_new_Color4f, swig_delete_Color4f, swig_OSG_Color4f_methods, swig_OSG_Color4f_attributes, swig_OSG_Color4f_bases, swig_OSG_Color4f_base_names };

static int _wrap_new_Pnt2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt2f",0,0)
  result = (OSG::Pnt2f *)new OSG::Pnt2f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f::PointType *arg1 = 0 ;
  OSG::Pnt2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt2f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Pnt2f",1,"OSG::Pnt2f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("new_Pnt2f",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Pnt2f *)new OSG::Pnt2f((OSG::Pnt2f::PointType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f::VectorType *arg1 = 0 ;
  OSG::Pnt2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt2f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Pnt2f",1,"OSG::Pnt2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("new_Pnt2f",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Pnt2f *)new OSG::Pnt2f((OSG::Pnt2f::VectorType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f::ValueType arg1 ;
  OSG::Pnt2f::ValueType arg2 ;
  OSG::Pnt2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt2f",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Pnt2f",1,"OSG::Pnt2f::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Pnt2f",2,"OSG::Pnt2f::ValueType const");
  arg1 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 1);
  arg2 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 2);
  result = (OSG::Pnt2f *)new OSG::Pnt2f(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f::ValueType arg1 ;
  OSG::Pnt2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt2f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Pnt2f",1,"OSG::Pnt2f::ValueType const");
  arg1 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 1);
  result = (OSG::Pnt2f *)new OSG::Pnt2f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pnt2f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt2f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt2f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pnt2f__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Pnt2f__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Pnt2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Pnt2f()\n"
    "    OSG::Pnt2f(OSG::Pnt2f::PointType const &)\n"
    "    OSG::Pnt2f(OSG::Pnt2f::VectorType const &)\n"
    "    OSG::Pnt2f(OSG::Pnt2f::ValueType const,OSG::Pnt2f::ValueType const)\n"
    "    OSG::Pnt2f(OSG::Pnt2f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt2f_setValueFromCString(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueFromCString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueFromCString",1,"OSG::Pnt2f *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValueFromCString",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_setValueFromCString",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueFromCString(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_isZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  bool result;
  
  SWIG_check_num_args("isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isZero",1,"OSG::Pnt2f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_isZero",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (bool)((OSG::Pnt2f const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_negate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"OSG::Pnt2f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_negate",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_equals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::PointType *arg2 = 0 ;
  OSG::Pnt2f::ValueType arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"OSG::Pnt2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"OSG::Pnt2f::PointType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"OSG::Pnt2f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_equals",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_equals",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg3 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 3);
  result = (bool)((OSG::Pnt2f const *)arg1)->equals((OSG::Pnt2f::PointType const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::VectorType *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"OSG::Pnt2f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_subZero",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Pnt2f::VectorType *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec2f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_dist(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::PointType *arg2 = 0 ;
  OSG::Pnt2f::ValueType result;
  
  SWIG_check_num_args("dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist",1,"OSG::Pnt2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist",2,"OSG::Pnt2f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_dist",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_dist",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Pnt2f::ValueType)((OSG::Pnt2f const *)arg1)->dist((OSG::Pnt2f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_dist2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::PointType *arg2 = 0 ;
  OSG::Pnt2f::ValueType result;
  
  SWIG_check_num_args("dist2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist2",1,"OSG::Pnt2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist2",2,"OSG::Pnt2f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_dist2",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_dist2",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Pnt2f::ValueType)((OSG::Pnt2f const *)arg1)->dist2((OSG::Pnt2f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_maxValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::ValueType result;
  
  SWIG_check_num_args("maxValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxValue",1,"OSG::Pnt2f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_maxValue",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Pnt2f::ValueType)((OSG::Pnt2f const *)arg1)->maxValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_setValues(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::ValueType arg2 ;
  OSG::Pnt2f::ValueType arg3 ;
  
  SWIG_check_num_args("setValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValues",1,"OSG::Pnt2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValues",2,"OSG::Pnt2f::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValues",3,"OSG::Pnt2f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_setValues",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg2 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 3);
  (arg1)->setValues(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_x(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::ValueType result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"OSG::Pnt2f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_x",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Pnt2f::ValueType)((OSG::Pnt2f const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_y(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::ValueType result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"OSG::Pnt2f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f_y",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Pnt2f::ValueType)((OSG::Pnt2f const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::PointType *arg2 = 0 ;
  OSG::Pnt2f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Pnt2f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f___sub",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f___sub",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = ((OSG::Pnt2f const *)arg1)->operator -((OSG::Pnt2f::PointType const &)*arg2);
  {
    OSG::Pnt2f::VectorType * resultptr = new OSG::Pnt2f::VectorType((const OSG::Pnt2f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f___add(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::VectorType *arg2 = 0 ;
  OSG::Pnt2f::PointType result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Pnt2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Pnt2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f___add",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Pnt2f___add",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = ((OSG::Pnt2f const *)arg1)->operator +((OSG::Pnt2f::VectorType const &)*arg2);
  {
    OSG::Pnt2f::PointType * resultptr = new OSG::Pnt2f::PointType((const OSG::Pnt2f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::VectorType *arg2 = 0 ;
  OSG::Pnt2f::PointType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Pnt2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f___sub",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Pnt2f___sub",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = ((OSG::Pnt2f const *)arg1)->operator -((OSG::Pnt2f::VectorType const &)*arg2);
  {
    OSG::Pnt2f::PointType * resultptr = new OSG::Pnt2f::PointType((const OSG::Pnt2f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt2f___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt2f___sub__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Pnt2f___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -(OSG::Pnt2f const *,OSG::Pnt2f::PointType const &)\n"
    "    operator -(OSG::Pnt2f const *,OSG::Pnt2f::VectorType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt2f___mul(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::ValueType arg2 ;
  OSG::Pnt2f::PointType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Pnt2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Pnt2f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f___mul",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg2 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Pnt2f const *)arg1)->operator *(arg2);
  {
    OSG::Pnt2f::PointType * resultptr = new OSG::Pnt2f::PointType((const OSG::Pnt2f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::ValueType arg2 ;
  OSG::Pnt2f::PointType result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Pnt2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Pnt2f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f___div",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  arg2 = (OSG::Pnt2f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Pnt2f const *)arg1)->operator /(arg2);
  {
    OSG::Pnt2f::PointType * resultptr = new OSG::Pnt2f::PointType((const OSG::Pnt2f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f___unm(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt2f *arg1 = (OSG::Pnt2f *) 0 ;
  OSG::Pnt2f::PointType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt2f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Pnt2f___unm",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (arg1)->operator -();
  {
    OSG::Pnt2f::PointType * resultptr = new OSG::Pnt2f::PointType((const OSG::Pnt2f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pnt2f(void *obj) {
OSG::Pnt2f *arg1 = (OSG::Pnt2f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Pnt2f_methods[] = {
    {"setValueFromCString", _wrap_Pnt2f_setValueFromCString}, 
    {"isZero", _wrap_Pnt2f_isZero}, 
    {"negate", _wrap_Pnt2f_negate}, 
    {"equals", _wrap_Pnt2f_equals}, 
    {"subZero", _wrap_Pnt2f_subZero}, 
    {"dist", _wrap_Pnt2f_dist}, 
    {"dist2", _wrap_Pnt2f_dist2}, 
    {"maxValue", _wrap_Pnt2f_maxValue}, 
    {"setValues", _wrap_Pnt2f_setValues}, 
    {"x", _wrap_Pnt2f_x}, 
    {"y", _wrap_Pnt2f_y}, 
    {"__add", _wrap_Pnt2f___add}, 
    {"__sub", _wrap_Pnt2f___sub}, 
    {"__mul", _wrap_Pnt2f___mul}, 
    {"__div", _wrap_Pnt2f___div}, 
    {"__unm", _wrap_Pnt2f___unm}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Pnt2f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Pnt2f_bases[] = {0};
static const char *swig_OSG_Pnt2f_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Pnt2f = { "Pnt2f", &SWIGTYPE_p_OSG__Pnt2f,_wrap_new_Pnt2f, swig_delete_Pnt2f, swig_OSG_Pnt2f_methods, swig_OSG_Pnt2f_attributes, swig_OSG_Pnt2f_bases, swig_OSG_Pnt2f_base_names };

static int _wrap_new_Pnt3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt3f",0,0)
  result = (OSG::Pnt3f *)new OSG::Pnt3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f::PointType *arg1 = 0 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Pnt3f",1,"OSG::Pnt3f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Pnt3f",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f *)new OSG::Pnt3f((OSG::Pnt3f::PointType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f::VectorType *arg1 = 0 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Pnt3f",1,"OSG::Pnt3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Pnt3f",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Pnt3f *)new OSG::Pnt3f((OSG::Pnt3f::VectorType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f::ValueType arg1 ;
  OSG::Pnt3f::ValueType arg2 ;
  OSG::Pnt3f::ValueType arg3 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt3f",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Pnt3f",1,"OSG::Pnt3f::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Pnt3f",2,"OSG::Pnt3f::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::Pnt3f",3,"OSG::Pnt3f::ValueType const");
  arg1 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 1);
  arg2 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 3);
  result = (OSG::Pnt3f *)new OSG::Pnt3f(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f::ValueType arg1 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt3f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Pnt3f",1,"OSG::Pnt3f::ValueType const");
  arg1 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 1);
  result = (OSG::Pnt3f *)new OSG::Pnt3f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pnt3f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt3f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt3f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pnt3f__SWIG_4(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Pnt3f__SWIG_3(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Pnt3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Pnt3f()\n"
    "    OSG::Pnt3f(OSG::Pnt3f::PointType const &)\n"
    "    OSG::Pnt3f(OSG::Pnt3f::VectorType const &)\n"
    "    OSG::Pnt3f(OSG::Pnt3f::ValueType const,OSG::Pnt3f::ValueType const,OSG::Pnt3f::ValueType const)\n"
    "    OSG::Pnt3f(OSG::Pnt3f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt3f_setValueFromCString(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueFromCString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueFromCString",1,"OSG::Pnt3f *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValueFromCString",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_setValueFromCString",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueFromCString(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_isZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  bool result;
  
  SWIG_check_num_args("isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isZero",1,"OSG::Pnt3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_isZero",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Pnt3f const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_negate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"OSG::Pnt3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_negate",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_equals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::PointType *arg2 = 0 ;
  OSG::Pnt3f::ValueType arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"OSG::Pnt3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"OSG::Pnt3f::PointType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"OSG::Pnt3f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_equals",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_equals",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg3 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 3);
  result = (bool)((OSG::Pnt3f const *)arg1)->equals((OSG::Pnt3f::PointType const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::VectorType *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"OSG::Pnt3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_subZero",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f::VectorType *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_dist(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::PointType *arg2 = 0 ;
  OSG::Pnt3f::ValueType result;
  
  SWIG_check_num_args("dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist",1,"OSG::Pnt3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist",2,"OSG::Pnt3f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_dist",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_dist",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f::ValueType)((OSG::Pnt3f const *)arg1)->dist((OSG::Pnt3f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_dist2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::PointType *arg2 = 0 ;
  OSG::Pnt3f::ValueType result;
  
  SWIG_check_num_args("dist2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist2",1,"OSG::Pnt3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist2",2,"OSG::Pnt3f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_dist2",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_dist2",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f::ValueType)((OSG::Pnt3f const *)arg1)->dist2((OSG::Pnt3f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_maxValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::ValueType result;
  
  SWIG_check_num_args("maxValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxValue",1,"OSG::Pnt3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_maxValue",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f::ValueType)((OSG::Pnt3f const *)arg1)->maxValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_setValues(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::ValueType arg2 ;
  OSG::Pnt3f::ValueType arg3 ;
  OSG::Pnt3f::ValueType arg4 ;
  
  SWIG_check_num_args("setValues",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValues",1,"OSG::Pnt3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValues",2,"OSG::Pnt3f::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValues",3,"OSG::Pnt3f::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValues",4,"OSG::Pnt3f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_setValues",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg2 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 4);
  (arg1)->setValues(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_x(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::ValueType result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"OSG::Pnt3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_x",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f::ValueType)((OSG::Pnt3f const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_y(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::ValueType result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"OSG::Pnt3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_y",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f::ValueType)((OSG::Pnt3f const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_z(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::ValueType result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"OSG::Pnt3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f_z",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Pnt3f::ValueType)((OSG::Pnt3f const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::PointType *arg2 = 0 ;
  OSG::Pnt3f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Pnt3f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f___sub",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f___sub",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = ((OSG::Pnt3f const *)arg1)->operator -((OSG::Pnt3f::PointType const &)*arg2);
  {
    OSG::Pnt3f::VectorType * resultptr = new OSG::Pnt3f::VectorType((const OSG::Pnt3f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f___add(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::VectorType *arg2 = 0 ;
  OSG::Pnt3f::PointType result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Pnt3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Pnt3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f___add",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Pnt3f___add",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = ((OSG::Pnt3f const *)arg1)->operator +((OSG::Pnt3f::VectorType const &)*arg2);
  {
    OSG::Pnt3f::PointType * resultptr = new OSG::Pnt3f::PointType((const OSG::Pnt3f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::VectorType *arg2 = 0 ;
  OSG::Pnt3f::PointType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Pnt3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f___sub",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Pnt3f___sub",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = ((OSG::Pnt3f const *)arg1)->operator -((OSG::Pnt3f::VectorType const &)*arg2);
  {
    OSG::Pnt3f::PointType * resultptr = new OSG::Pnt3f::PointType((const OSG::Pnt3f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt3f___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt3f___sub__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Pnt3f___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -(OSG::Pnt3f const *,OSG::Pnt3f::PointType const &)\n"
    "    operator -(OSG::Pnt3f const *,OSG::Pnt3f::VectorType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt3f___mul(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::ValueType arg2 ;
  OSG::Pnt3f::PointType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Pnt3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Pnt3f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f___mul",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg2 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Pnt3f const *)arg1)->operator *(arg2);
  {
    OSG::Pnt3f::PointType * resultptr = new OSG::Pnt3f::PointType((const OSG::Pnt3f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::ValueType arg2 ;
  OSG::Pnt3f::PointType result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Pnt3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Pnt3f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f___div",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg2 = (OSG::Pnt3f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Pnt3f const *)arg1)->operator /(arg2);
  {
    OSG::Pnt3f::PointType * resultptr = new OSG::Pnt3f::PointType((const OSG::Pnt3f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f___unm(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f::PointType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Pnt3f___unm",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (arg1)->operator -();
  {
    OSG::Pnt3f::PointType * resultptr = new OSG::Pnt3f::PointType((const OSG::Pnt3f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pnt3f(void *obj) {
OSG::Pnt3f *arg1 = (OSG::Pnt3f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Pnt3f_methods[] = {
    {"setValueFromCString", _wrap_Pnt3f_setValueFromCString}, 
    {"isZero", _wrap_Pnt3f_isZero}, 
    {"negate", _wrap_Pnt3f_negate}, 
    {"equals", _wrap_Pnt3f_equals}, 
    {"subZero", _wrap_Pnt3f_subZero}, 
    {"dist", _wrap_Pnt3f_dist}, 
    {"dist2", _wrap_Pnt3f_dist2}, 
    {"maxValue", _wrap_Pnt3f_maxValue}, 
    {"setValues", _wrap_Pnt3f_setValues}, 
    {"x", _wrap_Pnt3f_x}, 
    {"y", _wrap_Pnt3f_y}, 
    {"z", _wrap_Pnt3f_z}, 
    {"__add", _wrap_Pnt3f___add}, 
    {"__sub", _wrap_Pnt3f___sub}, 
    {"__mul", _wrap_Pnt3f___mul}, 
    {"__div", _wrap_Pnt3f___div}, 
    {"__unm", _wrap_Pnt3f___unm}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Pnt3f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Pnt3f_bases[] = {0};
static const char *swig_OSG_Pnt3f_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Pnt3f = { "Pnt3f", &SWIGTYPE_p_OSG__Pnt3f,_wrap_new_Pnt3f, swig_delete_Pnt3f, swig_OSG_Pnt3f_methods, swig_OSG_Pnt3f_attributes, swig_OSG_Pnt3f_bases, swig_OSG_Pnt3f_base_names };

static int _wrap_new_Pnt4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt4f",0,0)
  result = (OSG::Pnt4f *)new OSG::Pnt4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f::PointType *arg1 = 0 ;
  OSG::Pnt4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt4f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Pnt4f",1,"OSG::Pnt4f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("new_Pnt4f",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f *)new OSG::Pnt4f((OSG::Pnt4f::PointType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f::VectorType *arg1 = 0 ;
  OSG::Pnt4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt4f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Pnt4f",1,"OSG::Pnt4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("new_Pnt4f",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Pnt4f *)new OSG::Pnt4f((OSG::Pnt4f::VectorType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f::ValueType arg1 ;
  OSG::Pnt4f::ValueType arg2 ;
  OSG::Pnt4f::ValueType arg3 ;
  OSG::Pnt4f::ValueType arg4 ;
  OSG::Pnt4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt4f",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Pnt4f",1,"OSG::Pnt4f::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Pnt4f",2,"OSG::Pnt4f::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::Pnt4f",3,"OSG::Pnt4f::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::Pnt4f",4,"OSG::Pnt4f::ValueType const");
  arg1 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 1);
  arg2 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 4);
  result = (OSG::Pnt4f *)new OSG::Pnt4f(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f::ValueType arg1 ;
  OSG::Pnt4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Pnt4f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Pnt4f",1,"OSG::Pnt4f::ValueType const");
  arg1 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 1);
  result = (OSG::Pnt4f *)new OSG::Pnt4f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pnt4f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt4f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt4f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pnt4f__SWIG_4(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Pnt4f__SWIG_3(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Pnt4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Pnt4f()\n"
    "    OSG::Pnt4f(OSG::Pnt4f::PointType const &)\n"
    "    OSG::Pnt4f(OSG::Pnt4f::VectorType const &)\n"
    "    OSG::Pnt4f(OSG::Pnt4f::ValueType const,OSG::Pnt4f::ValueType const,OSG::Pnt4f::ValueType const,OSG::Pnt4f::ValueType const)\n"
    "    OSG::Pnt4f(OSG::Pnt4f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt4f_setValueFromCString(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueFromCString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueFromCString",1,"OSG::Pnt4f *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValueFromCString",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_setValueFromCString",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueFromCString(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_isZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  bool result;
  
  SWIG_check_num_args("isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isZero",1,"OSG::Pnt4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_isZero",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (bool)((OSG::Pnt4f const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_negate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"OSG::Pnt4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_negate",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_equals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::PointType *arg2 = 0 ;
  OSG::Pnt4f::ValueType arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"OSG::Pnt4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"OSG::Pnt4f::PointType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"OSG::Pnt4f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_equals",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_equals",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  arg3 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 3);
  result = (bool)((OSG::Pnt4f const *)arg1)->equals((OSG::Pnt4f::PointType const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::VectorType *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"OSG::Pnt4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_subZero",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::VectorType *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec4f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_dist(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::PointType *arg2 = 0 ;
  OSG::Pnt4f::ValueType result;
  
  SWIG_check_num_args("dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist",1,"OSG::Pnt4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist",2,"OSG::Pnt4f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_dist",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_dist",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::ValueType)((OSG::Pnt4f const *)arg1)->dist((OSG::Pnt4f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_dist2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::PointType *arg2 = 0 ;
  OSG::Pnt4f::ValueType result;
  
  SWIG_check_num_args("dist2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist2",1,"OSG::Pnt4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist2",2,"OSG::Pnt4f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_dist2",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_dist2",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::ValueType)((OSG::Pnt4f const *)arg1)->dist2((OSG::Pnt4f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_maxValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType result;
  
  SWIG_check_num_args("maxValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxValue",1,"OSG::Pnt4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_maxValue",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::ValueType)((OSG::Pnt4f const *)arg1)->maxValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_setValues(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType arg2 ;
  OSG::Pnt4f::ValueType arg3 ;
  OSG::Pnt4f::ValueType arg4 ;
  OSG::Pnt4f::ValueType arg5 ;
  
  SWIG_check_num_args("setValues",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValues",1,"OSG::Pnt4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValues",2,"OSG::Pnt4f::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValues",3,"OSG::Pnt4f::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValues",4,"OSG::Pnt4f::ValueType const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValues",5,"OSG::Pnt4f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_setValues",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  arg2 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 4);
  arg5 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 5);
  (arg1)->setValues(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_x(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"OSG::Pnt4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_x",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::ValueType)((OSG::Pnt4f const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_y(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"OSG::Pnt4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_y",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::ValueType)((OSG::Pnt4f const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_z(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"OSG::Pnt4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_z",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::ValueType)((OSG::Pnt4f const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_w(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"OSG::Pnt4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f_w",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Pnt4f::ValueType)((OSG::Pnt4f const *)arg1)->w();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::PointType *arg2 = 0 ;
  OSG::Pnt4f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Pnt4f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f___sub",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f___sub",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = ((OSG::Pnt4f const *)arg1)->operator -((OSG::Pnt4f::PointType const &)*arg2);
  {
    OSG::Pnt4f::VectorType * resultptr = new OSG::Pnt4f::VectorType((const OSG::Pnt4f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f___add(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::VectorType *arg2 = 0 ;
  OSG::Pnt4f::PointType result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Pnt4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Pnt4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f___add",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Pnt4f___add",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = ((OSG::Pnt4f const *)arg1)->operator +((OSG::Pnt4f::VectorType const &)*arg2);
  {
    OSG::Pnt4f::PointType * resultptr = new OSG::Pnt4f::PointType((const OSG::Pnt4f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::VectorType *arg2 = 0 ;
  OSG::Pnt4f::PointType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Pnt4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f___sub",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Pnt4f___sub",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = ((OSG::Pnt4f const *)arg1)->operator -((OSG::Pnt4f::VectorType const &)*arg2);
  {
    OSG::Pnt4f::PointType * resultptr = new OSG::Pnt4f::PointType((const OSG::Pnt4f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt4f___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt4f___sub__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Pnt4f___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -(OSG::Pnt4f const *,OSG::Pnt4f::PointType const &)\n"
    "    operator -(OSG::Pnt4f const *,OSG::Pnt4f::VectorType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt4f___mul(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType arg2 ;
  OSG::Pnt4f::PointType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Pnt4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Pnt4f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f___mul",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  arg2 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Pnt4f const *)arg1)->operator *(arg2);
  {
    OSG::Pnt4f::PointType * resultptr = new OSG::Pnt4f::PointType((const OSG::Pnt4f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::ValueType arg2 ;
  OSG::Pnt4f::PointType result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Pnt4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Pnt4f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f___div",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  arg2 = (OSG::Pnt4f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Pnt4f const *)arg1)->operator /(arg2);
  {
    OSG::Pnt4f::PointType * resultptr = new OSG::Pnt4f::PointType((const OSG::Pnt4f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f___unm(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt4f *arg1 = (OSG::Pnt4f *) 0 ;
  OSG::Pnt4f::PointType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Pnt4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Pnt4f___unm",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (arg1)->operator -();
  {
    OSG::Pnt4f::PointType * resultptr = new OSG::Pnt4f::PointType((const OSG::Pnt4f::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pnt4f(void *obj) {
OSG::Pnt4f *arg1 = (OSG::Pnt4f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Pnt4f_methods[] = {
    {"setValueFromCString", _wrap_Pnt4f_setValueFromCString}, 
    {"isZero", _wrap_Pnt4f_isZero}, 
    {"negate", _wrap_Pnt4f_negate}, 
    {"equals", _wrap_Pnt4f_equals}, 
    {"subZero", _wrap_Pnt4f_subZero}, 
    {"dist", _wrap_Pnt4f_dist}, 
    {"dist2", _wrap_Pnt4f_dist2}, 
    {"maxValue", _wrap_Pnt4f_maxValue}, 
    {"setValues", _wrap_Pnt4f_setValues}, 
    {"x", _wrap_Pnt4f_x}, 
    {"y", _wrap_Pnt4f_y}, 
    {"z", _wrap_Pnt4f_z}, 
    {"w", _wrap_Pnt4f_w}, 
    {"__add", _wrap_Pnt4f___add}, 
    {"__sub", _wrap_Pnt4f___sub}, 
    {"__mul", _wrap_Pnt4f___mul}, 
    {"__div", _wrap_Pnt4f___div}, 
    {"__unm", _wrap_Pnt4f___unm}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Pnt4f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Pnt4f_bases[] = {0};
static const char *swig_OSG_Pnt4f_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Pnt4f = { "Pnt4f", &SWIGTYPE_p_OSG__Pnt4f,_wrap_new_Pnt4f, swig_delete_Pnt4f, swig_OSG_Pnt4f_methods, swig_OSG_Pnt4f_attributes, swig_OSG_Pnt4f_bases, swig_OSG_Pnt4f_base_names };

static int _wrap_new_Vec2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec2f",0,0)
  result = (OSG::Vec2f *)new OSG::Vec2f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f::VectorType *arg1 = 0 ;
  OSG::Vec2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec2f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Vec2f",1,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("new_Vec2f",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f *)new OSG::Vec2f((OSG::Vec2f::VectorType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f::PointType *arg1 = 0 ;
  OSG::Vec2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec2f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Vec2f",1,"OSG::Vec2f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("new_Vec2f",1,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Vec2f *)new OSG::Vec2f((OSG::Vec2f::PointType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f::ValueType arg1 ;
  OSG::Vec2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec2f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Vec2f",1,"OSG::Vec2f::ValueType const");
  arg1 = (OSG::Vec2f::ValueType const)lua_tonumber(L, 1);
  result = (OSG::Vec2f *)new OSG::Vec2f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f::ValueType arg1 ;
  OSG::Vec2f::ValueType arg2 ;
  OSG::Vec2f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec2f",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Vec2f",1,"OSG::Vec2f::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Vec2f",2,"OSG::Vec2f::ValueType const");
  arg1 = (OSG::Vec2f::ValueType const)lua_tonumber(L, 1);
  arg2 = (OSG::Vec2f::ValueType const)lua_tonumber(L, 2);
  result = (OSG::Vec2f *)new OSG::Vec2f(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec2f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec2f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec2f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vec2f__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vec2f__SWIG_4(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Vec2f()\n"
    "    OSG::Vec2f(OSG::Vec2f::VectorType const &)\n"
    "    OSG::Vec2f(OSG::Vec2f::PointType const &)\n"
    "    OSG::Vec2f(OSG::Vec2f::ValueType const)\n"
    "    OSG::Vec2f(OSG::Vec2f::ValueType const,OSG::Vec2f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f_length(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"OSG::Vec2f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_length",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f::ValueType)((OSG::Vec2f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_squareLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("squareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("squareLength",1,"OSG::Vec2f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_squareLength",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f::ValueType)((OSG::Vec2f const *)arg1)->squareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"OSG::Vec2f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_normalize",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_cross(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  OSG::Vec2f::VectorType result;
  
  SWIG_check_num_args("cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cross",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cross",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_cross",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_cross",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = ((OSG::Vec2f const *)arg1)->cross((OSG::Vec2f::VectorType const &)*arg2);
  {
    OSG::Vec2f::VectorType * resultptr = new OSG::Vec2f::VectorType((const OSG::Vec2f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_crossThis(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  
  SWIG_check_num_args("crossThis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("crossThis",1,"OSG::Vec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("crossThis",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_crossThis",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_crossThis",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  (arg1)->crossThis((OSG::Vec2f::VectorType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_dot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_dot",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_dot",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f::ValueType)((OSG::Vec2f const *)arg1)->dot((OSG::Vec2f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___mul",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f::ValueType)((OSG::Vec2f const *)arg1)->operator *((OSG::Vec2f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_dot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::PointType *arg2 = 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"OSG::Vec2f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_dot",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Vec2f_dot",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Vec2f::ValueType)((OSG::Vec2f const *)arg1)->dot((OSG::Vec2f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_dot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f_dot__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f_dot__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec2f_dot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dot(OSG::Vec2f const *,OSG::Vec2f::VectorType const &)\n"
    "    dot(OSG::Vec2f const *,OSG::Vec2f::PointType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::PointType *arg2 = 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec2f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt2f,0))){
    SWIG_fail_ptr("Vec2f___mul",2,SWIGTYPE_p_OSG__Pnt2f);
  }
  
  result = (OSG::Vec2f::ValueType)((OSG::Vec2f const *)arg1)->operator *((OSG::Vec2f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_enclosedAngle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("enclosedAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enclosedAngle",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("enclosedAngle",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_enclosedAngle",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_enclosedAngle",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f::ValueType)((OSG::Vec2f const *)arg1)->enclosedAngle((OSG::Vec2f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_projectTo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  OSG::Vec2f::ValueType result;
  
  SWIG_check_num_args("projectTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("projectTo",1,"OSG::Vec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("projectTo",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_projectTo",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_projectTo",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f::ValueType)(arg1)->projectTo((OSG::Vec2f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_addToZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::PointType *result = 0 ;
  
  SWIG_check_num_args("addToZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addToZero",1,"OSG::Vec2f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f_addToZero",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (OSG::Vec2f::PointType *) &(arg1)->addToZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt2f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___sub(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  OSG::Vec2f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___sub",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___sub",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = ((OSG::Vec2f const *)arg1)->operator -((OSG::Vec2f::VectorType const &)*arg2);
  {
    OSG::Vec2f::VectorType * resultptr = new OSG::Vec2f::VectorType((const OSG::Vec2f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___add(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  OSG::Vec2f::VectorType result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___add",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___add",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = ((OSG::Vec2f const *)arg1)->operator +((OSG::Vec2f::VectorType const &)*arg2);
  {
    OSG::Vec2f::VectorType * resultptr = new OSG::Vec2f::VectorType((const OSG::Vec2f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::ValueType arg2 ;
  OSG::Vec2f::VectorType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec2f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  arg2 = (OSG::Vec2f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Vec2f const *)arg1)->operator *(arg2);
  {
    OSG::Vec2f::VectorType * resultptr = new OSG::Vec2f::VectorType((const OSG::Vec2f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec2f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec2f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(OSG::Vec2f const *,OSG::Vec2f::VectorType const &)\n"
    "    operator *(OSG::Vec2f const *,OSG::Vec2f::PointType const &)\n"
    "    operator *(OSG::Vec2f const *,OSG::Vec2f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::ValueType arg2 ;
  OSG::Vec2f::VectorType result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Vec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Vec2f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___div",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  arg2 = (OSG::Vec2f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Vec2f const *)arg1)->operator /(arg2);
  {
    OSG::Vec2f::VectorType * resultptr = new OSG::Vec2f::VectorType((const OSG::Vec2f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___unm(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Vec2f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___unm",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = ((OSG::Vec2f const *)arg1)->operator -();
  {
    OSG::Vec2f::VectorType * resultptr = new OSG::Vec2f::VectorType((const OSG::Vec2f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___lt(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___lt",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___lt",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (bool)((OSG::Vec2f const *)arg1)->operator <((OSG::Vec2f::VectorType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec2f *arg1 = (OSG::Vec2f *) 0 ;
  OSG::Vec2f::VectorType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Vec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Vec2f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___eq",1,SWIGTYPE_p_OSG__Vec2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec2f,0))){
    SWIG_fail_ptr("Vec2f___eq",2,SWIGTYPE_p_OSG__Vec2f);
  }
  
  result = (bool)((OSG::Vec2f const *)arg1)->operator ==((OSG::Vec2f::VectorType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec2f(void *obj) {
OSG::Vec2f *arg1 = (OSG::Vec2f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Vec2f_methods[] = {
    {"length", _wrap_Vec2f_length}, 
    {"squareLength", _wrap_Vec2f_squareLength}, 
    {"normalize", _wrap_Vec2f_normalize}, 
    {"cross", _wrap_Vec2f_cross}, 
    {"crossThis", _wrap_Vec2f_crossThis}, 
    {"dot", _wrap_Vec2f_dot}, 
    {"enclosedAngle", _wrap_Vec2f_enclosedAngle}, 
    {"projectTo", _wrap_Vec2f_projectTo}, 
    {"addToZero", _wrap_Vec2f_addToZero}, 
    {"__sub", _wrap_Vec2f___sub}, 
    {"__add", _wrap_Vec2f___add}, 
    {"__mul", _wrap_Vec2f___mul}, 
    {"__div", _wrap_Vec2f___div}, 
    {"__unm", _wrap_Vec2f___unm}, 
    {"__lt", _wrap_Vec2f___lt}, 
    {"__eq", _wrap_Vec2f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Vec2f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Vec2f_bases[] = {0,0};
static const char *swig_OSG_Vec2f_base_names[] = {"OSG::Pnt2f *",0};
static swig_lua_class _wrap_class_OSG_Vec2f = { "Vec2f", &SWIGTYPE_p_OSG__Vec2f,_wrap_new_Vec2f, swig_delete_Vec2f, swig_OSG_Vec2f_methods, swig_OSG_Vec2f_attributes, swig_OSG_Vec2f_bases, swig_OSG_Vec2f_base_names };

static int _wrap_new_Vec3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec3f",0,0)
  result = (OSG::Vec3f *)new OSG::Vec3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f::VectorType *arg1 = 0 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Vec3f",1,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Vec3f",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f *)new OSG::Vec3f((OSG::Vec3f::VectorType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f::PointType *arg1 = 0 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Vec3f",1,"OSG::Vec3f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Vec3f",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Vec3f *)new OSG::Vec3f((OSG::Vec3f::PointType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f::ValueType arg1 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec3f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Vec3f",1,"OSG::Vec3f::ValueType const");
  arg1 = (OSG::Vec3f::ValueType const)lua_tonumber(L, 1);
  result = (OSG::Vec3f *)new OSG::Vec3f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f::ValueType arg1 ;
  OSG::Vec3f::ValueType arg2 ;
  OSG::Vec3f::ValueType arg3 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec3f",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Vec3f",1,"OSG::Vec3f::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Vec3f",2,"OSG::Vec3f::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::Vec3f",3,"OSG::Vec3f::ValueType const");
  arg1 = (OSG::Vec3f::ValueType const)lua_tonumber(L, 1);
  arg2 = (OSG::Vec3f::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Vec3f::ValueType const)lua_tonumber(L, 3);
  result = (OSG::Vec3f *)new OSG::Vec3f(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec3f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec3f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec3f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vec3f__SWIG_3(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vec3f__SWIG_4(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Vec3f()\n"
    "    OSG::Vec3f(OSG::Vec3f::VectorType const &)\n"
    "    OSG::Vec3f(OSG::Vec3f::PointType const &)\n"
    "    OSG::Vec3f(OSG::Vec3f::ValueType const)\n"
    "    OSG::Vec3f(OSG::Vec3f::ValueType const,OSG::Vec3f::ValueType const,OSG::Vec3f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f_length(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"OSG::Vec3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_length",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f::ValueType)((OSG::Vec3f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_squareLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("squareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("squareLength",1,"OSG::Vec3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_squareLength",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f::ValueType)((OSG::Vec3f const *)arg1)->squareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"OSG::Vec3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_normalize",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_cross(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  OSG::Vec3f::VectorType result;
  
  SWIG_check_num_args("cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cross",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cross",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_cross",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_cross",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = ((OSG::Vec3f const *)arg1)->cross((OSG::Vec3f::VectorType const &)*arg2);
  {
    OSG::Vec3f::VectorType * resultptr = new OSG::Vec3f::VectorType((const OSG::Vec3f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_crossThis(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  
  SWIG_check_num_args("crossThis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("crossThis",1,"OSG::Vec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("crossThis",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_crossThis",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_crossThis",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->crossThis((OSG::Vec3f::VectorType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_dot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_dot",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_dot",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f::ValueType)((OSG::Vec3f const *)arg1)->dot((OSG::Vec3f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___mul",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f::ValueType)((OSG::Vec3f const *)arg1)->operator *((OSG::Vec3f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_dot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::PointType *arg2 = 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"OSG::Vec3f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_dot",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Vec3f_dot",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Vec3f::ValueType)((OSG::Vec3f const *)arg1)->dot((OSG::Vec3f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_dot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f_dot__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f_dot__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec3f_dot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dot(OSG::Vec3f const *,OSG::Vec3f::VectorType const &)\n"
    "    dot(OSG::Vec3f const *,OSG::Vec3f::PointType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::PointType *arg2 = 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec3f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Vec3f___mul",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Vec3f::ValueType)((OSG::Vec3f const *)arg1)->operator *((OSG::Vec3f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_enclosedAngle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("enclosedAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enclosedAngle",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("enclosedAngle",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_enclosedAngle",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_enclosedAngle",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f::ValueType)((OSG::Vec3f const *)arg1)->enclosedAngle((OSG::Vec3f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_projectTo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  OSG::Vec3f::ValueType result;
  
  SWIG_check_num_args("projectTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("projectTo",1,"OSG::Vec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("projectTo",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_projectTo",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_projectTo",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f::ValueType)(arg1)->projectTo((OSG::Vec3f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_addToZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::PointType *result = 0 ;
  
  SWIG_check_num_args("addToZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addToZero",1,"OSG::Vec3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f_addToZero",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Vec3f::PointType *) &(arg1)->addToZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___sub(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  OSG::Vec3f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___sub",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___sub",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = ((OSG::Vec3f const *)arg1)->operator -((OSG::Vec3f::VectorType const &)*arg2);
  {
    OSG::Vec3f::VectorType * resultptr = new OSG::Vec3f::VectorType((const OSG::Vec3f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___add(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  OSG::Vec3f::VectorType result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___add",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___add",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = ((OSG::Vec3f const *)arg1)->operator +((OSG::Vec3f::VectorType const &)*arg2);
  {
    OSG::Vec3f::VectorType * resultptr = new OSG::Vec3f::VectorType((const OSG::Vec3f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::ValueType arg2 ;
  OSG::Vec3f::VectorType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec3f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg2 = (OSG::Vec3f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Vec3f const *)arg1)->operator *(arg2);
  {
    OSG::Vec3f::VectorType * resultptr = new OSG::Vec3f::VectorType((const OSG::Vec3f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec3f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(OSG::Vec3f const *,OSG::Vec3f::VectorType const &)\n"
    "    operator *(OSG::Vec3f const *,OSG::Vec3f::PointType const &)\n"
    "    operator *(OSG::Vec3f const *,OSG::Vec3f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::ValueType arg2 ;
  OSG::Vec3f::VectorType result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Vec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Vec3f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___div",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg2 = (OSG::Vec3f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Vec3f const *)arg1)->operator /(arg2);
  {
    OSG::Vec3f::VectorType * resultptr = new OSG::Vec3f::VectorType((const OSG::Vec3f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___unm(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Vec3f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___unm",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = ((OSG::Vec3f const *)arg1)->operator -();
  {
    OSG::Vec3f::VectorType * resultptr = new OSG::Vec3f::VectorType((const OSG::Vec3f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___lt(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___lt",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___lt",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)((OSG::Vec3f const *)arg1)->operator <((OSG::Vec3f::VectorType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = (OSG::Vec3f *) 0 ;
  OSG::Vec3f::VectorType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Vec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Vec3f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___eq",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Vec3f___eq",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)((OSG::Vec3f const *)arg1)->operator ==((OSG::Vec3f::VectorType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec3f(void *obj) {
OSG::Vec3f *arg1 = (OSG::Vec3f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Vec3f_methods[] = {
    {"length", _wrap_Vec3f_length}, 
    {"squareLength", _wrap_Vec3f_squareLength}, 
    {"normalize", _wrap_Vec3f_normalize}, 
    {"cross", _wrap_Vec3f_cross}, 
    {"crossThis", _wrap_Vec3f_crossThis}, 
    {"dot", _wrap_Vec3f_dot}, 
    {"enclosedAngle", _wrap_Vec3f_enclosedAngle}, 
    {"projectTo", _wrap_Vec3f_projectTo}, 
    {"addToZero", _wrap_Vec3f_addToZero}, 
    {"__sub", _wrap_Vec3f___sub}, 
    {"__add", _wrap_Vec3f___add}, 
    {"__mul", _wrap_Vec3f___mul}, 
    {"__div", _wrap_Vec3f___div}, 
    {"__unm", _wrap_Vec3f___unm}, 
    {"__lt", _wrap_Vec3f___lt}, 
    {"__eq", _wrap_Vec3f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Vec3f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Vec3f_bases[] = {0,0};
static const char *swig_OSG_Vec3f_base_names[] = {"OSG::Pnt3f *",0};
static swig_lua_class _wrap_class_OSG_Vec3f = { "Vec3f", &SWIGTYPE_p_OSG__Vec3f,_wrap_new_Vec3f, swig_delete_Vec3f, swig_OSG_Vec3f_methods, swig_OSG_Vec3f_attributes, swig_OSG_Vec3f_bases, swig_OSG_Vec3f_base_names };

static int _wrap_new_Vec4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec4f",0,0)
  result = (OSG::Vec4f *)new OSG::Vec4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f::VectorType *arg1 = 0 ;
  OSG::Vec4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec4f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Vec4f",1,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f *)new OSG::Vec4f((OSG::Vec4f::VectorType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f::PointType *arg1 = 0 ;
  OSG::Vec4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec4f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Vec4f",1,"OSG::Vec4f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Vec4f *)new OSG::Vec4f((OSG::Vec4f::PointType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f::ValueType arg1 ;
  OSG::Vec4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec4f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Vec4f",1,"OSG::Vec4f::ValueType const");
  arg1 = (OSG::Vec4f::ValueType const)lua_tonumber(L, 1);
  result = (OSG::Vec4f *)new OSG::Vec4f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f::ValueType arg1 ;
  OSG::Vec4f::ValueType arg2 ;
  OSG::Vec4f::ValueType arg3 ;
  OSG::Vec4f::ValueType arg4 ;
  OSG::Vec4f *result = 0 ;
  
  SWIG_check_num_args("OSG::Vec4f",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Vec4f",1,"OSG::Vec4f::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Vec4f",2,"OSG::Vec4f::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::Vec4f",3,"OSG::Vec4f::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::Vec4f",4,"OSG::Vec4f::ValueType const");
  arg1 = (OSG::Vec4f::ValueType const)lua_tonumber(L, 1);
  arg2 = (OSG::Vec4f::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Vec4f::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Vec4f::ValueType const)lua_tonumber(L, 4);
  result = (OSG::Vec4f *)new OSG::Vec4f(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec4f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec4f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec4f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vec4f__SWIG_3(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vec4f__SWIG_4(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Vec4f()\n"
    "    OSG::Vec4f(OSG::Vec4f::VectorType const &)\n"
    "    OSG::Vec4f(OSG::Vec4f::PointType const &)\n"
    "    OSG::Vec4f(OSG::Vec4f::ValueType const)\n"
    "    OSG::Vec4f(OSG::Vec4f::ValueType const,OSG::Vec4f::ValueType const,OSG::Vec4f::ValueType const,OSG::Vec4f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f_length(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"OSG::Vec4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_length",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f::ValueType)((OSG::Vec4f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_squareLength(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("squareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("squareLength",1,"OSG::Vec4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_squareLength",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f::ValueType)((OSG::Vec4f const *)arg1)->squareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"OSG::Vec4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_normalize",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_cross(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  OSG::Vec4f::VectorType result;
  
  SWIG_check_num_args("cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cross",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cross",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_cross",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_cross",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = ((OSG::Vec4f const *)arg1)->cross((OSG::Vec4f::VectorType const &)*arg2);
  {
    OSG::Vec4f::VectorType * resultptr = new OSG::Vec4f::VectorType((const OSG::Vec4f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_crossThis(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  
  SWIG_check_num_args("crossThis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("crossThis",1,"OSG::Vec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("crossThis",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_crossThis",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_crossThis",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  (arg1)->crossThis((OSG::Vec4f::VectorType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_dot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_dot",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_dot",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f::ValueType)((OSG::Vec4f const *)arg1)->dot((OSG::Vec4f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___mul",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f::ValueType)((OSG::Vec4f const *)arg1)->operator *((OSG::Vec4f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_dot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::PointType *arg2 = 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"OSG::Vec4f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_dot",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Vec4f_dot",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Vec4f::ValueType)((OSG::Vec4f const *)arg1)->dot((OSG::Vec4f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_dot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f_dot__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f_dot__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec4f_dot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dot(OSG::Vec4f const *,OSG::Vec4f::VectorType const &)\n"
    "    dot(OSG::Vec4f const *,OSG::Vec4f::PointType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::PointType *arg2 = 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec4f::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Vec4f___mul",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = (OSG::Vec4f::ValueType)((OSG::Vec4f const *)arg1)->operator *((OSG::Vec4f::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_enclosedAngle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("enclosedAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enclosedAngle",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("enclosedAngle",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_enclosedAngle",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_enclosedAngle",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f::ValueType)((OSG::Vec4f const *)arg1)->enclosedAngle((OSG::Vec4f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_projectTo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  OSG::Vec4f::ValueType result;
  
  SWIG_check_num_args("projectTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("projectTo",1,"OSG::Vec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("projectTo",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_projectTo",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_projectTo",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f::ValueType)(arg1)->projectTo((OSG::Vec4f::VectorType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_addToZero(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::PointType *result = 0 ;
  
  SWIG_check_num_args("addToZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addToZero",1,"OSG::Vec4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f_addToZero",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (OSG::Vec4f::PointType *) &(arg1)->addToZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt4f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___sub(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  OSG::Vec4f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___sub",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___sub",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = ((OSG::Vec4f const *)arg1)->operator -((OSG::Vec4f::VectorType const &)*arg2);
  {
    OSG::Vec4f::VectorType * resultptr = new OSG::Vec4f::VectorType((const OSG::Vec4f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___add(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  OSG::Vec4f::VectorType result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___add",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___add",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = ((OSG::Vec4f const *)arg1)->operator +((OSG::Vec4f::VectorType const &)*arg2);
  {
    OSG::Vec4f::VectorType * resultptr = new OSG::Vec4f::VectorType((const OSG::Vec4f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::ValueType arg2 ;
  OSG::Vec4f::VectorType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Vec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"OSG::Vec4f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  arg2 = (OSG::Vec4f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Vec4f const *)arg1)->operator *(arg2);
  {
    OSG::Vec4f::VectorType * resultptr = new OSG::Vec4f::VectorType((const OSG::Vec4f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec4f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(OSG::Vec4f const *,OSG::Vec4f::VectorType const &)\n"
    "    operator *(OSG::Vec4f const *,OSG::Vec4f::PointType const &)\n"
    "    operator *(OSG::Vec4f const *,OSG::Vec4f::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f___div(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::ValueType arg2 ;
  OSG::Vec4f::VectorType result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"OSG::Vec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"OSG::Vec4f::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___div",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  arg2 = (OSG::Vec4f::ValueType const)lua_tonumber(L, 2);
  result = ((OSG::Vec4f const *)arg1)->operator /(arg2);
  {
    OSG::Vec4f::VectorType * resultptr = new OSG::Vec4f::VectorType((const OSG::Vec4f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___unm(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"OSG::Vec4f const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___unm",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = ((OSG::Vec4f const *)arg1)->operator -();
  {
    OSG::Vec4f::VectorType * resultptr = new OSG::Vec4f::VectorType((const OSG::Vec4f::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___lt(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___lt",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___lt",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (bool)((OSG::Vec4f const *)arg1)->operator <((OSG::Vec4f::VectorType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec4f *arg1 = (OSG::Vec4f *) 0 ;
  OSG::Vec4f::VectorType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Vec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Vec4f::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___eq",1,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Vec4f___eq",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = (bool)((OSG::Vec4f const *)arg1)->operator ==((OSG::Vec4f::VectorType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec4f(void *obj) {
OSG::Vec4f *arg1 = (OSG::Vec4f *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Vec4f_methods[] = {
    {"length", _wrap_Vec4f_length}, 
    {"squareLength", _wrap_Vec4f_squareLength}, 
    {"normalize", _wrap_Vec4f_normalize}, 
    {"cross", _wrap_Vec4f_cross}, 
    {"crossThis", _wrap_Vec4f_crossThis}, 
    {"dot", _wrap_Vec4f_dot}, 
    {"enclosedAngle", _wrap_Vec4f_enclosedAngle}, 
    {"projectTo", _wrap_Vec4f_projectTo}, 
    {"addToZero", _wrap_Vec4f_addToZero}, 
    {"__sub", _wrap_Vec4f___sub}, 
    {"__add", _wrap_Vec4f___add}, 
    {"__mul", _wrap_Vec4f___mul}, 
    {"__div", _wrap_Vec4f___div}, 
    {"__unm", _wrap_Vec4f___unm}, 
    {"__lt", _wrap_Vec4f___lt}, 
    {"__eq", _wrap_Vec4f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Vec4f_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Vec4f_bases[] = {0,0};
static const char *swig_OSG_Vec4f_base_names[] = {"OSG::Pnt4f *",0};
static swig_lua_class _wrap_class_OSG_Vec4f = { "Vec4f", &SWIGTYPE_p_OSG__Vec4f,_wrap_new_Vec4f, swig_delete_Vec4f, swig_OSG_Vec4f_methods, swig_OSG_Vec4f_attributes, swig_OSG_Vec4f_bases, swig_OSG_Vec4f_base_names };

static int _wrap_Matrix_identity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *result = 0 ;
  
  SWIG_check_num_args("OSG::Matrix::identity",0,0)
  result = (OSG::Matrix *) &OSG::Matrix::identity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *result = 0 ;
  
  SWIG_check_num_args("OSG::Matrix",0,0)
  result = (OSG::Matrix *)new OSG::Matrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Matrix *result = 0 ;
  
  SWIG_check_num_args("OSG::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Matrix",1,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (OSG::Matrix *)new OSG::Matrix((OSG::Matrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix::VectorType3f *arg1 = 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  OSG::Matrix *result = 0 ;
  
  SWIG_check_num_args("OSG::Matrix",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Matrix",1,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::Matrix",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::Matrix",3,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Matrix",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Matrix",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Matrix *)new OSG::Matrix((OSG::Matrix::VectorType3f const &)*arg1,(OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::VectorType3f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix::VectorType3f *arg1 = 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  OSG::Matrix *result = 0 ;
  
  SWIG_check_num_args("OSG::Matrix",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Matrix",1,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::Matrix",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::Matrix",3,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::Matrix",4,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Matrix",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Matrix",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Matrix",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Matrix *)new OSG::Matrix((OSG::Matrix::VectorType3f const &)*arg1,(OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::VectorType3f const &)*arg3,(OSG::Matrix::VectorType3f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix::ValueType arg1 ;
  OSG::Matrix::ValueType arg2 ;
  OSG::Matrix::ValueType arg3 ;
  OSG::Matrix::ValueType arg4 ;
  OSG::Matrix::ValueType arg5 ;
  OSG::Matrix::ValueType arg6 ;
  OSG::Matrix::ValueType arg7 ;
  OSG::Matrix::ValueType arg8 ;
  OSG::Matrix::ValueType arg9 ;
  OSG::Matrix::ValueType arg10 ;
  OSG::Matrix::ValueType arg11 ;
  OSG::Matrix::ValueType arg12 ;
  OSG::Matrix::ValueType arg13 ;
  OSG::Matrix::ValueType arg14 ;
  OSG::Matrix::ValueType arg15 ;
  OSG::Matrix::ValueType arg16 ;
  OSG::Matrix *result = 0 ;
  
  SWIG_check_num_args("OSG::Matrix",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::Matrix",1,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Matrix",2,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::Matrix",3,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::Matrix",4,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::Matrix",5,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::Matrix",6,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("OSG::Matrix",7,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("OSG::Matrix",8,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("OSG::Matrix",9,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("OSG::Matrix",10,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("OSG::Matrix",11,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("OSG::Matrix",12,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("OSG::Matrix",13,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("OSG::Matrix",14,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("OSG::Matrix",15,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("OSG::Matrix",16,"OSG::Matrix::ValueType const");
  arg1 = (OSG::Matrix::ValueType const)lua_tonumber(L, 1);
  arg2 = (OSG::Matrix::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Matrix::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Matrix::ValueType const)lua_tonumber(L, 4);
  arg5 = (OSG::Matrix::ValueType const)lua_tonumber(L, 5);
  arg6 = (OSG::Matrix::ValueType const)lua_tonumber(L, 6);
  arg7 = (OSG::Matrix::ValueType const)lua_tonumber(L, 7);
  arg8 = (OSG::Matrix::ValueType const)lua_tonumber(L, 8);
  arg9 = (OSG::Matrix::ValueType const)lua_tonumber(L, 9);
  arg10 = (OSG::Matrix::ValueType const)lua_tonumber(L, 10);
  arg11 = (OSG::Matrix::ValueType const)lua_tonumber(L, 11);
  arg12 = (OSG::Matrix::ValueType const)lua_tonumber(L, 12);
  arg13 = (OSG::Matrix::ValueType const)lua_tonumber(L, 13);
  arg14 = (OSG::Matrix::ValueType const)lua_tonumber(L, 14);
  arg15 = (OSG::Matrix::ValueType const)lua_tonumber(L, 15);
  arg16 = (OSG::Matrix::ValueType const)lua_tonumber(L, 16);
  result = (OSG::Matrix *)new OSG::Matrix(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix(lua_State* L) {
  int argc;
  int argv[17]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Matrix__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_Matrix__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_new_Matrix__SWIG_4(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Matrix()\n"
    "    OSG::Matrix(OSG::Matrix const &)\n"
    "    OSG::Matrix(OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &)\n"
    "    OSG::Matrix(OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &)\n"
    "    OSG::Matrix(OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_setIdentity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  
  SWIG_check_num_args("setIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIdentity",1,"OSG::Matrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setIdentity",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->setIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->setValue((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  
  SWIG_check_num_args("setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setValue",3,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setValue",4,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setValue",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setValue",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setValue((OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::VectorType3f const &)*arg3,(OSG::Matrix::VectorType3f const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  OSG::Matrix::VectorType3f *arg5 = 0 ;
  
  SWIG_check_num_args("setValue",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setValue",3,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setValue",4,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setValue",5,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setValue",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setValue",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setValue",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setValue((OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::VectorType3f const &)*arg3,(OSG::Matrix::VectorType3f const &)*arg4,(OSG::Matrix::VectorType3f const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType arg2 ;
  OSG::Matrix::ValueType arg3 ;
  OSG::Matrix::ValueType arg4 ;
  OSG::Matrix::ValueType arg5 ;
  OSG::Matrix::ValueType arg6 ;
  OSG::Matrix::ValueType arg7 ;
  OSG::Matrix::ValueType arg8 ;
  OSG::Matrix::ValueType arg9 ;
  OSG::Matrix::ValueType arg10 ;
  OSG::Matrix::ValueType arg11 ;
  OSG::Matrix::ValueType arg12 ;
  OSG::Matrix::ValueType arg13 ;
  OSG::Matrix::ValueType arg14 ;
  OSG::Matrix::ValueType arg15 ;
  OSG::Matrix::ValueType arg16 ;
  OSG::Matrix::ValueType arg17 ;
  
  SWIG_check_num_args("setValue",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValue",2,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValue",3,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValue",4,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValue",5,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setValue",6,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setValue",7,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("setValue",8,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("setValue",9,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("setValue",10,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("setValue",11,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("setValue",12,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("setValue",13,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("setValue",14,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("setValue",15,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("setValue",16,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("setValue",17,"OSG::Matrix::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Matrix::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Matrix::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Matrix::ValueType const)lua_tonumber(L, 4);
  arg5 = (OSG::Matrix::ValueType const)lua_tonumber(L, 5);
  arg6 = (OSG::Matrix::ValueType const)lua_tonumber(L, 6);
  arg7 = (OSG::Matrix::ValueType const)lua_tonumber(L, 7);
  arg8 = (OSG::Matrix::ValueType const)lua_tonumber(L, 8);
  arg9 = (OSG::Matrix::ValueType const)lua_tonumber(L, 9);
  arg10 = (OSG::Matrix::ValueType const)lua_tonumber(L, 10);
  arg11 = (OSG::Matrix::ValueType const)lua_tonumber(L, 11);
  arg12 = (OSG::Matrix::ValueType const)lua_tonumber(L, 12);
  arg13 = (OSG::Matrix::ValueType const)lua_tonumber(L, 13);
  arg14 = (OSG::Matrix::ValueType const)lua_tonumber(L, 14);
  arg15 = (OSG::Matrix::ValueType const)lua_tonumber(L, 15);
  arg16 = (OSG::Matrix::ValueType const)lua_tonumber(L, 16);
  arg17 = (OSG::Matrix::ValueType const)lua_tonumber(L, 17);
  (arg1)->setValue(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType *arg2 = (OSG::Matrix::ValueType *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("setValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"OSG::Matrix::ValueType const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("setValue",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_float);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setValue((OSG::Matrix::ValueType const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType *arg2 = (OSG::Matrix::ValueType *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"OSG::Matrix::ValueType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValue((OSG::Matrix::ValueType const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("setValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValue",2,"OSG::Char8 const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("setValue",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setValue((OSG::Char8 const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Matrix *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValue",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValue((OSG::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue(lua_State* L) {
  int argc;
  int argv[18]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setValue__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setValue__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_setValue__SWIG_7(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Matrix_setValue__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Matrix_setValue__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_setValue__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_setValue__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 17) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    {
                                      _v = lua_isnumber(L,argv[16]);
                                    }
                                    if (_v) {
                                      return _wrap_Matrix_setValue__SWIG_3(L);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValue(OSG::Matrix *,OSG::Matrix const &)\n"
    "    setValue(OSG::Matrix *,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &)\n"
    "    setValue(OSG::Matrix *,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f const &)\n"
    "    setValue(OSG::Matrix *,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const)\n"
    "    setValue(OSG::Matrix *,OSG::Matrix::ValueType const *,bool)\n"
    "    setValue(OSG::Matrix *,OSG::Matrix::ValueType const *)\n"
    "    setValue(OSG::Matrix *,OSG::Char8 const *,bool)\n"
    "    setValue(OSG::Matrix *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_setScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType arg2 ;
  
  SWIG_check_num_args("setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"OSG::Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setScale",2,"OSG::Matrix::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setScale",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Matrix::ValueType const)lua_tonumber(L, 2);
  (arg1)->setScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType arg2 ;
  OSG::Matrix::ValueType arg3 ;
  OSG::Matrix::ValueType arg4 ;
  
  SWIG_check_num_args("setScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"OSG::Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setScale",2,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setScale",3,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setScale",4,"OSG::Matrix::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setScale",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Matrix::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Matrix::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Matrix::ValueType const)lua_tonumber(L, 4);
  (arg1)->setScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setScale__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScale",2,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setScale",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setScale",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setScale((OSG::Matrix::VectorType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setScale__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_setScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_setScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setScale(OSG::Matrix *,OSG::Matrix::ValueType const)\n"
    "    setScale(OSG::Matrix *,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const)\n"
    "    setScale(OSG::Matrix *,OSG::Matrix::VectorType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_setTranslate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType arg2 ;
  OSG::Matrix::ValueType arg3 ;
  OSG::Matrix::ValueType arg4 ;
  
  SWIG_check_num_args("setTranslate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTranslate",1,"OSG::Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTranslate",2,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setTranslate",3,"OSG::Matrix::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setTranslate",4,"OSG::Matrix::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTranslate",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Matrix::ValueType const)lua_tonumber(L, 2);
  arg3 = (OSG::Matrix::ValueType const)lua_tonumber(L, 3);
  arg4 = (OSG::Matrix::ValueType const)lua_tonumber(L, 4);
  (arg1)->setTranslate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTranslate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTranslate",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTranslate",2,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTranslate",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTranslate",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setTranslate((OSG::Matrix::VectorType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTranslate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::PointType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTranslate",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTranslate",2,"OSG::Matrix::PointType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTranslate",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix_setTranslate",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  (arg1)->setTranslate((OSG::Matrix::PointType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTranslate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTranslate__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTranslate__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_setTranslate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setTranslate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setTranslate(OSG::Matrix *,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const,OSG::Matrix::ValueType const)\n"
    "    setTranslate(OSG::Matrix *,OSG::Matrix::VectorType3f const &)\n"
    "    setTranslate(OSG::Matrix *,OSG::Matrix::PointType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_setRotate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::QuaternionType *arg2 = 0 ;
  
  SWIG_check_num_args("setRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotate",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotate",2,"OSG::Matrix::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setRotate",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setRotate",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->setRotate((OSG::Matrix::QuaternionType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setTransform((OSG::Matrix::VectorType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::QuaternionType *arg2 = 0 ;
  
  SWIG_check_num_args("setTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"OSG::Matrix::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->setTransform((OSG::Matrix::QuaternionType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::QuaternionType *arg3 = 0 ;
  
  SWIG_check_num_args("setTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"OSG::Matrix::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->setTransform((OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::QuaternionType const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::QuaternionType *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  
  SWIG_check_num_args("setTransform",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"OSG::Matrix::QuaternionType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTransform",4,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setTransform((OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::QuaternionType const &)*arg3,(OSG::Matrix::VectorType3f const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::QuaternionType *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  OSG::Matrix::QuaternionType *arg5 = 0 ;
  
  SWIG_check_num_args("setTransform",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"OSG::Matrix::QuaternionType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTransform",4,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setTransform",5,"OSG::Matrix::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setTransform",5,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->setTransform((OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::QuaternionType const &)*arg3,(OSG::Matrix::VectorType3f const &)*arg4,(OSG::Matrix::QuaternionType const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::QuaternionType *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  OSG::Matrix::QuaternionType *arg5 = 0 ;
  OSG::Matrix::VectorType3f *arg6 = 0 ;
  
  SWIG_check_num_args("setTransform",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"OSG::Matrix::QuaternionType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTransform",4,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setTransform",5,"OSG::Matrix::QuaternionType const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("setTransform",6,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_setTransform",5,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_setTransform",6,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setTransform((OSG::Matrix::VectorType3f const &)*arg2,(OSG::Matrix::QuaternionType const &)*arg3,(OSG::Matrix::VectorType3f const &)*arg4,(OSG::Matrix::QuaternionType const &)*arg5,(OSG::Matrix::VectorType3f const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTransform__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTransform__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_setTransform__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_setTransform__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_setTransform__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_setTransform__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setTransform(OSG::Matrix *,OSG::Matrix::VectorType3f const &)\n"
    "    setTransform(OSG::Matrix *,OSG::Matrix::QuaternionType const &)\n"
    "    setTransform(OSG::Matrix *,OSG::Matrix::VectorType3f const &,OSG::Matrix::QuaternionType const &)\n"
    "    setTransform(OSG::Matrix *,OSG::Matrix::VectorType3f const &,OSG::Matrix::QuaternionType const &,OSG::Matrix::VectorType3f const &)\n"
    "    setTransform(OSG::Matrix *,OSG::Matrix::VectorType3f const &,OSG::Matrix::QuaternionType const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::QuaternionType const &)\n"
    "    setTransform(OSG::Matrix *,OSG::Matrix::VectorType3f const &,OSG::Matrix::QuaternionType const &,OSG::Matrix::VectorType3f const &,OSG::Matrix::QuaternionType const &,OSG::Matrix::VectorType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_getTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::QuaternionType *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  OSG::Matrix::QuaternionType *arg5 = 0 ;
  OSG::Matrix::VectorType3f *arg6 = 0 ;
  
  SWIG_check_num_args("getTransform",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTransform",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getTransform",2,"OSG::Matrix::VectorType3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getTransform",3,"OSG::Matrix::QuaternionType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getTransform",4,"OSG::Matrix::VectorType3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getTransform",5,"OSG::Matrix::QuaternionType &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("getTransform",6,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_getTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_getTransform",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_getTransform",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_getTransform",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_getTransform",5,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_getTransform",6,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::Matrix const *)arg1)->getTransform(*arg2,*arg3,*arg4,*arg5,(OSG::Matrix::VectorType3f const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_getTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::QuaternionType *arg3 = 0 ;
  OSG::Matrix::VectorType3f *arg4 = 0 ;
  OSG::Matrix::QuaternionType *arg5 = 0 ;
  
  SWIG_check_num_args("getTransform",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTransform",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getTransform",2,"OSG::Matrix::VectorType3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getTransform",3,"OSG::Matrix::QuaternionType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getTransform",4,"OSG::Matrix::VectorType3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getTransform",5,"OSG::Matrix::QuaternionType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_getTransform",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_getTransform",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_getTransform",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_getTransform",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Matrix_getTransform",5,SWIGTYPE_p_OSG__Quaternion);
  }
  
  ((OSG::Matrix const *)arg1)->getTransform(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_getTransform(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_getTransform__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_getTransform__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_getTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getTransform(OSG::Matrix const *,OSG::Matrix::VectorType3f &,OSG::Matrix::QuaternionType &,OSG::Matrix::VectorType3f &,OSG::Matrix::QuaternionType &,OSG::Matrix::VectorType3f const &)\n"
    "    getTransform(OSG::Matrix const *,OSG::Matrix::VectorType3f &,OSG::Matrix::QuaternionType &,OSG::Matrix::VectorType3f &,OSG::Matrix::QuaternionType &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_factor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  OSG::Matrix *arg4 = 0 ;
  OSG::Matrix::VectorType3f *arg5 = 0 ;
  OSG::Matrix *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("factor",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("factor",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("factor",2,"OSG::Matrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("factor",3,"OSG::Matrix::VectorType3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("factor",4,"OSG::Matrix &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("factor",5,"OSG::Matrix::VectorType3f &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("factor",6,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_factor",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_factor",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_factor",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_factor",4,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_factor",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_factor",6,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)((OSG::Matrix const *)arg1)->factor(*arg2,*arg3,*arg4,*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::PointType *arg2 = 0 ;
  OSG::Matrix::PointType *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"OSG::Matrix::PointType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"OSG::Matrix::PointType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  ((OSG::Matrix const *)arg1)->mult((OSG::Matrix::PointType const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_multFull__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::PointType3f *arg2 = 0 ;
  OSG::Matrix::PointType3f *arg3 = 0 ;
  
  SWIG_check_num_args("multFull",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multFull",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multFull",2,"OSG::Matrix::PointType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("multFull",3,"OSG::Matrix::PointType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_multFull",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix_multFull",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix_multFull",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::Matrix const *)arg1)->multFull((OSG::Matrix::PointType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::PointType3f *arg2 = 0 ;
  OSG::Matrix::PointType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"OSG::Matrix::PointType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"OSG::Matrix::PointType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::Matrix const *)arg1)->mult((OSG::Matrix::PointType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType *arg2 = 0 ;
  OSG::Matrix::VectorType *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"OSG::Matrix::VectorType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"OSG::Matrix::VectorType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_OSG__Vec4f);
  }
  
  ((OSG::Matrix const *)arg1)->mult((OSG::Matrix::VectorType const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_multFull__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  
  SWIG_check_num_args("multFull",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multFull",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multFull",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("multFull",3,"OSG::Matrix::VectorType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_multFull",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_multFull",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_multFull",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::Matrix const *)arg1)->multFull((OSG::Matrix::VectorType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_multFull(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_multFull__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_multFull__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_multFull'\n"
    "  Possible C/C++ prototypes are:\n"
    "    multFull(OSG::Matrix const *,OSG::Matrix::PointType3f const &,OSG::Matrix::PointType3f &)\n"
    "    multFull(OSG::Matrix const *,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_mult__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"OSG::Matrix::VectorType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::Matrix const *)arg1)->mult((OSG::Matrix::VectorType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult3x3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::PointType3f *arg2 = 0 ;
  OSG::Matrix::PointType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult3x3",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult3x3",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult3x3",2,"OSG::Matrix::PointType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult3x3",3,"OSG::Matrix::PointType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult3x3",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix_mult3x3",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix_mult3x3",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::Matrix const *)arg1)->mult3x3((OSG::Matrix::PointType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult3x3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult3x3",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult3x3",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult3x3",2,"OSG::Matrix::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult3x3",3,"OSG::Matrix::VectorType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult3x3",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_mult3x3",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix_mult3x3",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::Matrix const *)arg1)->mult3x3((OSG::Matrix::VectorType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult3x3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult3x3__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult3x3__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_mult3x3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mult3x3(OSG::Matrix const *,OSG::Matrix::PointType3f const &,OSG::Matrix::PointType3f &)\n"
    "    mult3x3(OSG::Matrix const *,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::PointType *arg2 = 0 ;
  OSG::Matrix::PointType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Matrix::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt4f,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_OSG__Pnt4f);
  }
  
  result = ((OSG::Matrix const *)arg1)->operator *((OSG::Matrix::PointType const &)*arg2);
  {
    OSG::Matrix::PointType * resultptr = new OSG::Matrix::PointType((const OSG::Matrix::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::PointType3f *arg2 = 0 ;
  OSG::Matrix::PointType3f result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Matrix::PointType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = ((OSG::Matrix const *)arg1)->operator *((OSG::Matrix::PointType3f const &)*arg2);
  {
    OSG::Matrix::PointType3f * resultptr = new OSG::Matrix::PointType3f((const OSG::Matrix::PointType3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType *arg2 = 0 ;
  OSG::Matrix::VectorType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Matrix::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec4f,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_OSG__Vec4f);
  }
  
  result = ((OSG::Matrix const *)arg1)->operator *((OSG::Matrix::VectorType const &)*arg2);
  {
    OSG::Matrix::VectorType * resultptr = new OSG::Matrix::VectorType((const OSG::Matrix::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::VectorType3f *arg2 = 0 ;
  OSG::Matrix::VectorType3f result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"OSG::Matrix::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = ((OSG::Matrix const *)arg1)->operator *((OSG::Matrix::VectorType3f const &)*arg2);
  {
    OSG::Matrix::VectorType3f * resultptr = new OSG::Matrix::VectorType3f((const OSG::Matrix::VectorType3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(OSG::Matrix const *,OSG::Matrix::PointType const &)\n"
    "    operator *(OSG::Matrix const *,OSG::Matrix::PointType3f const &)\n"
    "    operator *(OSG::Matrix const *,OSG::Matrix::VectorType const &)\n"
    "    operator *(OSG::Matrix const *,OSG::Matrix::VectorType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_equals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  OSG::Matrix::ValueType arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"OSG::Matrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"OSG::Matrix::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_equals",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_equals",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg3 = (OSG::Matrix::ValueType const)lua_tonumber(L, 3);
  result = (bool)((OSG::Matrix const *)arg1)->equals((OSG::Matrix const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_det3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType result;
  
  SWIG_check_num_args("det3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("det3",1,"OSG::Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_det3",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (OSG::Matrix::ValueType)((OSG::Matrix const *)arg1)->det3();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_det(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType result;
  
  SWIG_check_num_args("det",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("det",1,"OSG::Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_det",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (OSG::Matrix::ValueType)((OSG::Matrix const *)arg1)->det();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverse",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inverse",2,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)((OSG::Matrix const *)arg1)->inverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invert(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert",1,"OSG::Matrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_invert",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->invert();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invertFrom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("invertFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invertFrom",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("invertFrom",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_invertFrom",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_invertFrom",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->invertFrom((OSG::Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("inverse3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverse3",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inverse3",2,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse3",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse3",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)((OSG::Matrix const *)arg1)->inverse3(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invert3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("invert3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert3",1,"OSG::Matrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_invert3",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->invert3();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invertFrom3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("invertFrom3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invertFrom3",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("invertFrom3",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_invertFrom3",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_invertFrom3",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->invertFrom3((OSG::Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_transposed(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("transposed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transposed",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transposed",2,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_transposed",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_transposed",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)((OSG::Matrix const *)arg1)->transposed(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transpose",1,"OSG::Matrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_transpose",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->transpose();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_transposeFrom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("transposeFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transposeFrom",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transposeFrom",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_transposeFrom",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_transposeFrom",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->transposeFrom((OSG::Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("mult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->mult((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_mult__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec4f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt4f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_mult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mult(OSG::Matrix const *,OSG::Matrix::PointType const &,OSG::Matrix::PointType &)\n"
    "    mult(OSG::Matrix const *,OSG::Matrix::PointType3f const &,OSG::Matrix::PointType3f &)\n"
    "    mult(OSG::Matrix const *,OSG::Matrix::VectorType const &,OSG::Matrix::VectorType &)\n"
    "    mult(OSG::Matrix const *,OSG::Matrix::VectorType3f const &,OSG::Matrix::VectorType3f &)\n"
    "    mult(OSG::Matrix *,OSG::Matrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_multLeft(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("multLeft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multLeft",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multLeft",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_multLeft",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_multLeft",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->multLeft((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_add(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("add",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("add",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_add",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_add",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->add((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_scale(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType arg2 ;
  
  SWIG_check_num_args("scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Matrix::ValueType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_scale",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Matrix::ValueType)lua_tonumber(L, 2);
  (arg1)->scale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_addScaled(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  OSG::Matrix::ValueType arg3 ;
  
  SWIG_check_num_args("addScaled",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addScaled",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addScaled",2,"OSG::Matrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addScaled",3,"OSG::Matrix::ValueType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_addScaled",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_addScaled",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg3 = (OSG::Matrix::ValueType)lua_tonumber(L, 3);
  (arg1)->addScaled((OSG::Matrix const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_negate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"OSG::Matrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_negate",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_norm1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType result;
  
  SWIG_check_num_args("norm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("norm1",1,"OSG::Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_norm1",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (OSG::Matrix::ValueType)((OSG::Matrix const *)arg1)->norm1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_norm2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType result;
  
  SWIG_check_num_args("norm2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("norm2",1,"OSG::Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_norm2",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (OSG::Matrix::ValueType)((OSG::Matrix const *)arg1)->norm2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_normInfinity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix::ValueType result;
  
  SWIG_check_num_args("normInfinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normInfinity",1,"OSG::Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_normInfinity",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (OSG::Matrix::ValueType)((OSG::Matrix const *)arg1)->normInfinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sqrtOf(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("sqrtOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sqrtOf",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sqrtOf",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_sqrtOf",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_sqrtOf",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->sqrtOf((OSG::Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sqrt",1,"OSG::Matrix *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_sqrt",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->sqrt();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_log(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("log",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("log",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("log",2,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_log",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_log",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)((OSG::Matrix const *)arg1)->log(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_logOf(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("logOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("logOf",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("logOf",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_logOf",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_logOf",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->logOf((OSG::Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_exp(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("exp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exp",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("exp",2,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_exp",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_exp",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)((OSG::Matrix const *)arg1)->exp(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_expOf(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("expOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("expOf",1,"OSG::Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("expOf",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_expOf",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix_expOf",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)(arg1)->expOf((OSG::Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = (OSG::Matrix *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix___eq",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Matrix___eq",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (bool)((OSG::Matrix const *)arg1)->operator ==((OSG::Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix(void *obj) {
OSG::Matrix *arg1 = (OSG::Matrix *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Matrix_methods[] = {
    {"setIdentity", _wrap_Matrix_setIdentity}, 
    {"setValue", _wrap_Matrix_setValue}, 
    {"setScale", _wrap_Matrix_setScale}, 
    {"setTranslate", _wrap_Matrix_setTranslate}, 
    {"setRotate", _wrap_Matrix_setRotate}, 
    {"setTransform", _wrap_Matrix_setTransform}, 
    {"getTransform", _wrap_Matrix_getTransform}, 
    {"factor", _wrap_Matrix_factor}, 
    {"multFull", _wrap_Matrix_multFull}, 
    {"mult3x3", _wrap_Matrix_mult3x3}, 
    {"__mul", _wrap_Matrix___mul}, 
    {"equals", _wrap_Matrix_equals}, 
    {"det3", _wrap_Matrix_det3}, 
    {"det", _wrap_Matrix_det}, 
    {"inverse", _wrap_Matrix_inverse}, 
    {"invert", _wrap_Matrix_invert}, 
    {"invertFrom", _wrap_Matrix_invertFrom}, 
    {"inverse3", _wrap_Matrix_inverse3}, 
    {"invert3", _wrap_Matrix_invert3}, 
    {"invertFrom3", _wrap_Matrix_invertFrom3}, 
    {"transposed", _wrap_Matrix_transposed}, 
    {"transpose", _wrap_Matrix_transpose}, 
    {"transposeFrom", _wrap_Matrix_transposeFrom}, 
    {"mult", _wrap_Matrix_mult}, 
    {"multLeft", _wrap_Matrix_multLeft}, 
    {"add", _wrap_Matrix_add}, 
    {"scale", _wrap_Matrix_scale}, 
    {"addScaled", _wrap_Matrix_addScaled}, 
    {"negate", _wrap_Matrix_negate}, 
    {"norm1", _wrap_Matrix_norm1}, 
    {"norm2", _wrap_Matrix_norm2}, 
    {"normInfinity", _wrap_Matrix_normInfinity}, 
    {"sqrtOf", _wrap_Matrix_sqrtOf}, 
    {"sqrt", _wrap_Matrix_sqrt}, 
    {"log", _wrap_Matrix_log}, 
    {"logOf", _wrap_Matrix_logOf}, 
    {"exp", _wrap_Matrix_exp}, 
    {"expOf", _wrap_Matrix_expOf}, 
    {"__eq", _wrap_Matrix___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Matrix_bases[] = {0};
static const char *swig_OSG_Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Matrix = { "Matrix", &SWIGTYPE_p_OSG__Matrix,_wrap_new_Matrix, swig_delete_Matrix, swig_OSG_Matrix_methods, swig_OSG_Matrix_attributes, swig_OSG_Matrix_bases, swig_OSG_Matrix_base_names };

static int _wrap_Quaternion_identity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *result = 0 ;
  
  SWIG_check_num_args("OSG::Quaternion::identity",0,0)
  result = (OSG::Quaternion *) &OSG::Quaternion::identity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *result = 0 ;
  
  SWIG_check_num_args("OSG::Quaternion",0,0)
  result = (OSG::Quaternion *)new OSG::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = 0 ;
  OSG::Quaternion *result = 0 ;
  
  SWIG_check_num_args("OSG::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Quaternion",1,"OSG::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (OSG::Quaternion *)new OSG::Quaternion((OSG::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion::MatrixType *arg1 = 0 ;
  OSG::Quaternion *result = 0 ;
  
  SWIG_check_num_args("OSG::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Quaternion",1,"OSG::Quaternion::MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  result = (OSG::Quaternion *)new OSG::Quaternion((OSG::Quaternion::MatrixType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion::VectorType *arg1 = 0 ;
  OSG::Real32 arg2 ;
  OSG::Quaternion *result = 0 ;
  
  SWIG_check_num_args("OSG::Quaternion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Quaternion",1,"OSG::Quaternion::VectorType const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Quaternion",2,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  result = (OSG::Quaternion *)new OSG::Quaternion((OSG::Quaternion::VectorType const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion::VectorType *arg1 = 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  OSG::Quaternion *result = 0 ;
  
  SWIG_check_num_args("OSG::Quaternion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Quaternion",1,"OSG::Quaternion::VectorType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::Quaternion",2,"OSG::Quaternion::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Quaternion *)new OSG::Quaternion((OSG::Quaternion::VectorType const &)*arg1,(OSG::Quaternion::VectorType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Quaternion()\n"
    "    OSG::Quaternion(OSG::Quaternion const &)\n"
    "    OSG::Quaternion(OSG::Quaternion::MatrixType const &)\n"
    "    OSG::Quaternion(OSG::Quaternion::VectorType const &,OSG::Real32 const)\n"
    "    OSG::Quaternion(OSG::Quaternion::VectorType const &,OSG::Quaternion::VectorType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setIdentity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  
  SWIG_check_num_args("setIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIdentity",1,"OSG::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setIdentity",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->setIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setValueAsAxisRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisRad",1,"OSG::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValueAsAxisRad",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisRad",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValueAsAxisRad",4,"OSG::Real32 const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValueAsAxisRad",5,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  arg5 = (OSG::Real32 const)lua_tonumber(L, 5);
  (arg1)->setValueAsAxisRad(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisDeg__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setValueAsAxisDeg",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisDeg",1,"OSG::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValueAsAxisDeg",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisDeg",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValueAsAxisDeg",4,"OSG::Real32 const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValueAsAxisDeg",5,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  arg5 = (OSG::Real32 const)lua_tonumber(L, 5);
  (arg1)->setValueAsAxisDeg(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsQuat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setValueAsQuat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsQuat",1,"OSG::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValueAsQuat",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsQuat",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValueAsQuat",4,"OSG::Real32 const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValueAsQuat",5,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsQuat",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  arg5 = (OSG::Real32 const)lua_tonumber(L, 5);
  (arg1)->setValueAsQuat(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::MatrixType *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"OSG::Quaternion::MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValue",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Quaternion_setValue",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->setValue((OSG::Quaternion::MatrixType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setValueAsAxisRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisRad",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValueAsAxisRad",2,"OSG::Quaternion::VectorType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisRad",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (arg1)->setValueAsAxisRad((OSG::Quaternion::VectorType const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisDeg__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  OSG::Real32 arg3 ;
  
  SWIG_check_num_args("setValueAsAxisDeg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisDeg",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValueAsAxisDeg",2,"OSG::Quaternion::VectorType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisDeg",3,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  (arg1)->setValueAsAxisDeg((OSG::Quaternion::VectorType const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  OSG::Quaternion::VectorType *arg3 = 0 ;
  
  SWIG_check_num_args("setValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"OSG::Quaternion::VectorType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setValue",3,"OSG::Quaternion::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValue",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_setValue",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_setValue",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setValue((OSG::Quaternion::VectorType const &)*arg2,(OSG::Quaternion::VectorType const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueAsAxisRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisRad",1,"OSG::Quaternion *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValueAsAxisRad",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueAsAxisRad((OSG::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsAxisRad__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Quaternion_setValueAsAxisRad__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Quaternion_setValueAsAxisRad__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValueAsAxisRad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValueAsAxisRad(OSG::Quaternion *,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const)\n"
    "    setValueAsAxisRad(OSG::Quaternion *,OSG::Quaternion::VectorType const &,OSG::Real32)\n"
    "    setValueAsAxisRad(OSG::Quaternion *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setValueAsAxisDeg__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueAsAxisDeg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisDeg",1,"OSG::Quaternion *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValueAsAxisDeg",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueAsAxisDeg((OSG::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisDeg(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsAxisDeg__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Quaternion_setValueAsAxisDeg__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Quaternion_setValueAsAxisDeg__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValueAsAxisDeg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValueAsAxisDeg(OSG::Quaternion *,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const)\n"
    "    setValueAsAxisDeg(OSG::Quaternion *,OSG::Quaternion::VectorType const &,OSG::Real32)\n"
    "    setValueAsAxisDeg(OSG::Quaternion *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setValueAsQuat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueAsQuat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsQuat",1,"OSG::Quaternion *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setValueAsQuat",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValueAsQuat",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueAsQuat((OSG::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsQuat(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsQuat__SWIG_1(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Quaternion_setValueAsQuat__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValueAsQuat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValueAsQuat(OSG::Quaternion *,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const)\n"
    "    setValueAsQuat(OSG::Quaternion *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  
  SWIG_check_num_args("setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"OSG::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValue",2,"OSG::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValue",3,"OSG::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValue",4,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setValue",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Real32 const)lua_tonumber(L, 2);
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  (arg1)->setValue(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValue(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion_setValue__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Quaternion_setValue__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Quaternion_setValue__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValue(OSG::Quaternion *,OSG::Quaternion::MatrixType const &)\n"
    "    setValue(OSG::Quaternion *,OSG::Quaternion::VectorType const &,OSG::Quaternion::VectorType const &)\n"
    "    setValue(OSG::Quaternion *,OSG::Real32 const,OSG::Real32 const,OSG::Real32 const)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_getValueAsAxisDeg__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  OSG::Real32 *arg5 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisDeg",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisDeg",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisDeg",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisDeg",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValueAsAxisDeg",4,"OSG::Real32 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getValueAsAxisDeg",5,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",5,SWIGTYPE_p_float);
  }
  
  ((OSG::Quaternion const *)arg1)->getValueAsAxisDeg(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisRad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  OSG::Real32 *arg5 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisRad",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisRad",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisRad",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValueAsAxisRad",4,"OSG::Real32 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getValueAsAxisRad",5,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",5,SWIGTYPE_p_float);
  }
  
  ((OSG::Quaternion const *)arg1)->getValueAsAxisRad(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsQuat(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  OSG::Real32 *arg5 = 0 ;
  
  SWIG_check_num_args("getValueAsQuat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsQuat",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsQuat",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsQuat",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValueAsQuat",4,"OSG::Real32 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getValueAsQuat",5,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",5,SWIGTYPE_p_float);
  }
  
  ((OSG::Quaternion const *)arg1)->getValueAsQuat(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisRad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisRad",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisRad",2,"OSG::Quaternion::VectorType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisRad",3,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",3,SWIGTYPE_p_float);
  }
  
  ((OSG::Quaternion const *)arg1)->getValueAsAxisRad(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisRad(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Quaternion_getValueAsAxisRad__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Quaternion_getValueAsAxisRad__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_getValueAsAxisRad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getValueAsAxisRad(OSG::Quaternion const *,OSG::Real32 &,OSG::Real32 &,OSG::Real32 &,OSG::Real32 &)\n"
    "    getValueAsAxisRad(OSG::Quaternion const *,OSG::Quaternion::VectorType &,OSG::Real32 &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_getValueAsAxisDeg__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisDeg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisDeg",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisDeg",2,"OSG::Quaternion::VectorType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisDeg",3,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",3,SWIGTYPE_p_float);
  }
  
  ((OSG::Quaternion const *)arg1)->getValueAsAxisDeg(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisDeg(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Quaternion_getValueAsAxisDeg__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Quaternion_getValueAsAxisDeg__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_getValueAsAxisDeg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getValueAsAxisDeg(OSG::Quaternion const *,OSG::Real32 &,OSG::Real32 &,OSG::Real32 &,OSG::Real32 &)\n"
    "    getValueAsAxisDeg(OSG::Quaternion const *,OSG::Quaternion::VectorType &,OSG::Real32 &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_getEulerAngleRad(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  
  SWIG_check_num_args("getEulerAngleRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEulerAngleRad",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getEulerAngleRad",2,"OSG::Quaternion::VectorType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngleRad",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngleRad",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::Quaternion const *)arg1)->getEulerAngleRad(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getEulerAngleDeg(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  
  SWIG_check_num_args("getEulerAngleDeg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEulerAngleDeg",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getEulerAngleDeg",2,"OSG::Quaternion::VectorType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngleDeg",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngleDeg",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::Quaternion const *)arg1)->getEulerAngleDeg(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::MatrixType *arg2 = 0 ;
  
  SWIG_check_num_args("getValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValue",2,"OSG::Quaternion::MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getValue",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Quaternion_getValue",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  ((OSG::Quaternion const *)arg1)->getValue(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValuesOnly(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::MatrixType *arg2 = 0 ;
  
  SWIG_check_num_args("getValuesOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesOnly",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesOnly",2,"OSG::Quaternion::MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getValuesOnly",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Quaternion_getValuesOnly",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  ((OSG::Quaternion const *)arg1)->getValuesOnly(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_x(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_x",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (OSG::Real32)((OSG::Quaternion const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_y(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_y",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (OSG::Real32)((OSG::Quaternion const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_z(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_z",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (OSG::Real32)((OSG::Quaternion const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_w(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_w",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (OSG::Real32)((OSG::Quaternion const *)arg1)->w();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_length(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_length",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (OSG::Real32)((OSG::Quaternion const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_lengthSquared(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lengthSquared",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_lengthSquared",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (OSG::Real32)((OSG::Quaternion const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"OSG::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_invert(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  
  SWIG_check_num_args("invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert",1,"OSG::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_invert",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_inverse(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion result;
  
  SWIG_check_num_args("inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverse",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_inverse",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = ((OSG::Quaternion const *)arg1)->inverse();
  {
    OSG::Quaternion * resultptr = new OSG::Quaternion((const OSG::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_conj(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion result;
  
  SWIG_check_num_args("conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("conj",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_conj",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = ((OSG::Quaternion const *)arg1)->conj();
  {
    OSG::Quaternion * resultptr = new OSG::Quaternion((const OSG::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_exp(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion result;
  
  SWIG_check_num_args("exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exp",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_exp",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = ((OSG::Quaternion const *)arg1)->exp();
  {
    OSG::Quaternion * resultptr = new OSG::Quaternion((const OSG::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_log(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion result;
  
  SWIG_check_num_args("log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("log",1,"OSG::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_log",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = ((OSG::Quaternion const *)arg1)->log();
  {
    OSG::Quaternion * resultptr = new OSG::Quaternion((const OSG::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_multVec(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion::VectorType *arg2 = 0 ;
  OSG::Quaternion::VectorType *arg3 = 0 ;
  
  SWIG_check_num_args("multVec",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multVec",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multVec",2,"OSG::Quaternion::VectorType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("multVec",3,"OSG::Quaternion::VectorType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_multVec",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_multVec",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Quaternion_multVec",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::Quaternion const *)arg1)->multVec((OSG::Quaternion::VectorType const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_scaleAngle(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("scaleAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaleAngle",1,"OSG::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scaleAngle",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_scaleAngle",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (arg1)->scaleAngle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_slerpThis(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion *arg2 = 0 ;
  OSG::Quaternion *arg3 = 0 ;
  OSG::Real32 arg4 ;
  
  SWIG_check_num_args("slerpThis",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("slerpThis",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("slerpThis",2,"OSG::Quaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("slerpThis",3,"OSG::Quaternion const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("slerpThis",4,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerpThis",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerpThis",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerpThis",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  (arg1)->slerpThis((OSG::Quaternion const &)*arg2,(OSG::Quaternion const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_nlerpThis(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion *arg2 = 0 ;
  OSG::Quaternion *arg3 = 0 ;
  OSG::Real32 arg4 ;
  
  SWIG_check_num_args("nlerpThis",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nlerpThis",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("nlerpThis",2,"OSG::Quaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("nlerpThis",3,"OSG::Quaternion const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("nlerpThis",4,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_nlerpThis",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_nlerpThis",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_nlerpThis",3,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg4 = (OSG::Real32 const)lua_tonumber(L, 4);
  (arg1)->nlerpThis((OSG::Quaternion const &)*arg2,(OSG::Quaternion const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_mult(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("mult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"OSG::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_mult",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_mult",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->mult((OSG::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_multLeft(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("multLeft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multLeft",1,"OSG::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multLeft",2,"OSG::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_multLeft",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_multLeft",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  (arg1)->multLeft((OSG::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_equals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion *arg2 = 0 ;
  OSG::Real32 arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"OSG::Quaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"OSG::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_equals",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_equals",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  arg3 = (OSG::Real32 const)lua_tonumber(L, 3);
  result = (bool)((OSG::Quaternion const *)arg1)->equals((OSG::Quaternion const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Quaternion *arg1 = (OSG::Quaternion *) 0 ;
  OSG::Quaternion *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_OSG__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_OSG__Quaternion);
  }
  
  result = (bool)((OSG::Quaternion const *)arg1)->operator ==((OSG::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
OSG::Quaternion *arg1 = (OSG::Quaternion *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Quaternion_methods[] = {
    {"setIdentity", _wrap_Quaternion_setIdentity}, 
    {"setValueAsAxisRad", _wrap_Quaternion_setValueAsAxisRad}, 
    {"setValueAsAxisDeg", _wrap_Quaternion_setValueAsAxisDeg}, 
    {"setValueAsQuat", _wrap_Quaternion_setValueAsQuat}, 
    {"setValue", _wrap_Quaternion_setValue}, 
    {"getValueAsQuat", _wrap_Quaternion_getValueAsQuat}, 
    {"getValueAsAxisRad", _wrap_Quaternion_getValueAsAxisRad}, 
    {"getValueAsAxisDeg", _wrap_Quaternion_getValueAsAxisDeg}, 
    {"getEulerAngleRad", _wrap_Quaternion_getEulerAngleRad}, 
    {"getEulerAngleDeg", _wrap_Quaternion_getEulerAngleDeg}, 
    {"getValue", _wrap_Quaternion_getValue}, 
    {"getValuesOnly", _wrap_Quaternion_getValuesOnly}, 
    {"x", _wrap_Quaternion_x}, 
    {"y", _wrap_Quaternion_y}, 
    {"z", _wrap_Quaternion_z}, 
    {"w", _wrap_Quaternion_w}, 
    {"length", _wrap_Quaternion_length}, 
    {"lengthSquared", _wrap_Quaternion_lengthSquared}, 
    {"normalize", _wrap_Quaternion_normalize}, 
    {"invert", _wrap_Quaternion_invert}, 
    {"inverse", _wrap_Quaternion_inverse}, 
    {"conj", _wrap_Quaternion_conj}, 
    {"exp", _wrap_Quaternion_exp}, 
    {"log", _wrap_Quaternion_log}, 
    {"multVec", _wrap_Quaternion_multVec}, 
    {"scaleAngle", _wrap_Quaternion_scaleAngle}, 
    {"slerpThis", _wrap_Quaternion_slerpThis}, 
    {"nlerpThis", _wrap_Quaternion_nlerpThis}, 
    {"mult", _wrap_Quaternion_mult}, 
    {"multLeft", _wrap_Quaternion_multLeft}, 
    {"equals", _wrap_Quaternion_equals}, 
    {"__eq", _wrap_Quaternion___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Quaternion_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Quaternion_bases[] = {0};
static const char *swig_OSG_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Quaternion = { "Quaternion", &SWIGTYPE_p_OSG__Quaternion,_wrap_new_Quaternion, swig_delete_Quaternion, swig_OSG_Quaternion_methods, swig_OSG_Quaternion_attributes, swig_OSG_Quaternion_bases, swig_OSG_Quaternion_base_names };

static int _wrap_new_TypeBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 arg3 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("OSG::TypeBase",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("OSG::TypeBase",1,"OSG::Char8 const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("OSG::TypeBase",2,"OSG::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::TypeBase",3,"OSG::UInt32 const");
  arg1 = (OSG::Char8 *)lua_tostring(L, 1);
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32 const)lua_tonumber(L, 3);
  result = (OSG::TypeBase *)new OSG::TypeBase((OSG::Char8 const *)arg1,(OSG::Char8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TypeBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("OSG::TypeBase",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("OSG::TypeBase",1,"OSG::Char8 const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("OSG::TypeBase",2,"OSG::Char8 const *");
  arg1 = (OSG::Char8 *)lua_tostring(L, 1);
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::TypeBase *)new OSG::TypeBase((OSG::Char8 const *)arg1,(OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TypeBase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TypeBase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TypeBase__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TypeBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::TypeBase(OSG::Char8 const *,OSG::Char8 const *,OSG::UInt32 const)\n"
    "    OSG::TypeBase(OSG::Char8 const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TypeBase_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeBase *arg1 = (OSG::TypeBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getId",1,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (OSG::UInt32)((OSG::TypeBase const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_getName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeBase *arg1 = (OSG::TypeBase *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getName",1,"OSG::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getName",1,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (std::string *) &((OSG::TypeBase const *)arg1)->getName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_getParentName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeBase *arg1 = (OSG::TypeBase *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getParentName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentName",1,"OSG::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getParentName",1,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (std::string *) &((OSG::TypeBase const *)arg1)->getParentName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_getNameSpace(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeBase *arg1 = (OSG::TypeBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNameSpace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNameSpace",1,"OSG::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getNameSpace",1,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (OSG::UInt32)((OSG::TypeBase const *)arg1)->getNameSpace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_isDerivedFrom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeBase *arg1 = (OSG::TypeBase *) 0 ;
  OSG::TypeBase *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"OSG::TypeBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"OSG::TypeBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_isDerivedFrom",1,SWIGTYPE_p_OSG__TypeBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_isDerivedFrom",2,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (bool)((OSG::TypeBase const *)arg1)->isDerivedFrom((OSG::TypeBase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeBase *arg1 = (OSG::TypeBase *) 0 ;
  OSG::TypeBase *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::TypeBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::TypeBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase___eq",1,SWIGTYPE_p_OSG__TypeBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeBase___eq",2,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (bool)((OSG::TypeBase const *)arg1)->operator ==((OSG::TypeBase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypeBase(void *obj) {
OSG::TypeBase *arg1 = (OSG::TypeBase *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_TypeBase_methods[] = {
    {"getId", _wrap_TypeBase_getId}, 
    {"getName", _wrap_TypeBase_getName}, 
    {"getParentName", _wrap_TypeBase_getParentName}, 
    {"getNameSpace", _wrap_TypeBase_getNameSpace}, 
    {"isDerivedFrom", _wrap_TypeBase_isDerivedFrom}, 
    {"__eq", _wrap_TypeBase___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_TypeBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_TypeBase_bases[] = {0};
static const char *swig_OSG_TypeBase_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_TypeBase = { "TypeBase", &SWIGTYPE_p_OSG__TypeBase,_wrap_new_TypeBase, swig_delete_TypeBase, swig_OSG_TypeBase_methods, swig_OSG_TypeBase_attributes, swig_OSG_TypeBase_bases, swig_OSG_TypeBase_base_names };

static int _wrap_new_DataType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 arg3 ;
  OSG::DataType *result = 0 ;
  
  SWIG_check_num_args("OSG::DataType",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("OSG::DataType",1,"OSG::Char8 const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("OSG::DataType",2,"OSG::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::DataType",3,"OSG::UInt32 const");
  arg1 = (OSG::Char8 *)lua_tostring(L, 1);
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32 const)lua_tonumber(L, 3);
  result = (OSG::DataType *)new OSG::DataType((OSG::Char8 const *)arg1,(OSG::Char8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__DataType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DataType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Char8 *arg1 = (OSG::Char8 *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::DataType *result = 0 ;
  
  SWIG_check_num_args("OSG::DataType",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("OSG::DataType",1,"OSG::Char8 const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("OSG::DataType",2,"OSG::Char8 const *");
  arg1 = (OSG::Char8 *)lua_tostring(L, 1);
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::DataType *)new OSG::DataType((OSG::Char8 const *)arg1,(OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__DataType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DataType(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DataType__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DataType__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_DataType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::DataType(OSG::Char8 const *,OSG::Char8 const *,OSG::UInt32 const)\n"
    "    OSG::DataType(OSG::Char8 const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_DataType___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::DataType *arg1 = (OSG::DataType *) 0 ;
  OSG::DataType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::DataType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::DataType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__DataType,0))){
    SWIG_fail_ptr("DataType___eq",1,SWIGTYPE_p_OSG__DataType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__DataType,0))){
    SWIG_fail_ptr("DataType___eq",2,SWIGTYPE_p_OSG__DataType);
  }
  
  result = (bool)((OSG::DataType const *)arg1)->operator ==((OSG::DataType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataType(void *obj) {
OSG::DataType *arg1 = (OSG::DataType *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_DataType_methods[] = {
    {"__eq", _wrap_DataType___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_DataType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_DataType_bases[] = {0,0};
static const char *swig_OSG_DataType_base_names[] = {"OSG::TypeBase *",0};
static swig_lua_class _wrap_class_OSG_DataType = { "DataType", &SWIGTYPE_p_OSG__DataType,_wrap_new_DataType, swig_delete_DataType, swig_OSG_DataType_methods, swig_OSG_DataType_attributes, swig_OSG_DataType_bases, swig_OSG_DataType_base_names };

static int _wrap_TypeFactory_the(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *result = 0 ;
  
  SWIG_check_num_args("OSG::TypeFactory::the",0,0)
  result = (OSG::TypeFactory *)OSG::TypeFactory::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_registerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::TypeBase *arg2 = (OSG::TypeBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("registerType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerType",1,"OSG::TypeFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerType",2,"OSG::TypeBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_registerType",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("TypeFactory_registerType",2,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (OSG::UInt32)OSG_TypeFactory_registerType(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findTypeId__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("findTypeId",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findTypeId",1,"OSG::TypeFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findTypeId",2,"OSG::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findTypeId",3,"OSG::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findTypeId",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32 const)lua_tonumber(L, 3);
  result = (OSG::UInt32)OSG_TypeFactory_findTypeId__SWIG_0(arg1,(char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findTypeId__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("findTypeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findTypeId",1,"OSG::TypeFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findTypeId",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findTypeId",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::UInt32)OSG_TypeFactory_findTypeId__SWIG_0(arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findTypeId(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypeFactory_findTypeId__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TypeFactory_findTypeId__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TypeFactory_findTypeId'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findTypeId(OSG::TypeFactory *,OSG::Char8 const *,OSG::UInt32 const)\n"
    "    findTypeId(OSG::TypeFactory *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TypeFactory_findType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"OSG::TypeFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findType",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findType",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::TypeBase *)OSG_TypeFactory_findType__SWIG_0(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 arg3 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("findType",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"OSG::TypeFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findType",2,"OSG::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findType",3,"OSG::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findType",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32 const)lua_tonumber(L, 3);
  result = (OSG::TypeBase *)OSG_TypeFactory_findType__SWIG_1(arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findType__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"OSG::TypeFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findType",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findType",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::TypeBase *)OSG_TypeFactory_findType__SWIG_1(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findType(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypeFactory_findType__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypeFactory_findType__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TypeFactory_findType__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TypeFactory_findType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findType(OSG::TypeFactory *,OSG::UInt32)\n"
    "    findType(OSG::TypeFactory *,OSG::Char8 const *,OSG::UInt32 const)\n"
    "    findType(OSG::TypeFactory *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TypeFactory_getNumTypes(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumTypes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumTypes",1,"OSG::TypeFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_getNumTypes",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  result = (OSG::UInt32)OSG_TypeFactory_getNumTypes(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_writeTypeGraph(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeFactory *arg1 = (OSG::TypeFactory *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("writeTypeGraph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("writeTypeGraph",1,"OSG::TypeFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("writeTypeGraph",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_writeTypeGraph",1,SWIGTYPE_p_OSG__TypeFactory);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  OSG_TypeFactory_writeTypeGraph(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_TypeFactory_methods[] = {
    {"registerType", _wrap_TypeFactory_registerType}, 
    {"findTypeId", _wrap_TypeFactory_findTypeId}, 
    {"findType", _wrap_TypeFactory_findType}, 
    {"getNumTypes", _wrap_TypeFactory_getNumTypes}, 
    {"writeTypeGraph", _wrap_TypeFactory_writeTypeGraph}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_TypeFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_TypeFactory_bases[] = {0};
static const char *swig_OSG_TypeFactory_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_TypeFactory = { "TypeFactory", &SWIGTYPE_p_OSG__TypeFactory,0,0, swig_OSG_TypeFactory_methods, swig_OSG_TypeFactory_attributes, swig_OSG_TypeFactory_bases, swig_OSG_TypeFactory_base_names };

static int _wrap_Volume_setValid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setValid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValid",1,"OSG::Volume *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setValid",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setValid",1,SWIGTYPE_p_OSG__Volume);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setValid(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setValid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  
  SWIG_check_num_args("setValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValid",1,"OSG::Volume *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setValid",1,SWIGTYPE_p_OSG__Volume);
  }
  
  (arg1)->setValid();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setValid(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Volume_setValid__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Volume_setValid__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Volume_setValid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValid(OSG::Volume *,bool const)\n"
    "    setValid(OSG::Volume *)\n");
  lua_error(L);return 0;
}


static int _wrap_Volume_isValid(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool result;
  
  SWIG_check_num_args("isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_isValid",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setEmpty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setEmpty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEmpty",1,"OSG::Volume *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setEmpty",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setEmpty",1,SWIGTYPE_p_OSG__Volume);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setEmpty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setEmpty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  
  SWIG_check_num_args("setEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEmpty",1,"OSG::Volume *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setEmpty",1,SWIGTYPE_p_OSG__Volume);
  }
  
  (arg1)->setEmpty();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setEmpty(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Volume_setEmpty__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Volume_setEmpty__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Volume_setEmpty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setEmpty(OSG::Volume *,bool const)\n"
    "    setEmpty(OSG::Volume *)\n");
  lua_error(L);return 0;
}


static int _wrap_Volume_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmpty",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_isEmpty",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setStatic__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setStatic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setStatic",1,"OSG::Volume *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setStatic",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setStatic",1,SWIGTYPE_p_OSG__Volume);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setStatic(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setStatic__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  
  SWIG_check_num_args("setStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setStatic",1,"OSG::Volume *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setStatic",1,SWIGTYPE_p_OSG__Volume);
  }
  
  (arg1)->setStatic();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setStatic(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Volume_setStatic__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Volume_setStatic__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Volume_setStatic'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setStatic(OSG::Volume *,bool const)\n"
    "    setStatic(OSG::Volume *)\n");
  lua_error(L);return 0;
}


static int _wrap_Volume_isStatic(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool result;
  
  SWIG_check_num_args("isStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isStatic",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_isStatic",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->isStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setInfinite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setInfinite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setInfinite",1,"OSG::Volume *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setInfinite",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setInfinite",1,SWIGTYPE_p_OSG__Volume);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInfinite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setInfinite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  
  SWIG_check_num_args("setInfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setInfinite",1,"OSG::Volume *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setInfinite",1,SWIGTYPE_p_OSG__Volume);
  }
  
  (arg1)->setInfinite();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setInfinite(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Volume_setInfinite__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Volume_setInfinite__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Volume_setInfinite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setInfinite(OSG::Volume *,bool const)\n"
    "    setInfinite(OSG::Volume *)\n");
  lua_error(L);return 0;
}


static int _wrap_Volume_isInfinite(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInfinite",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_isInfinite",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->isInfinite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_isUntouchable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  bool result;
  
  SWIG_check_num_args("isUntouchable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isUntouchable",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_isUntouchable",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->isUntouchable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_getState(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getState",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_getState",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (OSG::UInt16)((OSG::Volume const *)arg1)->getState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_setState(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::UInt16 arg2 ;
  
  SWIG_check_num_args("setState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setState",1,"OSG::Volume *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setState",2,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_setState",1,SWIGTYPE_p_OSG__Volume);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt16)lua_tonumber(L, 2);
  (arg1)->setState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_getCenter(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  
  SWIG_check_num_args("getCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCenter",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getCenter",2,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_getCenter",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Volume_getCenter",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::Volume const *)arg1)->getCenter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_getScalarVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  float result;
  
  SWIG_check_num_args("getScalarVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScalarVolume",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_getScalarVolume",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (float)((OSG::Volume const *)arg1)->getScalarVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_getBounds",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Volume_getBounds",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Volume_getBounds",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::Volume const *)arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_getMin(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Pnt3f result;
  
  SWIG_check_num_args("getMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMin",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_getMin",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = ((OSG::Volume const *)arg1)->getMin();
  {
    OSG::Pnt3f * resultptr = new OSG::Pnt3f((const OSG::Pnt3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_getMax(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Pnt3f result;
  
  SWIG_check_num_args("getMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMax",1,"OSG::Volume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_getMax",1,SWIGTYPE_p_OSG__Volume);
  }
  
  result = ((OSG::Volume const *)arg1)->getMax();
  {
    OSG::Pnt3f * resultptr = new OSG::Pnt3f((const OSG::Pnt3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_extendBy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::Volume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_extendBy",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Volume_extendBy",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  (arg1)->extendBy((OSG::Pnt3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_extendBy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Volume *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::Volume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::Volume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_extendBy",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_extendBy",2,SWIGTYPE_p_OSG__Volume);
  }
  
  (arg1)->extendBy((OSG::Volume const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_extendBy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Volume_extendBy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Volume_extendBy__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Volume_extendBy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    extendBy(OSG::Volume *,OSG::Pnt3f const &)\n"
    "    extendBy(OSG::Volume *,OSG::Volume const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Volume_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_intersect",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Volume_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->intersect((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Line *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_intersect",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Volume_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->intersect((OSG::Line const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_intersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_intersect",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Volume_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Volume_intersect",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Volume_intersect",4,SWIGTYPE_p_float);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->intersect((OSG::Line const &)*arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_intersect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Volume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Volume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_intersect",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_intersect",2,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->intersect((OSG::Volume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_intersect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Volume_intersect__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Volume_intersect__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Volume_intersect__SWIG_3(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Volume_intersect__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Volume_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(OSG::Volume const *,OSG::Pnt3f const &)\n"
    "    intersect(OSG::Volume const *,OSG::Line const &)\n"
    "    intersect(OSG::Volume const *,OSG::Line const &,OSG::Real32 &,OSG::Real32 &)\n"
    "    intersect(OSG::Volume const *,OSG::Volume const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Volume_isOnSurface(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isOnSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOnSurface",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isOnSurface",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_isOnSurface",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Volume_isOnSurface",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->isOnSurface((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume_transform(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transform",1,"OSG::Volume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transform",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume_transform",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Volume_transform",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->transform((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Volume___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Volume *arg1 = (OSG::Volume *) 0 ;
  OSG::Volume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::Volume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Volume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume___eq",1,SWIGTYPE_p_OSG__Volume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("Volume___eq",2,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::Volume const *)arg1)->operator ==((OSG::Volume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Volume(void *obj) {
OSG::Volume *arg1 = (OSG::Volume *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Volume_methods[] = {
    {"setValid", _wrap_Volume_setValid}, 
    {"isValid", _wrap_Volume_isValid}, 
    {"setEmpty", _wrap_Volume_setEmpty}, 
    {"isEmpty", _wrap_Volume_isEmpty}, 
    {"setStatic", _wrap_Volume_setStatic}, 
    {"isStatic", _wrap_Volume_isStatic}, 
    {"setInfinite", _wrap_Volume_setInfinite}, 
    {"isInfinite", _wrap_Volume_isInfinite}, 
    {"isUntouchable", _wrap_Volume_isUntouchable}, 
    {"getState", _wrap_Volume_getState}, 
    {"setState", _wrap_Volume_setState}, 
    {"getCenter", _wrap_Volume_getCenter}, 
    {"getScalarVolume", _wrap_Volume_getScalarVolume}, 
    {"getBounds", _wrap_Volume_getBounds}, 
    {"getMin", _wrap_Volume_getMin}, 
    {"getMax", _wrap_Volume_getMax}, 
    {"extendBy", _wrap_Volume_extendBy}, 
    {"intersect", _wrap_Volume_intersect}, 
    {"isOnSurface", _wrap_Volume_isOnSurface}, 
    {"transform", _wrap_Volume_transform}, 
    {"__eq", _wrap_Volume___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Volume_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Volume_bases[] = {0};
static const char *swig_OSG_Volume_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Volume = { "Volume", &SWIGTYPE_p_OSG__Volume,0, swig_delete_Volume, swig_OSG_Volume_methods, swig_OSG_Volume_attributes, swig_OSG_Volume_bases, swig_OSG_Volume_base_names };

static int _wrap_BoxVolume_getMin(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMin",1,"OSG::BoxVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_getMin",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  result = (OSG::Pnt3f *) &((OSG::BoxVolume const *)arg1)->getMin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_getMax(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMax",1,"OSG::BoxVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_getMax",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  result = (OSG::Pnt3f *) &((OSG::BoxVolume const *)arg1)->getMax();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_getCenter(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  
  SWIG_check_num_args("getCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCenter",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getCenter",2,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_getCenter",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCenter",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::BoxVolume const *)arg1)->getCenter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_getScalarVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getScalarVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScalarVolume",1,"OSG::BoxVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_getScalarVolume",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  result = (OSG::Real32)((OSG::BoxVolume const *)arg1)->getScalarVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_getCorners(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Pnt3f *arg4 = 0 ;
  OSG::Pnt3f *arg5 = 0 ;
  OSG::Pnt3f *arg6 = 0 ;
  OSG::Pnt3f *arg7 = 0 ;
  OSG::Pnt3f *arg8 = 0 ;
  OSG::Pnt3f *arg9 = 0 ;
  
  SWIG_check_num_args("getCorners",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCorners",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getCorners",2,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getCorners",3,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getCorners",4,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getCorners",5,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("getCorners",6,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("getCorners",7,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("getCorners",8,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("getCorners",9,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",4,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",5,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",6,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",7,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",8,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_getCorners",9,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::BoxVolume const *)arg1)->getCorners(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  
  SWIG_check_num_args("getOrigin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getOrigin",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getOrigin",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getOrigin",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getOrigin",4,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_getOrigin",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BoxVolume_getOrigin",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BoxVolume_getOrigin",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BoxVolume_getOrigin",4,SWIGTYPE_p_float);
  }
  
  ((OSG::BoxVolume const *)arg1)->getOrigin(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_getSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("getSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getSize",2,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_getSize",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("BoxVolume_getSize",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  ((OSG::BoxVolume const *)arg1)->getSize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_setBounds__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  
  SWIG_check_num_args("setBounds",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBounds",1,"OSG::BoxVolume *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBounds",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBounds",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBounds",4,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_setBounds",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  (arg1)->setBounds(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_setBounds__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  
  SWIG_check_num_args("setBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBounds",1,"OSG::BoxVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setBounds",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setBounds",3,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_setBounds",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_setBounds",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_setBounds",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  (arg1)->setBounds((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_setBounds(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BoxVolume_setBounds__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BoxVolume_setBounds__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BoxVolume_setBounds'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setBounds(OSG::BoxVolume *,OSG::Real32,OSG::Real32,OSG::Real32)\n"
    "    setBounds(OSG::BoxVolume *,OSG::Pnt3f const &,OSG::Pnt3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BoxVolume_setBoundsByCenterAndSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("setBoundsByCenterAndSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoundsByCenterAndSize",1,"OSG::BoxVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setBoundsByCenterAndSize",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setBoundsByCenterAndSize",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_setBoundsByCenterAndSize",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_setBoundsByCenterAndSize",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("BoxVolume_setBoundsByCenterAndSize",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  (arg1)->setBoundsByCenterAndSize((OSG::Pnt3f const &)*arg2,(OSG::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_extendBy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::BoxVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_extendBy",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_extendBy",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  (arg1)->extendBy((OSG::Pnt3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_extendBy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Volume *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::BoxVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::Volume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_extendBy",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("BoxVolume_extendBy",2,SWIGTYPE_p_OSG__Volume);
  }
  
  (arg1)->extendBy((OSG::Volume const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_extendBy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::BoxVolume *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::BoxVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::BoxVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_extendBy",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_extendBy",2,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  (arg1)->extendBy((OSG::BoxVolume const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_extendBy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoxVolume_extendBy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoxVolume_extendBy__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoxVolume_extendBy__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BoxVolume_extendBy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    extendBy(OSG::BoxVolume *,OSG::Pnt3f const &)\n"
    "    extendBy(OSG::BoxVolume *,OSG::Volume const &)\n"
    "    extendBy(OSG::BoxVolume *,OSG::BoxVolume const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BoxVolume_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_intersect",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::BoxVolume const *)arg1)->intersect((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Line *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_intersect",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("BoxVolume_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  result = (bool)((OSG::BoxVolume const *)arg1)->intersect((OSG::Line const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_intersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_intersect",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("BoxVolume_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BoxVolume_intersect",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BoxVolume_intersect",4,SWIGTYPE_p_float);
  }
  
  result = (bool)((OSG::BoxVolume const *)arg1)->intersect((OSG::Line const &)*arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_intersect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Volume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Volume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_intersect",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("BoxVolume_intersect",2,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::BoxVolume const *)arg1)->intersect((OSG::Volume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_intersect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::BoxVolume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::BoxVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_intersect",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_intersect",2,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  result = (bool)((OSG::BoxVolume const *)arg1)->intersect((OSG::BoxVolume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_intersect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoxVolume_intersect__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoxVolume_intersect__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoxVolume_intersect__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoxVolume_intersect__SWIG_3(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BoxVolume_intersect__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BoxVolume_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(OSG::BoxVolume const *,OSG::Pnt3f const &)\n"
    "    intersect(OSG::BoxVolume const *,OSG::Line const &)\n"
    "    intersect(OSG::BoxVolume const *,OSG::Line const &,OSG::Real32 &,OSG::Real32 &)\n"
    "    intersect(OSG::BoxVolume const *,OSG::Volume const &)\n"
    "    intersect(OSG::BoxVolume const *,OSG::BoxVolume const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BoxVolume_isOnSurface(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isOnSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOnSurface",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isOnSurface",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_isOnSurface",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("BoxVolume_isOnSurface",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::BoxVolume const *)arg1)->isOnSurface((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume_transform(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transform",1,"OSG::BoxVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transform",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume_transform",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("BoxVolume_transform",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->transform((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxVolume___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BoxVolume *arg1 = (OSG::BoxVolume *) 0 ;
  OSG::BoxVolume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::BoxVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::BoxVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume___eq",1,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("BoxVolume___eq",2,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  result = (bool)((OSG::BoxVolume const *)arg1)->operator ==((OSG::BoxVolume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BoxVolume(void *obj) {
OSG::BoxVolume *arg1 = (OSG::BoxVolume *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_BoxVolume_methods[] = {
    {"getMin", _wrap_BoxVolume_getMin}, 
    {"getMax", _wrap_BoxVolume_getMax}, 
    {"getCenter", _wrap_BoxVolume_getCenter}, 
    {"getScalarVolume", _wrap_BoxVolume_getScalarVolume}, 
    {"getCorners", _wrap_BoxVolume_getCorners}, 
    {"getOrigin", _wrap_BoxVolume_getOrigin}, 
    {"getSize", _wrap_BoxVolume_getSize}, 
    {"setBounds", _wrap_BoxVolume_setBounds}, 
    {"setBoundsByCenterAndSize", _wrap_BoxVolume_setBoundsByCenterAndSize}, 
    {"extendBy", _wrap_BoxVolume_extendBy}, 
    {"intersect", _wrap_BoxVolume_intersect}, 
    {"isOnSurface", _wrap_BoxVolume_isOnSurface}, 
    {"transform", _wrap_BoxVolume_transform}, 
    {"__eq", _wrap_BoxVolume___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_BoxVolume_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_BoxVolume_bases[] = {0,0};
static const char *swig_OSG_BoxVolume_base_names[] = {"OSG::Volume *",0};
static swig_lua_class _wrap_class_OSG_BoxVolume = { "BoxVolume", &SWIGTYPE_p_OSG__BoxVolume,0, swig_delete_BoxVolume, swig_OSG_BoxVolume_methods, swig_OSG_BoxVolume_attributes, swig_OSG_BoxVolume_bases, swig_OSG_BoxVolume_base_names };

static int _wrap_new_FrustumVolume__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *result = 0 ;
  
  SWIG_check_num_args("OSG::FrustumVolume",0,0)
  result = (OSG::FrustumVolume *)new OSG::FrustumVolume();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FrustumVolume,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FrustumVolume__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = 0 ;
  OSG::Plane *arg2 = 0 ;
  OSG::Plane *arg3 = 0 ;
  OSG::Plane *arg4 = 0 ;
  OSG::Plane *arg5 = 0 ;
  OSG::Plane *arg6 = 0 ;
  OSG::FrustumVolume *result = 0 ;
  
  SWIG_check_num_args("OSG::FrustumVolume",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::FrustumVolume",1,"OSG::Plane const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::FrustumVolume",2,"OSG::Plane const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::FrustumVolume",3,"OSG::Plane const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::FrustumVolume",4,"OSG::Plane const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("OSG::FrustumVolume",5,"OSG::Plane const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("OSG::FrustumVolume",6,"OSG::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("new_FrustumVolume",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("new_FrustumVolume",2,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("new_FrustumVolume",3,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("new_FrustumVolume",4,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("new_FrustumVolume",5,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("new_FrustumVolume",6,SWIGTYPE_p_OSG__Plane);
  }
  
  result = (OSG::FrustumVolume *)new OSG::FrustumVolume((OSG::Plane const &)*arg1,(OSG::Plane const &)*arg2,(OSG::Plane const &)*arg3,(OSG::Plane const &)*arg4,(OSG::Plane const &)*arg5,(OSG::Plane const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FrustumVolume,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FrustumVolume__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = 0 ;
  OSG::FrustumVolume *result = 0 ;
  
  SWIG_check_num_args("OSG::FrustumVolume",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::FrustumVolume",1,"OSG::FrustumVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("new_FrustumVolume",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::FrustumVolume *)new OSG::FrustumVolume((OSG::FrustumVolume const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FrustumVolume,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FrustumVolume(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FrustumVolume__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FrustumVolume__SWIG_2(L);
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_FrustumVolume__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_FrustumVolume'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::FrustumVolume()\n"
    "    OSG::FrustumVolume(OSG::Plane const &,OSG::Plane const &,OSG::Plane const &,OSG::Plane const &,OSG::Plane const &,OSG::Plane const &)\n"
    "    OSG::FrustumVolume(OSG::FrustumVolume const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FrustumVolume_getNear(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("getNear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNear",1,"OSG::FrustumVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getNear",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::Plane *) &((OSG::FrustumVolume const *)arg1)->getNear();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getFar(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("getFar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFar",1,"OSG::FrustumVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getFar",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::Plane *) &((OSG::FrustumVolume const *)arg1)->getFar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getLeft(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("getLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLeft",1,"OSG::FrustumVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getLeft",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::Plane *) &((OSG::FrustumVolume const *)arg1)->getLeft();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getRight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRight",1,"OSG::FrustumVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getRight",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::Plane *) &((OSG::FrustumVolume const *)arg1)->getRight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getTop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("getTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTop",1,"OSG::FrustumVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getTop",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::Plane *) &((OSG::FrustumVolume const *)arg1)->getTop();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getBottom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("getBottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBottom",1,"OSG::FrustumVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getBottom",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::Plane *) &((OSG::FrustumVolume const *)arg1)->getBottom();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getCenter(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  
  SWIG_check_num_args("getCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCenter",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getCenter",2,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getCenter",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCenter",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::FrustumVolume const *)arg1)->getCenter(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getScalarVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getScalarVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScalarVolume",1,"OSG::FrustumVolume const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getScalarVolume",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (OSG::Real32)((OSG::FrustumVolume const *)arg1)->getScalarVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getBounds",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getBounds",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getBounds",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::FrustumVolume const *)arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_getCorners(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Pnt3f *arg4 = 0 ;
  OSG::Pnt3f *arg5 = 0 ;
  OSG::Pnt3f *arg6 = 0 ;
  OSG::Pnt3f *arg7 = 0 ;
  OSG::Pnt3f *arg8 = 0 ;
  OSG::Pnt3f *arg9 = 0 ;
  
  SWIG_check_num_args("getCorners",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCorners",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getCorners",2,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getCorners",3,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getCorners",4,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getCorners",5,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("getCorners",6,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("getCorners",7,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("getCorners",8,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("getCorners",9,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",4,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",5,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",6,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",7,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",8,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_getCorners",9,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::FrustumVolume const *)arg1)->getCorners(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_setPlanes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Plane *arg2 = 0 ;
  OSG::Plane *arg3 = 0 ;
  OSG::Plane *arg4 = 0 ;
  OSG::Plane *arg5 = 0 ;
  OSG::Plane *arg6 = 0 ;
  OSG::Plane *arg7 = 0 ;
  
  SWIG_check_num_args("setPlanes",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPlanes",1,"OSG::FrustumVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPlanes",2,"OSG::Plane const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setPlanes",3,"OSG::Plane const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setPlanes",4,"OSG::Plane const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setPlanes",5,"OSG::Plane const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("setPlanes",6,"OSG::Plane const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("setPlanes",7,"OSG::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",2,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",3,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",4,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",5,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",6,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",7,SWIGTYPE_p_OSG__Plane);
  }
  
  (arg1)->setPlanes((OSG::Plane const &)*arg2,(OSG::Plane const &)*arg3,(OSG::Plane const &)*arg4,(OSG::Plane const &)*arg5,(OSG::Plane const &)*arg6,(OSG::Plane const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_setPlanes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("setPlanes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPlanes",1,"OSG::FrustumVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPlanes",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("FrustumVolume_setPlanes",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->setPlanes((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_setPlanes(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_setPlanes__SWIG_1(L);
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FrustumVolume_setPlanes__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FrustumVolume_setPlanes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPlanes(OSG::FrustumVolume *,OSG::Plane const &,OSG::Plane const &,OSG::Plane const &,OSG::Plane const &,OSG::Plane const &,OSG::Plane const &)\n"
    "    setPlanes(OSG::FrustumVolume *,OSG::Matrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FrustumVolume_extendBy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::FrustumVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_extendBy",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_extendBy",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  (arg1)->extendBy((OSG::Pnt3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_extendBy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Volume *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::FrustumVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::Volume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_extendBy",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("FrustumVolume_extendBy",2,SWIGTYPE_p_OSG__Volume);
  }
  
  (arg1)->extendBy((OSG::Volume const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_extendBy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::FrustumVolume *arg2 = 0 ;
  
  SWIG_check_num_args("extendBy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("extendBy",1,"OSG::FrustumVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("extendBy",2,"OSG::FrustumVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_extendBy",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_extendBy",2,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  (arg1)->extendBy((OSG::FrustumVolume const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_extendBy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_extendBy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_extendBy__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_extendBy__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FrustumVolume_extendBy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    extendBy(OSG::FrustumVolume *,OSG::Pnt3f const &)\n"
    "    extendBy(OSG::FrustumVolume *,OSG::Volume const &)\n"
    "    extendBy(OSG::FrustumVolume *,OSG::FrustumVolume const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FrustumVolume_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::FrustumVolume const *)arg1)->intersect((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Line *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  result = (bool)((OSG::FrustumVolume const *)arg1)->intersect((OSG::Line const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_intersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",4,SWIGTYPE_p_float);
  }
  
  result = (bool)((OSG::FrustumVolume const *)arg1)->intersect((OSG::Line const &)*arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_intersect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Volume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Volume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Volume,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",2,SWIGTYPE_p_OSG__Volume);
  }
  
  result = (bool)((OSG::FrustumVolume const *)arg1)->intersect((OSG::Volume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_intersect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::FrustumVolume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::FrustumVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_intersect",2,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (bool)((OSG::FrustumVolume const *)arg1)->intersect((OSG::FrustumVolume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_intersect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_intersect__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_intersect__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_intersect__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Volume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrustumVolume_intersect__SWIG_3(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FrustumVolume, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FrustumVolume_intersect__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FrustumVolume_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(OSG::FrustumVolume const *,OSG::Pnt3f const &)\n"
    "    intersect(OSG::FrustumVolume const *,OSG::Line const &)\n"
    "    intersect(OSG::FrustumVolume const *,OSG::Line const &,OSG::Real32 &,OSG::Real32 &)\n"
    "    intersect(OSG::FrustumVolume const *,OSG::Volume const &)\n"
    "    intersect(OSG::FrustumVolume const *,OSG::FrustumVolume const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FrustumVolume_isOnSurface(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isOnSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOnSurface",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isOnSurface",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_isOnSurface",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("FrustumVolume_isOnSurface",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::FrustumVolume const *)arg1)->isOnSurface((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume_transform(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transform",1,"OSG::FrustumVolume *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transform",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume_transform",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("FrustumVolume_transform",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->transform((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrustumVolume___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) 0 ;
  OSG::FrustumVolume *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::FrustumVolume const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"OSG::FrustumVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume___eq",1,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FrustumVolume,0))){
    SWIG_fail_ptr("FrustumVolume___eq",2,SWIGTYPE_p_OSG__FrustumVolume);
  }
  
  result = (bool)((OSG::FrustumVolume const *)arg1)->operator ==((OSG::FrustumVolume const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrustumVolume(void *obj) {
OSG::FrustumVolume *arg1 = (OSG::FrustumVolume *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_FrustumVolume_methods[] = {
    {"getNear", _wrap_FrustumVolume_getNear}, 
    {"getFar", _wrap_FrustumVolume_getFar}, 
    {"getLeft", _wrap_FrustumVolume_getLeft}, 
    {"getRight", _wrap_FrustumVolume_getRight}, 
    {"getTop", _wrap_FrustumVolume_getTop}, 
    {"getBottom", _wrap_FrustumVolume_getBottom}, 
    {"getCenter", _wrap_FrustumVolume_getCenter}, 
    {"getScalarVolume", _wrap_FrustumVolume_getScalarVolume}, 
    {"getBounds", _wrap_FrustumVolume_getBounds}, 
    {"getCorners", _wrap_FrustumVolume_getCorners}, 
    {"setPlanes", _wrap_FrustumVolume_setPlanes}, 
    {"extendBy", _wrap_FrustumVolume_extendBy}, 
    {"intersect", _wrap_FrustumVolume_intersect}, 
    {"isOnSurface", _wrap_FrustumVolume_isOnSurface}, 
    {"transform", _wrap_FrustumVolume_transform}, 
    {"__eq", _wrap_FrustumVolume___eq}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_FrustumVolume_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FrustumVolume_bases[] = {0,0};
static const char *swig_OSG_FrustumVolume_base_names[] = {"OSG::Volume *",0};
static swig_lua_class _wrap_class_OSG_FrustumVolume = { "FrustumVolume", &SWIGTYPE_p_OSG__FrustumVolume,_wrap_new_FrustumVolume, swig_delete_FrustumVolume, swig_OSG_FrustumVolume_methods, swig_OSG_FrustumVolume_attributes, swig_OSG_FrustumVolume_bases, swig_OSG_FrustumVolume_base_names };

static int _wrap_FieldType_getContentType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldType *arg1 = (OSG::FieldType *) 0 ;
  OSG::DataType *result = 0 ;
  
  SWIG_check_num_args("getContentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentType",1,"OSG::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldType,0))){
    SWIG_fail_ptr("FieldType_getContentType",1,SWIGTYPE_p_OSG__FieldType);
  }
  
  result = (OSG::DataType *) &((OSG::FieldType const *)arg1)->getContentType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__DataType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldType_getCardinality(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldType *arg1 = (OSG::FieldType *) 0 ;
  OSG::FieldType::Cardinality result;
  
  SWIG_check_num_args("getCardinality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCardinality",1,"OSG::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldType,0))){
    SWIG_fail_ptr("FieldType_getCardinality",1,SWIGTYPE_p_OSG__FieldType);
  }
  
  result = (OSG::FieldType::Cardinality)((OSG::FieldType const *)arg1)->getCardinality();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldType_getClass(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldType *arg1 = (OSG::FieldType *) 0 ;
  OSG::FieldType::Class result;
  
  SWIG_check_num_args("getClass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClass",1,"OSG::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldType,0))){
    SWIG_fail_ptr("FieldType_getClass",1,SWIGTYPE_p_OSG__FieldType);
  }
  
  result = (OSG::FieldType::Class)((OSG::FieldType const *)arg1)->getClass();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldType_getScanTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldType *arg1 = (OSG::FieldType *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getScanTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScanTypeId",1,"OSG::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldType,0))){
    SWIG_fail_ptr("FieldType_getScanTypeId",1,SWIGTYPE_p_OSG__FieldType);
  }
  
  result = (OSG::UInt32)((OSG::FieldType const *)arg1)->getScanTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldType_isPtrField(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldType *arg1 = (OSG::FieldType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPtrField",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPtrField",1,"OSG::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldType,0))){
    SWIG_fail_ptr("FieldType_isPtrField",1,SWIGTYPE_p_OSG__FieldType);
  }
  
  result = (bool)((OSG::FieldType const *)arg1)->isPtrField();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldType_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TypeBase *arg1 = (OSG::TypeBase *) 0 ;
  OSG::FieldType *result = 0 ;
  
  SWIG_check_num_args("OSG_FieldType_dcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OSG_FieldType_dcast",1,"OSG::TypeBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("FieldType_dcast",1,SWIGTYPE_p_OSG__TypeBase);
  }
  
  try {
    result = (OSG::FieldType *)OSG_FieldType_dcast(arg1);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldType(void *obj) {
OSG::FieldType *arg1 = (OSG::FieldType *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_FieldType_methods[] = {
    {"getContentType", _wrap_FieldType_getContentType}, 
    {"getCardinality", _wrap_FieldType_getCardinality}, 
    {"getClass", _wrap_FieldType_getClass}, 
    {"getScanTypeId", _wrap_FieldType_getScanTypeId}, 
    {"isPtrField", _wrap_FieldType_isPtrField}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_FieldType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FieldType_bases[] = {0,0};
static const char *swig_OSG_FieldType_base_names[] = {"OSG::DataType *",0};
static swig_lua_class _wrap_class_OSG_FieldType = { "FieldType", &SWIGTYPE_p_OSG__FieldType,0, swig_delete_FieldType, swig_OSG_FieldType_methods, swig_OSG_FieldType_attributes, swig_OSG_FieldType_bases, swig_OSG_FieldType_base_names };

static int _wrap_FactoryBase_getName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FactoryBase *arg1 = (OSG::FactoryBase *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getName",1,"OSG::FactoryBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FactoryBase,0))){
    SWIG_fail_ptr("FactoryBase_getName",1,SWIGTYPE_p_OSG__FactoryBase);
  }
  
  result = (std::string *) &((OSG::FactoryBase const *)arg1)->getName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_FactoryBase_methods[] = {
    {"getName", _wrap_FactoryBase_getName}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_FactoryBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FactoryBase_bases[] = {0};
static const char *swig_OSG_FactoryBase_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_FactoryBase = { "FactoryBase", &SWIGTYPE_p_OSG__FactoryBase,0,0, swig_OSG_FactoryBase_methods, swig_OSG_FactoryBase_attributes, swig_OSG_FactoryBase_bases, swig_OSG_FactoryBase_base_names };

static int _wrap_new_Line__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *result = 0 ;
  
  SWIG_check_num_args("OSG::Line",0,0)
  result = (OSG::Line *)new OSG::Line();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Line__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = 0 ;
  OSG::Line *result = 0 ;
  
  SWIG_check_num_args("OSG::Line",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Line",1,"OSG::Line const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("new_Line",1,SWIGTYPE_p_OSG__Line);
  }
  
  result = (OSG::Line *)new OSG::Line((OSG::Line const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Line__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Line *result = 0 ;
  
  SWIG_check_num_args("OSG::Line",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Line",1,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::Line",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Line",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Line",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Line *)new OSG::Line((OSG::Pnt3f const &)*arg1,(OSG::Pnt3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Line__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Line *result = 0 ;
  
  SWIG_check_num_args("OSG::Line",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Line",1,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::Line",2,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Line",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Line",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (OSG::Line *)new OSG::Line((OSG::Pnt3f const &)*arg1,(OSG::Vec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Line(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Line__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Line__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Line__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Line__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Line'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Line()\n"
    "    OSG::Line(OSG::Line const &)\n"
    "    OSG::Line(OSG::Pnt3f const &,OSG::Pnt3f const &)\n"
    "    OSG::Line(OSG::Pnt3f const &,OSG::Vec3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Line_getClosestPoints(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Pnt3f *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("getClosestPoints",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClosestPoints",1,"OSG::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClosestPoints",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getClosestPoints",3,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getClosestPoints",4,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_getClosestPoints",1,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_getClosestPoints",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_getClosestPoints",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_getClosestPoints",4,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Line const *)arg1)->getClosestPoints((OSG::Line const &)*arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getClosestPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f result;
  
  SWIG_check_num_args("getClosestPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClosestPoint",1,"OSG::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClosestPoint",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_getClosestPoint",1,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_getClosestPoint",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = ((OSG::Line const *)arg1)->getClosestPoint((OSG::Pnt3f const &)*arg2);
  {
    OSG::Pnt3f * resultptr = new OSG::Pnt3f((const OSG::Pnt3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_distance(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("distance",1,"OSG::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("distance",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_distance",1,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_distance",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Real32)((OSG::Line const *)arg1)->distance((OSG::Pnt3f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"OSG::Line const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_getPosition",1,SWIGTYPE_p_OSG__Line);
  }
  
  result = (OSG::Pnt3f *) &((OSG::Line const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getDirection(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDirection",1,"OSG::Line const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_getDirection",1,SWIGTYPE_p_OSG__Line);
  }
  
  result = (OSG::Vec3f *) &((OSG::Line const *)arg1)->getDirection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::BoxVolume *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Real32 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::BoxVolume const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_intersect",1,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("Line_intersect",2,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Line_intersect",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Line_intersect",4,SWIGTYPE_p_float);
  }
  
  result = (bool)((OSG::Line const *)arg1)->intersect((OSG::BoxVolume const &)*arg2,*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Real32 arg2 ;
  OSG::BoxVolume *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Line const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intersect",2,"OSG::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::BoxVolume const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_intersect",1,SWIGTYPE_p_OSG__Line);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("Line_intersect",3,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  result = (bool)((OSG::Line const *)arg1)->intersect(arg2,(OSG::BoxVolume const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_intersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Vec3f *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Line const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intersect",2,"OSG::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_intersect",1,SWIGTYPE_p_OSG__Line);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Line_intersect",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)((OSG::Line const *)arg1)->intersect(arg2,(OSG::Vec3f const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_intersect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Vec3f *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Line const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intersect",2,"OSG::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("intersect",5,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_intersect",1,SWIGTYPE_p_OSG__Line);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Line_intersect",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Line_intersect",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Line_intersect",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)((OSG::Line const *)arg1)->intersect(arg2,(OSG::Vec3f const &)*arg3,(OSG::Vec3f const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_intersect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Pnt3f *arg4 = 0 ;
  OSG::Real32 *arg5 = 0 ;
  OSG::Vec3f *arg6 = (OSG::Vec3f *) 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("intersect",5,"OSG::Real32 &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("intersect",6,"OSG::Vec3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_intersect",1,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_intersect",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_intersect",4,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Line_intersect",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("Line_intersect",6,SWIGTYPE_p_OSG__Vec3f);
  }
  
  result = (bool)((OSG::Line const *)arg1)->intersect((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,(OSG::Pnt3f const &)*arg4,*arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_intersect__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Line *arg1 = (OSG::Line *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Pnt3f *arg4 = 0 ;
  OSG::Real32 *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("intersect",5,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Line_intersect",1,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_intersect",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_intersect",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Line_intersect",4,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Line_intersect",5,SWIGTYPE_p_float);
  }
  
  result = (bool)((OSG::Line const *)arg1)->intersect((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,(OSG::Pnt3f const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_intersect(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Line_intersect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Line_intersect__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__BoxVolume, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Line_intersect__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Line_intersect__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Line_intersect__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Line_intersect__SWIG_4(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Line_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(OSG::Line const *,OSG::BoxVolume const &,OSG::Real32 &,OSG::Real32 &)\n"
    "    intersect(OSG::Line const *,OSG::Real32,OSG::BoxVolume const &)\n"
    "    intersect(OSG::Line const *,OSG::Real32,OSG::Vec3f const &)\n"
    "    intersect(OSG::Line const *,OSG::Real32,OSG::Vec3f const &,OSG::Vec3f const &,OSG::Vec3f &)\n"
    "    intersect(OSG::Line const *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Real32 &,OSG::Vec3f *)\n"
    "    intersect(OSG::Line const *,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Real32 &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Line(void *obj) {
OSG::Line *arg1 = (OSG::Line *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Line_methods[] = {
    {"getClosestPoints", _wrap_Line_getClosestPoints}, 
    {"getClosestPoint", _wrap_Line_getClosestPoint}, 
    {"distance", _wrap_Line_distance}, 
    {"getPosition", _wrap_Line_getPosition}, 
    {"getDirection", _wrap_Line_getDirection}, 
    {"intersect", _wrap_Line_intersect}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Line_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Line_bases[] = {0};
static const char *swig_OSG_Line_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Line = { "Line", &SWIGTYPE_p_OSG__Line,_wrap_new_Line, swig_delete_Line, swig_OSG_Line_methods, swig_OSG_Line_attributes, swig_OSG_Line_bases, swig_OSG_Line_base_names };

static int _wrap_new_Plane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("OSG::Plane",0,0)
  result = (OSG::Plane *)new OSG::Plane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("OSG::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Plane",1,"OSG::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_OSG__Plane);
  }
  
  result = (OSG::Plane *)new OSG::Plane((OSG::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("OSG::Plane",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Plane",1,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::Plane",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::Plane",3,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Plane",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Plane *)new OSG::Plane((OSG::Pnt3f const &)*arg1,(OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = 0 ;
  OSG::Real32 arg2 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("OSG::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Plane",1,"OSG::Vec3f const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::Plane",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  result = (OSG::Plane *)new OSG::Plane((OSG::Vec3f const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Vec3f *arg1 = 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Plane *result = 0 ;
  
  SWIG_check_num_args("OSG::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::Plane",1,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::Plane",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Plane *)new OSG::Plane((OSG::Vec3f const &)*arg1,(OSG::Pnt3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Plane__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Plane__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Plane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::Plane()\n"
    "    OSG::Plane(OSG::Plane const &)\n"
    "    OSG::Plane(OSG::Pnt3f const &,OSG::Pnt3f const &,OSG::Pnt3f const &)\n"
    "    OSG::Plane(OSG::Vec3f const &,OSG::Real32)\n"
    "    OSG::Plane(OSG::Vec3f const &,OSG::Pnt3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_offset(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("offset",1,"OSG::Plane *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("offset",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_offset",1,SWIGTYPE_p_OSG__Plane);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (arg1)->offset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Plane *arg2 = 0 ;
  OSG::Line *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Plane const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Line &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_intersect",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_intersect",2,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Plane_intersect",3,SWIGTYPE_p_OSG__Line);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->intersect((OSG::Plane const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_intersect",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Plane_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_intersect",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->intersect((OSG::Line const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_intersect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersect",3,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_intersect",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Plane_intersect",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Plane_intersect",3,SWIGTYPE_p_float);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->intersect((OSG::Line const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_intersect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_intersect__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_intersect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_intersect__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Plane_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(OSG::Plane const *,OSG::Plane const &,OSG::Line &)\n"
    "    intersect(OSG::Plane const *,OSG::Line const &,OSG::Pnt3f &)\n"
    "    intersect(OSG::Plane const *,OSG::Line const &,OSG::Real32 &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_intersectInfinite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersectInfinite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersectInfinite",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersectInfinite",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersectInfinite",3,"OSG::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_intersectInfinite",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Plane_intersectInfinite",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Plane_intersectInfinite",3,SWIGTYPE_p_float);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->intersectInfinite((OSG::Line const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_intersectInfinite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersectInfinite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersectInfinite",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersectInfinite",2,"OSG::Line const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersectInfinite",3,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_intersectInfinite",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Plane_intersectInfinite",2,SWIGTYPE_p_OSG__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_intersectInfinite",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->intersectInfinite((OSG::Line const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_intersectInfinite(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_intersectInfinite__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_intersectInfinite__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Plane_intersectInfinite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersectInfinite(OSG::Plane const *,OSG::Line const &,OSG::Real32 &)\n"
    "    intersectInfinite(OSG::Plane const *,OSG::Line const &,OSG::Pnt3f &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_transform(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transform",1,"OSG::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transform",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_transform",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Plane_transform",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->transform((OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_clip(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Pnt3f *arg2 = (OSG::Pnt3f *) 0 ;
  OSG::Pnt3f *arg3 = (OSG::Pnt3f *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("clip",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clip",1,"OSG::Plane const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("clip",2,"OSG::Pnt3f *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("clip",3,"OSG::Pnt3f *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("clip",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_clip",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_clip",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_clip",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)((OSG::Plane const *)arg1)->clip(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_isOnPlane(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isOnPlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isOnPlane",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isOnPlane",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_isOnPlane",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_isOnPlane",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->isOnPlane((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_isInHalfSpace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isInHalfSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInHalfSpace",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isInHalfSpace",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_isInHalfSpace",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_isInHalfSpace",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->isInHalfSpace((OSG::Pnt3f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_distance(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("distance",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("distance",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_distance",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_distance",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (OSG::Real32)((OSG::Plane const *)arg1)->distance((OSG::Pnt3f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_isInHalfSpace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("isInHalfSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInHalfSpace",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isInHalfSpace",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("isInHalfSpace",3,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_isInHalfSpace",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_isInHalfSpace",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_isInHalfSpace",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  result = (bool)((OSG::Plane const *)arg1)->isInHalfSpace((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_isInHalfSpace(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_isInHalfSpace__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_isInHalfSpace__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Plane_isInHalfSpace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isInHalfSpace(OSG::Plane const *,OSG::Pnt3f const &)\n"
    "    isInHalfSpace(OSG::Plane const *,OSG::Pnt3f const &,OSG::Pnt3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_getNormal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"OSG::Plane const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_getNormal",1,SWIGTYPE_p_OSG__Plane);
  }
  
  result = (OSG::Vec3f *) &((OSG::Plane const *)arg1)->getNormal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_getDistanceFromOrigin(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Real32 result;
  
  SWIG_check_num_args("getDistanceFromOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDistanceFromOrigin",1,"OSG::Plane const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_getDistanceFromOrigin",1,SWIGTYPE_p_OSG__Plane);
  }
  
  result = (OSG::Real32)((OSG::Plane const *)arg1)->getDistanceFromOrigin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_setDirectionIndexPoint(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Plane *arg1 = (OSG::Plane *) 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  OSG::Pnt3f *arg3 = 0 ;
  OSG::UInt8 arg4 ;
  OSG::Pnt3f *arg5 = 0 ;
  
  SWIG_check_num_args("setDirectionIndexPoint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDirectionIndexPoint",1,"OSG::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setDirectionIndexPoint",2,"OSG::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setDirectionIndexPoint",3,"OSG::Pnt3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setDirectionIndexPoint",4,"OSG::UInt8 const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setDirectionIndexPoint",5,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Plane,0))){
    SWIG_fail_ptr("Plane_setDirectionIndexPoint",1,SWIGTYPE_p_OSG__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_setDirectionIndexPoint",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_setDirectionIndexPoint",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt8 const)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("Plane_setDirectionIndexPoint",5,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  ((OSG::Plane const *)arg1)->setDirectionIndexPoint((OSG::Pnt3f const &)*arg2,(OSG::Pnt3f const &)*arg3,arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Plane(void *obj) {
OSG::Plane *arg1 = (OSG::Plane *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_Plane_methods[] = {
    {"offset", _wrap_Plane_offset}, 
    {"intersect", _wrap_Plane_intersect}, 
    {"intersectInfinite", _wrap_Plane_intersectInfinite}, 
    {"transform", _wrap_Plane_transform}, 
    {"clip", _wrap_Plane_clip}, 
    {"isOnPlane", _wrap_Plane_isOnPlane}, 
    {"distance", _wrap_Plane_distance}, 
    {"isInHalfSpace", _wrap_Plane_isInHalfSpace}, 
    {"getNormal", _wrap_Plane_getNormal}, 
    {"getDistanceFromOrigin", _wrap_Plane_getDistanceFromOrigin}, 
    {"setDirectionIndexPoint", _wrap_Plane_setDirectionIndexPoint}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Plane_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Plane_bases[] = {0};
static const char *swig_OSG_Plane_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Plane = { "Plane", &SWIGTYPE_p_OSG__Plane,_wrap_new_Plane, swig_delete_Plane, swig_OSG_Plane_methods, swig_OSG_Plane_attributes, swig_OSG_Plane_bases, swig_OSG_Plane_base_names };

static int _wrap_MatrixOrthogonal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  OSG::Real32 arg6 ;
  OSG::Real32 arg7 ;
  bool result;
  
  SWIG_check_num_args("OSG::MatrixOrthogonal",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::MatrixOrthogonal",1,"OSG::Matrix &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::MatrixOrthogonal",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::MatrixOrthogonal",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::MatrixOrthogonal",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::MatrixOrthogonal",5,"OSG::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::MatrixOrthogonal",6,"OSG::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("OSG::MatrixOrthogonal",7,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixOrthogonal",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  result = (bool)OSG::MatrixOrthogonal(*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixFrustum(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  OSG::Real32 arg6 ;
  OSG::Real32 arg7 ;
  bool result;
  
  SWIG_check_num_args("OSG::MatrixFrustum",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::MatrixFrustum",1,"OSG::Matrix &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::MatrixFrustum",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::MatrixFrustum",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::MatrixFrustum",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::MatrixFrustum",5,"OSG::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::MatrixFrustum",6,"OSG::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("OSG::MatrixFrustum",7,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixFrustum",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  result = (bool)OSG::MatrixFrustum(*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixPerspective(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  bool result;
  
  SWIG_check_num_args("OSG::MatrixPerspective",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::MatrixPerspective",1,"OSG::Matrix &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::MatrixPerspective",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::MatrixPerspective",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::MatrixPerspective",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::MatrixPerspective",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixPerspective",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  result = (bool)OSG::MatrixPerspective(*arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixStereoPerspective(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Matrix *arg2 = 0 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  OSG::Real32 arg6 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Real32 arg9 ;
  OSG::Real32 arg10 ;
  bool result;
  
  SWIG_check_num_args("OSG::MatrixStereoPerspective",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::MatrixStereoPerspective",1,"OSG::Matrix &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::MatrixStereoPerspective",2,"OSG::Matrix &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::MatrixStereoPerspective",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::MatrixStereoPerspective",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::MatrixStereoPerspective",5,"OSG::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::MatrixStereoPerspective",6,"OSG::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("OSG::MatrixStereoPerspective",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("OSG::MatrixStereoPerspective",8,"OSG::Real32");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("OSG::MatrixStereoPerspective",9,"OSG::Real32");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("OSG::MatrixStereoPerspective",10,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixStereoPerspective",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixStereoPerspective",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  arg9 = (OSG::Real32)lua_tonumber(L, 9);
  arg10 = (OSG::Real32)lua_tonumber(L, 10);
  result = (bool)OSG::MatrixStereoPerspective(*arg1,*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixLookAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  OSG::Real32 arg6 ;
  OSG::Real32 arg7 ;
  OSG::Real32 arg8 ;
  OSG::Real32 arg9 ;
  OSG::Real32 arg10 ;
  bool result;
  
  SWIG_check_num_args("OSG::MatrixLookAt",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::MatrixLookAt",1,"OSG::Matrix &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::MatrixLookAt",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::MatrixLookAt",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::MatrixLookAt",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::MatrixLookAt",5,"OSG::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::MatrixLookAt",6,"OSG::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("OSG::MatrixLookAt",7,"OSG::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("OSG::MatrixLookAt",8,"OSG::Real32");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("OSG::MatrixLookAt",9,"OSG::Real32");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("OSG::MatrixLookAt",10,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixLookAt",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  arg8 = (OSG::Real32)lua_tonumber(L, 8);
  arg9 = (OSG::Real32)lua_tonumber(L, 9);
  arg10 = (OSG::Real32)lua_tonumber(L, 10);
  result = (bool)OSG::MatrixLookAt(*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixLookAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Pnt3f arg2 ;
  OSG::Pnt3f arg3 ;
  OSG::Vec3f arg4 ;
  OSG::Pnt3f *argp2 ;
  OSG::Pnt3f *argp3 ;
  OSG::Vec3f *argp4 ;
  bool result;
  
  SWIG_check_num_args("OSG::MatrixLookAt",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::MatrixLookAt",1,"OSG::Matrix &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::MatrixLookAt",2,"OSG::Pnt3f");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::MatrixLookAt",3,"OSG::Pnt3f");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::MatrixLookAt",4,"OSG::Vec3f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixLookAt",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("MatrixLookAt",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("MatrixLookAt",3,SWIGTYPE_p_OSG__Pnt3f);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("MatrixLookAt",4,SWIGTYPE_p_OSG__Vec3f);
  }
  arg4 = *argp4;
  
  result = (bool)OSG::MatrixLookAt(*arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixLookAt(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__Pnt3f, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_OSG__Vec3f, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MatrixLookAt__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_MatrixLookAt__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MatrixLookAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::MatrixLookAt(OSG::Matrix &,OSG::Real32,OSG::Real32,OSG::Real32,OSG::Real32,OSG::Real32,OSG::Real32,OSG::Real32,OSG::Real32,OSG::Real32)\n"
    "    OSG::MatrixLookAt(OSG::Matrix &,OSG::Pnt3f,OSG::Pnt3f,OSG::Vec3f)\n");
  lua_error(L);return 0;
}


static int _wrap_MatrixProjection(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  OSG::Real32 arg6 ;
  OSG::Real32 arg7 ;
  bool result;
  
  SWIG_check_num_args("OSG::MatrixProjection",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::MatrixProjection",1,"OSG::Matrix &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::MatrixProjection",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::MatrixProjection",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::MatrixProjection",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::MatrixProjection",5,"OSG::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::MatrixProjection",6,"OSG::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("OSG::MatrixProjection",7,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("MatrixProjection",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  arg6 = (OSG::Real32)lua_tonumber(L, 6);
  arg7 = (OSG::Real32)lua_tonumber(L, 7);
  result = (bool)OSG::MatrixProjection(*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeViewFromUVND(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Vec3f *arg5 = 0 ;
  
  SWIG_check_num_args("OSG::makeViewFromUVND",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::makeViewFromUVND",1,"OSG::Matrix &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::makeViewFromUVND",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::makeViewFromUVND",3,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::makeViewFromUVND",4,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("OSG::makeViewFromUVND",5,"OSG::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("makeViewFromUVND",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("makeViewFromUVND",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("makeViewFromUVND",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("makeViewFromUVND",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("makeViewFromUVND",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  OSG::makeViewFromUVND(*arg1,(OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3,(OSG::Vec3f const &)*arg4,(OSG::Vec3f const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeViewFromUVNP(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Pnt3f *arg5 = 0 ;
  
  SWIG_check_num_args("OSG::makeViewFromUVNP",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::makeViewFromUVNP",1,"OSG::Matrix &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::makeViewFromUVNP",2,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::makeViewFromUVNP",3,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::makeViewFromUVNP",4,"OSG::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("OSG::makeViewFromUVNP",5,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("makeViewFromUVNP",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("makeViewFromUVNP",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("makeViewFromUVNP",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("makeViewFromUVNP",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("makeViewFromUVNP",5,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  OSG::makeViewFromUVNP(*arg1,(OSG::Vec3f const &)*arg2,(OSG::Vec3f const &)*arg3,(OSG::Vec3f const &)*arg4,(OSG::Pnt3f const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getUVNDFromMat(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Vec3f *arg5 = 0 ;
  
  SWIG_check_num_args("OSG::getUVNDFromMat",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::getUVNDFromMat",1,"OSG::Matrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::getUVNDFromMat",2,"OSG::Vec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::getUVNDFromMat",3,"OSG::Vec3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::getUVNDFromMat",4,"OSG::Vec3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("OSG::getUVNDFromMat",5,"OSG::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("getUVNDFromMat",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("getUVNDFromMat",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("getUVNDFromMat",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("getUVNDFromMat",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("getUVNDFromMat",5,SWIGTYPE_p_OSG__Vec3f);
  }
  
  OSG::getUVNDFromMat((OSG::Matrix const &)*arg1,*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getUVNPFromMat(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Vec3f *arg2 = 0 ;
  OSG::Vec3f *arg3 = 0 ;
  OSG::Vec3f *arg4 = 0 ;
  OSG::Pnt3f *arg5 = 0 ;
  
  SWIG_check_num_args("OSG::getUVNPFromMat",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::getUVNPFromMat",1,"OSG::Matrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::getUVNPFromMat",2,"OSG::Vec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::getUVNPFromMat",3,"OSG::Vec3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::getUVNPFromMat",4,"OSG::Vec3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("OSG::getUVNPFromMat",5,"OSG::Pnt3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("getUVNPFromMat",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("getUVNPFromMat",2,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("getUVNPFromMat",3,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_OSG__Vec3f,0))){
    SWIG_fail_ptr("getUVNPFromMat",4,SWIGTYPE_p_OSG__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("getUVNPFromMat",5,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  OSG::getUVNPFromMat((OSG::Matrix const &)*arg1,*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getPFromViewMat(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Pnt3f *arg1 = 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("OSG::getPFromViewMat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::getPFromViewMat",1,"OSG::Pnt3f &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::getPFromViewMat",2,"OSG::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("getPFromViewMat",1,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("getPFromViewMat",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  OSG::getPFromViewMat(*arg1,(OSG::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setViewMatEyePos(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Matrix *arg1 = 0 ;
  OSG::Pnt3f *arg2 = 0 ;
  
  SWIG_check_num_args("OSG::setViewMatEyePos",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::setViewMatEyePos",1,"OSG::Matrix &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::setViewMatEyePos",2,"OSG::Pnt3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("setViewMatEyePos",1,SWIGTYPE_p_OSG__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Pnt3f,0))){
    SWIG_fail_ptr("setViewMatEyePos",2,SWIGTYPE_p_OSG__Pnt3f);
  }
  
  OSG::setViewMatEyePos(*arg1,(OSG::Pnt3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringToUInt32Map__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::map<(std::string,OSG::UInt32)>",0,0)
  result = (std::map< std::string,OSG::UInt32 > *)new std::map< std::string,OSG::UInt32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringToUInt32Map__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,unsigned int > *arg1 = 0 ;
  std::map< std::string,OSG::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::map<(std::string,OSG::UInt32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::map<(std::string,OSG::UInt32)>",1,"std::map< std::string,unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("new_StringToUInt32Map",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (std::map< std::string,OSG::UInt32 > *)new std::map< std::string,OSG::UInt32 >((std::map< std::string,unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringToUInt32Map(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringToUInt32Map__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringToUInt32Map__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StringToUInt32Map'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,OSG::UInt32 >()\n"
    "    std::map< std::string,OSG::UInt32 >(std::map< std::string,unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StringToUInt32Map_size(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::map< std::string,OSG::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_size",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (unsigned int)((std::map< std::string,OSG::UInt32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::map< std::string,OSG::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_empty",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)((std::map< std::string,OSG::UInt32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"std::map< std::string,OSG::UInt32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_clear",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"std::map< std::string,OSG::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("get",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_get",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  try {
    result = (unsigned int *) &std_map_Sl_std_string_Sc_OSG_UInt32_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  std::string temp2 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"std::map< std::string,OSG::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("set",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_set",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  std_map_Sl_std_string_Sc_OSG_UInt32_Sg__set(arg1,(std::string const &)*arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_del(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("del",1,"std::map< std::string,OSG::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("del",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_del",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  try {
    std_map_Sl_std_string_Sc_OSG_UInt32_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_has_key(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("has_key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("has_key",1,"std::map< std::string,OSG::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("has_key",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_has_key",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)std_map_Sl_std_string_Sc_OSG_UInt32_Sg__has_key(arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringToUInt32Map(void *obj) {
std::map< std::string,OSG::UInt32 > *arg1 = (std::map< std::string,OSG::UInt32 > *) obj;
delete arg1;
}
static swig_lua_method swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__methods[] = {
    {"size", _wrap_StringToUInt32Map_size}, 
    {"empty", _wrap_StringToUInt32Map_empty}, 
    {"clear", _wrap_StringToUInt32Map_clear}, 
    {"get", _wrap_StringToUInt32Map_get}, 
    {"set", _wrap_StringToUInt32Map_set}, 
    {"del", _wrap_StringToUInt32Map_del}, 
    {"has_key", _wrap_StringToUInt32Map_has_key}, 
    {0,0}
};
static swig_lua_attribute swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__bases[] = {0};
static const char *swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_map_Sl_std_string_Sc_OSG_UInt32_Sg_ = { "StringToUInt32Map", &SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,_wrap_new_StringToUInt32Map, swig_delete_StringToUInt32Map, swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__methods, swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__attributes, swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__bases, swig_std_map_Sl_std_string_Sc_OSG_UInt32_Sg__base_names };

static int _wrap_new_Int32ToStringMap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *result = 0 ;
  
  SWIG_check_num_args("std::map<(OSG::Int32,std::string)>",0,0)
  result = (std::map< OSG::Int32,std::string > *)new std::map< OSG::Int32,std::string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_int_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32ToStringMap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::map< int,std::string > *arg1 = 0 ;
  std::map< OSG::Int32,std::string > *result = 0 ;
  
  SWIG_check_num_args("std::map<(OSG::Int32,std::string)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::map<(OSG::Int32,std::string)>",1,"std::map< int,std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("new_Int32ToStringMap",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  result = (std::map< OSG::Int32,std::string > *)new std::map< OSG::Int32,std::string >((std::map< int,std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_int_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32ToStringMap(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32ToStringMap__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_int_std__string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32ToStringMap__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Int32ToStringMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< OSG::Int32,std::string >()\n"
    "    std::map< OSG::Int32,std::string >(std::map< int,std::string > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32ToStringMap_size(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::map< OSG::Int32,std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("Int32ToStringMap_size",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  result = (unsigned int)((std::map< OSG::Int32,std::string > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ToStringMap_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::map< OSG::Int32,std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("Int32ToStringMap_empty",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  result = (bool)((std::map< OSG::Int32,std::string > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ToStringMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"std::map< OSG::Int32,std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("Int32ToStringMap_clear",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ToStringMap_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"std::map< OSG::Int32,std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("get",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("Int32ToStringMap_get",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  try {
    result = (std::string *) &std_map_Sl_OSG_Int32_Sc_std_string_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ToStringMap_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) 0 ;
  int *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"std::map< OSG::Int32,std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"int const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("set",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("Int32ToStringMap_set",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  std_map_Sl_OSG_Int32_Sc_std_string_Sg__set(arg1,(int const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ToStringMap_del(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("del",1,"std::map< OSG::Int32,std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("del",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("Int32ToStringMap_del",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  try {
    std_map_Sl_OSG_Int32_Sc_std_string_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32ToStringMap_has_key(lua_State* L) {
  int SWIG_arg = 0;
  std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  SWIG_check_num_args("has_key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("has_key",1,"std::map< OSG::Int32,std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("has_key",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_int_std__string_t,0))){
    SWIG_fail_ptr("Int32ToStringMap_has_key",1,SWIGTYPE_p_std__mapT_int_std__string_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)std_map_Sl_OSG_Int32_Sc_std_string_Sg__has_key(arg1,(int const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32ToStringMap(void *obj) {
std::map< OSG::Int32,std::string > *arg1 = (std::map< OSG::Int32,std::string > *) obj;
delete arg1;
}
static swig_lua_method swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__methods[] = {
    {"size", _wrap_Int32ToStringMap_size}, 
    {"empty", _wrap_Int32ToStringMap_empty}, 
    {"clear", _wrap_Int32ToStringMap_clear}, 
    {"get", _wrap_Int32ToStringMap_get}, 
    {"set", _wrap_Int32ToStringMap_set}, 
    {"del", _wrap_Int32ToStringMap_del}, 
    {"has_key", _wrap_Int32ToStringMap_has_key}, 
    {0,0}
};
static swig_lua_attribute swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__bases[] = {0};
static const char *swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_map_Sl_OSG_Int32_Sc_std_string_Sg_ = { "Int32ToStringMap", &SWIGTYPE_p_std__mapT_int_std__string_t,_wrap_new_Int32ToStringMap, swig_delete_Int32ToStringMap, swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__methods, swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__attributes, swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__bases, swig_std_map_Sl_OSG_Int32_Sc_std_string_Sg__base_names };

static int _wrap_FieldDescriptionBase_getName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getName",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_getName",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = ((OSG::FieldDescriptionBase const *)arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_getDocumentation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getDocumentation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDocumentation",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_getDocumentation",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = ((OSG::FieldDescriptionBase const *)arg1)->getDocumentation();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_getTypeId",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (OSG::UInt32)((OSG::FieldDescriptionBase const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_getFieldMask(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  OSG::BitVector result;
  
  SWIG_check_num_args("getFieldMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldMask",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_getFieldMask",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (OSG::BitVector)((OSG::FieldDescriptionBase const *)arg1)->getFieldMask();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_setFieldMask(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  OSG::BitVector arg2 ;
  
  SWIG_check_num_args("setFieldMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFieldMask",1,"OSG::FieldDescriptionBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setFieldMask",2,"OSG::BitVector");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_setFieldMask",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::BitVector)lua_tonumber(L, 2);
  (arg1)->setFieldMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_getFieldId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getFieldId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldId",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_getFieldId",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (OSG::UInt32)((OSG::FieldDescriptionBase const *)arg1)->getFieldId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_setFieldId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("setFieldId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFieldId",1,"OSG::FieldDescriptionBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setFieldId",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_setFieldId",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->setFieldId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_getFieldType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("getFieldType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldType",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_getFieldType",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (OSG::TypeBase *) &((OSG::FieldDescriptionBase const *)arg1)->getFieldType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_isInternal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInternal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInternal",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_isInternal",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (bool)((OSG::FieldDescriptionBase const *)arg1)->isInternal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_getFlags(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFlags",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_getFlags",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (OSG::UInt32)((OSG::FieldDescriptionBase const *)arg1)->getFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_isValid(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_isValid",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (bool)((OSG::FieldDescriptionBase const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_isSField(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("isSField",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isSField",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_isSField",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (bool)((OSG::FieldDescriptionBase const *)arg1)->isSField();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescriptionBase_isMField(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("isMField",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isMField",1,"OSG::FieldDescriptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("FieldDescriptionBase_isMField",1,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (bool)((OSG::FieldDescriptionBase const *)arg1)->isMField();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldDescriptionBase(void *obj) {
OSG::FieldDescriptionBase *arg1 = (OSG::FieldDescriptionBase *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_FieldDescriptionBase_methods[] = {
    {"getName", _wrap_FieldDescriptionBase_getName}, 
    {"getDocumentation", _wrap_FieldDescriptionBase_getDocumentation}, 
    {"getTypeId", _wrap_FieldDescriptionBase_getTypeId}, 
    {"getFieldMask", _wrap_FieldDescriptionBase_getFieldMask}, 
    {"setFieldMask", _wrap_FieldDescriptionBase_setFieldMask}, 
    {"getFieldId", _wrap_FieldDescriptionBase_getFieldId}, 
    {"setFieldId", _wrap_FieldDescriptionBase_setFieldId}, 
    {"getFieldType", _wrap_FieldDescriptionBase_getFieldType}, 
    {"isInternal", _wrap_FieldDescriptionBase_isInternal}, 
    {"getFlags", _wrap_FieldDescriptionBase_getFlags}, 
    {"isValid", _wrap_FieldDescriptionBase_isValid}, 
    {"isSField", _wrap_FieldDescriptionBase_isSField}, 
    {"isMField", _wrap_FieldDescriptionBase_isMField}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_FieldDescriptionBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FieldDescriptionBase_bases[] = {0};
static const char *swig_OSG_FieldDescriptionBase_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_FieldDescriptionBase = { "FieldDescriptionBase", &SWIGTYPE_p_OSG__FieldDescriptionBase,0, swig_delete_FieldDescriptionBase, swig_OSG_FieldDescriptionBase_methods, swig_OSG_FieldDescriptionBase_attributes, swig_OSG_FieldDescriptionBase_bases, swig_OSG_FieldDescriptionBase_base_names };

static int _wrap_EventDescription_getName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventDescription *arg1 = (OSG::EventDescription *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getName",1,"OSG::EventDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventDescription,0))){
    SWIG_fail_ptr("EventDescription_getName",1,SWIGTYPE_p_OSG__EventDescription);
  }
  
  result = (std::string *) &((OSG::EventDescription const *)arg1)->getName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventDescription_getDescription(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventDescription *arg1 = (OSG::EventDescription *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getDescription",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDescription",1,"OSG::EventDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventDescription,0))){
    SWIG_fail_ptr("EventDescription_getDescription",1,SWIGTYPE_p_OSG__EventDescription);
  }
  
  result = (std::string *) &((OSG::EventDescription const *)arg1)->getDescription();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventDescription_getEventId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventDescription *arg1 = (OSG::EventDescription *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getEventId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventId",1,"OSG::EventDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventDescription,0))){
    SWIG_fail_ptr("EventDescription_getEventId",1,SWIGTYPE_p_OSG__EventDescription);
  }
  
  result = (OSG::UInt32)((OSG::EventDescription const *)arg1)->getEventId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventDescription_getConsumable(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventDescription *arg1 = (OSG::EventDescription *) 0 ;
  bool result;
  
  SWIG_check_num_args("getConsumable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getConsumable",1,"OSG::EventDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventDescription,0))){
    SWIG_fail_ptr("EventDescription_getConsumable",1,SWIGTYPE_p_OSG__EventDescription);
  }
  
  result = (bool)((OSG::EventDescription const *)arg1)->getConsumable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventDescription_getEventArgumentType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventDescription *arg1 = (OSG::EventDescription *) 0 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("getEventArgumentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventArgumentType",1,"OSG::EventDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventDescription,0))){
    SWIG_fail_ptr("EventDescription_getEventArgumentType",1,SWIGTYPE_p_OSG__EventDescription);
  }
  
  result = (OSG::TypeBase *) &((OSG::EventDescription const *)arg1)->getEventArgumentType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventDescription(void *obj) {
OSG::EventDescription *arg1 = (OSG::EventDescription *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_EventDescription_methods[] = {
    {"getName", _wrap_EventDescription_getName}, 
    {"getDescription", _wrap_EventDescription_getDescription}, 
    {"getEventId", _wrap_EventDescription_getEventId}, 
    {"getConsumable", _wrap_EventDescription_getConsumable}, 
    {"getEventArgumentType", _wrap_EventDescription_getEventArgumentType}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_EventDescription_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_EventDescription_bases[] = {0};
static const char *swig_OSG_EventDescription_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_EventDescription = { "EventDescription", &SWIGTYPE_p_OSG__EventDescription,0, swig_delete_EventDescription, swig_OSG_EventDescription_methods, swig_OSG_EventDescription_attributes, swig_OSG_EventDescription_bases, swig_OSG_EventDescription_base_names };

static int _wrap_EventProducerType_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::EventProducerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_getGroupId",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  result = (OSG::UInt16)((OSG::EventProducerType const *)arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_getParent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParent",1,"OSG::EventProducerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_getParent",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  result = (OSG::EventProducerType *)((OSG::EventProducerType const *)arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::EventProducerType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_getEventDescription",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::EventProducerType const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_getEventDescription",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)((OSG::EventProducerType const *)arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EventProducerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventProducerType_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EventProducerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventProducerType_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EventProducerType_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::EventProducerType *,OSG::UInt32)\n"
    "    getEventDescription(OSG::EventProducerType const *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_EventProducerType_findEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("findEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findEventDescription",1,"OSG::EventProducerType *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_findEventDescription",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(arg1)->findEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_findEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("findEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findEventDescription",1,"OSG::EventProducerType const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_findEventDescription",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)((OSG::EventProducerType const *)arg1)->findEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_findEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EventProducerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventProducerType_findEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EventProducerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventProducerType_findEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EventProducerType_findEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findEventDescription(OSG::EventProducerType *,OSG::Char8 const *)\n"
    "    findEventDescription(OSG::EventProducerType const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EventProducerType_getNumEventDescs(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEventDescs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEventDescs",1,"OSG::EventProducerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_getNumEventDescs",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  result = (OSG::UInt32)((OSG::EventProducerType const *)arg1)->getNumEventDescs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_isAbstract(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAbstract",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAbstract",1,"OSG::EventProducerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_isAbstract",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  result = (bool)((OSG::EventProducerType const *)arg1)->isAbstract();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_isDerivedFrom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::TypeBase *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"OSG::EventProducerType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"OSG::TypeBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_isDerivedFrom",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("EventProducerType_isDerivedFrom",2,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (bool)((OSG::EventProducerType const *)arg1)->isDerivedFrom((OSG::TypeBase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_isDerivedFrom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventProducerType *arg1 = (OSG::EventProducerType *) 0 ;
  OSG::EventProducerType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"OSG::EventProducerType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"OSG::EventProducerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_isDerivedFrom",1,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__EventProducerType,0))){
    SWIG_fail_ptr("EventProducerType_isDerivedFrom",2,SWIGTYPE_p_OSG__EventProducerType);
  }
  
  result = (bool)((OSG::EventProducerType const *)arg1)->isDerivedFrom((OSG::EventProducerType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventProducerType_isDerivedFrom(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EventProducerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__EventProducerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventProducerType_isDerivedFrom__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EventProducerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__TypeBase, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventProducerType_isDerivedFrom__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EventProducerType_isDerivedFrom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isDerivedFrom(OSG::EventProducerType const *,OSG::TypeBase const &)\n"
    "    isDerivedFrom(OSG::EventProducerType const *,OSG::EventProducerType const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_EventProducerType(void *obj) {
OSG::EventProducerType *arg1 = (OSG::EventProducerType *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_EventProducerType_methods[] = {
    {"getGroupId", _wrap_EventProducerType_getGroupId}, 
    {"getParent", _wrap_EventProducerType_getParent}, 
    {"getEventDescription", _wrap_EventProducerType_getEventDescription}, 
    {"findEventDescription", _wrap_EventProducerType_findEventDescription}, 
    {"getNumEventDescs", _wrap_EventProducerType_getNumEventDescs}, 
    {"isAbstract", _wrap_EventProducerType_isAbstract}, 
    {"isDerivedFrom", _wrap_EventProducerType_isDerivedFrom}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_EventProducerType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_EventProducerType_bases[] = {0,0};
static const char *swig_OSG_EventProducerType_base_names[] = {"OSG::TypeBase *",0};
static swig_lua_class _wrap_class_OSG_EventProducerType = { "EventProducerType", &SWIGTYPE_p_OSG__EventProducerType,0, swig_delete_EventProducerType, swig_OSG_EventProducerType_methods, swig_OSG_EventProducerType_attributes, swig_OSG_EventProducerType_bases, swig_OSG_EventProducerType_base_names };

static int _wrap_FieldContainerRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::FieldContainer *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::FieldContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr___deref__",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::FieldContainer *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FieldContainerRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::FieldContainerRefPtr",0,0)
  result = (OSG::FieldContainerRefPtr *)new OSG::FieldContainerRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FieldContainerRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = 0 ;
  OSG::FieldContainerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::FieldContainerRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::FieldContainerRefPtr",1,"OSG::FieldContainerRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("new_FieldContainerRefPtr",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::FieldContainerRefPtr *)new OSG::FieldContainerRefPtr((OSG::FieldContainerRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FieldContainerRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FieldContainerRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FieldContainerRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_FieldContainerRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::FieldContainerRefPtr()\n"
    "    OSG::FieldContainerRefPtr(OSG::FieldContainerRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerRefPtr_getFCPtr(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("getFCPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFCPtr",1,"OSG::FieldContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getFCPtr",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  try {
    result = OSG_FieldContainerRefPtr_getFCPtr(arg1);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_setName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setName",1,"OSG::FieldContainerRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setName",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_setName",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  try {
    OSG_FieldContainerRefPtr_setName(arg1,arg2);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getName",1,"OSG::FieldContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getName",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  try {
    result = (OSG::Char8 *)OSG_FieldContainerRefPtr_getName(arg1);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr___eq(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Int32 *arg2 = 0 ;
  OSG::Int32 temp2 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"OSG::FieldContainerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator ==",2,"OSG::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr___eq",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  temp2=(OSG::Int32)lua_tonumber(L,2); arg2=&temp2;
  try {
    result = (bool)OSG_FieldContainerRefPtr_operator_Se__Se_(arg1,(int const &)*arg2);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getFieldCardinality(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldType::Cardinality result;
  
  SWIG_check_num_args("getFieldCardinality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldCardinality",1,"OSG::FieldContainerRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldCardinality",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getFieldCardinality",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  try {
    result = (OSG::FieldType::Cardinality)OSG_FieldContainerRefPtr_getFieldCardinality(arg1,arg2);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_deepClone(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("deepClone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deepClone",1,"OSG::FieldContainerRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("deepClone",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_deepClone",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  try {
    result = OSG_FieldContainerRefPtr_deepClone(arg1,(std::string const &)*arg2);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getFieldSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getFieldSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldSize",1,"OSG::FieldContainerRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldSize",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getFieldSize",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  try {
    result = (OSG::UInt32)OSG_FieldContainerRefPtr_getFieldSize(arg1,arg2);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_clearField(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  
  SWIG_check_num_args("clearField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearField",1,"OSG::FieldContainerRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("clearField",2,"OSG::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_clearField",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  try {
    OSG_FieldContainerRefPtr_clearField(arg1,arg2);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_removeFieldValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 arg3 ;
  
  SWIG_check_num_args("removeFieldValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeFieldValue",1,"OSG::FieldContainerRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("removeFieldValue",2,"OSG::Char8 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("removeFieldValue",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_removeFieldValue",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  try {
    OSG_FieldContainerRefPtr_removeFieldValue(arg1,arg2,arg3);
  }
  catch(char const *_e) {
    lua_pushstring(L,_e);SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::FieldContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getType",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getTypeId",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getGroupId",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getTypeName",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getProducerType",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getId",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getNumFields",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::FieldContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::FieldContainerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_attachActivity",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::FieldContainerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::FieldContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::FieldContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::FieldContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::FieldContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::FieldContainerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::FieldContainerRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::FieldContainerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::FieldContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::FieldContainerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("FieldContainerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::FieldContainerRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::FieldContainerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_FieldContainerRefPtr(void *obj) {
OSG::FieldContainerRefPtr *arg1 = (OSG::FieldContainerRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_FieldContainerRefPtr_methods[] = {
    {"__deref__", _wrap_FieldContainerRefPtr___deref__}, 
    {"getFCPtr", _wrap_FieldContainerRefPtr_getFCPtr}, 
    {"setName", _wrap_FieldContainerRefPtr_setName}, 
    {"getName", _wrap_FieldContainerRefPtr_getName}, 
    {"__eq", _wrap_FieldContainerRefPtr___eq}, 
    {"getFieldCardinality", _wrap_FieldContainerRefPtr_getFieldCardinality}, 
    {"deepClone", _wrap_FieldContainerRefPtr_deepClone}, 
    {"getFieldSize", _wrap_FieldContainerRefPtr_getFieldSize}, 
    {"clearField", _wrap_FieldContainerRefPtr_clearField}, 
    {"removeFieldValue", _wrap_FieldContainerRefPtr_removeFieldValue}, 
    {"getType", _wrap_FieldContainerRefPtr_getType}, 
    {"shallowCopy", _wrap_FieldContainerRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_FieldContainerRefPtr_getTypeId}, 
    {"getGroupId", _wrap_FieldContainerRefPtr_getGroupId}, 
    {"getTypeName", _wrap_FieldContainerRefPtr_getTypeName}, 
    {"getProducerType", _wrap_FieldContainerRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_FieldContainerRefPtr_getContainerSize}, 
    {"getId", _wrap_FieldContainerRefPtr_getId}, 
    {"getNumFields", _wrap_FieldContainerRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_FieldContainerRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_FieldContainerRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_FieldContainerRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_FieldContainerRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_FieldContainerRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_FieldContainerRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_FieldContainerRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_FieldContainerRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_FieldContainerRefPtr_getEventDescription}, 
    {"getFieldValue",getFieldValue},
    {"setFieldValue",setFieldValue},
    {"pushFieldValue",pushFieldValue},
    {"insertFieldValue",insertFieldValue},
    {0,0}
};
static swig_lua_attribute swig_OSG_FieldContainerRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FieldContainerRefPtr_bases[] = {0};
static const char *swig_OSG_FieldContainerRefPtr_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_FieldContainerRefPtr = { "FieldContainerRefPtr", &SWIGTYPE_p_OSG__FieldContainerRefPtr,_wrap_new_FieldContainerRefPtr, swig_delete_FieldContainerRefPtr, swig_OSG_FieldContainerRefPtr_methods, swig_OSG_FieldContainerRefPtr_attributes, swig_OSG_FieldContainerRefPtr_bases, swig_OSG_FieldContainerRefPtr_base_names };

static int _wrap_ReflexiveContainerType_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ReflexiveContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_getGroupId",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  result = (OSG::UInt16)((OSG::ReflexiveContainerType const *)arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_getFieldDesc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDesc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDesc",1,"OSG::ReflexiveContainerType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDesc",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_getFieldDesc",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(arg1)->getFieldDesc(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_getFieldDesc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDesc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDesc",1,"OSG::ReflexiveContainerType const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDesc",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_getFieldDesc",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)((OSG::ReflexiveContainerType const *)arg1)->getFieldDesc(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_getFieldDesc__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDesc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDesc",1,"OSG::ReflexiveContainerType *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDesc",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_getFieldDesc",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(arg1)->getFieldDesc((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_getFieldDesc__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDesc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDesc",1,"OSG::ReflexiveContainerType const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDesc",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_getFieldDesc",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)((OSG::ReflexiveContainerType const *)arg1)->getFieldDesc((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_getFieldDesc(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainerType_getFieldDesc__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainerType_getFieldDesc__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainerType_getFieldDesc__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainerType_getFieldDesc__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ReflexiveContainerType_getFieldDesc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDesc(OSG::ReflexiveContainerType *,OSG::UInt32)\n"
    "    getFieldDesc(OSG::ReflexiveContainerType const *,OSG::UInt32)\n"
    "    getFieldDesc(OSG::ReflexiveContainerType *,OSG::Char8 const *)\n"
    "    getFieldDesc(OSG::ReflexiveContainerType const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ReflexiveContainerType_getNumFieldDescs(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFieldDescs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFieldDescs",1,"OSG::ReflexiveContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_getNumFieldDescs",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  result = (OSG::UInt32)((OSG::ReflexiveContainerType const *)arg1)->getNumFieldDescs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_getUnmarkedOnCreate(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::BitVector result;
  
  SWIG_check_num_args("getUnmarkedOnCreate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getUnmarkedOnCreate",1,"OSG::ReflexiveContainerType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_getUnmarkedOnCreate",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  result = (OSG::BitVector)(arg1)->getUnmarkedOnCreate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_addInitialDesc(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::FieldDescriptionBase *arg2 = (OSG::FieldDescriptionBase *) 0 ;
  
  SWIG_check_num_args("addInitialDesc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addInitialDesc",1,"OSG::ReflexiveContainerType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addInitialDesc",2,"OSG::FieldDescriptionBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_addInitialDesc",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("ReflexiveContainerType_addInitialDesc",2,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  (arg1)->addInitialDesc(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_addDescription(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::FieldDescriptionBase *arg2 = 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("addDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addDescription",1,"OSG::ReflexiveContainerType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addDescription",2,"OSG::FieldDescriptionBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_addDescription",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldDescriptionBase,0))){
    SWIG_fail_ptr("ReflexiveContainerType_addDescription",2,SWIGTYPE_p_OSG__FieldDescriptionBase);
  }
  
  result = (OSG::UInt32)(arg1)->addDescription((OSG::FieldDescriptionBase const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainerType_subDescription(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("subDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subDescription",1,"OSG::ReflexiveContainerType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("subDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainerType,0))){
    SWIG_fail_ptr("ReflexiveContainerType_subDescription",1,SWIGTYPE_p_OSG__ReflexiveContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->subDescription(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ReflexiveContainerType(void *obj) {
OSG::ReflexiveContainerType *arg1 = (OSG::ReflexiveContainerType *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ReflexiveContainerType_methods[] = {
    {"getGroupId", _wrap_ReflexiveContainerType_getGroupId}, 
    {"getFieldDesc", _wrap_ReflexiveContainerType_getFieldDesc}, 
    {"getNumFieldDescs", _wrap_ReflexiveContainerType_getNumFieldDescs}, 
    {"getUnmarkedOnCreate", _wrap_ReflexiveContainerType_getUnmarkedOnCreate}, 
    {"addInitialDesc", _wrap_ReflexiveContainerType_addInitialDesc}, 
    {"addDescription", _wrap_ReflexiveContainerType_addDescription}, 
    {"subDescription", _wrap_ReflexiveContainerType_subDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ReflexiveContainerType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ReflexiveContainerType_bases[] = {0,0};
static const char *swig_OSG_ReflexiveContainerType_base_names[] = {"OSG::DataType *",0};
static swig_lua_class _wrap_class_OSG_ReflexiveContainerType = { "ReflexiveContainerType", &SWIGTYPE_p_OSG__ReflexiveContainerType,0, swig_delete_ReflexiveContainerType, swig_OSG_ReflexiveContainerType_methods, swig_OSG_ReflexiveContainerType_attributes, swig_OSG_ReflexiveContainerType_bases, swig_OSG_ReflexiveContainerType_base_names };

static int _wrap_FieldContainerType_isAbstract(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAbstract",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAbstract",1,"OSG::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isAbstract",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (bool)((OSG::FieldContainerType const *)arg1)->isAbstract();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isDerivedFrom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  OSG::TypeBase *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"OSG::FieldContainerType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"OSG::TypeBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__TypeBase,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",2,SWIGTYPE_p_OSG__TypeBase);
  }
  
  result = (bool)((OSG::FieldContainerType const *)arg1)->isDerivedFrom((OSG::TypeBase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isDerivedFrom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"OSG::FieldContainerType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (bool)((OSG::FieldContainerType const *)arg1)->isDerivedFrom((OSG::FieldContainerType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isDerivedFrom(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FieldContainerType_isDerivedFrom__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__TypeBase, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FieldContainerType_isDerivedFrom__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerType_isDerivedFrom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isDerivedFrom(OSG::FieldContainerType const *,OSG::TypeBase const &)\n"
    "    isDerivedFrom(OSG::FieldContainerType const *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerType_isNode(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isNode",1,"OSG::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isNode",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (bool)((OSG::FieldContainerType const *)arg1)->isNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isNodeCore(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isNodeCore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isNodeCore",1,"OSG::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isNodeCore",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (bool)((OSG::FieldContainerType const *)arg1)->isNodeCore();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isAttachment(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAttachment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAttachment",1,"OSG::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isAttachment",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (bool)((OSG::FieldContainerType const *)arg1)->isAttachment();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_getPrototype(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("getPrototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPrototype",1,"OSG::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getPrototype",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = ((OSG::FieldContainerType const *)arg1)->getPrototype();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_getFcdXML(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getFcdXML",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFcdXML",1,"OSG::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getFcdXML",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = ((OSG::FieldContainerType const *)arg1)->getFcdXML();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_getDocumentation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getDocumentation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDocumentation",1,"OSG::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getDocumentation",1,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = ((OSG::FieldContainerType const *)arg1)->getDocumentation();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldContainerType(void *obj) {
OSG::FieldContainerType *arg1 = (OSG::FieldContainerType *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_FieldContainerType_methods[] = {
    {"isAbstract", _wrap_FieldContainerType_isAbstract}, 
    {"isDerivedFrom", _wrap_FieldContainerType_isDerivedFrom}, 
    {"isNode", _wrap_FieldContainerType_isNode}, 
    {"isNodeCore", _wrap_FieldContainerType_isNodeCore}, 
    {"isAttachment", _wrap_FieldContainerType_isAttachment}, 
    {"getPrototype", _wrap_FieldContainerType_getPrototype}, 
    {"getFcdXML", _wrap_FieldContainerType_getFcdXML}, 
    {"getDocumentation", _wrap_FieldContainerType_getDocumentation}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_FieldContainerType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FieldContainerType_bases[] = {0,0};
static const char *swig_OSG_FieldContainerType_base_names[] = {"OSG::ReflexiveContainerType *",0};
static swig_lua_class _wrap_class_OSG_FieldContainerType = { "FieldContainerType", &SWIGTYPE_p_OSG__FieldContainerType,0, swig_delete_FieldContainerType, swig_OSG_FieldContainerType_methods, swig_OSG_FieldContainerType_attributes, swig_OSG_FieldContainerType_bases, swig_OSG_FieldContainerType_base_names };

static int _wrap_ReflexiveContainer_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::TypeBase *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getType",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::TypeBase *) &((OSG::ReflexiveContainer const *)arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getTypeId",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::UInt32)((OSG::ReflexiveContainer const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getGroupId",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::UInt16)((OSG::ReflexiveContainer const *)arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getTypeName",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::Char8 *)((OSG::ReflexiveContainer const *)arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getProducerType",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::EventProducerType *) &((OSG::ReflexiveContainer const *)arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getContainerSize",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::UInt32)((OSG::ReflexiveContainer const *)arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getId",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::UInt32)((OSG::ReflexiveContainer const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getNumFields",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::UInt32)((OSG::ReflexiveContainer const *)arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getNumEvents",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (OSG::UInt32)((OSG::ReflexiveContainer const *)arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ReflexiveContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_isEventProducer",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  result = (bool)((OSG::ReflexiveContainer const *)arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ReflexiveContainer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_attachActivity",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ReflexiveContainer_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ReflexiveContainer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ReflexiveContainer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_isEmptyEvent",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)((OSG::ReflexiveContainer const *)arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ReflexiveContainer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_numSlotsEvent",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)((OSG::ReflexiveContainer const *)arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ReflexiveContainer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_disconnectAll",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  (arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ReflexiveContainer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getFieldDescription",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)((OSG::ReflexiveContainer const *)arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ReflexiveContainer const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getFieldDescription",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)((OSG::ReflexiveContainer const *)arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainer_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainer_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ReflexiveContainer_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ReflexiveContainer const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ReflexiveContainer const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ReflexiveContainer_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ReflexiveContainer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getEventDescription",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)((OSG::ReflexiveContainer const *)arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ReflexiveContainer *arg1 = (OSG::ReflexiveContainer *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ReflexiveContainer const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ReflexiveContainer,0))){
    SWIG_fail_ptr("ReflexiveContainer_getEventDescription",1,SWIGTYPE_p_OSG__ReflexiveContainer);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)((OSG::ReflexiveContainer const *)arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReflexiveContainer_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainer_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ReflexiveContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReflexiveContainer_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ReflexiveContainer_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ReflexiveContainer const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ReflexiveContainer const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_ReflexiveContainer_methods[] = {
    {"getType", _wrap_ReflexiveContainer_getType}, 
    {"getTypeId", _wrap_ReflexiveContainer_getTypeId}, 
    {"getGroupId", _wrap_ReflexiveContainer_getGroupId}, 
    {"getTypeName", _wrap_ReflexiveContainer_getTypeName}, 
    {"getProducerType", _wrap_ReflexiveContainer_getProducerType}, 
    {"getContainerSize", _wrap_ReflexiveContainer_getContainerSize}, 
    {"getId", _wrap_ReflexiveContainer_getId}, 
    {"getNumFields", _wrap_ReflexiveContainer_getNumFields}, 
    {"getNumEvents", _wrap_ReflexiveContainer_getNumEvents}, 
    {"isEventProducer", _wrap_ReflexiveContainer_isEventProducer}, 
    {"attachActivity", _wrap_ReflexiveContainer_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ReflexiveContainer_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ReflexiveContainer_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ReflexiveContainer_numSlotsEvent}, 
    {"disconnectAll", _wrap_ReflexiveContainer_disconnectAll}, 
    {"getFieldDescription", _wrap_ReflexiveContainer_getFieldDescription}, 
    {"getEventDescription", _wrap_ReflexiveContainer_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ReflexiveContainer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ReflexiveContainer_bases[] = {0};
static const char *swig_OSG_ReflexiveContainer_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_ReflexiveContainer = { "ReflexiveContainer", &SWIGTYPE_p_OSG__ReflexiveContainer,0,0, swig_OSG_ReflexiveContainer_methods, swig_OSG_ReflexiveContainer_attributes, swig_OSG_ReflexiveContainer_bases, swig_OSG_ReflexiveContainer_base_names };

static int _wrap_FieldContainer_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainer *arg1 = (OSG::FieldContainer *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::FieldContainer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getType",1,SWIGTYPE_p_OSG__FieldContainer);
  }
  
  result = (OSG::FieldContainerType *) &(arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainer *arg1 = (OSG::FieldContainer *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::FieldContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_shallowCopy",1,SWIGTYPE_p_OSG__FieldContainer);
  }
  
  result = ((OSG::FieldContainer const *)arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_FieldContainer_methods[] = {
    {"getType", _wrap_FieldContainer_getType}, 
    {"shallowCopy", _wrap_FieldContainer_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_FieldContainer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FieldContainer_bases[] = {0,0};
static const char *swig_OSG_FieldContainer_base_names[] = {"OSG::ReflexiveContainer *",0};
static swig_lua_class _wrap_class_OSG_FieldContainer = { "FieldContainer", &SWIGTYPE_p_OSG__FieldContainer,0,0, swig_OSG_FieldContainer_methods, swig_OSG_FieldContainer_attributes, swig_OSG_FieldContainer_bases, swig_OSG_FieldContainer_base_names };

static int _wrap_FieldContainerFactoryBase_findGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("findGroupId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroupId",1,"OSG::FieldContainerFactoryBase const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findGroupId",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_findGroupId",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::UInt16)((OSG::FieldContainerFactoryBase const *)arg1)->findGroupId((OSG::Char8 const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_findGroupName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt16 arg2 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("findGroupName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroupName",1,"OSG::FieldContainerFactoryBase const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findGroupName",2,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_findGroupName",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt16)lua_tonumber(L, 2);
  result = (OSG::Char8 *)((OSG::FieldContainerFactoryBase const *)arg1)->findGroupName(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_getNumGroups(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumGroups",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumGroups",1,"OSG::FieldContainerFactoryBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_getNumGroups",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  result = (OSG::UInt32)((OSG::FieldContainerFactoryBase const *)arg1)->getNumGroups();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_registerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::FieldContainerType *arg2 = (OSG::FieldContainerType *) 0 ;
  
  SWIG_check_num_args("registerType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerType",1,"OSG::FieldContainerFactoryBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerType",2,"OSG::FieldContainerType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_registerType",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_registerType",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  (arg1)->registerType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_registerGroup(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("registerGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerGroup",1,"OSG::FieldContainerFactoryBase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("registerGroup",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_registerGroup",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::UInt16)(arg1)->registerGroup((OSG::Char8 const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_findType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"OSG::FieldContainerFactoryBase const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findType",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_findType",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldContainerType *)((OSG::FieldContainerFactoryBase const *)arg1)->findType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_findType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"OSG::FieldContainerFactoryBase const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findType",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_findType",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldContainerType *)((OSG::FieldContainerFactoryBase const *)arg1)->findType((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_findType(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerFactoryBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerFactoryBase_findType__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerFactoryBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerFactoryBase_findType__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerFactoryBase_findType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findType(OSG::FieldContainerFactoryBase const *,OSG::UInt32)\n"
    "    findType(OSG::FieldContainerFactoryBase const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerFactoryBase_getNumTypes(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumTypes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumTypes",1,"OSG::FieldContainerFactoryBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_getNumTypes",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  result = (OSG::UInt32)((OSG::FieldContainerFactoryBase const *)arg1)->getNumTypes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_getNumContainers(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumContainers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumContainers",1,"OSG::FieldContainerFactoryBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_getNumContainers",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  result = (OSG::UInt32)((OSG::FieldContainerFactoryBase const *)arg1)->getNumContainers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_getContainer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldContainerFactoryBase::ContainerPtr result;
  
  SWIG_check_num_args("getContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainer",1,"OSG::FieldContainerFactoryBase const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getContainer",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_getContainer",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldContainerFactoryBase::ContainerPtr)((OSG::FieldContainerFactoryBase const *)arg1)->getContainer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_getMappedContainer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldContainerFactoryBase::ContainerPtr result;
  
  SWIG_check_num_args("getMappedContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMappedContainer",1,"OSG::FieldContainerFactoryBase const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMappedContainer",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_getMappedContainer",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldContainerFactoryBase::ContainerPtr)((OSG::FieldContainerFactoryBase const *)arg1)->getMappedContainer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_findContainer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::FieldContainerFactoryBase::ContainerPtr arg2 = (OSG::FieldContainerFactoryBase::ContainerPtr) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("findContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findContainer",1,"OSG::FieldContainerFactoryBase const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("findContainer",2,"OSG::FieldContainerFactoryBase::ContainerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_findContainer",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_findContainer",2,SWIGTYPE_p_OSG__FieldContainer);
  }
  
  result = (OSG::Int32)((OSG::FieldContainerFactoryBase const *)arg1)->findContainer(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_registerContainer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::FieldContainerFactoryBase::ContainerPtr *arg2 = 0 ;
  OSG::FieldContainerFactoryBase::ContainerPtr temp2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("registerContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerContainer",1,"OSG::FieldContainerFactoryBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("registerContainer",2,"OSG::FieldContainerFactoryBase::ContainerPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_registerContainer",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  temp2=(OSG::FieldContainerFactoryBase::ContainerPtr)SWIG_MustGetPtr(L,2,SWIGTYPE_p_OSG__FieldContainer,0,2,"FieldContainerFactoryBase_registerContainer");
  arg2=(OSG::FieldContainerFactoryBase::ContainerPtr *)&temp2;
  result = (OSG::UInt32)(arg1)->registerContainer((OSG::FieldContainerFactoryBase::ContainerPtr const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactoryBase_deregisterContainer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *arg1 = (OSG::FieldContainerFactoryBase *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("deregisterContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deregisterContainer",1,"OSG::FieldContainerFactoryBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("deregisterContainer",2,"OSG::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0))){
    SWIG_fail_ptr("FieldContainerFactoryBase_deregisterContainer",1,SWIGTYPE_p_OSG__FieldContainerFactoryBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32 const)lua_tonumber(L, 2);
  result = (bool)(arg1)->deregisterContainer(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_FieldContainerFactoryBase_methods[] = {
    {"findGroupId", _wrap_FieldContainerFactoryBase_findGroupId}, 
    {"findGroupName", _wrap_FieldContainerFactoryBase_findGroupName}, 
    {"getNumGroups", _wrap_FieldContainerFactoryBase_getNumGroups}, 
    {"registerType", _wrap_FieldContainerFactoryBase_registerType}, 
    {"registerGroup", _wrap_FieldContainerFactoryBase_registerGroup}, 
    {"findType", _wrap_FieldContainerFactoryBase_findType}, 
    {"getNumTypes", _wrap_FieldContainerFactoryBase_getNumTypes}, 
    {"getNumContainers", _wrap_FieldContainerFactoryBase_getNumContainers}, 
    {"getContainer", _wrap_FieldContainerFactoryBase_getContainer}, 
    {"getMappedContainer", _wrap_FieldContainerFactoryBase_getMappedContainer}, 
    {"findContainer", _wrap_FieldContainerFactoryBase_findContainer}, 
    {"registerContainer", _wrap_FieldContainerFactoryBase_registerContainer}, 
    {"deregisterContainer", _wrap_FieldContainerFactoryBase_deregisterContainer}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_FieldContainerFactoryBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FieldContainerFactoryBase_bases[] = {0,0};
static const char *swig_OSG_FieldContainerFactoryBase_base_names[] = {"OSG::FactoryBase *",0};
static swig_lua_class _wrap_class_OSG_FieldContainerFactoryBase = { "FieldContainerFactoryBase", &SWIGTYPE_p_OSG__FieldContainerFactoryBase,0,0, swig_OSG_FieldContainerFactoryBase_methods, swig_OSG_FieldContainerFactoryBase_attributes, swig_OSG_FieldContainerFactoryBase_bases, swig_OSG_FieldContainerFactoryBase_base_names };

static int _wrap_FieldContainerFactory_the(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerFactoryBase *result = 0 ;
  
  SWIG_check_num_args("OSG::FieldContainerFactory::the",0,0)
  result = (OSG::FieldContainerFactoryBase *)OSG::FieldContainerFactory::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerFactoryBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_FieldContainerFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_FieldContainerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_FieldContainerFactory_bases[] = {0,0};
static const char *swig_OSG_FieldContainerFactory_base_names[] = {"OSG::FieldContainerFactoryBase *",0};
static swig_lua_class _wrap_class_OSG_FieldContainerFactory = { "FieldContainerFactory", &SWIGTYPE_p_OSG__FieldContainerFactory,0,0, swig_OSG_FieldContainerFactory_methods, swig_OSG_FieldContainerFactory_attributes, swig_OSG_FieldContainerFactory_bases, swig_OSG_FieldContainerFactory_base_names };

static int _wrap_new_AttachmentRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::AttachmentRefPtr",0,0)
  result = (OSG::AttachmentRefPtr *)new OSG::AttachmentRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttachmentRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = 0 ;
  OSG::AttachmentRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::AttachmentRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::AttachmentRefPtr",1,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("new_AttachmentRefPtr",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::AttachmentRefPtr *)new OSG::AttachmentRefPtr((OSG::AttachmentRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttachmentRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AttachmentRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AttachmentRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AttachmentRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::AttachmentRefPtr()\n"
    "    OSG::AttachmentRefPtr(OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::Attachment *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::AttachmentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr___deref__",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::Attachment *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Attachment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("OSG_AttachmentRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_AttachmentRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_AttachmentRefPtr_dcast(arg1);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::AttachmentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getType",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getTypeId",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getGroupId",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getTypeName",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getProducerType",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getId",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getNumFields",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::AttachmentRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::AttachmentRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_attachActivity",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("AttachmentRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::AttachmentRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::AttachmentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::AttachmentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::AttachmentRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::AttachmentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::AttachmentRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::AttachmentRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::AttachmentRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::AttachmentRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::AttachmentRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::AttachmentRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::AttachmentRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_AttachmentRefPtr(void *obj) {
OSG::AttachmentRefPtr *arg1 = (OSG::AttachmentRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_AttachmentRefPtr_methods[] = {
    {"__deref__", _wrap_AttachmentRefPtr___deref__}, 
    {"getType", _wrap_AttachmentRefPtr_getType}, 
    {"shallowCopy", _wrap_AttachmentRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_AttachmentRefPtr_getTypeId}, 
    {"getGroupId", _wrap_AttachmentRefPtr_getGroupId}, 
    {"getTypeName", _wrap_AttachmentRefPtr_getTypeName}, 
    {"getProducerType", _wrap_AttachmentRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_AttachmentRefPtr_getContainerSize}, 
    {"getId", _wrap_AttachmentRefPtr_getId}, 
    {"getNumFields", _wrap_AttachmentRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_AttachmentRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_AttachmentRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_AttachmentRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_AttachmentRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_AttachmentRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_AttachmentRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_AttachmentRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_AttachmentRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_AttachmentRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_AttachmentRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_AttachmentRefPtr_bases[] = {0,0};
static const char *swig_OSG_AttachmentRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_AttachmentRefPtr = { "AttachmentRefPtr", &SWIGTYPE_p_OSG__AttachmentRefPtr,_wrap_new_AttachmentRefPtr, swig_delete_AttachmentRefPtr, swig_OSG_AttachmentRefPtr_methods, swig_OSG_AttachmentRefPtr_attributes, swig_OSG_AttachmentRefPtr_bases, swig_OSG_AttachmentRefPtr_base_names };

static swig_lua_method swig_OSG_Attachment_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_Attachment_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Attachment_bases[] = {0,0};
static const char *swig_OSG_Attachment_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_Attachment = { "Attachment", &SWIGTYPE_p_OSG__Attachment,0,0, swig_OSG_Attachment_methods, swig_OSG_Attachment_attributes, swig_OSG_Attachment_bases, swig_OSG_Attachment_base_names };

static int _wrap_new_AttachmentContainerRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::AttachmentContainerRefPtr",0,0)
  result = (OSG::AttachmentContainerRefPtr *)new OSG::AttachmentContainerRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttachmentContainerRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = 0 ;
  OSG::AttachmentContainerRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::AttachmentContainerRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::AttachmentContainerRefPtr",1,"OSG::AttachmentContainerRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("new_AttachmentContainerRefPtr",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::AttachmentContainerRefPtr *)new OSG::AttachmentContainerRefPtr((OSG::AttachmentContainerRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttachmentContainerRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AttachmentContainerRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AttachmentContainerRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AttachmentContainerRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::AttachmentContainerRefPtr()\n"
    "    OSG::AttachmentContainerRefPtr(OSG::AttachmentContainerRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentContainerRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::AttachmentContainer *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::AttachmentContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr___deref__",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::AttachmentContainer *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__AttachmentContainer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::AttachmentContainerRefPtr result;
  
  SWIG_check_num_args("OSG_AttachmentContainerRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_AttachmentContainerRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_AttachmentContainerRefPtr_dcast(arg1);
  {
    OSG::AttachmentContainerRefPtr * resultptr = new OSG::AttachmentContainerRefPtr((const OSG::AttachmentContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_addAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_addAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainerRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainerRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::AttachmentContainerRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::AttachmentContainerRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentContainerRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_subAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_subAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainerRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainerRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::AttachmentContainerRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::AttachmentContainerRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainerRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainerRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::AttachmentContainerRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::AttachmentContainerRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::AttachmentContainerRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::AttachmentContainerRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentContainerRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::AttachmentContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getType",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getTypeId",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getGroupId",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getTypeName",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getProducerType",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getId",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getNumFields",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::AttachmentContainerRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_attachActivity",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::AttachmentContainerRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::AttachmentContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::AttachmentContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::AttachmentContainerRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::AttachmentContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::AttachmentContainerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainerRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::AttachmentContainerRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::AttachmentContainerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentContainerRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::AttachmentContainerRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::AttachmentContainerRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainerRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__AttachmentContainerRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainerRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentContainerRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainerRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::AttachmentContainerRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::AttachmentContainerRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_AttachmentContainerRefPtr(void *obj) {
OSG::AttachmentContainerRefPtr *arg1 = (OSG::AttachmentContainerRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_AttachmentContainerRefPtr_methods[] = {
    {"__deref__", _wrap_AttachmentContainerRefPtr___deref__}, 
    {"addAttachment", _wrap_AttachmentContainerRefPtr_addAttachment}, 
    {"subAttachment", _wrap_AttachmentContainerRefPtr_subAttachment}, 
    {"findAttachment", _wrap_AttachmentContainerRefPtr_findAttachment}, 
    {"getType", _wrap_AttachmentContainerRefPtr_getType}, 
    {"shallowCopy", _wrap_AttachmentContainerRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_AttachmentContainerRefPtr_getTypeId}, 
    {"getGroupId", _wrap_AttachmentContainerRefPtr_getGroupId}, 
    {"getTypeName", _wrap_AttachmentContainerRefPtr_getTypeName}, 
    {"getProducerType", _wrap_AttachmentContainerRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_AttachmentContainerRefPtr_getContainerSize}, 
    {"getId", _wrap_AttachmentContainerRefPtr_getId}, 
    {"getNumFields", _wrap_AttachmentContainerRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_AttachmentContainerRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_AttachmentContainerRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_AttachmentContainerRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_AttachmentContainerRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_AttachmentContainerRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_AttachmentContainerRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_AttachmentContainerRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_AttachmentContainerRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_AttachmentContainerRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_AttachmentContainerRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_AttachmentContainerRefPtr_bases[] = {0,0};
static const char *swig_OSG_AttachmentContainerRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_AttachmentContainerRefPtr = { "AttachmentContainerRefPtr", &SWIGTYPE_p_OSG__AttachmentContainerRefPtr,_wrap_new_AttachmentContainerRefPtr, swig_delete_AttachmentContainerRefPtr, swig_OSG_AttachmentContainerRefPtr_methods, swig_OSG_AttachmentContainerRefPtr_attributes, swig_OSG_AttachmentContainerRefPtr_bases, swig_OSG_AttachmentContainerRefPtr_base_names };

static int _wrap_AttachmentContainer_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_addAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainer_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_addAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainer_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachmentContainer_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainer_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainer_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::AttachmentContainer *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::AttachmentContainer *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentContainer_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_subAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainer_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_subAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("AttachmentContainer_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachmentContainer_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainer_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainer_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::AttachmentContainer *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::AttachmentContainer *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttachmentContainer_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("AttachmentContainer_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::AttachmentContainer *arg1 = (OSG::AttachmentContainer *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::AttachmentContainer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__AttachmentContainer,0))){
    SWIG_fail_ptr("AttachmentContainer_findAttachment",1,SWIGTYPE_p_OSG__AttachmentContainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("AttachmentContainer_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachmentContainer_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachmentContainer_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachmentContainer_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainer_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AttachmentContainer_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AttachmentContainer_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::AttachmentContainer *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::AttachmentContainer *,OSG::UInt32)\n"
    "    findAttachment(OSG::AttachmentContainer *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::AttachmentContainer *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_AttachmentContainer_methods[] = {
    {"addAttachment", _wrap_AttachmentContainer_addAttachment}, 
    {"subAttachment", _wrap_AttachmentContainer_subAttachment}, 
    {"findAttachment", _wrap_AttachmentContainer_findAttachment}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_AttachmentContainer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_AttachmentContainer_bases[] = {0,0};
static const char *swig_OSG_AttachmentContainer_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_AttachmentContainer = { "AttachmentContainer", &SWIGTYPE_p_OSG__AttachmentContainer,0,0, swig_OSG_AttachmentContainer_methods, swig_OSG_AttachmentContainer_attributes, swig_OSG_AttachmentContainer_bases, swig_OSG_AttachmentContainer_base_names };

static int _wrap_NodeCore_invalidateVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCore *arg1 = (OSG::NodeCore *) 0 ;
  
  SWIG_check_num_args("invalidateVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invalidateVolume",1,"OSG::NodeCore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCore,0))){
    SWIG_fail_ptr("NodeCore_invalidateVolume",1,SWIGTYPE_p_OSG__NodeCore);
  }
  
  (arg1)->invalidateVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_NodeCore_methods[] = {
    {"invalidateVolume", _wrap_NodeCore_invalidateVolume}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_NodeCore_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_NodeCore_bases[] = {0,0};
static const char *swig_OSG_NodeCore_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_NodeCore = { "NodeCore", &SWIGTYPE_p_OSG__NodeCore,0,0, swig_OSG_NodeCore_methods, swig_OSG_NodeCore_attributes, swig_OSG_NodeCore_bases, swig_OSG_NodeCore_base_names };

static int _wrap_new_NodeCoreRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::NodeCoreRefPtr",0,0)
  result = (OSG::NodeCoreRefPtr *)new OSG::NodeCoreRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__NodeCoreRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeCoreRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = 0 ;
  OSG::NodeCoreRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::NodeCoreRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::NodeCoreRefPtr",1,"OSG::NodeCoreRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("new_NodeCoreRefPtr",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::NodeCoreRefPtr *)new OSG::NodeCoreRefPtr((OSG::NodeCoreRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__NodeCoreRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeCoreRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NodeCoreRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeCoreRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_NodeCoreRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::NodeCoreRefPtr()\n"
    "    OSG::NodeCoreRefPtr(OSG::NodeCoreRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeCoreRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::NodeCore *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::NodeCoreRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr___deref__",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::NodeCore *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__NodeCore,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::NodeCoreRefPtr result;
  
  SWIG_check_num_args("OSG_NodeCoreRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_NodeCoreRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_NodeCoreRefPtr_dcast(arg1);
  {
    OSG::NodeCoreRefPtr * resultptr = new OSG::NodeCoreRefPtr((const OSG::NodeCoreRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__NodeCoreRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_invalidateVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  
  SWIG_check_num_args("invalidateVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invalidateVolume",1,"OSG::NodeCoreRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_invalidateVolume",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  (*arg1)->invalidateVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_addAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_addAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeCoreRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeCoreRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::NodeCoreRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::NodeCoreRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeCoreRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_subAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_subAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeCoreRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeCoreRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::NodeCoreRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::NodeCoreRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeCoreRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeCoreRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeCoreRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeCoreRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::NodeCoreRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::NodeCoreRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::NodeCoreRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::NodeCoreRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeCoreRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::NodeCoreRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getType",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getTypeId",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getGroupId",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getTypeName",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getProducerType",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getId",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getNumFields",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::NodeCoreRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_attachActivity",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::NodeCoreRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::NodeCoreRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::NodeCoreRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::NodeCoreRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::NodeCoreRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::NodeCoreRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeCoreRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::NodeCoreRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::NodeCoreRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeCoreRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::NodeCoreRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::NodeCoreRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeCoreRefPtr,0))){
    SWIG_fail_ptr("NodeCoreRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__NodeCoreRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeCoreRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeCoreRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeCoreRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeCoreRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::NodeCoreRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::NodeCoreRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_NodeCoreRefPtr(void *obj) {
OSG::NodeCoreRefPtr *arg1 = (OSG::NodeCoreRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_NodeCoreRefPtr_methods[] = {
    {"__deref__", _wrap_NodeCoreRefPtr___deref__}, 
    {"invalidateVolume", _wrap_NodeCoreRefPtr_invalidateVolume}, 
    {"addAttachment", _wrap_NodeCoreRefPtr_addAttachment}, 
    {"subAttachment", _wrap_NodeCoreRefPtr_subAttachment}, 
    {"findAttachment", _wrap_NodeCoreRefPtr_findAttachment}, 
    {"getType", _wrap_NodeCoreRefPtr_getType}, 
    {"shallowCopy", _wrap_NodeCoreRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_NodeCoreRefPtr_getTypeId}, 
    {"getGroupId", _wrap_NodeCoreRefPtr_getGroupId}, 
    {"getTypeName", _wrap_NodeCoreRefPtr_getTypeName}, 
    {"getProducerType", _wrap_NodeCoreRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_NodeCoreRefPtr_getContainerSize}, 
    {"getId", _wrap_NodeCoreRefPtr_getId}, 
    {"getNumFields", _wrap_NodeCoreRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_NodeCoreRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_NodeCoreRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_NodeCoreRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_NodeCoreRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_NodeCoreRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_NodeCoreRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_NodeCoreRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_NodeCoreRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_NodeCoreRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_NodeCoreRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_NodeCoreRefPtr_bases[] = {0,0};
static const char *swig_OSG_NodeCoreRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_NodeCoreRefPtr = { "NodeCoreRefPtr", &SWIGTYPE_p_OSG__NodeCoreRefPtr,_wrap_new_NodeCoreRefPtr, swig_delete_NodeCoreRefPtr, swig_OSG_NodeCoreRefPtr_methods, swig_OSG_NodeCoreRefPtr_attributes, swig_OSG_NodeCoreRefPtr_bases, swig_OSG_NodeCoreRefPtr_base_names };

static swig_lua_method swig_OSG_Geometry_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_Geometry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Geometry_bases[] = {0,0};
static const char *swig_OSG_Geometry_base_names[] = {"OSG::NodeCore *",0};
static swig_lua_class _wrap_class_OSG_Geometry = { "Geometry", &SWIGTYPE_p_OSG__Geometry,0,0, swig_OSG_Geometry_methods, swig_OSG_Geometry_attributes, swig_OSG_Geometry_bases, swig_OSG_Geometry_base_names };

static int _wrap_new_GeometryRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::GeometryRefPtr",0,0)
  result = (OSG::GeometryRefPtr *)new OSG::GeometryRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__GeometryRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GeometryRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = 0 ;
  OSG::GeometryRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::GeometryRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::GeometryRefPtr",1,"OSG::GeometryRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("new_GeometryRefPtr",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::GeometryRefPtr *)new OSG::GeometryRefPtr((OSG::GeometryRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__GeometryRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GeometryRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GeometryRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GeometryRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_GeometryRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::GeometryRefPtr()\n"
    "    OSG::GeometryRefPtr(OSG::GeometryRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeometryRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::Geometry *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::GeometryRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr___deref__",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::Geometry *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Geometry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::GeometryRefPtr result;
  
  SWIG_check_num_args("OSG_GeometryRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_GeometryRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_GeometryRefPtr_dcast(arg1);
  {
    OSG::GeometryRefPtr * resultptr = new OSG::GeometryRefPtr((const OSG::GeometryRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__GeometryRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_invalidateVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  
  SWIG_check_num_args("invalidateVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invalidateVolume",1,"OSG::GeometryRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_invalidateVolume",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  (*arg1)->invalidateVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_addAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_addAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeometryRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeometryRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GeometryRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::GeometryRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::GeometryRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeometryRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_subAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_subAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeometryRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeometryRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GeometryRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::GeometryRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::GeometryRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeometryRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_findAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_findAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_findAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("GeometryRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::GeometryRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_findAttachment",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("GeometryRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GeometryRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeometryRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeometryRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GeometryRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GeometryRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::GeometryRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::GeometryRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::GeometryRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::GeometryRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GeometryRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::GeometryRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getType",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getTypeId",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getGroupId",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getTypeName",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getProducerType",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getId",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getNumFields",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::GeometryRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::GeometryRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_attachActivity",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("GeometryRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::GeometryRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::GeometryRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::GeometryRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::GeometryRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::GeometryRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::GeometryRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeometryRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeometryRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GeometryRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::GeometryRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::GeometryRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_GeometryRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::GeometryRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::GeometryRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("GeometryRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GeometryRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeometryRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GeometryRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GeometryRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::GeometryRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::GeometryRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_GeometryRefPtr(void *obj) {
OSG::GeometryRefPtr *arg1 = (OSG::GeometryRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_GeometryRefPtr_methods[] = {
    {"__deref__", _wrap_GeometryRefPtr___deref__}, 
    {"invalidateVolume", _wrap_GeometryRefPtr_invalidateVolume}, 
    {"addAttachment", _wrap_GeometryRefPtr_addAttachment}, 
    {"subAttachment", _wrap_GeometryRefPtr_subAttachment}, 
    {"findAttachment", _wrap_GeometryRefPtr_findAttachment}, 
    {"getType", _wrap_GeometryRefPtr_getType}, 
    {"shallowCopy", _wrap_GeometryRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_GeometryRefPtr_getTypeId}, 
    {"getGroupId", _wrap_GeometryRefPtr_getGroupId}, 
    {"getTypeName", _wrap_GeometryRefPtr_getTypeName}, 
    {"getProducerType", _wrap_GeometryRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_GeometryRefPtr_getContainerSize}, 
    {"getId", _wrap_GeometryRefPtr_getId}, 
    {"getNumFields", _wrap_GeometryRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_GeometryRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_GeometryRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_GeometryRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_GeometryRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_GeometryRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_GeometryRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_GeometryRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_GeometryRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_GeometryRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_GeometryRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_GeometryRefPtr_bases[] = {0,0};
static const char *swig_OSG_GeometryRefPtr_base_names[] = {"OSG::NodeCoreRefPtr *",0};
static swig_lua_class _wrap_class_OSG_GeometryRefPtr = { "GeometryRefPtr", &SWIGTYPE_p_OSG__GeometryRefPtr,_wrap_new_GeometryRefPtr, swig_delete_GeometryRefPtr, swig_OSG_GeometryRefPtr_methods, swig_OSG_GeometryRefPtr_attributes, swig_OSG_GeometryRefPtr_bases, swig_OSG_GeometryRefPtr_base_names };

static int _wrap_new_NodeRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::NodeRefPtr",0,0)
  result = (OSG::NodeRefPtr *)new OSG::NodeRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__NodeRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = 0 ;
  OSG::NodeRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::NodeRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::NodeRefPtr",1,"OSG::NodeRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("new_NodeRefPtr",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::NodeRefPtr *)new OSG::NodeRefPtr((OSG::NodeRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__NodeRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NodeRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_NodeRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::NodeRefPtr()\n"
    "    OSG::NodeRefPtr(OSG::NodeRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::Node *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr___deref__",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::Node *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::NodeRefPtr result;
  
  SWIG_check_num_args("OSG_NodeRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_NodeRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_NodeRefPtr_dcast(arg1);
  {
    OSG::NodeRefPtr * resultptr = new OSG::NodeRefPtr((const OSG::NodeRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__NodeRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getNChildren(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNChildren",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getNChildren",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNChildren();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_subChild(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("subChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subChild",1,"OSG::NodeRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("subChild",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_subChild",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->subChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_clearChildren(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  
  SWIG_check_num_args("clearChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearChildren",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_clearChildren",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  (*arg1)->clearChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_setTravMask(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("setTravMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTravMask",1,"OSG::NodeRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTravMask",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_setTravMask",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->setTravMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getTravMask(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTravMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTravMask",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getTravMask",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTravMask();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getToWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToWorld",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getToWorld",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (*arg1)->getToWorld();
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getToWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("getToWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToWorld",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getToWorld",2,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getToWorld",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("NodeRefPtr_getToWorld",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (*arg1)->getToWorld(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getToWorld(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeRefPtr_getToWorld__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeRefPtr_getToWorld__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeRefPtr_getToWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getToWorld(OSG::NodeRefPtr *)\n"
    "    getToWorld(OSG::NodeRefPtr *,OSG::Matrix &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeRefPtr_editVolume__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  bool arg2 ;
  OSG::BoxVolume *result = 0 ;
  
  SWIG_check_num_args("editVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editVolume",1,"OSG::NodeRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("editVolume",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_editVolume",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (OSG::BoxVolume *) &(*arg1)->editVolume(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BoxVolume,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_editVolume__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::BoxVolume *result = 0 ;
  
  SWIG_check_num_args("editVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editVolume",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_editVolume",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::BoxVolume *) &(*arg1)->editVolume();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BoxVolume,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_editVolume(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeRefPtr_editVolume__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeRefPtr_editVolume__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeRefPtr_editVolume'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editVolume(OSG::NodeRefPtr *,bool)\n"
    "    editVolume(OSG::NodeRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeRefPtr_getWorldVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::BoxVolume *arg2 = 0 ;
  
  SWIG_check_num_args("getWorldVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldVolume",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getWorldVolume",2,"OSG::BoxVolume &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getWorldVolume",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("NodeRefPtr_getWorldVolume",2,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  (*arg1)->getWorldVolume(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_updateVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  
  SWIG_check_num_args("updateVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateVolume",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_updateVolume",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  (*arg1)->updateVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_invalidateVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  
  SWIG_check_num_args("invalidateVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invalidateVolume",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_invalidateVolume",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  (*arg1)->invalidateVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_addAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_addAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::NodeRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::NodeRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_subAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_subAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::NodeRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::NodeRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("NodeRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::NodeRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_findAttachment",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("NodeRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::NodeRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::NodeRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::NodeRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::NodeRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getType",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getTypeId",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getGroupId",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getTypeName",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getProducerType",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getId",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getNumFields",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::NodeRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::NodeRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_attachActivity",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("NodeRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::NodeRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::NodeRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::NodeRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::NodeRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::NodeRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::NodeRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::NodeRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::NodeRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::NodeRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::NodeRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("NodeRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__NodeRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::NodeRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::NodeRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_NodeRefPtr(void *obj) {
OSG::NodeRefPtr *arg1 = (OSG::NodeRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_NodeRefPtr_methods[] = {
    {"__deref__", _wrap_NodeRefPtr___deref__}, 
    {"getNChildren", _wrap_NodeRefPtr_getNChildren}, 
    {"subChild", _wrap_NodeRefPtr_subChild}, 
    {"clearChildren", _wrap_NodeRefPtr_clearChildren}, 
    {"setTravMask", _wrap_NodeRefPtr_setTravMask}, 
    {"getTravMask", _wrap_NodeRefPtr_getTravMask}, 
    {"getToWorld", _wrap_NodeRefPtr_getToWorld}, 
    {"editVolume", _wrap_NodeRefPtr_editVolume}, 
    {"getWorldVolume", _wrap_NodeRefPtr_getWorldVolume}, 
    {"updateVolume", _wrap_NodeRefPtr_updateVolume}, 
    {"invalidateVolume", _wrap_NodeRefPtr_invalidateVolume}, 
    {"addAttachment", _wrap_NodeRefPtr_addAttachment}, 
    {"subAttachment", _wrap_NodeRefPtr_subAttachment}, 
    {"findAttachment", _wrap_NodeRefPtr_findAttachment}, 
    {"getType", _wrap_NodeRefPtr_getType}, 
    {"shallowCopy", _wrap_NodeRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_NodeRefPtr_getTypeId}, 
    {"getGroupId", _wrap_NodeRefPtr_getGroupId}, 
    {"getTypeName", _wrap_NodeRefPtr_getTypeName}, 
    {"getProducerType", _wrap_NodeRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_NodeRefPtr_getContainerSize}, 
    {"getId", _wrap_NodeRefPtr_getId}, 
    {"getNumFields", _wrap_NodeRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_NodeRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_NodeRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_NodeRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_NodeRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_NodeRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_NodeRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_NodeRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_NodeRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_NodeRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_NodeRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_NodeRefPtr_bases[] = {0,0};
static const char *swig_OSG_NodeRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_NodeRefPtr = { "NodeRefPtr", &SWIGTYPE_p_OSG__NodeRefPtr,_wrap_new_NodeRefPtr, swig_delete_NodeRefPtr, swig_OSG_NodeRefPtr_methods, swig_OSG_NodeRefPtr_attributes, swig_OSG_NodeRefPtr_bases, swig_OSG_NodeRefPtr_base_names };

static int _wrap_Node_getNChildren(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNChildren",1,"OSG::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_getNChildren",1,SWIGTYPE_p_OSG__Node);
  }
  
  result = (OSG::UInt32)((OSG::Node const *)arg1)->getNChildren();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_subChild(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("subChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subChild",1,"OSG::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("subChild",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_subChild",1,SWIGTYPE_p_OSG__Node);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->subChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_clearChildren(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  
  SWIG_check_num_args("clearChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearChildren",1,"OSG::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_clearChildren",1,SWIGTYPE_p_OSG__Node);
  }
  
  (arg1)->clearChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_setTravMask(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("setTravMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTravMask",1,"OSG::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTravMask",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_setTravMask",1,SWIGTYPE_p_OSG__Node);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (arg1)->setTravMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getTravMask(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTravMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTravMask",1,"OSG::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_getTravMask",1,SWIGTYPE_p_OSG__Node);
  }
  
  result = (OSG::UInt32)((OSG::Node const *)arg1)->getTravMask();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getToWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToWorld",1,"OSG::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_getToWorld",1,SWIGTYPE_p_OSG__Node);
  }
  
  result = (arg1)->getToWorld();
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getToWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("getToWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToWorld",1,"OSG::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getToWorld",2,"OSG::Matrix &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_getToWorld",1,SWIGTYPE_p_OSG__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Matrix,0))){
    SWIG_fail_ptr("Node_getToWorld",2,SWIGTYPE_p_OSG__Matrix);
  }
  
  (arg1)->getToWorld(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_getToWorld(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_getToWorld__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Matrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_getToWorld__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_getToWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getToWorld(OSG::Node *)\n"
    "    getToWorld(OSG::Node *,OSG::Matrix &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_editVolume__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  bool arg2 ;
  OSG::BoxVolume *result = 0 ;
  
  SWIG_check_num_args("editVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editVolume",1,"OSG::Node *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("editVolume",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_editVolume",1,SWIGTYPE_p_OSG__Node);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (OSG::BoxVolume *) &(arg1)->editVolume(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BoxVolume,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_editVolume__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::BoxVolume *result = 0 ;
  
  SWIG_check_num_args("editVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editVolume",1,"OSG::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_editVolume",1,SWIGTYPE_p_OSG__Node);
  }
  
  result = (OSG::BoxVolume *) &(arg1)->editVolume();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BoxVolume,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_editVolume(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_editVolume__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_editVolume__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_editVolume'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editVolume(OSG::Node *,bool)\n"
    "    editVolume(OSG::Node *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_getWorldVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  OSG::BoxVolume *arg2 = 0 ;
  
  SWIG_check_num_args("getWorldVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldVolume",1,"OSG::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getWorldVolume",2,"OSG::BoxVolume &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_getWorldVolume",1,SWIGTYPE_p_OSG__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__BoxVolume,0))){
    SWIG_fail_ptr("Node_getWorldVolume",2,SWIGTYPE_p_OSG__BoxVolume);
  }
  
  (arg1)->getWorldVolume(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_updateVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  
  SWIG_check_num_args("updateVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateVolume",1,"OSG::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_updateVolume",1,SWIGTYPE_p_OSG__Node);
  }
  
  (arg1)->updateVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_invalidateVolume(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Node *arg1 = (OSG::Node *) 0 ;
  
  SWIG_check_num_args("invalidateVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invalidateVolume",1,"OSG::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Node,0))){
    SWIG_fail_ptr("Node_invalidateVolume",1,SWIGTYPE_p_OSG__Node);
  }
  
  (arg1)->invalidateVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Node_methods[] = {
    {"getNChildren", _wrap_Node_getNChildren}, 
    {"subChild", _wrap_Node_subChild}, 
    {"clearChildren", _wrap_Node_clearChildren}, 
    {"setTravMask", _wrap_Node_setTravMask}, 
    {"getTravMask", _wrap_Node_getTravMask}, 
    {"getToWorld", _wrap_Node_getToWorld}, 
    {"editVolume", _wrap_Node_editVolume}, 
    {"getWorldVolume", _wrap_Node_getWorldVolume}, 
    {"updateVolume", _wrap_Node_updateVolume}, 
    {"invalidateVolume", _wrap_Node_invalidateVolume}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Node_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Node_bases[] = {0,0};
static const char *swig_OSG_Node_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Node = { "Node", &SWIGTYPE_p_OSG__Node,0,0, swig_OSG_Node_methods, swig_OSG_Node_attributes, swig_OSG_Node_bases, swig_OSG_Node_base_names };

static int _wrap_new_ViewportRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ViewportRefPtr",0,0)
  result = (OSG::ViewportRefPtr *)new OSG::ViewportRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ViewportRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ViewportRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = 0 ;
  OSG::ViewportRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ViewportRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::ViewportRefPtr",1,"OSG::ViewportRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("new_ViewportRefPtr",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::ViewportRefPtr *)new OSG::ViewportRefPtr((OSG::ViewportRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ViewportRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ViewportRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ViewportRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ViewportRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ViewportRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::ViewportRefPtr()\n"
    "    OSG::ViewportRefPtr(OSG::ViewportRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ViewportRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Viewport *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::ViewportRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr___deref__",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Viewport *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Viewport,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::ViewportRefPtr result;
  
  SWIG_check_num_args("OSG_ViewportRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ViewportRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_ViewportRefPtr_dcast(arg1);
  {
    OSG::ViewportRefPtr * resultptr = new OSG::ViewportRefPtr((const OSG::ViewportRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ViewportRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_setSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setSize",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSize",1,"OSG::ViewportRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSize",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSize",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setSize",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setSize",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_setSize",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (*arg1)->setSize(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getPixelLeft(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelLeft",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getPixelLeft",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Int32)(*arg1)->getPixelLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getPixelRight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelRight",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getPixelRight",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Int32)(*arg1)->getPixelRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getPixelBottom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelBottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelBottom",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getPixelBottom",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Int32)(*arg1)->getPixelBottom();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getPixelTop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelTop",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getPixelTop",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Int32)(*arg1)->getPixelTop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getPixelWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelWidth",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getPixelWidth",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Int32)(*arg1)->getPixelWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getPixelHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelHeight",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getPixelHeight",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Int32)(*arg1)->getPixelHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_isFullWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isFullWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isFullWindow",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_isFullWindow",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (bool)(*arg1)->isFullWindow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getNormalizedCoordinates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  
  SWIG_check_num_args("getNormalizedCoordinates",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormalizedCoordinates",1,"OSG::ViewportRefPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getNormalizedCoordinates",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getNormalizedCoordinates",3,"OSG::Real32 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getNormalizedCoordinates",4,"OSG::Int32 const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getNormalizedCoordinates",5,"OSG::Int32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getNormalizedCoordinates",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ViewportRefPtr_getNormalizedCoordinates",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ViewportRefPtr_getNormalizedCoordinates",3,SWIGTYPE_p_float);
  }
  
  arg4 = (OSG::Int32 const)lua_tonumber(L, 4);
  arg5 = (OSG::Int32 const)lua_tonumber(L, 5);
  (*arg1)->getNormalizedCoordinates(*arg2,*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_isPassive(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPassive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPassive",1,"OSG::ViewportRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_isPassive",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (bool)(*arg1)->isPassive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ViewportRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ViewportRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ViewportRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::ViewportRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::ViewportRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ViewportRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ViewportRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ViewportRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ViewportRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::ViewportRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::ViewportRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ViewportRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ViewportRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ViewportRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ViewportRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ViewportRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ViewportRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ViewportRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ViewportRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ViewportRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::ViewportRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::ViewportRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::ViewportRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::ViewportRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ViewportRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ViewportRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getType",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getTypeId",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getGroupId",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getTypeName",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getProducerType",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getId",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getNumFields",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ViewportRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ViewportRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_attachActivity",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ViewportRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ViewportRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ViewportRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ViewportRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ViewportRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ViewportRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ViewportRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ViewportRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ViewportRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ViewportRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ViewportRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ViewportRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ViewportRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ViewportRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ViewportRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("ViewportRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ViewportRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ViewportRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ViewportRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ViewportRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ViewportRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ViewportRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_ViewportRefPtr(void *obj) {
OSG::ViewportRefPtr *arg1 = (OSG::ViewportRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ViewportRefPtr_methods[] = {
    {"__deref__", _wrap_ViewportRefPtr___deref__}, 
    {"setSize", _wrap_ViewportRefPtr_setSize}, 
    {"getPixelLeft", _wrap_ViewportRefPtr_getPixelLeft}, 
    {"getPixelRight", _wrap_ViewportRefPtr_getPixelRight}, 
    {"getPixelBottom", _wrap_ViewportRefPtr_getPixelBottom}, 
    {"getPixelTop", _wrap_ViewportRefPtr_getPixelTop}, 
    {"getPixelWidth", _wrap_ViewportRefPtr_getPixelWidth}, 
    {"getPixelHeight", _wrap_ViewportRefPtr_getPixelHeight}, 
    {"isFullWindow", _wrap_ViewportRefPtr_isFullWindow}, 
    {"getNormalizedCoordinates", _wrap_ViewportRefPtr_getNormalizedCoordinates}, 
    {"isPassive", _wrap_ViewportRefPtr_isPassive}, 
    {"addAttachment", _wrap_ViewportRefPtr_addAttachment}, 
    {"subAttachment", _wrap_ViewportRefPtr_subAttachment}, 
    {"findAttachment", _wrap_ViewportRefPtr_findAttachment}, 
    {"getType", _wrap_ViewportRefPtr_getType}, 
    {"shallowCopy", _wrap_ViewportRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_ViewportRefPtr_getTypeId}, 
    {"getGroupId", _wrap_ViewportRefPtr_getGroupId}, 
    {"getTypeName", _wrap_ViewportRefPtr_getTypeName}, 
    {"getProducerType", _wrap_ViewportRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_ViewportRefPtr_getContainerSize}, 
    {"getId", _wrap_ViewportRefPtr_getId}, 
    {"getNumFields", _wrap_ViewportRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_ViewportRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_ViewportRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_ViewportRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ViewportRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ViewportRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ViewportRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_ViewportRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_ViewportRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_ViewportRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ViewportRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ViewportRefPtr_bases[] = {0,0};
static const char *swig_OSG_ViewportRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_ViewportRefPtr = { "ViewportRefPtr", &SWIGTYPE_p_OSG__ViewportRefPtr,_wrap_new_ViewportRefPtr, swig_delete_ViewportRefPtr, swig_OSG_ViewportRefPtr_methods, swig_OSG_ViewportRefPtr_attributes, swig_OSG_ViewportRefPtr_bases, swig_OSG_ViewportRefPtr_base_names };

static int _wrap_Viewport_setSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::Real32 arg4 ;
  OSG::Real32 arg5 ;
  
  SWIG_check_num_args("setSize",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSize",1,"OSG::Viewport *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSize",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSize",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setSize",4,"OSG::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setSize",5,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_setSize",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  arg4 = (OSG::Real32)lua_tonumber(L, 4);
  arg5 = (OSG::Real32)lua_tonumber(L, 5);
  (arg1)->setSize(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getPixelLeft(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelLeft",1,"OSG::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_getPixelLeft",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (OSG::Int32)((OSG::Viewport const *)arg1)->getPixelLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getPixelRight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelRight",1,"OSG::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_getPixelRight",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (OSG::Int32)((OSG::Viewport const *)arg1)->getPixelRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getPixelBottom(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelBottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelBottom",1,"OSG::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_getPixelBottom",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (OSG::Int32)((OSG::Viewport const *)arg1)->getPixelBottom();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getPixelTop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelTop",1,"OSG::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_getPixelTop",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (OSG::Int32)((OSG::Viewport const *)arg1)->getPixelTop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getPixelWidth(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelWidth",1,"OSG::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_getPixelWidth",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (OSG::Int32)((OSG::Viewport const *)arg1)->getPixelWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getPixelHeight(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("getPixelHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixelHeight",1,"OSG::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_getPixelHeight",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (OSG::Int32)((OSG::Viewport const *)arg1)->getPixelHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_isFullWindow(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  bool result;
  
  SWIG_check_num_args("isFullWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isFullWindow",1,"OSG::Viewport const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_isFullWindow",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (bool)((OSG::Viewport const *)arg1)->isFullWindow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_getNormalizedCoordinates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  OSG::Real32 *arg2 = 0 ;
  OSG::Real32 *arg3 = 0 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  
  SWIG_check_num_args("getNormalizedCoordinates",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormalizedCoordinates",1,"OSG::Viewport const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getNormalizedCoordinates",2,"OSG::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getNormalizedCoordinates",3,"OSG::Real32 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getNormalizedCoordinates",4,"OSG::Int32 const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getNormalizedCoordinates",5,"OSG::Int32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_getNormalizedCoordinates",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Viewport_getNormalizedCoordinates",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Viewport_getNormalizedCoordinates",3,SWIGTYPE_p_float);
  }
  
  arg4 = (OSG::Int32 const)lua_tonumber(L, 4);
  arg5 = (OSG::Int32 const)lua_tonumber(L, 5);
  ((OSG::Viewport const *)arg1)->getNormalizedCoordinates(*arg2,*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Viewport_isPassive(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Viewport *arg1 = (OSG::Viewport *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPassive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPassive",1,"OSG::Viewport *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Viewport_isPassive",1,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (bool)(arg1)->isPassive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Viewport_methods[] = {
    {"setSize", _wrap_Viewport_setSize}, 
    {"getPixelLeft", _wrap_Viewport_getPixelLeft}, 
    {"getPixelRight", _wrap_Viewport_getPixelRight}, 
    {"getPixelBottom", _wrap_Viewport_getPixelBottom}, 
    {"getPixelTop", _wrap_Viewport_getPixelTop}, 
    {"getPixelWidth", _wrap_Viewport_getPixelWidth}, 
    {"getPixelHeight", _wrap_Viewport_getPixelHeight}, 
    {"isFullWindow", _wrap_Viewport_isFullWindow}, 
    {"getNormalizedCoordinates", _wrap_Viewport_getNormalizedCoordinates}, 
    {"isPassive", _wrap_Viewport_isPassive}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Viewport_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Viewport_bases[] = {0,0};
static const char *swig_OSG_Viewport_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Viewport = { "Viewport", &SWIGTYPE_p_OSG__Viewport,0,0, swig_OSG_Viewport_methods, swig_OSG_Viewport_attributes, swig_OSG_Viewport_bases, swig_OSG_Viewport_base_names };

static int _wrap_new_CameraRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::CameraRefPtr",0,0)
  result = (OSG::CameraRefPtr *)new OSG::CameraRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__CameraRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = 0 ;
  OSG::CameraRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::CameraRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::CameraRefPtr",1,"OSG::CameraRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("new_CameraRefPtr",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::CameraRefPtr *)new OSG::CameraRefPtr((OSG::CameraRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__CameraRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CameraRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CameraRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CameraRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::CameraRefPtr()\n"
    "    OSG::CameraRefPtr(OSG::CameraRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Camera *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::CameraRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr___deref__",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::Camera *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Camera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::CameraRefPtr result;
  
  SWIG_check_num_args("OSG_CameraRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_CameraRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_CameraRefPtr_dcast(arg1);
  {
    OSG::CameraRefPtr * resultptr = new OSG::CameraRefPtr((const OSG::CameraRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__CameraRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getProjectionVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getProjectionVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProjectionVal",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getProjectionVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getProjectionVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getProjectionVal",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (*arg1)->getProjectionVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getProjectionTranslationVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getProjectionTranslationVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProjectionTranslationVal",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getProjectionTranslationVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getProjectionTranslationVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getProjectionTranslationVal",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (*arg1)->getProjectionTranslationVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getViewingVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getViewingVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getViewingVal",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getViewingVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getViewingVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getViewingVal",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (*arg1)->getViewingVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getWorldToScreenVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Viewport *arg2 = 0 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getWorldToScreenVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldToScreenVal",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getWorldToScreenVal",2,"OSG::Viewport const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getWorldToScreenVal",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("CameraRefPtr_getWorldToScreenVal",2,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (*arg1)->getWorldToScreenVal((OSG::Viewport const &)*arg2);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getDecorationVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getDecorationVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDecorationVal",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDecorationVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDecorationVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getDecorationVal",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (*arg1)->getDecorationVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getFrustumVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Viewport *arg2 = 0 ;
  OSG::FrustumVolume result;
  
  SWIG_check_num_args("getFrustumVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFrustumVal",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getFrustumVal",2,"OSG::Viewport const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getFrustumVal",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("CameraRefPtr_getFrustumVal",2,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (*arg1)->getFrustumVal((OSG::Viewport const &)*arg2);
  {
    OSG::FrustumVolume * resultptr = new OSG::FrustumVolume((const OSG::FrustumVolume &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FrustumVolume,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_calcViewRay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::ViewportRefPtr arg5 ;
  OSG::Real32 *arg6 = (OSG::Real32 *) 0 ;
  OSG::ViewportRefPtr *argp5 ;
  bool result;
  
  SWIG_check_num_args("calcViewRay",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("calcViewRay",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calcViewRay",2,"OSG::Line &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("calcViewRay",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("calcViewRay",4,"OSG::Int32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("calcViewRay",5,"OSG::ViewportRefPtr const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("calcViewRay",6,"OSG::Real32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_calcViewRay",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("CameraRefPtr_calcViewRay",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_calcViewRay",5,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CameraRefPtr_calcViewRay",6,SWIGTYPE_p_float);
  }
  
  result = (bool)OSG_Camera_calcViewRay__SWIG_0((OSG::Camera*)(arg1)->operator ->(),*arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_calcViewRay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::ViewportRefPtr arg5 ;
  OSG::ViewportRefPtr *argp5 ;
  bool result;
  
  SWIG_check_num_args("calcViewRay",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("calcViewRay",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calcViewRay",2,"OSG::Line &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("calcViewRay",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("calcViewRay",4,"OSG::Int32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("calcViewRay",5,"OSG::ViewportRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_calcViewRay",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("CameraRefPtr_calcViewRay",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_calcViewRay",5,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  arg5 = *argp5;
  
  result = (bool)OSG_Camera_calcViewRay__SWIG_0((OSG::Camera*)(arg1)->operator ->(),*arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_calcViewRay(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_CameraRefPtr_calcViewRay__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_CameraRefPtr_calcViewRay__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CameraRefPtr_calcViewRay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    calcViewRay(OSG::CameraRefPtr *,OSG::Line &,OSG::Int32,OSG::Int32,OSG::ViewportRefPtr const,OSG::Real32 *)\n"
    "    calcViewRay(OSG::CameraRefPtr *,OSG::Line &,OSG::Int32,OSG::Int32,OSG::ViewportRefPtr const)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_addAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_addAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CameraRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CameraRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::CameraRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::CameraRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_subAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_subAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CameraRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CameraRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::CameraRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::CameraRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("CameraRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::CameraRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_findAttachment",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("CameraRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CameraRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CameraRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CameraRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::CameraRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::CameraRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::CameraRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::CameraRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::CameraRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getType",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getTypeId",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getGroupId",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getTypeName",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getProducerType",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getId",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getNumFields",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::CameraRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_attachActivity",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("CameraRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::CameraRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::CameraRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::CameraRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::CameraRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::CameraRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::CameraRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CameraRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::CameraRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::CameraRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::CameraRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::CameraRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__CameraRefPtr,0))){
    SWIG_fail_ptr("CameraRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__CameraRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__CameraRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'CameraRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::CameraRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::CameraRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_CameraRefPtr(void *obj) {
OSG::CameraRefPtr *arg1 = (OSG::CameraRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_CameraRefPtr_methods[] = {
    {"__deref__", _wrap_CameraRefPtr___deref__}, 
    {"getProjectionVal", _wrap_CameraRefPtr_getProjectionVal}, 
    {"getProjectionTranslationVal", _wrap_CameraRefPtr_getProjectionTranslationVal}, 
    {"getViewingVal", _wrap_CameraRefPtr_getViewingVal}, 
    {"getWorldToScreenVal", _wrap_CameraRefPtr_getWorldToScreenVal}, 
    {"getDecorationVal", _wrap_CameraRefPtr_getDecorationVal}, 
    {"getFrustumVal", _wrap_CameraRefPtr_getFrustumVal}, 
    {"calcViewRay", _wrap_CameraRefPtr_calcViewRay}, 
    {"addAttachment", _wrap_CameraRefPtr_addAttachment}, 
    {"subAttachment", _wrap_CameraRefPtr_subAttachment}, 
    {"findAttachment", _wrap_CameraRefPtr_findAttachment}, 
    {"getType", _wrap_CameraRefPtr_getType}, 
    {"shallowCopy", _wrap_CameraRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_CameraRefPtr_getTypeId}, 
    {"getGroupId", _wrap_CameraRefPtr_getGroupId}, 
    {"getTypeName", _wrap_CameraRefPtr_getTypeName}, 
    {"getProducerType", _wrap_CameraRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_CameraRefPtr_getContainerSize}, 
    {"getId", _wrap_CameraRefPtr_getId}, 
    {"getNumFields", _wrap_CameraRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_CameraRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_CameraRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_CameraRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_CameraRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_CameraRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_CameraRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_CameraRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_CameraRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_CameraRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_CameraRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_CameraRefPtr_bases[] = {0,0};
static const char *swig_OSG_CameraRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_CameraRefPtr = { "CameraRefPtr", &SWIGTYPE_p_OSG__CameraRefPtr,_wrap_new_CameraRefPtr, swig_delete_CameraRefPtr, swig_OSG_CameraRefPtr_methods, swig_OSG_CameraRefPtr_attributes, swig_OSG_CameraRefPtr_bases, swig_OSG_CameraRefPtr_base_names };

static int _wrap_Camera_getProjectionVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getProjectionVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProjectionVal",1,"OSG::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getProjectionVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getProjectionVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_getProjectionVal",1,SWIGTYPE_p_OSG__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (arg1)->getProjectionVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getProjectionTranslationVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getProjectionTranslationVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProjectionTranslationVal",1,"OSG::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getProjectionTranslationVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getProjectionTranslationVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_getProjectionTranslationVal",1,SWIGTYPE_p_OSG__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (arg1)->getProjectionTranslationVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getViewingVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getViewingVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getViewingVal",1,"OSG::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getViewingVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getViewingVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_getViewingVal",1,SWIGTYPE_p_OSG__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (arg1)->getViewingVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getWorldToScreenVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::Viewport *arg2 = 0 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getWorldToScreenVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldToScreenVal",1,"OSG::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getWorldToScreenVal",2,"OSG::Viewport const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_getWorldToScreenVal",1,SWIGTYPE_p_OSG__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Camera_getWorldToScreenVal",2,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (arg1)->getWorldToScreenVal((OSG::Viewport const &)*arg2);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getDecorationVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::Matrix result;
  
  SWIG_check_num_args("getDecorationVal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDecorationVal",1,"OSG::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDecorationVal",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDecorationVal",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_getDecorationVal",1,SWIGTYPE_p_OSG__Camera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (arg1)->getDecorationVal(arg2,arg3);
  {
    OSG::Matrix * resultptr = new OSG::Matrix((const OSG::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getFrustumVal(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::Viewport *arg2 = 0 ;
  OSG::FrustumVolume result;
  
  SWIG_check_num_args("getFrustumVal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFrustumVal",1,"OSG::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getFrustumVal",2,"OSG::Viewport const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_getFrustumVal",1,SWIGTYPE_p_OSG__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Viewport,0))){
    SWIG_fail_ptr("Camera_getFrustumVal",2,SWIGTYPE_p_OSG__Viewport);
  }
  
  result = (arg1)->getFrustumVal((OSG::Viewport const &)*arg2);
  {
    OSG::FrustumVolume * resultptr = new OSG::FrustumVolume((const OSG::FrustumVolume &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FrustumVolume,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_calcViewRay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::ViewportRefPtr arg5 ;
  OSG::Real32 *arg6 = (OSG::Real32 *) 0 ;
  OSG::ViewportRefPtr *argp5 ;
  bool result;
  
  SWIG_check_num_args("calcViewRay",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("calcViewRay",1,"OSG::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calcViewRay",2,"OSG::Line &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("calcViewRay",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("calcViewRay",4,"OSG::Int32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("calcViewRay",5,"OSG::ViewportRefPtr const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("calcViewRay",6,"OSG::Real32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_calcViewRay",1,SWIGTYPE_p_OSG__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Camera_calcViewRay",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("Camera_calcViewRay",5,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Camera_calcViewRay",6,SWIGTYPE_p_float);
  }
  
  result = (bool)OSG_Camera_calcViewRay__SWIG_0(arg1,*arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_calcViewRay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Camera *arg1 = (OSG::Camera *) 0 ;
  OSG::Line *arg2 = 0 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::ViewportRefPtr arg5 ;
  OSG::ViewportRefPtr *argp5 ;
  bool result;
  
  SWIG_check_num_args("calcViewRay",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("calcViewRay",1,"OSG::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calcViewRay",2,"OSG::Line &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("calcViewRay",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("calcViewRay",4,"OSG::Int32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("calcViewRay",5,"OSG::ViewportRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Camera,0))){
    SWIG_fail_ptr("Camera_calcViewRay",1,SWIGTYPE_p_OSG__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__Line,0))){
    SWIG_fail_ptr("Camera_calcViewRay",2,SWIGTYPE_p_OSG__Line);
  }
  
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__ViewportRefPtr,0))){
    SWIG_fail_ptr("Camera_calcViewRay",5,SWIGTYPE_p_OSG__ViewportRefPtr);
  }
  arg5 = *argp5;
  
  result = (bool)OSG_Camera_calcViewRay__SWIG_0(arg1,*arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_calcViewRay(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Camera_calcViewRay__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__ViewportRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Camera_calcViewRay__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_calcViewRay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    calcViewRay(OSG::Camera *,OSG::Line &,OSG::Int32,OSG::Int32,OSG::ViewportRefPtr const,OSG::Real32 *)\n"
    "    calcViewRay(OSG::Camera *,OSG::Line &,OSG::Int32,OSG::Int32,OSG::ViewportRefPtr const)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_Camera_methods[] = {
    {"getProjectionVal", _wrap_Camera_getProjectionVal}, 
    {"getProjectionTranslationVal", _wrap_Camera_getProjectionTranslationVal}, 
    {"getViewingVal", _wrap_Camera_getViewingVal}, 
    {"getWorldToScreenVal", _wrap_Camera_getWorldToScreenVal}, 
    {"getDecorationVal", _wrap_Camera_getDecorationVal}, 
    {"getFrustumVal", _wrap_Camera_getFrustumVal}, 
    {"calcViewRay", _wrap_Camera_calcViewRay}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Camera_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Camera_bases[] = {0,0};
static const char *swig_OSG_Camera_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Camera = { "Camera", &SWIGTYPE_p_OSG__Camera,0,0, swig_OSG_Camera_methods, swig_OSG_Camera_attributes, swig_OSG_Camera_bases, swig_OSG_Camera_base_names };

static int _wrap_new_ImageRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ImageRefPtr",0,0)
  result = (OSG::ImageRefPtr *)new OSG::ImageRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ImageRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImageRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = 0 ;
  OSG::ImageRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ImageRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::ImageRefPtr",1,"OSG::ImageRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("new_ImageRefPtr",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::ImageRefPtr *)new OSG::ImageRefPtr((OSG::ImageRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ImageRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ImageRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ImageRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ImageRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ImageRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::ImageRefPtr()\n"
    "    OSG::ImageRefPtr(OSG::ImageRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Image *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr___deref__",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::Image *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Image,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::ImageRefPtr result;
  
  SWIG_check_num_args("OSG_ImageRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ImageRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_ImageRefPtr_dcast(arg1);
  {
    OSG::ImageRefPtr * resultptr = new OSG::ImageRefPtr((const OSG::ImageRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ImageRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  OSG::Int32 arg10 ;
  bool arg11 ;
  OSG::Int32 arg12 ;
  bool result;
  
  SWIG_check_num_args("set",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("set",10,"OSG::Int32");
  if(!lua_isboolean(L,11)) SWIG_fail_arg("set",11,"bool");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("set",12,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImageRefPtr_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  arg10 = (OSG::Int32)lua_tonumber(L, 10);
  arg11 = (lua_toboolean(L, 11)!=0);
  arg12 = (OSG::Int32)lua_tonumber(L, 12);
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9,arg10,arg11,arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  OSG::Int32 arg10 ;
  bool arg11 ;
  bool result;
  
  SWIG_check_num_args("set",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("set",10,"OSG::Int32");
  if(!lua_isboolean(L,11)) SWIG_fail_arg("set",11,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImageRefPtr_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  arg10 = (OSG::Int32)lua_tonumber(L, 10);
  arg11 = (lua_toboolean(L, 11)!=0);
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9,arg10,arg11);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  OSG::Int32 arg10 ;
  bool result;
  
  SWIG_check_num_args("set",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("set",10,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImageRefPtr_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  arg10 = (OSG::Int32)lua_tonumber(L, 10);
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9,arg10);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("set",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImageRefPtr_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  bool result;
  
  SWIG_check_num_args("set",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  bool result;
  
  SWIG_check_num_args("set",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  bool result;
  
  SWIG_check_num_args("set",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  bool result;
  
  SWIG_check_num_args("set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  result = (bool)(*arg1)->set(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  bool result;
  
  SWIG_check_num_args("set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  result = (bool)(*arg1)->set(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  bool result;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  result = (bool)(*arg1)->set(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::ImageRefPtr arg2 ;
  OSG::ImageRefPtr *argp2 ;
  bool result;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::ImageRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"OSG::ImageRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_set",2,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  arg2 = *argp2;
  
  result = (bool)(*arg1)->set(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_set(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImageRefPtr_set__SWIG_10(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_set__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImageRefPtr_set__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ImageRefPtr_set__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ImageRefPtr_set__SWIG_6(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ImageRefPtr_set__SWIG_5(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_ImageRefPtr_set__SWIG_4(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_ImageRefPtr_set__SWIG_3(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_ImageRefPtr_set__SWIG_2(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isboolean(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_ImageRefPtr_set__SWIG_1(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isboolean(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_ImageRefPtr_set__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *,OSG::Int32,bool,OSG::Int32)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *,OSG::Int32,bool)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *,OSG::Int32)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::ImageRefPtr *,OSG::UInt32,OSG::Int32)\n"
    "    set(OSG::ImageRefPtr *,OSG::ImageRefPtr)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_setData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt8 *arg2 = (OSG::UInt8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("setData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setData",1,"OSG::ImageRefPtr *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setData",2,"OSG::UInt8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_setData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImageRefPtr_setData",2,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(*arg1)->setData((OSG::UInt8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_setData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("setData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setData",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_setData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->setData();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_setData(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_setData__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImageRefPtr_setData__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_setData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setData(OSG::ImageRefPtr *,OSG::UInt8 const *)\n"
    "    setData(OSG::ImageRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_clearData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  
  SWIG_check_num_args("clearData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearData",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_clearData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  (*arg1)->clearData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_setSubData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::UInt8 *arg8 = (OSG::UInt8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("setSubData",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSubData",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSubData",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSubData",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setSubData",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setSubData",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setSubData",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setSubData",7,"OSG::Int32");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("setSubData",8,"OSG::UInt8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_setSubData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ImageRefPtr_setSubData",8,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(*arg1)->setSubData(arg2,arg3,arg4,arg5,arg6,arg7,(OSG::UInt8 const *)arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_flipDepthFrameData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("flipDepthFrameData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flipDepthFrameData",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_flipDepthFrameData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->flipDepthFrameData();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_addValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("addValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addValue",1,"OSG::ImageRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("addValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_addValue",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(*arg1)->addValue((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::ImageRefPtr arg5 ;
  OSG::ImageRefPtr *argp5 ;
  bool result;
  
  SWIG_check_num_args("scale",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scale",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("scale",4,"OSG::Int32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("scale",5,"OSG::ImageRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_scale",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_scale",5,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  arg5 = *argp5;
  
  result = (bool)(*arg1)->scale(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  bool result;
  
  SWIG_check_num_args("scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scale",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("scale",4,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_scale",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  result = (bool)(*arg1)->scale(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_scale__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  bool result;
  
  SWIG_check_num_args("scale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scale",3,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_scale",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  result = (bool)(*arg1)->scale(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_scale__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Int32 arg2 ;
  bool result;
  
  SWIG_check_num_args("scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_scale",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->scale(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_scale(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_scale__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_scale__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImageRefPtr_scale__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ImageRefPtr_scale__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    scale(OSG::ImageRefPtr *,OSG::Int32,OSG::Int32,OSG::Int32,OSG::ImageRefPtr)\n"
    "    scale(OSG::ImageRefPtr *,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    scale(OSG::ImageRefPtr *,OSG::Int32,OSG::Int32)\n"
    "    scale(OSG::ImageRefPtr *,OSG::Int32)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_write(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("write",1,"OSG::ImageRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("write",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_write",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->write((OSG::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_read(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("read",1,"OSG::ImageRefPtr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("read",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_read",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->read((OSG::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_isValid(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_isValid",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_hasAlphaChannel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasAlphaChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasAlphaChannel",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_hasAlphaChannel",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->hasAlphaChannel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_isAlphaBinary(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAlphaBinary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAlphaBinary",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_isAlphaBinary",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->isAlphaBinary();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_hasColorChannel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasColorChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasColorChannel",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_hasColorChannel",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->hasColorChannel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_hasCompressedData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasCompressedData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasCompressedData",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_hasCompressedData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->hasCompressedData();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getComponents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt8 result;
  
  SWIG_check_num_args("getComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getComponents",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getComponents",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt8)(*arg1)->getComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_calcIsAlphaBinary(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("calcIsAlphaBinary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("calcIsAlphaBinary",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_calcIsAlphaBinary",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->calcIsAlphaBinary();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::ImageRefPtr const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("getSize",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("getSize",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("getSize",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getSize",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (unsigned long)(*arg1)->getSize(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::ImageRefPtr const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("getSize",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("getSize",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getSize",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (unsigned long)(*arg1)->getSize(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getSize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool arg2 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::ImageRefPtr const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("getSize",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getSize",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (unsigned long)(*arg1)->getSize(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getSize__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getSize",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (unsigned long)(*arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getSize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_getSize__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getSize__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_getSize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImageRefPtr_getSize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_getSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getSize(OSG::ImageRefPtr const *,bool,bool,bool)\n"
    "    getSize(OSG::ImageRefPtr const *,bool,bool)\n"
    "    getSize(OSG::ImageRefPtr const *,bool)\n"
    "    getSize(OSG::ImageRefPtr const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_getData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getData",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getData",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)(*arg1)->getData(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getData",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(*arg1)->getData(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getData__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getData",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(*arg1)->getData(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getData__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt8 *)(*arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getData(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_getData__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getData__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_getData__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImageRefPtr_getData__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_getData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getData(OSG::ImageRefPtr const *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    getData(OSG::ImageRefPtr const *,OSG::UInt32,OSG::UInt32)\n"
    "    getData(OSG::ImageRefPtr const *,OSG::UInt32)\n"
    "    getData(OSG::ImageRefPtr const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_editData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editData",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("editData",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)(*arg1)->editData(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editData",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(*arg1)->editData(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editData__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editData",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(*arg1)->editData(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editData__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editData",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt8 *)(*arg1)->editData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editData(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_editData__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_editData__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_editData__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImageRefPtr_editData__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_editData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editData(OSG::ImageRefPtr *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    editData(OSG::ImageRefPtr *,OSG::UInt32,OSG::UInt32)\n"
    "    editData(OSG::ImageRefPtr *,OSG::UInt32)\n"
    "    editData(OSG::ImageRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_getDataFast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDataFast",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getDataFast",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)(*arg1)->getDataFast(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getDataFast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDataFast",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(*arg1)->getDataFast(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getDataFast__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataFast",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(*arg1)->getDataFast(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getDataFast__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt8 *)(*arg1)->getDataFast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getDataFast(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_getDataFast__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getDataFast__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_getDataFast__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImageRefPtr_getDataFast__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_getDataFast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDataFast(OSG::ImageRefPtr const *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    getDataFast(OSG::ImageRefPtr const *,OSG::UInt32,OSG::UInt32)\n"
    "    getDataFast(OSG::ImageRefPtr const *,OSG::UInt32)\n"
    "    getDataFast(OSG::ImageRefPtr const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_editDataFast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editDataFast",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("editDataFast",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)(*arg1)->editDataFast(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editDataFast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editDataFast",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(*arg1)->editDataFast(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editDataFast__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataFast",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(*arg1)->editDataFast(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editDataFast__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editDataFast",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt8 *)(*arg1)->editDataFast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editDataFast(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_editDataFast__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_editDataFast__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_editDataFast__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ImageRefPtr_editDataFast__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_editDataFast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editDataFast(OSG::ImageRefPtr *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    editDataFast(OSG::ImageRefPtr *,OSG::UInt32,OSG::UInt32)\n"
    "    editDataFast(OSG::ImageRefPtr *,OSG::UInt32)\n"
    "    editDataFast(OSG::ImageRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_getDataByTime__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataByTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataByTime",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataByTime",2,"OSG::Time");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDataByTime",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getDataByTime",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(*arg1)->getDataByTime(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getDataByTime__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataByTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataByTime",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataByTime",2,"OSG::Time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getDataByTime",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(*arg1)->getDataByTime(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getDataByTime(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getDataByTime__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_getDataByTime__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_getDataByTime'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDataByTime(OSG::ImageRefPtr const *,OSG::Time,OSG::UInt32)\n"
    "    getDataByTime(OSG::ImageRefPtr const *,OSG::Time)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_editDataByTime__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataByTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataByTime",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataByTime",2,"OSG::Time");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editDataByTime",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editDataByTime",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(*arg1)->editDataByTime(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editDataByTime__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataByTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataByTime",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataByTime",2,"OSG::Time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_editDataByTime",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(*arg1)->editDataByTime(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_editDataByTime(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_editDataByTime__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_editDataByTime__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_editDataByTime'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editDataByTime(OSG::ImageRefPtr *,OSG::Time,OSG::UInt32)\n"
    "    editDataByTime(OSG::ImageRefPtr *,OSG::Time)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_clear__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UChar8 arg2 ;
  
  SWIG_check_num_args("clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clear",2,"OSG::UChar8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_clear",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UChar8)lua_tonumber(L, 2);
  (*arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_clear__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_clear",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  (*arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_clear(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_clear__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_clear__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_clear'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clear(OSG::ImageRefPtr *,OSG::UChar8)\n"
    "    clear(OSG::ImageRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_clearFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("clearFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearFloat",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clearFloat",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_clearFloat",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (*arg1)->clearFloat(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_clearFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  
  SWIG_check_num_args("clearFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearFloat",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_clearFloat",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  (*arg1)->clearFloat();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_clearFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_clearFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_clearFloat__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_clearFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clearFloat(OSG::ImageRefPtr *,OSG::Real32)\n"
    "    clearFloat(OSG::ImageRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_clearHalf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Real16 arg2 ;
  
  SWIG_check_num_args("clearHalf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearHalf",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clearHalf",2,"OSG::Real16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_clearHalf",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Real16)lua_tonumber(L, 2);
  (*arg1)->clearHalf(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_clearHalf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  
  SWIG_check_num_args("clearHalf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearHalf",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_clearHalf",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  (*arg1)->clearHalf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_clearHalf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ImageRefPtr_clearHalf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_clearHalf__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_clearHalf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clearHalf(OSG::ImageRefPtr *,OSG::Real16)\n"
    "    clearHalf(OSG::ImageRefPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImageRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::ImageRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::ImageRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImageRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::ImageRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::ImageRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ImageRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ImageRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ImageRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ImageRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ImageRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::ImageRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::ImageRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::ImageRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::ImageRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getType",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getTypeId",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getGroupId",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getTypeName",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getProducerType",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getId",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getNumFields",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ImageRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_attachActivity",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ImageRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ImageRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ImageRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ImageRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ImageRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ImageRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ImageRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ImageRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ImageRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("ImageRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ImageRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ImageRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ImageRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ImageRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ImageRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_ImageRefPtr(void *obj) {
OSG::ImageRefPtr *arg1 = (OSG::ImageRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ImageRefPtr_methods[] = {
    {"__deref__", _wrap_ImageRefPtr___deref__}, 
    {"set", _wrap_ImageRefPtr_set}, 
    {"setData", _wrap_ImageRefPtr_setData}, 
    {"clearData", _wrap_ImageRefPtr_clearData}, 
    {"setSubData", _wrap_ImageRefPtr_setSubData}, 
    {"flipDepthFrameData", _wrap_ImageRefPtr_flipDepthFrameData}, 
    {"addValue", _wrap_ImageRefPtr_addValue}, 
    {"scale", _wrap_ImageRefPtr_scale}, 
    {"write", _wrap_ImageRefPtr_write}, 
    {"read", _wrap_ImageRefPtr_read}, 
    {"isValid", _wrap_ImageRefPtr_isValid}, 
    {"hasAlphaChannel", _wrap_ImageRefPtr_hasAlphaChannel}, 
    {"isAlphaBinary", _wrap_ImageRefPtr_isAlphaBinary}, 
    {"hasColorChannel", _wrap_ImageRefPtr_hasColorChannel}, 
    {"hasCompressedData", _wrap_ImageRefPtr_hasCompressedData}, 
    {"getComponents", _wrap_ImageRefPtr_getComponents}, 
    {"calcIsAlphaBinary", _wrap_ImageRefPtr_calcIsAlphaBinary}, 
    {"getSize", _wrap_ImageRefPtr_getSize}, 
    {"getData", _wrap_ImageRefPtr_getData}, 
    {"editData", _wrap_ImageRefPtr_editData}, 
    {"getDataFast", _wrap_ImageRefPtr_getDataFast}, 
    {"editDataFast", _wrap_ImageRefPtr_editDataFast}, 
    {"getDataByTime", _wrap_ImageRefPtr_getDataByTime}, 
    {"editDataByTime", _wrap_ImageRefPtr_editDataByTime}, 
    {"clear", _wrap_ImageRefPtr_clear}, 
    {"clearFloat", _wrap_ImageRefPtr_clearFloat}, 
    {"clearHalf", _wrap_ImageRefPtr_clearHalf}, 
    {"addAttachment", _wrap_ImageRefPtr_addAttachment}, 
    {"subAttachment", _wrap_ImageRefPtr_subAttachment}, 
    {"findAttachment", _wrap_ImageRefPtr_findAttachment}, 
    {"getType", _wrap_ImageRefPtr_getType}, 
    {"shallowCopy", _wrap_ImageRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_ImageRefPtr_getTypeId}, 
    {"getGroupId", _wrap_ImageRefPtr_getGroupId}, 
    {"getTypeName", _wrap_ImageRefPtr_getTypeName}, 
    {"getProducerType", _wrap_ImageRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_ImageRefPtr_getContainerSize}, 
    {"getId", _wrap_ImageRefPtr_getId}, 
    {"getNumFields", _wrap_ImageRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_ImageRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_ImageRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_ImageRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ImageRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ImageRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ImageRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_ImageRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_ImageRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_ImageRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ImageRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ImageRefPtr_bases[] = {0,0};
static const char *swig_OSG_ImageRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_ImageRefPtr = { "ImageRefPtr", &SWIGTYPE_p_OSG__ImageRefPtr,_wrap_new_ImageRefPtr, swig_delete_ImageRefPtr, swig_OSG_ImageRefPtr_methods, swig_OSG_ImageRefPtr_attributes, swig_OSG_ImageRefPtr_bases, swig_OSG_ImageRefPtr_base_names };

static int _wrap_Image_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  OSG::Int32 arg10 ;
  bool arg11 ;
  OSG::Int32 arg12 ;
  bool result;
  
  SWIG_check_num_args("set",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("set",10,"OSG::Int32");
  if(!lua_isboolean(L,11)) SWIG_fail_arg("set",11,"bool");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("set",12,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Image_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  arg10 = (OSG::Int32)lua_tonumber(L, 10);
  arg11 = (lua_toboolean(L, 11)!=0);
  arg12 = (OSG::Int32)lua_tonumber(L, 12);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9,arg10,arg11,arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  OSG::Int32 arg10 ;
  bool arg11 ;
  bool result;
  
  SWIG_check_num_args("set",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("set",10,"OSG::Int32");
  if(!lua_isboolean(L,11)) SWIG_fail_arg("set",11,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Image_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  arg10 = (OSG::Int32)lua_tonumber(L, 10);
  arg11 = (lua_toboolean(L, 11)!=0);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9,arg10,arg11);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  OSG::Int32 arg10 ;
  bool result;
  
  SWIG_check_num_args("set",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("set",10,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Image_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  arg10 = (OSG::Int32)lua_tonumber(L, 10);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9,arg10);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  OSG::UInt8 *arg9 = (OSG::UInt8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("set",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("set",9,"OSG::UInt8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Image_set",9,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(OSG::UInt8 const *)arg9);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::Time arg8 ;
  bool result;
  
  SWIG_check_num_args("set",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("set",8,"OSG::Time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  arg8 = (OSG::Time)lua_tonumber(L, 8);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  bool result;
  
  SWIG_check_num_args("set",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("set",7,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  bool result;
  
  SWIG_check_num_args("set",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("set",6,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  bool result;
  
  SWIG_check_num_args("set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("set",5,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  bool result;
  
  SWIG_check_num_args("set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  result = (bool)(arg1)->set(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Int32 arg3 ;
  bool result;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  result = (bool)(arg1)->set(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::ImageRefPtr arg2 ;
  OSG::ImageRefPtr *argp2 ;
  bool result;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"OSG::Image *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("set",2,"OSG::ImageRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_set",1,SWIGTYPE_p_OSG__Image);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("Image_set",2,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->set(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_set(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Image_set__SWIG_10(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_set__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_set__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Image_set__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Image_set__SWIG_6(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Image_set__SWIG_5(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_Image_set__SWIG_4(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_Image_set__SWIG_3(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_Image_set__SWIG_2(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isboolean(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_Image_set__SWIG_1(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isboolean(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_Image_set__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *,OSG::Int32,bool,OSG::Int32)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *,OSG::Int32,bool)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *,OSG::Int32)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time,OSG::UInt8 const *)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Time)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32,OSG::Int32)\n"
    "    set(OSG::Image *,OSG::UInt32,OSG::Int32)\n"
    "    set(OSG::Image *,OSG::ImageRefPtr)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_setData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt8 *arg2 = (OSG::UInt8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("setData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setData",1,"OSG::Image *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setData",2,"OSG::UInt8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_setData",1,SWIGTYPE_p_OSG__Image);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Image_setData",2,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->setData((OSG::UInt8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_setData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("setData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setData",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_setData",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)(arg1)->setData();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_setData(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_setData__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Image_setData__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_setData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setData(OSG::Image *,OSG::UInt8 const *)\n"
    "    setData(OSG::Image *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_clearData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  
  SWIG_check_num_args("clearData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearData",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_clearData",1,SWIGTYPE_p_OSG__Image);
  }
  
  (arg1)->clearData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_setSubData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::Int32 arg5 ;
  OSG::Int32 arg6 ;
  OSG::Int32 arg7 ;
  OSG::UInt8 *arg8 = (OSG::UInt8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("setSubData",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSubData",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSubData",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSubData",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setSubData",4,"OSG::Int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setSubData",5,"OSG::Int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setSubData",6,"OSG::Int32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setSubData",7,"OSG::Int32");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("setSubData",8,"OSG::UInt8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_setSubData",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  arg5 = (OSG::Int32)lua_tonumber(L, 5);
  arg6 = (OSG::Int32)lua_tonumber(L, 6);
  arg7 = (OSG::Int32)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Image_setSubData",8,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->setSubData(arg2,arg3,arg4,arg5,arg6,arg7,(OSG::UInt8 const *)arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_flipDepthFrameData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("flipDepthFrameData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flipDepthFrameData",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_flipDepthFrameData",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)(arg1)->flipDepthFrameData();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_addValue(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("addValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addValue",1,"OSG::Image *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("addValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_addValue",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->addValue((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::ImageRefPtr arg5 ;
  OSG::ImageRefPtr *argp5 ;
  bool result;
  
  SWIG_check_num_args("scale",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scale",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("scale",4,"OSG::Int32");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("scale",5,"OSG::ImageRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_scale",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_OSG__ImageRefPtr,0))){
    SWIG_fail_ptr("Image_scale",5,SWIGTYPE_p_OSG__ImageRefPtr);
  }
  arg5 = *argp5;
  
  result = (bool)(arg1)->scale(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  bool result;
  
  SWIG_check_num_args("scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scale",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("scale",4,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_scale",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  result = (bool)(arg1)->scale(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_scale__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  bool result;
  
  SWIG_check_num_args("scale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scale",3,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_scale",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  result = (bool)(arg1)->scale(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_scale__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Int32 arg2 ;
  bool result;
  
  SWIG_check_num_args("scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_scale",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  result = (bool)(arg1)->scale(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_scale(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_scale__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_scale__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_scale__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_OSG__ImageRefPtr, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Image_scale__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    scale(OSG::Image *,OSG::Int32,OSG::Int32,OSG::Int32,OSG::ImageRefPtr)\n"
    "    scale(OSG::Image *,OSG::Int32,OSG::Int32,OSG::Int32)\n"
    "    scale(OSG::Image *,OSG::Int32,OSG::Int32)\n"
    "    scale(OSG::Image *,OSG::Int32)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_write(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("write",1,"OSG::Image *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("write",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_write",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->write((OSG::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_read(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("read",1,"OSG::Image *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("read",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_read",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->read((OSG::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_isValid(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"OSG::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_isValid",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)((OSG::Image const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_hasAlphaChannel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasAlphaChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasAlphaChannel",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_hasAlphaChannel",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)(arg1)->hasAlphaChannel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_isAlphaBinary(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAlphaBinary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAlphaBinary",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_isAlphaBinary",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)(arg1)->isAlphaBinary();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_hasColorChannel(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasColorChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasColorChannel",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_hasColorChannel",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)(arg1)->hasColorChannel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_hasCompressedData(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("hasCompressedData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasCompressedData",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_hasCompressedData",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)(arg1)->hasCompressedData();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getComponents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt8 result;
  
  SWIG_check_num_args("getComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getComponents",1,"OSG::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getComponents",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (OSG::UInt8)((OSG::Image const *)arg1)->getComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_calcIsAlphaBinary(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool result;
  
  SWIG_check_num_args("calcIsAlphaBinary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("calcIsAlphaBinary",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_calcIsAlphaBinary",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (bool)(arg1)->calcIsAlphaBinary();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::Image const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("getSize",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("getSize",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("getSize",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getSize",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (unsigned long)((OSG::Image const *)arg1)->getSize(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::Image const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("getSize",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("getSize",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getSize",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (unsigned long)((OSG::Image const *)arg1)->getSize(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getSize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  bool arg2 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::Image const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("getSize",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getSize",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (unsigned long)((OSG::Image const *)arg1)->getSize(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getSize__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"OSG::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getSize",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (unsigned long)((OSG::Image const *)arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getSize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_getSize__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_getSize__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_getSize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_getSize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_getSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getSize(OSG::Image const *,bool,bool,bool)\n"
    "    getSize(OSG::Image const *,bool,bool)\n"
    "    getSize(OSG::Image const *,bool)\n"
    "    getSize(OSG::Image const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_getData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getData",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getData",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getData",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getData(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getData",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getData",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getData(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getData__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getData",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getData",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getData(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getData__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getData",1,"OSG::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getData",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getData(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_getData__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_getData__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_getData__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_getData__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_getData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getData(OSG::Image const *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    getData(OSG::Image const *,OSG::UInt32,OSG::UInt32)\n"
    "    getData(OSG::Image const *,OSG::UInt32)\n"
    "    getData(OSG::Image const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_editData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editData",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("editData",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editData",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)(arg1)->editData(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editData",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editData",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editData",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(arg1)->editData(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editData__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editData",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editData",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(arg1)->editData(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editData__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editData",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editData",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (OSG::UInt8 *)(arg1)->editData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editData(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_editData__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_editData__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_editData__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_editData__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_editData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editData(OSG::Image *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    editData(OSG::Image *,OSG::UInt32,OSG::UInt32)\n"
    "    editData(OSG::Image *,OSG::UInt32)\n"
    "    editData(OSG::Image *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_getDataFast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDataFast",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getDataFast",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getDataFast(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataFast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDataFast",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getDataFast(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataFast__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataFast",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getDataFast(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataFast__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataFast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataFast",1,"OSG::Image const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getDataFast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataFast(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_getDataFast__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_getDataFast__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_getDataFast__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_getDataFast__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_getDataFast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDataFast(OSG::Image const *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    getDataFast(OSG::Image const *,OSG::UInt32,OSG::UInt32)\n"
    "    getDataFast(OSG::Image const *,OSG::UInt32)\n"
    "    getDataFast(OSG::Image const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_editDataFast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt32 arg4 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editDataFast",3,"OSG::UInt32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("editDataFast",4,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt32)lua_tonumber(L, 4);
  result = (OSG::UInt8 *)(arg1)->editDataFast(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editDataFast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataFast",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editDataFast",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(arg1)->editDataFast(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editDataFast__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataFast",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(arg1)->editDataFast(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editDataFast__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataFast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataFast",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editDataFast",1,SWIGTYPE_p_OSG__Image);
  }
  
  result = (OSG::UInt8 *)(arg1)->editDataFast();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editDataFast(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_editDataFast__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_editDataFast__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_editDataFast__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Image_editDataFast__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_editDataFast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editDataFast(OSG::Image *,OSG::UInt32,OSG::UInt32,OSG::UInt32)\n"
    "    editDataFast(OSG::Image *,OSG::UInt32,OSG::UInt32)\n"
    "    editDataFast(OSG::Image *,OSG::UInt32)\n"
    "    editDataFast(OSG::Image *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_getDataByTime__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataByTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataByTime",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataByTime",2,"OSG::Time");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDataByTime",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getDataByTime",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getDataByTime(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataByTime__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("getDataByTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataByTime",1,"OSG::Image const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDataByTime",2,"OSG::Time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_getDataByTime",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)((OSG::Image const *)arg1)->getDataByTime(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataByTime(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_getDataByTime__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_getDataByTime__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_getDataByTime'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDataByTime(OSG::Image const *,OSG::Time,OSG::UInt32)\n"
    "    getDataByTime(OSG::Image const *,OSG::Time)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_editDataByTime__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt32 arg3 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataByTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataByTime",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataByTime",2,"OSG::Time");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("editDataByTime",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editDataByTime",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = (OSG::UInt8 *)(arg1)->editDataByTime(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editDataByTime__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Time arg2 ;
  OSG::UInt8 *result = 0 ;
  
  SWIG_check_num_args("editDataByTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("editDataByTime",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("editDataByTime",2,"OSG::Time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_editDataByTime",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  result = (OSG::UInt8 *)(arg1)->editDataByTime(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_editDataByTime(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_editDataByTime__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Image_editDataByTime__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_editDataByTime'\n"
    "  Possible C/C++ prototypes are:\n"
    "    editDataByTime(OSG::Image *,OSG::Time,OSG::UInt32)\n"
    "    editDataByTime(OSG::Image *,OSG::Time)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_clear__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::UChar8 arg2 ;
  
  SWIG_check_num_args("clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clear",2,"OSG::UChar8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_clear",1,SWIGTYPE_p_OSG__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UChar8)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clear__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_clear",1,SWIGTYPE_p_OSG__Image);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clear(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_clear__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_clear__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_clear'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clear(OSG::Image *,OSG::UChar8)\n"
    "    clear(OSG::Image *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_clearFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Real32 arg2 ;
  
  SWIG_check_num_args("clearFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearFloat",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clearFloat",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_clearFloat",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  (arg1)->clearFloat(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clearFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  
  SWIG_check_num_args("clearFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearFloat",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_clearFloat",1,SWIGTYPE_p_OSG__Image);
  }
  
  (arg1)->clearFloat();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clearFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_clearFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_clearFloat__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_clearFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clearFloat(OSG::Image *,OSG::Real32)\n"
    "    clearFloat(OSG::Image *)\n");
  lua_error(L);return 0;
}


static int _wrap_Image_clearHalf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  OSG::Real16 arg2 ;
  
  SWIG_check_num_args("clearHalf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearHalf",1,"OSG::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clearHalf",2,"OSG::Real16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_clearHalf",1,SWIGTYPE_p_OSG__Image);
  }
  
  arg2 = (OSG::Real16)lua_tonumber(L, 2);
  (arg1)->clearHalf(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clearHalf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Image *arg1 = (OSG::Image *) 0 ;
  
  SWIG_check_num_args("clearHalf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clearHalf",1,"OSG::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Image,0))){
    SWIG_fail_ptr("Image_clearHalf",1,SWIGTYPE_p_OSG__Image);
  }
  
  (arg1)->clearHalf();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clearHalf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Image_clearHalf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Image, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Image_clearHalf__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Image_clearHalf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clearHalf(OSG::Image *,OSG::Real16)\n"
    "    clearHalf(OSG::Image *)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_Image_methods[] = {
    {"set", _wrap_Image_set}, 
    {"setData", _wrap_Image_setData}, 
    {"clearData", _wrap_Image_clearData}, 
    {"setSubData", _wrap_Image_setSubData}, 
    {"flipDepthFrameData", _wrap_Image_flipDepthFrameData}, 
    {"addValue", _wrap_Image_addValue}, 
    {"scale", _wrap_Image_scale}, 
    {"write", _wrap_Image_write}, 
    {"read", _wrap_Image_read}, 
    {"isValid", _wrap_Image_isValid}, 
    {"hasAlphaChannel", _wrap_Image_hasAlphaChannel}, 
    {"isAlphaBinary", _wrap_Image_isAlphaBinary}, 
    {"hasColorChannel", _wrap_Image_hasColorChannel}, 
    {"hasCompressedData", _wrap_Image_hasCompressedData}, 
    {"getComponents", _wrap_Image_getComponents}, 
    {"calcIsAlphaBinary", _wrap_Image_calcIsAlphaBinary}, 
    {"getSize", _wrap_Image_getSize}, 
    {"getData", _wrap_Image_getData}, 
    {"editData", _wrap_Image_editData}, 
    {"getDataFast", _wrap_Image_getDataFast}, 
    {"editDataFast", _wrap_Image_editDataFast}, 
    {"getDataByTime", _wrap_Image_getDataByTime}, 
    {"editDataByTime", _wrap_Image_editDataByTime}, 
    {"clear", _wrap_Image_clear}, 
    {"clearFloat", _wrap_Image_clearFloat}, 
    {"clearHalf", _wrap_Image_clearHalf}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Image_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Image_bases[] = {0,0};
static const char *swig_OSG_Image_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Image = { "Image", &SWIGTYPE_p_OSG__Image,0,0, swig_OSG_Image_methods, swig_OSG_Image_attributes, swig_OSG_Image_bases, swig_OSG_Image_base_names };

static swig_lua_method swig_OSG_TextureObjChunk_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_TextureObjChunk_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_TextureObjChunk_bases[] = {0,0};
static const char *swig_OSG_TextureObjChunk_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_TextureObjChunk = { "TextureObjChunk", &SWIGTYPE_p_OSG__TextureObjChunk,0,0, swig_OSG_TextureObjChunk_methods, swig_OSG_TextureObjChunk_attributes, swig_OSG_TextureObjChunk_bases, swig_OSG_TextureObjChunk_base_names };

static int _wrap_new_TextureObjChunkRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::TextureObjChunkRefPtr",0,0)
  result = (OSG::TextureObjChunkRefPtr *)new OSG::TextureObjChunkRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureObjChunkRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = 0 ;
  OSG::TextureObjChunkRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::TextureObjChunkRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::TextureObjChunkRefPtr",1,"OSG::TextureObjChunkRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("new_TextureObjChunkRefPtr",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::TextureObjChunkRefPtr *)new OSG::TextureObjChunkRefPtr((OSG::TextureObjChunkRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureObjChunkRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TextureObjChunkRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TextureObjChunkRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TextureObjChunkRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TextureObjChunkRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::TextureObjChunkRefPtr()\n"
    "    OSG::TextureObjChunkRefPtr(OSG::TextureObjChunkRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TextureObjChunkRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::TextureObjChunk *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::TextureObjChunkRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr___deref__",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::TextureObjChunk *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__TextureObjChunk,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::TextureObjChunkRefPtr result;
  
  SWIG_check_num_args("OSG_TextureObjChunkRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_TextureObjChunkRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_TextureObjChunkRefPtr_dcast(arg1);
  {
    OSG::TextureObjChunkRefPtr * resultptr = new OSG::TextureObjChunkRefPtr((const OSG::TextureObjChunkRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::TextureObjChunkRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getType",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getTypeId",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getGroupId",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getTypeName",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getProducerType",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getId",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getNumFields",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::TextureObjChunkRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::TextureObjChunkRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_attachActivity",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::TextureObjChunkRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::TextureObjChunkRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::TextureObjChunkRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::TextureObjChunkRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::TextureObjChunkRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::TextureObjChunkRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TextureObjChunkRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextureObjChunkRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TextureObjChunkRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextureObjChunkRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TextureObjChunkRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::TextureObjChunkRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::TextureObjChunkRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TextureObjChunkRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::TextureObjChunkRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::TextureObjChunkRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr,0))){
    SWIG_fail_ptr("TextureObjChunkRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__TextureObjChunkRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureObjChunkRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TextureObjChunkRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextureObjChunkRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__TextureObjChunkRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextureObjChunkRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TextureObjChunkRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::TextureObjChunkRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::TextureObjChunkRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_TextureObjChunkRefPtr(void *obj) {
OSG::TextureObjChunkRefPtr *arg1 = (OSG::TextureObjChunkRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_TextureObjChunkRefPtr_methods[] = {
    {"__deref__", _wrap_TextureObjChunkRefPtr___deref__}, 
    {"getType", _wrap_TextureObjChunkRefPtr_getType}, 
    {"shallowCopy", _wrap_TextureObjChunkRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_TextureObjChunkRefPtr_getTypeId}, 
    {"getGroupId", _wrap_TextureObjChunkRefPtr_getGroupId}, 
    {"getTypeName", _wrap_TextureObjChunkRefPtr_getTypeName}, 
    {"getProducerType", _wrap_TextureObjChunkRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_TextureObjChunkRefPtr_getContainerSize}, 
    {"getId", _wrap_TextureObjChunkRefPtr_getId}, 
    {"getNumFields", _wrap_TextureObjChunkRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_TextureObjChunkRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_TextureObjChunkRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_TextureObjChunkRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_TextureObjChunkRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_TextureObjChunkRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_TextureObjChunkRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_TextureObjChunkRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_TextureObjChunkRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_TextureObjChunkRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_TextureObjChunkRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_TextureObjChunkRefPtr_bases[] = {0,0};
static const char *swig_OSG_TextureObjChunkRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_TextureObjChunkRefPtr = { "TextureObjChunkRefPtr", &SWIGTYPE_p_OSG__TextureObjChunkRefPtr,_wrap_new_TextureObjChunkRefPtr, swig_delete_TextureObjChunkRefPtr, swig_OSG_TextureObjChunkRefPtr_methods, swig_OSG_TextureObjChunkRefPtr_attributes, swig_OSG_TextureObjChunkRefPtr_bases, swig_OSG_TextureObjChunkRefPtr_base_names };

static int _wrap_new_EventDetailsRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventDetailsRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::EventDetailsRefPtr",0,0)
  result = (OSG::EventDetailsRefPtr *)new OSG::EventDetailsRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDetailsRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventDetailsRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EventDetailsRefPtr *arg1 = 0 ;
  OSG::EventDetailsRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::EventDetailsRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::EventDetailsRefPtr",1,"OSG::EventDetailsRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EventDetailsRefPtr,0))){
    SWIG_fail_ptr("new_EventDetailsRefPtr",1,SWIGTYPE_p_OSG__EventDetailsRefPtr);
  }
  
  result = (OSG::EventDetailsRefPtr *)new OSG::EventDetailsRefPtr((OSG::EventDetailsRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDetailsRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventDetailsRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EventDetailsRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EventDetailsRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EventDetailsRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_EventDetailsRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::EventDetailsRefPtr()\n"
    "    OSG::EventDetailsRefPtr(OSG::EventDetailsRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventDetailsRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::EventDetailsRefPtr result;
  
  SWIG_check_num_args("OSG_EventDetailsRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_EventDetailsRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("EventDetailsRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_EventDetailsRefPtr_dcast(arg1);
  {
    OSG::EventDetailsRefPtr * resultptr = new OSG::EventDetailsRefPtr((const OSG::EventDetailsRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__EventDetailsRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventDetailsRefPtr(void *obj) {
OSG::EventDetailsRefPtr *arg1 = (OSG::EventDetailsRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_EventDetailsRefPtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_EventDetailsRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_EventDetailsRefPtr_bases[] = {0,0};
static const char *swig_OSG_EventDetailsRefPtr_base_names[] = {"OSG::FieldContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_EventDetailsRefPtr = { "EventDetailsRefPtr", &SWIGTYPE_p_OSG__EventDetailsRefPtr,_wrap_new_EventDetailsRefPtr, swig_delete_EventDetailsRefPtr, swig_OSG_EventDetailsRefPtr_methods, swig_OSG_EventDetailsRefPtr_attributes, swig_OSG_EventDetailsRefPtr_bases, swig_OSG_EventDetailsRefPtr_base_names };

static swig_lua_method swig_OSG_EventDetails_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_EventDetails_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_EventDetails_bases[] = {0,0};
static const char *swig_OSG_EventDetails_base_names[] = {"OSG::FieldContainer *",0};
static swig_lua_class _wrap_class_OSG_EventDetails = { "EventDetails", &SWIGTYPE_p_OSG__EventDetails,0,0, swig_OSG_EventDetails_methods, swig_OSG_EventDetails_attributes, swig_OSG_EventDetails_bases, swig_OSG_EventDetails_base_names };

static int _wrap_new_GenericEventDetailsRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GenericEventDetailsRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::GenericEventDetailsRefPtr",0,0)
  result = (OSG::GenericEventDetailsRefPtr *)new OSG::GenericEventDetailsRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GenericEventDetailsRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GenericEventDetailsRefPtr *arg1 = 0 ;
  OSG::GenericEventDetailsRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::GenericEventDetailsRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::GenericEventDetailsRefPtr",1,"OSG::GenericEventDetailsRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("new_GenericEventDetailsRefPtr",1,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  
  result = (OSG::GenericEventDetailsRefPtr *)new OSG::GenericEventDetailsRefPtr((OSG::GenericEventDetailsRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GenericEventDetailsRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GenericEventDetailsRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GenericEventDetailsRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GenericEventDetailsRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_GenericEventDetailsRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::GenericEventDetailsRefPtr()\n"
    "    OSG::GenericEventDetailsRefPtr(OSG::GenericEventDetailsRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GenericEventDetailsRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::GenericEventDetailsRefPtr result;
  
  SWIG_check_num_args("OSG_GenericEventDetailsRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_GenericEventDetailsRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("GenericEventDetailsRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_GenericEventDetailsRefPtr_dcast(arg1);
  {
    OSG::GenericEventDetailsRefPtr * resultptr = new OSG::GenericEventDetailsRefPtr((const OSG::GenericEventDetailsRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GenericEventDetailsRefPtr(void *obj) {
OSG::GenericEventDetailsRefPtr *arg1 = (OSG::GenericEventDetailsRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_GenericEventDetailsRefPtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_GenericEventDetailsRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_GenericEventDetailsRefPtr_bases[] = {0,0};
static const char *swig_OSG_GenericEventDetailsRefPtr_base_names[] = {"OSG::EventDetailsRefPtr *",0};
static swig_lua_class _wrap_class_OSG_GenericEventDetailsRefPtr = { "GenericEventDetailsRefPtr", &SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,_wrap_new_GenericEventDetailsRefPtr, swig_delete_GenericEventDetailsRefPtr, swig_OSG_GenericEventDetailsRefPtr_methods, swig_OSG_GenericEventDetailsRefPtr_attributes, swig_OSG_GenericEventDetailsRefPtr_bases, swig_OSG_GenericEventDetailsRefPtr_base_names };

static int _wrap_GenericEventDetails_create__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::Time arg2 ;
  std::map< std::string,OSG::UInt32 > *arg3 = 0 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::GenericEventDetailsRefPtr result;
  
  SWIG_check_num_args("OSG_GenericEventDetails_create__SWIG_0",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_GenericEventDetails_create__SWIG_0",1,"OSG::FieldContainerRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG_GenericEventDetails_create__SWIG_0",2,"OSG::Time");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG_GenericEventDetails_create__SWIG_0",3,"std::map< std::string,OSG::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("GenericEventDetails_create",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("GenericEventDetails_create",3,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = OSG_GenericEventDetails_create__SWIG_0(arg1,arg2,(std::map< std::string,unsigned int > const &)*arg3);
  {
    OSG::GenericEventDetailsRefPtr * resultptr = new OSG::GenericEventDetailsRefPtr((const OSG::GenericEventDetailsRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericEventDetails_create__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::Time arg2 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::GenericEventDetailsRefPtr result;
  
  SWIG_check_num_args("OSG_GenericEventDetails_create__SWIG_0",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_GenericEventDetails_create__SWIG_0",1,"OSG::FieldContainerRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG_GenericEventDetails_create__SWIG_0",2,"OSG::Time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("GenericEventDetails_create",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  arg2 = (OSG::Time)lua_tonumber(L, 2);
  result = OSG_GenericEventDetails_create__SWIG_0(arg1,arg2);
  {
    OSG::GenericEventDetailsRefPtr * resultptr = new OSG::GenericEventDetailsRefPtr((const OSG::GenericEventDetailsRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericEventDetails_create(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GenericEventDetails_create__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_unsigned_int_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GenericEventDetails_create__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GenericEventDetails_create'\n"
    "  Possible C/C++ prototypes are:\n"
    "    create(OSG::FieldContainerRefPtr,OSG::Time,std::map< std::string,OSG::UInt32 > const &)\n"
    "    OSG_GenericEventDetails_create__SWIG_0(OSG::FieldContainerRefPtr,OSG::Time)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_GenericEventDetails_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_GenericEventDetails_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_GenericEventDetails_bases[] = {0,0};
static const char *swig_OSG_GenericEventDetails_base_names[] = {"OSG::EventDetails *",0};
static swig_lua_class _wrap_class_OSG_GenericEventDetails = { "GenericEventDetails", &SWIGTYPE_p_OSG__GenericEventDetails,0,0, swig_OSG_GenericEventDetails_methods, swig_OSG_GenericEventDetails_attributes, swig_OSG_GenericEventDetails_bases, swig_OSG_GenericEventDetails_base_names };

static int _wrap_new_ActivityRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ActivityRefPtr",0,0)
  result = (OSG::ActivityRefPtr *)new OSG::ActivityRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ActivityRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActivityRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = 0 ;
  OSG::ActivityRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ActivityRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::ActivityRefPtr",1,"OSG::ActivityRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("new_ActivityRefPtr",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::ActivityRefPtr *)new OSG::ActivityRefPtr((OSG::ActivityRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ActivityRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActivityRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ActivityRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ActivityRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ActivityRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::ActivityRefPtr()\n"
    "    OSG::ActivityRefPtr(OSG::ActivityRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActivityRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::Activity *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::ActivityRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr___deref__",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::Activity *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Activity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::ActivityRefPtr result;
  
  SWIG_check_num_args("OSG_ActivityRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ActivityRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_ActivityRefPtr_dcast(arg1);
  {
    OSG::ActivityRefPtr * resultptr = new OSG::ActivityRefPtr((const OSG::ActivityRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ActivityRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ActivityRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ActivityRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ActivityRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::ActivityRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::ActivityRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActivityRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ActivityRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ActivityRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ActivityRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::ActivityRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::ActivityRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActivityRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ActivityRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ActivityRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ActivityRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ActivityRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActivityRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ActivityRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ActivityRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ActivityRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::ActivityRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::ActivityRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::ActivityRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::ActivityRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActivityRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ActivityRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getType",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getTypeId",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getGroupId",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getTypeName",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getProducerType",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getId",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getNumFields",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ActivityRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ActivityRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_attachActivity",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ActivityRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ActivityRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ActivityRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ActivityRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ActivityRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ActivityRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ActivityRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActivityRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActivityRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ActivityRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ActivityRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ActivityRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ActivityRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ActivityRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ActivityRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ActivityRefPtr,0))){
    SWIG_fail_ptr("ActivityRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ActivityRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivityRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActivityRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActivityRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ActivityRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ActivityRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ActivityRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_ActivityRefPtr(void *obj) {
OSG::ActivityRefPtr *arg1 = (OSG::ActivityRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ActivityRefPtr_methods[] = {
    {"__deref__", _wrap_ActivityRefPtr___deref__}, 
    {"addAttachment", _wrap_ActivityRefPtr_addAttachment}, 
    {"subAttachment", _wrap_ActivityRefPtr_subAttachment}, 
    {"findAttachment", _wrap_ActivityRefPtr_findAttachment}, 
    {"getType", _wrap_ActivityRefPtr_getType}, 
    {"shallowCopy", _wrap_ActivityRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_ActivityRefPtr_getTypeId}, 
    {"getGroupId", _wrap_ActivityRefPtr_getGroupId}, 
    {"getTypeName", _wrap_ActivityRefPtr_getTypeName}, 
    {"getProducerType", _wrap_ActivityRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_ActivityRefPtr_getContainerSize}, 
    {"getId", _wrap_ActivityRefPtr_getId}, 
    {"getNumFields", _wrap_ActivityRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_ActivityRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_ActivityRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_ActivityRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ActivityRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ActivityRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ActivityRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_ActivityRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_ActivityRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_ActivityRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ActivityRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ActivityRefPtr_bases[] = {0,0};
static const char *swig_OSG_ActivityRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_ActivityRefPtr = { "ActivityRefPtr", &SWIGTYPE_p_OSG__ActivityRefPtr,_wrap_new_ActivityRefPtr, swig_delete_ActivityRefPtr, swig_OSG_ActivityRefPtr_methods, swig_OSG_ActivityRefPtr_attributes, swig_OSG_ActivityRefPtr_bases, swig_OSG_ActivityRefPtr_base_names };

static swig_lua_method swig_OSG_Activity_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_Activity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Activity_bases[] = {0,0};
static const char *swig_OSG_Activity_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Activity = { "Activity", &SWIGTYPE_p_OSG__Activity,0,0, swig_OSG_Activity_methods, swig_OSG_Activity_attributes, swig_OSG_Activity_bases, swig_OSG_Activity_base_names };

static int _wrap_new_LuaActivityRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaActivityRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::LuaActivityRefPtr",0,0)
  result = (OSG::LuaActivityRefPtr *)new OSG::LuaActivityRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__LuaActivityRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaActivityRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaActivityRefPtr *arg1 = 0 ;
  OSG::LuaActivityRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::LuaActivityRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::LuaActivityRefPtr",1,"OSG::LuaActivityRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaActivityRefPtr,0))){
    SWIG_fail_ptr("new_LuaActivityRefPtr",1,SWIGTYPE_p_OSG__LuaActivityRefPtr);
  }
  
  result = (OSG::LuaActivityRefPtr *)new OSG::LuaActivityRefPtr((OSG::LuaActivityRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__LuaActivityRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaActivityRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LuaActivityRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaActivityRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LuaActivityRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LuaActivityRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::LuaActivityRefPtr()\n"
    "    OSG::LuaActivityRefPtr(OSG::LuaActivityRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaActivityRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::LuaActivityRefPtr result;
  
  SWIG_check_num_args("OSG_LuaActivityRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_LuaActivityRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("LuaActivityRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_LuaActivityRefPtr_dcast(arg1);
  {
    OSG::LuaActivityRefPtr * resultptr = new OSG::LuaActivityRefPtr((const OSG::LuaActivityRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__LuaActivityRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaActivityRefPtr(void *obj) {
OSG::LuaActivityRefPtr *arg1 = (OSG::LuaActivityRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_LuaActivityRefPtr_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_LuaActivityRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_LuaActivityRefPtr_bases[] = {0,0};
static const char *swig_OSG_LuaActivityRefPtr_base_names[] = {"OSG::ActivityRefPtr *",0};
static swig_lua_class _wrap_class_OSG_LuaActivityRefPtr = { "LuaActivityRefPtr", &SWIGTYPE_p_OSG__LuaActivityRefPtr,_wrap_new_LuaActivityRefPtr, swig_delete_LuaActivityRefPtr, swig_OSG_LuaActivityRefPtr_methods, swig_OSG_LuaActivityRefPtr_attributes, swig_OSG_LuaActivityRefPtr_bases, swig_OSG_LuaActivityRefPtr_base_names };

static int _wrap_LuaActivity_addLuaCallback(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  std::string arg2 ;
  OSG::UInt32 arg3 ;
  OSG::FieldContainerRefPtr *argp1 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("OSG::LuaActivity::addLuaCallback",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::LuaActivity::addLuaCallback",1,"OSG::FieldContainerRefPtr");
  if(!lua_isstring(L,2)) SWIG_fail_arg("OSG::LuaActivity::addLuaCallback",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::LuaActivity::addLuaCallback",3,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("LuaActivity_addLuaCallback",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt32)lua_tonumber(L, 3);
  result = OSG::LuaActivity::addLuaCallback(arg1,arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_LuaActivity_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_LuaActivity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_LuaActivity_bases[] = {0,0};
static const char *swig_OSG_LuaActivity_base_names[] = {"OSG::Activity *",0};
static swig_lua_class _wrap_class_OSG_LuaActivity = { "LuaActivity", &SWIGTYPE_p_OSG__LuaActivity,0,0, swig_OSG_LuaActivity_methods, swig_OSG_LuaActivity_attributes, swig_OSG_LuaActivity_bases, swig_OSG_LuaActivity_base_names };

static int _wrap_makePlaneGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::UInt16 arg4 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makePlaneGeo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makePlaneGeo",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makePlaneGeo",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makePlaneGeo",3,"OSG::UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makePlaneGeo",4,"OSG::UInt16");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  result = OSG::makePlaneGeo(arg1,arg2,arg3,arg4);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makePlane(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::UInt16 arg4 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makePlane",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makePlane",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makePlane",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makePlane",3,"OSG::UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makePlane",4,"OSG::UInt16");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  result = OSG::makePlane(arg1,arg2,arg3,arg4);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeBoxGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::UInt16 arg4 ;
  OSG::UInt16 arg5 ;
  OSG::UInt16 arg6 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeBoxGeo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeBoxGeo",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeBoxGeo",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeBoxGeo",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makeBoxGeo",4,"OSG::UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::makeBoxGeo",5,"OSG::UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::makeBoxGeo",6,"OSG::UInt16");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (OSG::UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (OSG::UInt16)lua_tonumber(L, 6);
  result = OSG::makeBoxGeo(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeBox(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::UInt16 arg4 ;
  OSG::UInt16 arg5 ;
  OSG::UInt16 arg6 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeBox",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeBox",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeBox",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeBox",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makeBox",4,"OSG::UInt16");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::makeBox",5,"OSG::UInt16");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("OSG::makeBox",6,"OSG::UInt16");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (OSG::UInt16)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (OSG::UInt16)lua_tonumber(L, 6);
  result = OSG::makeBox(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeConeGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  bool arg4 ;
  bool arg5 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeConeGeo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeConeGeo",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeConeGeo",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeConeGeo",3,"OSG::UInt16");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("OSG::makeConeGeo",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("OSG::makeConeGeo",5,"bool");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = OSG::makeConeGeo(arg1,arg2,arg3,arg4,arg5);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeCone(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  bool arg4 ;
  bool arg5 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeCone",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeCone",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeCone",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeCone",3,"OSG::UInt16");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("OSG::makeCone",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("OSG::makeCone",5,"bool");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = OSG::makeCone(arg1,arg2,arg3,arg4,arg5);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeCylinderGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeCylinderGeo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeCylinderGeo",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeCylinderGeo",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeCylinderGeo",3,"OSG::UInt16");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("OSG::makeCylinderGeo",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("OSG::makeCylinderGeo",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("OSG::makeCylinderGeo",6,"bool");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = OSG::makeCylinderGeo(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeCylinder(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeCylinder",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeCylinder",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeCylinder",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeCylinder",3,"OSG::UInt16");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("OSG::makeCylinder",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("OSG::makeCylinder",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("OSG::makeCylinder",6,"bool");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = OSG::makeCylinder(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeTorusGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::UInt16 arg4 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeTorusGeo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeTorusGeo",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeTorusGeo",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeTorusGeo",3,"OSG::UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makeTorusGeo",4,"OSG::UInt16");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  result = OSG::makeTorusGeo(arg1,arg2,arg3,arg4);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeTorus(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::UInt16 arg4 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeTorus",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeTorus",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeTorus",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeTorus",3,"OSG::UInt16");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makeTorus",4,"OSG::UInt16");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  result = OSG::makeTorus(arg1,arg2,arg3,arg4);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeSphereGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UInt16 arg1 ;
  OSG::Real32 arg2 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeSphereGeo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeSphereGeo",1,"OSG::UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeSphereGeo",2,"OSG::Real32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (OSG::UInt16)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  result = OSG::makeSphereGeo(arg1,arg2);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeSphere(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UInt16 arg1 ;
  OSG::Real32 arg2 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeSphere",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeSphere",1,"OSG::UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeSphere",2,"OSG::Real32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (OSG::UInt16)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  result = OSG::makeSphere(arg1,arg2);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeLatLongSphereGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UInt16 arg1 ;
  OSG::UInt16 arg2 ;
  OSG::Real32 arg3 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeLatLongSphereGeo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeLatLongSphereGeo",1,"OSG::UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeLatLongSphereGeo",2,"OSG::UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeLatLongSphereGeo",3,"OSG::Real32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (OSG::UInt16)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt16)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  result = OSG::makeLatLongSphereGeo(arg1,arg2,arg3);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeLatLongSphere(lua_State* L) {
  int SWIG_arg = 0;
  OSG::UInt16 arg1 ;
  OSG::UInt16 arg2 ;
  OSG::Real32 arg3 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeLatLongSphere",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeLatLongSphere",1,"OSG::UInt16");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeLatLongSphere",2,"OSG::UInt16");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeLatLongSphere",3,"OSG::Real32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (OSG::UInt16)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt16)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  result = OSG::makeLatLongSphere(arg1,arg2,arg3);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeConicalFrustumGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::UInt16 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeConicalFrustumGeo",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeConicalFrustumGeo",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeConicalFrustumGeo",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeConicalFrustumGeo",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makeConicalFrustumGeo",4,"OSG::UInt16");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("OSG::makeConicalFrustumGeo",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("OSG::makeConicalFrustumGeo",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("OSG::makeConicalFrustumGeo",7,"bool");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = OSG::makeConicalFrustumGeo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_makeConicalFrustum(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Real32 arg1 ;
  OSG::Real32 arg2 ;
  OSG::Real32 arg3 ;
  OSG::UInt16 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("OSG::makeConicalFrustum",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OSG::makeConicalFrustum",1,"OSG::Real32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::makeConicalFrustum",2,"OSG::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::makeConicalFrustum",3,"OSG::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::makeConicalFrustum",4,"OSG::UInt16");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("OSG::makeConicalFrustum",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("OSG::makeConicalFrustum",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("OSG::makeConicalFrustum",7,"bool");
  arg1 = (OSG::Real32)lua_tonumber(L, 1);
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  arg3 = (OSG::Real32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (OSG::UInt16)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = OSG::makeConicalFrustum(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcVertexNormals__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::GeometryRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG::calcVertexNormals",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcVertexNormals",1,"OSG::GeometryRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcVertexNormals",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  OSG::calcVertexNormals(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcVertexNormals__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::Real32 arg2 ;
  OSG::GeometryRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG::calcVertexNormals",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcVertexNormals",1,"OSG::GeometryRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::calcVertexNormals",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcVertexNormals",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  OSG::calcVertexNormals(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcVertexNormals(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_calcVertexNormals__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__GeometryRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_calcVertexNormals__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'calcVertexNormals'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::calcVertexNormals(OSG::GeometryRefPtr)\n"
    "    OSG::calcVertexNormals(OSG::GeometryRefPtr,OSG::Real32)\n");
  lua_error(L);return 0;
}


static int _wrap_calcFaceNormals(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::GeometryRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG::calcFaceNormals",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcFaceNormals",1,"OSG::GeometryRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcFaceNormals",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  OSG::calcFaceNormals(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcVertexTangents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::Int32 arg2 ;
  OSG::Int32 arg3 ;
  OSG::Int32 arg4 ;
  OSG::GeometryRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG::calcVertexTangents",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcVertexTangents",1,"OSG::GeometryRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::calcVertexTangents",2,"OSG::Int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OSG::calcVertexTangents",3,"OSG::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OSG::calcVertexTangents",4,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcVertexTangents",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  arg3 = (OSG::Int32)lua_tonumber(L, 3);
  arg4 = (OSG::Int32)lua_tonumber(L, 4);
  OSG::calcVertexTangents(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcVertexTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::Int32 arg2 ;
  OSG::GeometryRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG::calcVertexTexCoords",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcVertexTexCoords",1,"OSG::GeometryRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::calcVertexTexCoords",2,"OSG::Int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcVertexTexCoords",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  arg2 = (OSG::Int32)lua_tonumber(L, 2);
  OSG::calcVertexTexCoords(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createOptimizedPrimitives(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::UInt32 arg2 ;
  bool arg3 ;
  bool arg4 ;
  OSG::UInt32 arg5 ;
  bool arg6 ;
  bool arg7 ;
  OSG::GeometryRefPtr *argp1 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("OSG::createOptimizedPrimitives",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::createOptimizedPrimitives",1,"OSG::GeometryRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::createOptimizedPrimitives",2,"OSG::UInt32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("OSG::createOptimizedPrimitives",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("OSG::createOptimizedPrimitives",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("OSG::createOptimizedPrimitives",5,"OSG::UInt32");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("OSG::createOptimizedPrimitives",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("OSG::createOptimizedPrimitives",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("createOptimizedPrimitives",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (OSG::UInt32)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (OSG::Int32)OSG::createOptimizedPrimitives(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createConvexPrimitives(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::GeometryRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG::createConvexPrimitives",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::createConvexPrimitives",1,"OSG::GeometryRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("createConvexPrimitives",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  OSG::createConvexPrimitives(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createSharedIndex(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::GeometryRefPtr *argp1 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("OSG::createSharedIndex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::createSharedIndex",1,"OSG::GeometryRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("createSharedIndex",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  result = (OSG::Int32)OSG::createSharedIndex(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createSingleIndex(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::GeometryRefPtr *argp1 ;
  OSG::Int32 result;
  
  SWIG_check_num_args("OSG::createSingleIndex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::createSingleIndex",1,"OSG::GeometryRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("createSingleIndex",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  result = (OSG::Int32)OSG::createSingleIndex(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcPrimitiveCount(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::UInt32 *arg2 = 0 ;
  OSG::UInt32 *arg3 = 0 ;
  OSG::UInt32 *arg4 = 0 ;
  OSG::GeometryRefPtr *argp1 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("OSG::calcPrimitiveCount",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcPrimitiveCount",1,"OSG::GeometryRefPtr");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OSG::calcPrimitiveCount",2,"OSG::UInt32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OSG::calcPrimitiveCount",3,"OSG::UInt32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OSG::calcPrimitiveCount",4,"OSG::UInt32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcPrimitiveCount",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("calcPrimitiveCount",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("calcPrimitiveCount",3,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("calcPrimitiveCount",4,SWIGTYPE_p_unsigned_int);
  }
  
  result = (OSG::UInt32)OSG::calcPrimitiveCount(arg1,*arg2,*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcVertexNormalsGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::Real32 arg2 ;
  OSG::GeometryRefPtr *argp1 ;
  OSG::NodeRefPtr result;
  
  SWIG_check_num_args("OSG::calcVertexNormalsGeo",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcVertexNormalsGeo",1,"OSG::GeometryRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::calcVertexNormalsGeo",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcVertexNormalsGeo",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  result = OSG::calcVertexNormalsGeo(arg1,arg2);
  {
    OSG::NodeRefPtr * resultptr = new OSG::NodeRefPtr((const OSG::NodeRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__NodeRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calcFaceNormalsGeo(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::Real32 arg2 ;
  OSG::GeometryRefPtr *argp1 ;
  OSG::NodeRefPtr result;
  
  SWIG_check_num_args("OSG::calcFaceNormalsGeo",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::calcFaceNormalsGeo",1,"OSG::GeometryRefPtr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OSG::calcFaceNormalsGeo",2,"OSG::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("calcFaceNormalsGeo",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  arg2 = (OSG::Real32)lua_tonumber(L, 2);
  result = OSG::calcFaceNormalsGeo(arg1,arg2);
  {
    OSG::NodeRefPtr * resultptr = new OSG::NodeRefPtr((const OSG::NodeRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__NodeRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_separateProperties(lua_State* L) {
  int SWIG_arg = 0;
  OSG::GeometryRefPtr arg1 ;
  OSG::GeometryRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG::separateProperties",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::separateProperties",1,"OSG::GeometryRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__GeometryRefPtr,0))){
    SWIG_fail_ptr("separateProperties",1,SWIGTYPE_p_OSG__GeometryRefPtr);
  }
  arg1 = *argp1;
  
  OSG::separateProperties(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "version",OSGVersion},
    { "LOG",OSGLogLOG},
    { "FATAL",OSGLogFATAL},
    { "WARNING",OSGLogWARNING},
    { "NOTICE",OSGLogNOTICE},
    { "INFO",OSGLogINFO},
    { "Matrix_identity", _wrap_Matrix_identity},
    { "Quaternion_identity", _wrap_Quaternion_identity},
    { "TypeFactory_the", _wrap_TypeFactory_the},
    { "FieldType_dcast", _wrap_FieldType_dcast},
    { "MatrixOrthogonal", _wrap_MatrixOrthogonal},
    { "MatrixFrustum", _wrap_MatrixFrustum},
    { "MatrixPerspective", _wrap_MatrixPerspective},
    { "MatrixStereoPerspective", _wrap_MatrixStereoPerspective},
    { "MatrixLookAt",_wrap_MatrixLookAt},
    { "MatrixProjection", _wrap_MatrixProjection},
    { "makeViewFromUVND", _wrap_makeViewFromUVND},
    { "makeViewFromUVNP", _wrap_makeViewFromUVNP},
    { "getUVNDFromMat", _wrap_getUVNDFromMat},
    { "getUVNPFromMat", _wrap_getUVNPFromMat},
    { "getPFromViewMat", _wrap_getPFromViewMat},
    { "setViewMatEyePos", _wrap_setViewMatEyePos},
    { "createFieldContainer",createFieldContainer},
    { "getFieldContainer",getFieldContainer},
    { "FieldContainerFactory_the", _wrap_FieldContainerFactory_the},
    { "AttachmentRefPtr_dcast", _wrap_AttachmentRefPtr_dcast},
    { "AttachmentContainerRefPtr_dcast", _wrap_AttachmentContainerRefPtr_dcast},
    { "NodeCoreRefPtr_dcast", _wrap_NodeCoreRefPtr_dcast},
    { "GeometryRefPtr_dcast", _wrap_GeometryRefPtr_dcast},
    { "NodeRefPtr_dcast", _wrap_NodeRefPtr_dcast},
    { "ViewportRefPtr_dcast", _wrap_ViewportRefPtr_dcast},
    { "CameraRefPtr_dcast", _wrap_CameraRefPtr_dcast},
    { "ImageRefPtr_dcast", _wrap_ImageRefPtr_dcast},
    { "TextureObjChunkRefPtr_dcast", _wrap_TextureObjChunkRefPtr_dcast},
    { "EventDetailsRefPtr_dcast", _wrap_EventDetailsRefPtr_dcast},
    { "GenericEventDetailsRefPtr_dcast", _wrap_GenericEventDetailsRefPtr_dcast},
    { "GenericEventDetails_create",_wrap_GenericEventDetails_create},
    { "ActivityRefPtr_dcast", _wrap_ActivityRefPtr_dcast},
    { "LuaActivityRefPtr_dcast", _wrap_LuaActivityRefPtr_dcast},
    { "LuaActivity_addLuaCallback", _wrap_LuaActivity_addLuaCallback},
    { "makePlaneGeo", _wrap_makePlaneGeo},
    { "makePlane", _wrap_makePlane},
    { "makeBoxGeo", _wrap_makeBoxGeo},
    { "makeBox", _wrap_makeBox},
    { "makeConeGeo", _wrap_makeConeGeo},
    { "makeCone", _wrap_makeCone},
    { "makeCylinderGeo", _wrap_makeCylinderGeo},
    { "makeCylinder", _wrap_makeCylinder},
    { "makeTorusGeo", _wrap_makeTorusGeo},
    { "makeTorus", _wrap_makeTorus},
    { "makeSphereGeo", _wrap_makeSphereGeo},
    { "makeSphere", _wrap_makeSphere},
    { "makeLatLongSphereGeo", _wrap_makeLatLongSphereGeo},
    { "makeLatLongSphere", _wrap_makeLatLongSphere},
    { "makeConicalFrustumGeo", _wrap_makeConicalFrustumGeo},
    { "makeConicalFrustum", _wrap_makeConicalFrustum},
    { "calcVertexNormals",_wrap_calcVertexNormals},
    { "calcFaceNormals", _wrap_calcFaceNormals},
    { "calcVertexTangents", _wrap_calcVertexTangents},
    { "calcVertexTexCoords", _wrap_calcVertexTexCoords},
    { "createOptimizedPrimitives", _wrap_createOptimizedPrimitives},
    { "createConvexPrimitives", _wrap_createConvexPrimitives},
    { "createSharedIndex", _wrap_createSharedIndex},
    { "createSingleIndex", _wrap_createSingleIndex},
    { "calcPrimitiveCount", _wrap_calcPrimitiveCount},
    { "calcVertexNormalsGeo", _wrap_calcVertexNormalsGeo},
    { "calcFaceNormalsGeo", _wrap_calcFaceNormalsGeo},
    { "separateProperties", _wrap_separateProperties},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_NONE", (long) OSG::FrustumVolume::P_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_NEAR", (long) OSG::FrustumVolume::P_NEAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_FAR", (long) OSG::FrustumVolume::P_FAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_LEFT", (long) OSG::FrustumVolume::P_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_RIGHT", (long) OSG::FrustumVolume::P_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_TOP", (long) OSG::FrustumVolume::P_TOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_BOTTOM", (long) OSG::FrustumVolume::P_BOTTOM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FrustumVolume_P_ALL", (long) OSG::FrustumVolume::P_ALL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FieldType_SingleField", (long) OSG::FieldType::SingleField, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FieldType_MultiField", (long) OSG::FieldType::MultiField, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FieldType_ValueField", (long) OSG::FieldType::ValueField, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FieldType_PtrField", (long) OSG::FieldType::PtrField, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FieldType_ParentPtrField", (long) OSG::FieldType::ParentPtrField, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FieldType_ChildPtrField", (long) OSG::FieldType::ChildPtrField, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_INVALID_PF", (long) OSG::Image::OSG_INVALID_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_A_PF", (long) OSG::Image::OSG_A_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_I_PF", (long) OSG::Image::OSG_I_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_L_PF", (long) OSG::Image::OSG_L_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_LA_PF", (long) OSG::Image::OSG_LA_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_BGR_PF", (long) OSG::Image::OSG_BGR_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_BGRA_PF", (long) OSG::Image::OSG_BGRA_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGB_DXT1", (long) OSG::Image::OSG_RGB_DXT1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGBA_DXT1", (long) OSG::Image::OSG_RGBA_DXT1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGBA_DXT3", (long) OSG::Image::OSG_RGBA_DXT3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGBA_DXT5", (long) OSG::Image::OSG_RGBA_DXT5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGB_PF", (long) OSG::Image::OSG_RGB_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGBA_PF", (long) OSG::Image::OSG_RGBA_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_ALPHA_INTEGER_PF", (long) OSG::Image::OSG_ALPHA_INTEGER_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGB_INTEGER_PF", (long) OSG::Image::OSG_RGB_INTEGER_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RGBA_INTEGER_PF", (long) OSG::Image::OSG_RGBA_INTEGER_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_BGR_INTEGER_PF", (long) OSG::Image::OSG_BGR_INTEGER_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_BGRA_INTEGER_PF", (long) OSG::Image::OSG_BGRA_INTEGER_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_LUMINANCE_INTEGER_PF", (long) OSG::Image::OSG_LUMINANCE_INTEGER_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_LUMINANCE_ALPHA_INTEGER_PF", (long) OSG::Image::OSG_LUMINANCE_ALPHA_INTEGER_PF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_INVALID_IMAGEDATATYPE", (long) OSG::Image::OSG_INVALID_IMAGEDATATYPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_UINT8_IMAGEDATA", (long) OSG::Image::OSG_UINT8_IMAGEDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_UINT16_IMAGEDATA", (long) OSG::Image::OSG_UINT16_IMAGEDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_UINT32_IMAGEDATA", (long) OSG::Image::OSG_UINT32_IMAGEDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_FLOAT16_IMAGEDATA", (long) OSG::Image::OSG_FLOAT16_IMAGEDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_FLOAT32_IMAGEDATA", (long) OSG::Image::OSG_FLOAT32_IMAGEDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_INT16_IMAGEDATA", (long) OSG::Image::OSG_INT16_IMAGEDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_INT32_IMAGEDATA", (long) OSG::Image::OSG_INT32_IMAGEDATA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RESUNIT_INVALID", (long) OSG::Image::OSG_RESUNIT_INVALID, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RESUNIT_NONE", (long) OSG::Image::OSG_RESUNIT_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Image_OSG_RESUNIT_INCH", (long) OSG::Image::OSG_RESUNIT_INCH, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OSG__LuaActivityTo_p_OSG__Activity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Activity *)  ((OSG::LuaActivity *) x));
}
static void *_p_OSG__Vec2fTo_p_OSG__Pnt2f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Pnt2f *)  ((OSG::Vec2f *) x));
}
static void *_p_OSG__NodeTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Node *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Activity *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::NodeCore *) x));
}
static void *_p_OSG__CameraTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Camera *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Viewport *) x));
}
static void *_p_OSG__ImageTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Image *) x));
}
static void *_p_OSG__NodeTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Node *) x));
}
static void *_p_OSG__AttachmentTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::Attachment *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Activity *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__AttachmentContainerTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::AttachmentContainer *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::NodeCore *) x));
}
static void *_p_OSG__CameraTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Camera *) x));
}
static void *_p_OSG__TextureObjChunkTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::TextureObjChunk *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Viewport *) x));
}
static void *_p_OSG__ImageTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Image *) x));
}
static void *_p_OSG__EventDetailsTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::EventDetails *) x));
}
static void *_p_OSG__GenericEventDetailsTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::EventDetails *) ((OSG::GenericEventDetails *) x));
}
static void *_p_OSG__NodeTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Node *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Viewport *) x));
}
static void *_p_OSG__CameraTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Camera *) x));
}
static void *_p_OSG__AttachmentTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::Attachment *) x));
}
static void *_p_OSG__GenericEventDetailsTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::EventDetails *) ((OSG::GenericEventDetails *) x));
}
static void *_p_OSG__EventDetailsTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::EventDetails *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::NodeCore *) x));
}
static void *_p_OSG__AttachmentContainerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::AttachmentContainer *) x));
}
static void *_p_OSG__FieldContainerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *)  ((OSG::FieldContainer *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Activity *) x));
}
static void *_p_OSG__ImageTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Image *) x));
}
static void *_p_OSG__TextureObjChunkTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::TextureObjChunk *) x));
}
static void *_p_OSG__GeometryRefPtrTo_p_OSG__NodeCoreRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::NodeCoreRefPtr *)  ((OSG::GeometryRefPtr *) x));
}
static void *_p_OSG__GenericEventDetailsRefPtrTo_p_OSG__EventDetailsRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::EventDetailsRefPtr *)  ((OSG::GenericEventDetailsRefPtr *) x));
}
static void *_p_OSG__LuaActivityRefPtrTo_p_OSG__ActivityRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ActivityRefPtr *)  ((OSG::LuaActivityRefPtr *) x));
}
static void *_p_OSG__FieldContainerFactoryTo_p_OSG__FieldContainerFactoryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerFactoryBase *)  ((OSG::FieldContainerFactory *) x));
}
static void *_p_OSG__FieldContainerFactoryBaseTo_p_OSG__FactoryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FactoryBase *)  ((OSG::FieldContainerFactoryBase *) x));
}
static void *_p_OSG__FieldContainerFactoryTo_p_OSG__FactoryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FactoryBase *) (OSG::FieldContainerFactoryBase *) ((OSG::FieldContainerFactory *) x));
}
static void *_p_OSG__Vec3fTo_p_OSG__Pnt3f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Pnt3f *)  ((OSG::Vec3f *) x));
}
static void *_p_OSG__GenericEventDetailsTo_p_OSG__EventDetails(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::EventDetails *)  ((OSG::GenericEventDetails *) x));
}
static void *_p_OSG__NodeCoreRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::NodeCoreRefPtr *) x));
}
static void *_p_OSG__GeometryRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::NodeCoreRefPtr *) ((OSG::GeometryRefPtr *) x));
}
static void *_p_OSG__NodeRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::NodeRefPtr *) x));
}
static void *_p_OSG__CameraRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::CameraRefPtr *) x));
}
static void *_p_OSG__ImageRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ImageRefPtr *) x));
}
static void *_p_OSG__ActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ActivityRefPtr *) x));
}
static void *_p_OSG__LuaActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::ActivityRefPtr *) ((OSG::LuaActivityRefPtr *) x));
}
static void *_p_OSG__ViewportRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ViewportRefPtr *) x));
}
static void *_p_OSG__NodeCoreRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::NodeCoreRefPtr *) x));
}
static void *_p_OSG__GeometryRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::NodeCoreRefPtr *) ((OSG::GeometryRefPtr *) x));
}
static void *_p_OSG__NodeRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::NodeRefPtr *) x));
}
static void *_p_OSG__CameraRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::CameraRefPtr *) x));
}
static void *_p_OSG__ImageRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ImageRefPtr *) x));
}
static void *_p_OSG__TextureObjChunkRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::TextureObjChunkRefPtr *) x));
}
static void *_p_OSG__EventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::EventDetailsRefPtr *) x));
}
static void *_p_OSG__GenericEventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::EventDetailsRefPtr *) ((OSG::GenericEventDetailsRefPtr *) x));
}
static void *_p_OSG__ActivityRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ActivityRefPtr *) x));
}
static void *_p_OSG__LuaActivityRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::ActivityRefPtr *) ((OSG::LuaActivityRefPtr *) x));
}
static void *_p_OSG__AttachmentRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::AttachmentRefPtr *) x));
}
static void *_p_OSG__AttachmentContainerRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::AttachmentContainerRefPtr *) x));
}
static void *_p_OSG__ViewportRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ViewportRefPtr *) x));
}
static void *_p_OSG__BoxVolumeTo_p_OSG__Volume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Volume *)  ((OSG::BoxVolume *) x));
}
static void *_p_OSG__FrustumVolumeTo_p_OSG__Volume(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Volume *)  ((OSG::FrustumVolume *) x));
}
static void *_p_OSG__DataTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *)  ((OSG::DataType *) x));
}
static void *_p_OSG__FieldTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *) (OSG::DataType *) ((OSG::FieldType *) x));
}
static void *_p_OSG__EventProducerTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *)  ((OSG::EventProducerType *) x));
}
static void *_p_OSG__ReflexiveContainerTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *) (OSG::DataType *) ((OSG::ReflexiveContainerType *) x));
}
static void *_p_OSG__FieldContainerTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *) (OSG::DataType *)(OSG::ReflexiveContainerType *) ((OSG::FieldContainerType *) x));
}
static void *_p_OSG__Vec4fTo_p_OSG__Pnt4f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Pnt4f *)  ((OSG::Vec4f *) x));
}
static void *_p_OSG__FieldContainerTypeTo_p_OSG__ReflexiveContainerType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainerType *)  ((OSG::FieldContainerType *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__NodeCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::NodeCore *)  ((OSG::Geometry *) x));
}
static void *_p_OSG__FieldTypeTo_p_OSG__DataType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::DataType *)  ((OSG::FieldType *) x));
}
static void *_p_OSG__ReflexiveContainerTypeTo_p_OSG__DataType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::DataType *)  ((OSG::ReflexiveContainerType *) x));
}
static void *_p_OSG__FieldContainerTypeTo_p_OSG__DataType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::DataType *) (OSG::ReflexiveContainerType *) ((OSG::FieldContainerType *) x));
}
static swig_type_info _swigt__p_Inherited = {"_p_Inherited", "Inherited *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MFChildrenType = {"_p_MFChildrenType", "MFChildrenType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixType = {"_p_MatrixType", "MatrixType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Activity = {"_p_OSG__Activity", "OSG::Activity *", 0, 0, (void*)&_wrap_class_OSG_Activity, 0};
static swig_type_info _swigt__p_OSG__ActivityRefPtr = {"_p_OSG__ActivityRefPtr", "OSG::ActivityRefPtr *", 0, 0, (void*)&_wrap_class_OSG_ActivityRefPtr, 0};
static swig_type_info _swigt__p_OSG__Attachment = {"_p_OSG__Attachment", "OSG::Attachment *", 0, 0, (void*)&_wrap_class_OSG_Attachment, 0};
static swig_type_info _swigt__p_OSG__AttachmentContainer = {"_p_OSG__AttachmentContainer", "OSG::AttachmentContainer *", 0, 0, (void*)&_wrap_class_OSG_AttachmentContainer, 0};
static swig_type_info _swigt__p_OSG__AttachmentContainerRefPtr = {"_p_OSG__AttachmentContainerRefPtr", "OSG::AttachmentContainerRefPtr *", 0, 0, (void*)&_wrap_class_OSG_AttachmentContainerRefPtr, 0};
static swig_type_info _swigt__p_OSG__AttachmentRefPtr = {"_p_OSG__AttachmentRefPtr", "OSG::AttachmentRefPtr *", 0, 0, (void*)&_wrap_class_OSG_AttachmentRefPtr, 0};
static swig_type_info _swigt__p_OSG__BoxVolume = {"_p_OSG__BoxVolume", "OSG::BoxVolume *", 0, 0, (void*)&_wrap_class_OSG_BoxVolume, 0};
static swig_type_info _swigt__p_OSG__Camera = {"_p_OSG__Camera", "OSG::Camera *", 0, 0, (void*)&_wrap_class_OSG_Camera, 0};
static swig_type_info _swigt__p_OSG__CameraRefPtr = {"_p_OSG__CameraRefPtr", "OSG::CameraRefPtr *", 0, 0, (void*)&_wrap_class_OSG_CameraRefPtr, 0};
static swig_type_info _swigt__p_OSG__Color3f = {"_p_OSG__Color3f", "OSG::Color3f *", 0, 0, (void*)&_wrap_class_OSG_Color3f, 0};
static swig_type_info _swigt__p_OSG__Color4f = {"_p_OSG__Color4f", "OSG::Color4f *", 0, 0, (void*)&_wrap_class_OSG_Color4f, 0};
static swig_type_info _swigt__p_OSG__DataType = {"_p_OSG__DataType", "OSG::DataType *", 0, 0, (void*)&_wrap_class_OSG_DataType, 0};
static swig_type_info _swigt__p_OSG__EventDescription = {"_p_OSG__EventDescription", "OSG::EventDescription *", 0, 0, (void*)&_wrap_class_OSG_EventDescription, 0};
static swig_type_info _swigt__p_OSG__EventDetails = {"_p_OSG__EventDetails", "OSG::EventDetails *", 0, 0, (void*)&_wrap_class_OSG_EventDetails, 0};
static swig_type_info _swigt__p_OSG__EventDetailsRefPtr = {"_p_OSG__EventDetailsRefPtr", "OSG::EventDetailsRefPtr *", 0, 0, (void*)&_wrap_class_OSG_EventDetailsRefPtr, 0};
static swig_type_info _swigt__p_OSG__EventProducerType = {"_p_OSG__EventProducerType", "OSG::EventProducerType *", 0, 0, (void*)&_wrap_class_OSG_EventProducerType, 0};
static swig_type_info _swigt__p_OSG__FactoryBase = {"_p_OSG__FactoryBase", "OSG::FactoryBase *", 0, 0, (void*)&_wrap_class_OSG_FactoryBase, 0};
static swig_type_info _swigt__p_OSG__FieldContainer = {"_p_OSG__FieldContainer", "OSG::FieldContainerFactoryBase::ContainerPtr|OSG::FieldContainer *", 0, 0, (void*)&_wrap_class_OSG_FieldContainer, 0};
static swig_type_info _swigt__p_OSG__FieldContainerFactory = {"_p_OSG__FieldContainerFactory", "OSG::FieldContainerFactory *", 0, 0, (void*)&_wrap_class_OSG_FieldContainerFactory, 0};
static swig_type_info _swigt__p_OSG__FieldContainerFactoryBase = {"_p_OSG__FieldContainerFactoryBase", "OSG::FieldContainerFactoryBase *", 0, 0, (void*)&_wrap_class_OSG_FieldContainerFactoryBase, 0};
static swig_type_info _swigt__p_OSG__FieldContainerRefPtr = {"_p_OSG__FieldContainerRefPtr", "OSG::FieldContainerRefPtr *", 0, 0, (void*)&_wrap_class_OSG_FieldContainerRefPtr, 0};
static swig_type_info _swigt__p_OSG__FieldContainerType = {"_p_OSG__FieldContainerType", "OSG::FieldContainerType *", 0, 0, (void*)&_wrap_class_OSG_FieldContainerType, 0};
static swig_type_info _swigt__p_OSG__FieldDescriptionBase = {"_p_OSG__FieldDescriptionBase", "OSG::FieldDescriptionBase *", 0, 0, (void*)&_wrap_class_OSG_FieldDescriptionBase, 0};
static swig_type_info _swigt__p_OSG__FieldType = {"_p_OSG__FieldType", "OSG::FieldType *", 0, 0, (void*)&_wrap_class_OSG_FieldType, 0};
static swig_type_info _swigt__p_OSG__FrustumVolume = {"_p_OSG__FrustumVolume", "OSG::FrustumVolume *", 0, 0, (void*)&_wrap_class_OSG_FrustumVolume, 0};
static swig_type_info _swigt__p_OSG__GenericEventDetails = {"_p_OSG__GenericEventDetails", "OSG::GenericEventDetails *", 0, 0, (void*)&_wrap_class_OSG_GenericEventDetails, 0};
static swig_type_info _swigt__p_OSG__GenericEventDetailsRefPtr = {"_p_OSG__GenericEventDetailsRefPtr", "OSG::GenericEventDetailsRefPtr *", 0, 0, (void*)&_wrap_class_OSG_GenericEventDetailsRefPtr, 0};
static swig_type_info _swigt__p_OSG__Geometry = {"_p_OSG__Geometry", "OSG::Geometry *", 0, 0, (void*)&_wrap_class_OSG_Geometry, 0};
static swig_type_info _swigt__p_OSG__GeometryRefPtr = {"_p_OSG__GeometryRefPtr", "OSG::GeometryRefPtr *", 0, 0, (void*)&_wrap_class_OSG_GeometryRefPtr, 0};
static swig_type_info _swigt__p_OSG__Image = {"_p_OSG__Image", "OSG::Image *", 0, 0, (void*)&_wrap_class_OSG_Image, 0};
static swig_type_info _swigt__p_OSG__ImageRefPtr = {"_p_OSG__ImageRefPtr", "OSG::ImageRefPtr *", 0, 0, (void*)&_wrap_class_OSG_ImageRefPtr, 0};
static swig_type_info _swigt__p_OSG__Line = {"_p_OSG__Line", "OSG::Line *", 0, 0, (void*)&_wrap_class_OSG_Line, 0};
static swig_type_info _swigt__p_OSG__LuaActivity = {"_p_OSG__LuaActivity", "OSG::LuaActivity *", 0, 0, (void*)&_wrap_class_OSG_LuaActivity, 0};
static swig_type_info _swigt__p_OSG__LuaActivityRefPtr = {"_p_OSG__LuaActivityRefPtr", "OSG::LuaActivityRefPtr *", 0, 0, (void*)&_wrap_class_OSG_LuaActivityRefPtr, 0};
static swig_type_info _swigt__p_OSG__Matrix = {"_p_OSG__Matrix", "OSG::Quaternion::MatrixType *|OSG::Matrix *", 0, 0, (void*)&_wrap_class_OSG_Matrix, 0};
static swig_type_info _swigt__p_OSG__Node = {"_p_OSG__Node", "OSG::Node *", 0, 0, (void*)&_wrap_class_OSG_Node, 0};
static swig_type_info _swigt__p_OSG__NodeCore = {"_p_OSG__NodeCore", "OSG::NodeCore *", 0, 0, (void*)&_wrap_class_OSG_NodeCore, 0};
static swig_type_info _swigt__p_OSG__NodeCoreRefPtr = {"_p_OSG__NodeCoreRefPtr", "OSG::NodeCoreRefPtr *", 0, 0, (void*)&_wrap_class_OSG_NodeCoreRefPtr, 0};
static swig_type_info _swigt__p_OSG__NodeRefPtr = {"_p_OSG__NodeRefPtr", "OSG::NodeRefPtr *", 0, 0, (void*)&_wrap_class_OSG_NodeRefPtr, 0};
static swig_type_info _swigt__p_OSG__Plane = {"_p_OSG__Plane", "OSG::Plane *", 0, 0, (void*)&_wrap_class_OSG_Plane, 0};
static swig_type_info _swigt__p_OSG__Pnt2f = {"_p_OSG__Pnt2f", "OSG::Pnt2f *|OSG::Pnt2f::PointType *|OSG::Vec2f::PointType *", 0, 0, (void*)&_wrap_class_OSG_Pnt2f, 0};
static swig_type_info _swigt__p_OSG__Pnt3f = {"_p_OSG__Pnt3f", "OSG::Pnt3f::PointType *|OSG::Vec3f::PointType *|OSG::Matrix::PointType3f *|OSG::Pnt3f *", 0, 0, (void*)&_wrap_class_OSG_Pnt3f, 0};
static swig_type_info _swigt__p_OSG__Pnt4f = {"_p_OSG__Pnt4f", "OSG::Pnt4f::PointType *|OSG::Vec4f::PointType *|OSG::Matrix::PointType *|OSG::Pnt4f *", 0, 0, (void*)&_wrap_class_OSG_Pnt4f, 0};
static swig_type_info _swigt__p_OSG__Quaternion = {"_p_OSG__Quaternion", "OSG::Matrix::QuaternionType *|OSG::Quaternion *", 0, 0, (void*)&_wrap_class_OSG_Quaternion, 0};
static swig_type_info _swigt__p_OSG__ReflexiveContainer = {"_p_OSG__ReflexiveContainer", "OSG::ReflexiveContainer *", 0, 0, (void*)&_wrap_class_OSG_ReflexiveContainer, 0};
static swig_type_info _swigt__p_OSG__ReflexiveContainerType = {"_p_OSG__ReflexiveContainerType", "OSG::ReflexiveContainerType *", 0, 0, (void*)&_wrap_class_OSG_ReflexiveContainerType, 0};
static swig_type_info _swigt__p_OSG__TextureObjChunk = {"_p_OSG__TextureObjChunk", "OSG::TextureObjChunk *", 0, 0, (void*)&_wrap_class_OSG_TextureObjChunk, 0};
static swig_type_info _swigt__p_OSG__TextureObjChunkRefPtr = {"_p_OSG__TextureObjChunkRefPtr", "OSG::TextureObjChunkRefPtr *", 0, 0, (void*)&_wrap_class_OSG_TextureObjChunkRefPtr, 0};
static swig_type_info _swigt__p_OSG__TypeBase = {"_p_OSG__TypeBase", "OSG::TypeBase *", 0, 0, (void*)&_wrap_class_OSG_TypeBase, 0};
static swig_type_info _swigt__p_OSG__TypeFactory = {"_p_OSG__TypeFactory", "OSG::TypeFactory *", 0, 0, (void*)&_wrap_class_OSG_TypeFactory, 0};
static swig_type_info _swigt__p_OSG__Vec2f = {"_p_OSG__Vec2f", "OSG::Pnt2f::VectorType *|OSG::Vec2f::VectorType *|OSG::Vec2f *", 0, 0, (void*)&_wrap_class_OSG_Vec2f, 0};
static swig_type_info _swigt__p_OSG__Vec3f = {"_p_OSG__Vec3f", "OSG::Matrix::VectorType3f *|OSG::Quaternion::VectorType *|OSG::Vec3f::VectorType *|OSG::Pnt3f::VectorType *|OSG::Vec3f *", 0, 0, (void*)&_wrap_class_OSG_Vec3f, 0};
static swig_type_info _swigt__p_OSG__Vec4f = {"_p_OSG__Vec4f", "OSG::Vec4f *|OSG::Pnt4f::VectorType *|OSG::Vec4f::VectorType *|OSG::Matrix::VectorType *", 0, 0, (void*)&_wrap_class_OSG_Vec4f, 0};
static swig_type_info _swigt__p_OSG__Viewport = {"_p_OSG__Viewport", "OSG::Viewport *", 0, 0, (void*)&_wrap_class_OSG_Viewport, 0};
static swig_type_info _swigt__p_OSG__ViewportRefPtr = {"_p_OSG__ViewportRefPtr", "OSG::ViewportRefPtr *", 0, 0, (void*)&_wrap_class_OSG_ViewportRefPtr, 0};
static swig_type_info _swigt__p_OSG__Volume = {"_p_OSG__Volume", "OSG::Volume *", 0, 0, (void*)&_wrap_class_OSG_Volume, 0};
static swig_type_info _swigt__p_ParentContainer = {"_p_ParentContainer", "ParentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlaneSet = {"_p_PlaneSet", "PlaneSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType = {"_p_PointType", "PointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType3f = {"_p_PointType3f", "PointType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuaternionType = {"_p_QuaternionType", "QuaternionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFCoreType = {"_p_SFCoreType", "SFCoreType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFParentType = {"_p_SFParentType", "SFParentType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFTravMaskType = {"_p_SFTravMaskType", "SFTravMaskType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFVolumeType = {"_p_SFVolumeType", "SFVolumeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeObject = {"_p_TypeObject", "TypeObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType = {"_p_VectorType", "VectorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType3f = {"_p_VectorType3f", "VectorType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VolumeType = {"_p_VolumeType", "VolumeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__signals2__connection = {"_p_boost__signals2__connection", "boost::signals2::connection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|OSG::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "OSG::Time *|double *|OSG::Real64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "OSG::Matrix::ValueType *|float *|OSG::Real16 *|OSG::Real32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "OSG::Int16 *|int *|OSG::Int32 *|OSG::Int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "OSG::TimeStamp *|OSG::Int64 *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *|OSG::Real128 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|OSG::SChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_std__string_t = {"_p_std__mapT_int_std__string_t", "std::map< int,std::string > *|std::map< OSG::Int32,std::string > *", 0, 0, (void*)&_wrap_class_std_map_Sl_OSG_Int32_Sc_std_string_Sg_, 0};
static swig_type_info _swigt__p_std__mapT_std__string_unsigned_int_t = {"_p_std__mapT_std__string_unsigned_int_t", "std::map< std::string,OSG::UInt32 > *|std::map< std::string,unsigned int > *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_OSG_UInt32_Sg_, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|OSG::UChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "OSG::UInt16 *|OSG::UInt32 *|unsigned int *|OSG::UInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "OSG::UInt64 *|unsigned long *|OSG::BitVector *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Inherited,
  &_swigt__p_MFChildrenType,
  &_swigt__p_MatrixType,
  &_swigt__p_OSG__Activity,
  &_swigt__p_OSG__ActivityRefPtr,
  &_swigt__p_OSG__Attachment,
  &_swigt__p_OSG__AttachmentContainer,
  &_swigt__p_OSG__AttachmentContainerRefPtr,
  &_swigt__p_OSG__AttachmentRefPtr,
  &_swigt__p_OSG__BoxVolume,
  &_swigt__p_OSG__Camera,
  &_swigt__p_OSG__CameraRefPtr,
  &_swigt__p_OSG__Color3f,
  &_swigt__p_OSG__Color4f,
  &_swigt__p_OSG__DataType,
  &_swigt__p_OSG__EventDescription,
  &_swigt__p_OSG__EventDetails,
  &_swigt__p_OSG__EventDetailsRefPtr,
  &_swigt__p_OSG__EventProducerType,
  &_swigt__p_OSG__FactoryBase,
  &_swigt__p_OSG__FieldContainer,
  &_swigt__p_OSG__FieldContainerFactory,
  &_swigt__p_OSG__FieldContainerFactoryBase,
  &_swigt__p_OSG__FieldContainerRefPtr,
  &_swigt__p_OSG__FieldContainerType,
  &_swigt__p_OSG__FieldDescriptionBase,
  &_swigt__p_OSG__FieldType,
  &_swigt__p_OSG__FrustumVolume,
  &_swigt__p_OSG__GenericEventDetails,
  &_swigt__p_OSG__GenericEventDetailsRefPtr,
  &_swigt__p_OSG__Geometry,
  &_swigt__p_OSG__GeometryRefPtr,
  &_swigt__p_OSG__Image,
  &_swigt__p_OSG__ImageRefPtr,
  &_swigt__p_OSG__Line,
  &_swigt__p_OSG__LuaActivity,
  &_swigt__p_OSG__LuaActivityRefPtr,
  &_swigt__p_OSG__Matrix,
  &_swigt__p_OSG__Node,
  &_swigt__p_OSG__NodeCore,
  &_swigt__p_OSG__NodeCoreRefPtr,
  &_swigt__p_OSG__NodeRefPtr,
  &_swigt__p_OSG__Plane,
  &_swigt__p_OSG__Pnt2f,
  &_swigt__p_OSG__Pnt3f,
  &_swigt__p_OSG__Pnt4f,
  &_swigt__p_OSG__Quaternion,
  &_swigt__p_OSG__ReflexiveContainer,
  &_swigt__p_OSG__ReflexiveContainerType,
  &_swigt__p_OSG__TextureObjChunk,
  &_swigt__p_OSG__TextureObjChunkRefPtr,
  &_swigt__p_OSG__TypeBase,
  &_swigt__p_OSG__TypeFactory,
  &_swigt__p_OSG__Vec2f,
  &_swigt__p_OSG__Vec3f,
  &_swigt__p_OSG__Vec4f,
  &_swigt__p_OSG__Viewport,
  &_swigt__p_OSG__ViewportRefPtr,
  &_swigt__p_OSG__Volume,
  &_swigt__p_ParentContainer,
  &_swigt__p_PlaneSet,
  &_swigt__p_PointType,
  &_swigt__p_PointType3f,
  &_swigt__p_QuaternionType,
  &_swigt__p_SFCoreType,
  &_swigt__p_SFParentType,
  &_swigt__p_SFTravMaskType,
  &_swigt__p_SFVolumeType,
  &_swigt__p_TypeObject,
  &_swigt__p_ValueType,
  &_swigt__p_VectorType,
  &_swigt__p_VectorType3f,
  &_swigt__p_VolumeType,
  &_swigt__p_boost__signals2__connection,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_mapped_type,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__mapT_int_std__string_t,
  &_swigt__p_std__mapT_std__string_unsigned_int_t,
  &_swigt__p_std__string,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_Inherited[] = {  {&_swigt__p_Inherited, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MFChildrenType[] = {  {&_swigt__p_MFChildrenType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixType[] = {  {&_swigt__p_MatrixType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Activity[] = {  {&_swigt__p_OSG__Activity, 0, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__Activity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ActivityRefPtr[] = {  {&_swigt__p_OSG__ActivityRefPtr, 0, 0, 0},  {&_swigt__p_OSG__LuaActivityRefPtr, _p_OSG__LuaActivityRefPtrTo_p_OSG__ActivityRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Attachment[] = {  {&_swigt__p_OSG__Attachment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentContainer[] = {  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, 0, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__AttachmentContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentContainerRefPtr[] = {  {&_swigt__p_OSG__NodeCoreRefPtr, _p_OSG__NodeCoreRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GeometryRefPtr, _p_OSG__GeometryRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeRefPtr, _p_OSG__NodeRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__CameraRefPtr, _p_OSG__CameraRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ImageRefPtr, _p_OSG__ImageRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ActivityRefPtr, _p_OSG__ActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaActivityRefPtr, _p_OSG__LuaActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentContainerRefPtr, 0, 0, 0},  {&_swigt__p_OSG__ViewportRefPtr, _p_OSG__ViewportRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentRefPtr[] = {  {&_swigt__p_OSG__AttachmentRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__BoxVolume[] = {  {&_swigt__p_OSG__BoxVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Camera[] = {  {&_swigt__p_OSG__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__CameraRefPtr[] = {  {&_swigt__p_OSG__CameraRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Color3f[] = {  {&_swigt__p_OSG__Color3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Color4f[] = {  {&_swigt__p_OSG__Color4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__DataType[] = {  {&_swigt__p_OSG__DataType, 0, 0, 0},  {&_swigt__p_OSG__FieldType, _p_OSG__FieldTypeTo_p_OSG__DataType, 0, 0},  {&_swigt__p_OSG__ReflexiveContainerType, _p_OSG__ReflexiveContainerTypeTo_p_OSG__DataType, 0, 0},  {&_swigt__p_OSG__FieldContainerType, _p_OSG__FieldContainerTypeTo_p_OSG__DataType, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDescription[] = {  {&_swigt__p_OSG__EventDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDetails[] = {  {&_swigt__p_OSG__EventDetails, 0, 0, 0},  {&_swigt__p_OSG__GenericEventDetails, _p_OSG__GenericEventDetailsTo_p_OSG__EventDetails, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDetailsRefPtr[] = {  {&_swigt__p_OSG__EventDetailsRefPtr, 0, 0, 0},  {&_swigt__p_OSG__GenericEventDetailsRefPtr, _p_OSG__GenericEventDetailsRefPtrTo_p_OSG__EventDetailsRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventProducerType[] = {  {&_swigt__p_OSG__EventProducerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FactoryBase[] = {  {&_swigt__p_OSG__FactoryBase, 0, 0, 0},  {&_swigt__p_OSG__FieldContainerFactoryBase, _p_OSG__FieldContainerFactoryBaseTo_p_OSG__FactoryBase, 0, 0},  {&_swigt__p_OSG__FieldContainerFactory, _p_OSG__FieldContainerFactoryTo_p_OSG__FactoryBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainer[] = {  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Attachment, _p_OSG__AttachmentTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__EventDetails, _p_OSG__EventDetailsTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__GenericEventDetails, _p_OSG__GenericEventDetailsTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, _p_OSG__AttachmentContainerTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__FieldContainer, 0, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__TextureObjChunk, _p_OSG__TextureObjChunkTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__FieldContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerFactory[] = {  {&_swigt__p_OSG__FieldContainerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerFactoryBase[] = {  {&_swigt__p_OSG__FieldContainerFactoryBase, 0, 0, 0},  {&_swigt__p_OSG__FieldContainerFactory, _p_OSG__FieldContainerFactoryTo_p_OSG__FieldContainerFactoryBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerRefPtr[] = {  {&_swigt__p_OSG__AttachmentRefPtr, _p_OSG__AttachmentRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentContainerRefPtr, _p_OSG__AttachmentContainerRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ViewportRefPtr, _p_OSG__ViewportRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__FieldContainerRefPtr, 0, 0, 0},  {&_swigt__p_OSG__TextureObjChunkRefPtr, _p_OSG__TextureObjChunkRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__EventDetailsRefPtr, _p_OSG__EventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GenericEventDetailsRefPtr, _p_OSG__GenericEventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaActivityRefPtr, _p_OSG__LuaActivityRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ActivityRefPtr, _p_OSG__ActivityRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ImageRefPtr, _p_OSG__ImageRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__CameraRefPtr, _p_OSG__CameraRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeRefPtr, _p_OSG__NodeRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GeometryRefPtr, _p_OSG__GeometryRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeCoreRefPtr, _p_OSG__NodeCoreRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerType[] = {  {&_swigt__p_OSG__FieldContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldDescriptionBase[] = {  {&_swigt__p_OSG__FieldDescriptionBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldType[] = {  {&_swigt__p_OSG__FieldType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FrustumVolume[] = {  {&_swigt__p_OSG__FrustumVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GenericEventDetails[] = {  {&_swigt__p_OSG__GenericEventDetails, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GenericEventDetailsRefPtr[] = {  {&_swigt__p_OSG__GenericEventDetailsRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Geometry[] = {  {&_swigt__p_OSG__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GeometryRefPtr[] = {  {&_swigt__p_OSG__GeometryRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Image[] = {  {&_swigt__p_OSG__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ImageRefPtr[] = {  {&_swigt__p_OSG__ImageRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Line[] = {  {&_swigt__p_OSG__Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaActivity[] = {  {&_swigt__p_OSG__LuaActivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaActivityRefPtr[] = {  {&_swigt__p_OSG__LuaActivityRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Matrix[] = {  {&_swigt__p_OSG__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Node[] = {  {&_swigt__p_OSG__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeCore[] = {  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__NodeCore, 0, 0},  {&_swigt__p_OSG__NodeCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeCoreRefPtr[] = {  {&_swigt__p_OSG__NodeCoreRefPtr, 0, 0, 0},  {&_swigt__p_OSG__GeometryRefPtr, _p_OSG__GeometryRefPtrTo_p_OSG__NodeCoreRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeRefPtr[] = {  {&_swigt__p_OSG__NodeRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Plane[] = {  {&_swigt__p_OSG__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Pnt2f[] = {  {&_swigt__p_OSG__Pnt2f, 0, 0, 0},  {&_swigt__p_OSG__Vec2f, _p_OSG__Vec2fTo_p_OSG__Pnt2f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Pnt3f[] = {  {&_swigt__p_OSG__Pnt3f, 0, 0, 0},  {&_swigt__p_OSG__Vec3f, _p_OSG__Vec3fTo_p_OSG__Pnt3f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Pnt4f[] = {  {&_swigt__p_OSG__Pnt4f, 0, 0, 0},  {&_swigt__p_OSG__Vec4f, _p_OSG__Vec4fTo_p_OSG__Pnt4f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Quaternion[] = {  {&_swigt__p_OSG__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ReflexiveContainer[] = {  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Attachment, _p_OSG__AttachmentTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__GenericEventDetails, _p_OSG__GenericEventDetailsTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__EventDetails, _p_OSG__EventDetailsTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, _p_OSG__AttachmentContainerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__FieldContainer, _p_OSG__FieldContainerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__ReflexiveContainer, 0, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__TextureObjChunk, _p_OSG__TextureObjChunkTo_p_OSG__ReflexiveContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ReflexiveContainerType[] = {  {&_swigt__p_OSG__ReflexiveContainerType, 0, 0, 0},  {&_swigt__p_OSG__FieldContainerType, _p_OSG__FieldContainerTypeTo_p_OSG__ReflexiveContainerType, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TextureObjChunk[] = {  {&_swigt__p_OSG__TextureObjChunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TextureObjChunkRefPtr[] = {  {&_swigt__p_OSG__TextureObjChunkRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TypeBase[] = {  {&_swigt__p_OSG__DataType, _p_OSG__DataTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__TypeBase, 0, 0, 0},  {&_swigt__p_OSG__FieldType, _p_OSG__FieldTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__EventProducerType, _p_OSG__EventProducerTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__ReflexiveContainerType, _p_OSG__ReflexiveContainerTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__FieldContainerType, _p_OSG__FieldContainerTypeTo_p_OSG__TypeBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TypeFactory[] = {  {&_swigt__p_OSG__TypeFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Vec2f[] = {  {&_swigt__p_OSG__Vec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Vec3f[] = {  {&_swigt__p_OSG__Vec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Vec4f[] = {  {&_swigt__p_OSG__Vec4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Viewport[] = {  {&_swigt__p_OSG__Viewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ViewportRefPtr[] = {  {&_swigt__p_OSG__ViewportRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Volume[] = {  {&_swigt__p_OSG__BoxVolume, _p_OSG__BoxVolumeTo_p_OSG__Volume, 0, 0},  {&_swigt__p_OSG__Volume, 0, 0, 0},  {&_swigt__p_OSG__FrustumVolume, _p_OSG__FrustumVolumeTo_p_OSG__Volume, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParentContainer[] = {  {&_swigt__p_ParentContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlaneSet[] = {  {&_swigt__p_PlaneSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType[] = {  {&_swigt__p_PointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType3f[] = {  {&_swigt__p_PointType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuaternionType[] = {  {&_swigt__p_QuaternionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFCoreType[] = {  {&_swigt__p_SFCoreType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFParentType[] = {  {&_swigt__p_SFParentType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFTravMaskType[] = {  {&_swigt__p_SFTravMaskType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFVolumeType[] = {  {&_swigt__p_SFVolumeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeObject[] = {  {&_swigt__p_TypeObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType[] = {  {&_swigt__p_VectorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType3f[] = {  {&_swigt__p_VectorType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VolumeType[] = {  {&_swigt__p_VolumeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__signals2__connection[] = {  {&_swigt__p_boost__signals2__connection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_std__string_t[] = {  {&_swigt__p_std__mapT_int_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_unsigned_int_t[] = {  {&_swigt__p_std__mapT_std__string_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Inherited,
  _swigc__p_MFChildrenType,
  _swigc__p_MatrixType,
  _swigc__p_OSG__Activity,
  _swigc__p_OSG__ActivityRefPtr,
  _swigc__p_OSG__Attachment,
  _swigc__p_OSG__AttachmentContainer,
  _swigc__p_OSG__AttachmentContainerRefPtr,
  _swigc__p_OSG__AttachmentRefPtr,
  _swigc__p_OSG__BoxVolume,
  _swigc__p_OSG__Camera,
  _swigc__p_OSG__CameraRefPtr,
  _swigc__p_OSG__Color3f,
  _swigc__p_OSG__Color4f,
  _swigc__p_OSG__DataType,
  _swigc__p_OSG__EventDescription,
  _swigc__p_OSG__EventDetails,
  _swigc__p_OSG__EventDetailsRefPtr,
  _swigc__p_OSG__EventProducerType,
  _swigc__p_OSG__FactoryBase,
  _swigc__p_OSG__FieldContainer,
  _swigc__p_OSG__FieldContainerFactory,
  _swigc__p_OSG__FieldContainerFactoryBase,
  _swigc__p_OSG__FieldContainerRefPtr,
  _swigc__p_OSG__FieldContainerType,
  _swigc__p_OSG__FieldDescriptionBase,
  _swigc__p_OSG__FieldType,
  _swigc__p_OSG__FrustumVolume,
  _swigc__p_OSG__GenericEventDetails,
  _swigc__p_OSG__GenericEventDetailsRefPtr,
  _swigc__p_OSG__Geometry,
  _swigc__p_OSG__GeometryRefPtr,
  _swigc__p_OSG__Image,
  _swigc__p_OSG__ImageRefPtr,
  _swigc__p_OSG__Line,
  _swigc__p_OSG__LuaActivity,
  _swigc__p_OSG__LuaActivityRefPtr,
  _swigc__p_OSG__Matrix,
  _swigc__p_OSG__Node,
  _swigc__p_OSG__NodeCore,
  _swigc__p_OSG__NodeCoreRefPtr,
  _swigc__p_OSG__NodeRefPtr,
  _swigc__p_OSG__Plane,
  _swigc__p_OSG__Pnt2f,
  _swigc__p_OSG__Pnt3f,
  _swigc__p_OSG__Pnt4f,
  _swigc__p_OSG__Quaternion,
  _swigc__p_OSG__ReflexiveContainer,
  _swigc__p_OSG__ReflexiveContainerType,
  _swigc__p_OSG__TextureObjChunk,
  _swigc__p_OSG__TextureObjChunkRefPtr,
  _swigc__p_OSG__TypeBase,
  _swigc__p_OSG__TypeFactory,
  _swigc__p_OSG__Vec2f,
  _swigc__p_OSG__Vec3f,
  _swigc__p_OSG__Vec4f,
  _swigc__p_OSG__Viewport,
  _swigc__p_OSG__ViewportRefPtr,
  _swigc__p_OSG__Volume,
  _swigc__p_ParentContainer,
  _swigc__p_PlaneSet,
  _swigc__p_PointType,
  _swigc__p_PointType3f,
  _swigc__p_QuaternionType,
  _swigc__p_SFCoreType,
  _swigc__p_SFParentType,
  _swigc__p_SFTravMaskType,
  _swigc__p_SFVolumeType,
  _swigc__p_TypeObject,
  _swigc__p_ValueType,
  _swigc__p_VectorType,
  _swigc__p_VectorType3f,
  _swigc__p_VolumeType,
  _swigc__p_boost__signals2__connection,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_mapped_type,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__mapT_int_std__string_t,
  _swigc__p_std__mapT_std__string_unsigned_int_t,
  _swigc__p_std__string,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

#include "OSG_wrap.h"
void push_FieldContainer_on_lua(lua_State* L, OSG::FieldContainerRefPtr value)
{
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) value);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1);
}

