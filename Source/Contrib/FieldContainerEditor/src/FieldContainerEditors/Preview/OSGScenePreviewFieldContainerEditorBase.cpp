/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScenePreviewFieldContainerEditor!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGGLViewport.h"              // GUIViewport Class

#include "OSGScenePreviewFieldContainerEditorBase.h"
#include "OSGScenePreviewFieldContainerEditor.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ScenePreviewFieldContainerEditor
    Abstract class that can be extended to provide a preview of a 3D scene 
    allong with the FieldEditors provided by GenericFieldContainerEditor.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GLViewport *    ScenePreviewFieldContainerEditorBase::_sfGUIViewport
    The GLViewport to render the scene in.
*/

/*! \var Real32          ScenePreviewFieldContainerEditorBase::_sfPreviewPanelSize
    The height of the preview panel.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ScenePreviewFieldContainerEditor *>::_type("ScenePreviewFieldContainerEditorPtr", "AbstractFieldContainerEditorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ScenePreviewFieldContainerEditor *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ScenePreviewFieldContainerEditor *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ScenePreviewFieldContainerEditor *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ScenePreviewFieldContainerEditorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecGLViewportPtr::Description(
        SFUnrecGLViewportPtr::getClassType(),
        "GUIViewport",
        "The GLViewport to render the scene in.\n",
        GUIViewportFieldId, GUIViewportFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScenePreviewFieldContainerEditor::editHandleGUIViewport),
        static_cast<FieldGetMethodSig >(&ScenePreviewFieldContainerEditor::getHandleGUIViewport));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "PreviewPanelSize",
        "The height of the preview panel.\n",
        PreviewPanelSizeFieldId, PreviewPanelSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScenePreviewFieldContainerEditor::editHandlePreviewPanelSize),
        static_cast<FieldGetMethodSig >(&ScenePreviewFieldContainerEditor::getHandlePreviewPanelSize));

    oType.addInitialDesc(pDesc);
}


ScenePreviewFieldContainerEditorBase::TypeObject ScenePreviewFieldContainerEditorBase::_type(
    ScenePreviewFieldContainerEditorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ScenePreviewFieldContainerEditor::initMethod,
    ScenePreviewFieldContainerEditor::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ScenePreviewFieldContainerEditor::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ScenePreviewFieldContainerEditor\"\n"
    "\tparent=\"AbstractFieldContainerEditor\"\n"
    "    library=\"ContribFieldContainerEditor\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "Abstract class that can be extended to provide a preview of a 3D scene \n"
    "allong with the FieldEditors provided by GenericFieldContainerEditor.\n"
    "\t<Field\n"
    "\t\tname=\"GUIViewport\"\n"
    "\t\ttype=\"GLViewport\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "\t>\n"
    "    The GLViewport to render the scene in.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"PreviewPanelSize\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"150.0f\"\n"
    "\t>\n"
    "    The height of the preview panel.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Abstract class that can be extended to provide a preview of a 3D scene \n"
    "allong with the FieldEditors provided by GenericFieldContainerEditor.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ScenePreviewFieldContainerEditorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ScenePreviewFieldContainerEditorBase::getType(void) const
{
    return _type;
}

UInt32 ScenePreviewFieldContainerEditorBase::getContainerSize(void) const
{
    return sizeof(ScenePreviewFieldContainerEditor);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ScenePreviewFieldContainerEditor::_sfGUIViewport field.
const SFUnrecGLViewportPtr *ScenePreviewFieldContainerEditorBase::getSFGUIViewport(void) const
{
    return &_sfGUIViewport;
}

SFUnrecGLViewportPtr *ScenePreviewFieldContainerEditorBase::editSFGUIViewport    (void)
{
    editSField(GUIViewportFieldMask);

    return &_sfGUIViewport;
}

SFReal32 *ScenePreviewFieldContainerEditorBase::editSFPreviewPanelSize(void)
{
    editSField(PreviewPanelSizeFieldMask);

    return &_sfPreviewPanelSize;
}

const SFReal32 *ScenePreviewFieldContainerEditorBase::getSFPreviewPanelSize(void) const
{
    return &_sfPreviewPanelSize;
}






/*------------------------------ access -----------------------------------*/

UInt32 ScenePreviewFieldContainerEditorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GUIViewportFieldMask & whichField))
    {
        returnValue += _sfGUIViewport.getBinSize();
    }
    if(FieldBits::NoField != (PreviewPanelSizeFieldMask & whichField))
    {
        returnValue += _sfPreviewPanelSize.getBinSize();
    }

    return returnValue;
}

void ScenePreviewFieldContainerEditorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GUIViewportFieldMask & whichField))
    {
        _sfGUIViewport.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PreviewPanelSizeFieldMask & whichField))
    {
        _sfPreviewPanelSize.copyToBin(pMem);
    }
}

void ScenePreviewFieldContainerEditorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GUIViewportFieldMask & whichField))
    {
        editSField(GUIViewportFieldMask);
        _sfGUIViewport.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PreviewPanelSizeFieldMask & whichField))
    {
        editSField(PreviewPanelSizeFieldMask);
        _sfPreviewPanelSize.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

ScenePreviewFieldContainerEditorBase::ScenePreviewFieldContainerEditorBase(void) :
    Inherited(),
    _sfGUIViewport            (NULL),
    _sfPreviewPanelSize       (Real32(150.0f))
{
}

ScenePreviewFieldContainerEditorBase::ScenePreviewFieldContainerEditorBase(const ScenePreviewFieldContainerEditorBase &source) :
    Inherited(source),
    _sfGUIViewport            (NULL),
    _sfPreviewPanelSize       (source._sfPreviewPanelSize       )
{
}


/*-------------------------- destructors ----------------------------------*/

ScenePreviewFieldContainerEditorBase::~ScenePreviewFieldContainerEditorBase(void)
{
}

void ScenePreviewFieldContainerEditorBase::onCreate(const ScenePreviewFieldContainerEditor *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ScenePreviewFieldContainerEditor *pThis = static_cast<ScenePreviewFieldContainerEditor *>(this);

        pThis->setGUIViewport(source->getGUIViewport());
    }
}

GetFieldHandlePtr ScenePreviewFieldContainerEditorBase::getHandleGUIViewport     (void) const
{
    SFUnrecGLViewportPtr::GetHandlePtr returnValue(
        new  SFUnrecGLViewportPtr::GetHandle(
             &_sfGUIViewport,
             this->getType().getFieldDesc(GUIViewportFieldId),
             const_cast<ScenePreviewFieldContainerEditorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScenePreviewFieldContainerEditorBase::editHandleGUIViewport    (void)
{
    SFUnrecGLViewportPtr::EditHandlePtr returnValue(
        new  SFUnrecGLViewportPtr::EditHandle(
             &_sfGUIViewport,
             this->getType().getFieldDesc(GUIViewportFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ScenePreviewFieldContainerEditor::setGUIViewport,
                    static_cast<ScenePreviewFieldContainerEditor *>(this), _1));

    editSField(GUIViewportFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScenePreviewFieldContainerEditorBase::getHandlePreviewPanelSize (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfPreviewPanelSize,
             this->getType().getFieldDesc(PreviewPanelSizeFieldId),
             const_cast<ScenePreviewFieldContainerEditorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScenePreviewFieldContainerEditorBase::editHandlePreviewPanelSize(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfPreviewPanelSize,
             this->getType().getFieldDesc(PreviewPanelSizeFieldId),
             this));


    editSField(PreviewPanelSizeFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ScenePreviewFieldContainerEditorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ScenePreviewFieldContainerEditor *pThis = static_cast<ScenePreviewFieldContainerEditor *>(this);

    pThis->execSync(static_cast<ScenePreviewFieldContainerEditor *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ScenePreviewFieldContainerEditorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ScenePreviewFieldContainerEditor *>(this)->setGUIViewport(NULL);


}


OSG_END_NAMESPACE
