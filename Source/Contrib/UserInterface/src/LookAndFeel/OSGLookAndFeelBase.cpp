/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LookAndFeel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // Prototypes Class
#include "OSGComponent.h"               // DefaultToolTip Class

#include "OSGLookAndFeelBase.h"
#include "OSGLookAndFeel.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::LookAndFeel
    UI LookAndFeel Interface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * LookAndFeelBase::_mfPrototypes
    
*/

/*! \var Time            LookAndFeelBase::_sfTextCaretRate
    
*/

/*! \var Time            LookAndFeelBase::_sfToolTipPopupTime
    
*/

/*! \var Time            LookAndFeelBase::_sfSubMenuPopupTime
    
*/

/*! \var Time            LookAndFeelBase::_sfKeyAcceleratorMenuFlashTime
    
*/

/*! \var Component *     LookAndFeelBase::_sfDefaultToolTip
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<LookAndFeel *>::_type("LookAndFeelPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(LookAndFeel *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           LookAndFeel *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           LookAndFeel *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void LookAndFeelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecFieldContainerPtr::Description(
        MFUnrecFieldContainerPtr::getClassType(),
        "Prototypes",
        "",
        PrototypesFieldId, PrototypesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&LookAndFeel::editHandlePrototypes),
        static_cast<FieldGetMethodSig >(&LookAndFeel::getHandlePrototypes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "TextCaretRate",
        "",
        TextCaretRateFieldId, TextCaretRateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&LookAndFeel::editHandleTextCaretRate),
        static_cast<FieldGetMethodSig >(&LookAndFeel::getHandleTextCaretRate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "ToolTipPopupTime",
        "",
        ToolTipPopupTimeFieldId, ToolTipPopupTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&LookAndFeel::editHandleToolTipPopupTime),
        static_cast<FieldGetMethodSig >(&LookAndFeel::getHandleToolTipPopupTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "SubMenuPopupTime",
        "",
        SubMenuPopupTimeFieldId, SubMenuPopupTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&LookAndFeel::editHandleSubMenuPopupTime),
        static_cast<FieldGetMethodSig >(&LookAndFeel::getHandleSubMenuPopupTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "KeyAcceleratorMenuFlashTime",
        "",
        KeyAcceleratorMenuFlashTimeFieldId, KeyAcceleratorMenuFlashTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&LookAndFeel::editHandleKeyAcceleratorMenuFlashTime),
        static_cast<FieldGetMethodSig >(&LookAndFeel::getHandleKeyAcceleratorMenuFlashTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "DefaultToolTip",
        "",
        DefaultToolTipFieldId, DefaultToolTipFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&LookAndFeel::editHandleDefaultToolTip),
        static_cast<FieldGetMethodSig >(&LookAndFeel::getHandleDefaultToolTip));

    oType.addInitialDesc(pDesc);
}


LookAndFeelBase::TypeObject LookAndFeelBase::_type(
    LookAndFeelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    LookAndFeel::initMethod,
    LookAndFeel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&LookAndFeel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"LookAndFeel\"\n"
    "\tparent=\"FieldContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI LookAndFeel Interface.\n"
    "\t<Field\n"
    "\t\tname=\"Prototypes\"\n"
    "\t\ttype=\"FieldContainer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TextCaretRate\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ToolTipPopupTime\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SubMenuPopupTime\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.25\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"KeyAcceleratorMenuFlashTime\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.15\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DefaultToolTip\"\n"
    "\t\ttype=\"Component\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI LookAndFeel Interface.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &LookAndFeelBase::getType(void)
{
    return _type;
}

const FieldContainerType &LookAndFeelBase::getType(void) const
{
    return _type;
}

UInt32 LookAndFeelBase::getContainerSize(void) const
{
    return sizeof(LookAndFeel);
}

/*------------------------- decorator get ------------------------------*/


//! Get the LookAndFeel::_mfPrototypes field.
const MFUnrecFieldContainerPtr *LookAndFeelBase::getMFPrototypes(void) const
{
    return &_mfPrototypes;
}

MFUnrecFieldContainerPtr *LookAndFeelBase::editMFPrototypes     (void)
{
    editMField(PrototypesFieldMask, _mfPrototypes);

    return &_mfPrototypes;
}

SFTime *LookAndFeelBase::editSFTextCaretRate(void)
{
    editSField(TextCaretRateFieldMask);

    return &_sfTextCaretRate;
}

const SFTime *LookAndFeelBase::getSFTextCaretRate(void) const
{
    return &_sfTextCaretRate;
}


SFTime *LookAndFeelBase::editSFToolTipPopupTime(void)
{
    editSField(ToolTipPopupTimeFieldMask);

    return &_sfToolTipPopupTime;
}

const SFTime *LookAndFeelBase::getSFToolTipPopupTime(void) const
{
    return &_sfToolTipPopupTime;
}


SFTime *LookAndFeelBase::editSFSubMenuPopupTime(void)
{
    editSField(SubMenuPopupTimeFieldMask);

    return &_sfSubMenuPopupTime;
}

const SFTime *LookAndFeelBase::getSFSubMenuPopupTime(void) const
{
    return &_sfSubMenuPopupTime;
}


SFTime *LookAndFeelBase::editSFKeyAcceleratorMenuFlashTime(void)
{
    editSField(KeyAcceleratorMenuFlashTimeFieldMask);

    return &_sfKeyAcceleratorMenuFlashTime;
}

const SFTime *LookAndFeelBase::getSFKeyAcceleratorMenuFlashTime(void) const
{
    return &_sfKeyAcceleratorMenuFlashTime;
}


//! Get the LookAndFeel::_sfDefaultToolTip field.
const SFUnrecComponentPtr *LookAndFeelBase::getSFDefaultToolTip(void) const
{
    return &_sfDefaultToolTip;
}

SFUnrecComponentPtr *LookAndFeelBase::editSFDefaultToolTip (void)
{
    editSField(DefaultToolTipFieldMask);

    return &_sfDefaultToolTip;
}



void LookAndFeelBase::pushToPrototypes(FieldContainer * const value)
{
    editMField(PrototypesFieldMask, _mfPrototypes);

    _mfPrototypes.push_back(value);
}

void LookAndFeelBase::assignPrototypes(const MFUnrecFieldContainerPtr &value)
{
    MFUnrecFieldContainerPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecFieldContainerPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<LookAndFeel *>(this)->clearPrototypes();

    while(elemIt != elemEnd)
    {
        this->pushToPrototypes(*elemIt);

        ++elemIt;
    }
}

void LookAndFeelBase::removeFromPrototypes(UInt32 uiIndex)
{
    if(uiIndex < _mfPrototypes.size())
    {
        editMField(PrototypesFieldMask, _mfPrototypes);

        _mfPrototypes.erase(uiIndex);
    }
}

void LookAndFeelBase::removeObjFromPrototypes(FieldContainer * const value)
{
    Int32 iElemIdx = _mfPrototypes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(PrototypesFieldMask, _mfPrototypes);

        _mfPrototypes.erase(iElemIdx);
    }
}
void LookAndFeelBase::clearPrototypes(void)
{
    editMField(PrototypesFieldMask, _mfPrototypes);


    _mfPrototypes.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 LookAndFeelBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PrototypesFieldMask & whichField))
    {
        returnValue += _mfPrototypes.getBinSize();
    }
    if(FieldBits::NoField != (TextCaretRateFieldMask & whichField))
    {
        returnValue += _sfTextCaretRate.getBinSize();
    }
    if(FieldBits::NoField != (ToolTipPopupTimeFieldMask & whichField))
    {
        returnValue += _sfToolTipPopupTime.getBinSize();
    }
    if(FieldBits::NoField != (SubMenuPopupTimeFieldMask & whichField))
    {
        returnValue += _sfSubMenuPopupTime.getBinSize();
    }
    if(FieldBits::NoField != (KeyAcceleratorMenuFlashTimeFieldMask & whichField))
    {
        returnValue += _sfKeyAcceleratorMenuFlashTime.getBinSize();
    }
    if(FieldBits::NoField != (DefaultToolTipFieldMask & whichField))
    {
        returnValue += _sfDefaultToolTip.getBinSize();
    }

    return returnValue;
}

void LookAndFeelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PrototypesFieldMask & whichField))
    {
        _mfPrototypes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TextCaretRateFieldMask & whichField))
    {
        _sfTextCaretRate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ToolTipPopupTimeFieldMask & whichField))
    {
        _sfToolTipPopupTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SubMenuPopupTimeFieldMask & whichField))
    {
        _sfSubMenuPopupTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (KeyAcceleratorMenuFlashTimeFieldMask & whichField))
    {
        _sfKeyAcceleratorMenuFlashTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DefaultToolTipFieldMask & whichField))
    {
        _sfDefaultToolTip.copyToBin(pMem);
    }
}

void LookAndFeelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PrototypesFieldMask & whichField))
    {
        editMField(PrototypesFieldMask, _mfPrototypes);
        _mfPrototypes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TextCaretRateFieldMask & whichField))
    {
        editSField(TextCaretRateFieldMask);
        _sfTextCaretRate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ToolTipPopupTimeFieldMask & whichField))
    {
        editSField(ToolTipPopupTimeFieldMask);
        _sfToolTipPopupTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SubMenuPopupTimeFieldMask & whichField))
    {
        editSField(SubMenuPopupTimeFieldMask);
        _sfSubMenuPopupTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (KeyAcceleratorMenuFlashTimeFieldMask & whichField))
    {
        editSField(KeyAcceleratorMenuFlashTimeFieldMask);
        _sfKeyAcceleratorMenuFlashTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DefaultToolTipFieldMask & whichField))
    {
        editSField(DefaultToolTipFieldMask);
        _sfDefaultToolTip.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

LookAndFeelBase::LookAndFeelBase(void) :
    Inherited(),
    _mfPrototypes             (),
    _sfTextCaretRate          (Time(1.0)),
    _sfToolTipPopupTime       (Time(1.5)),
    _sfSubMenuPopupTime       (Time(0.25)),
    _sfKeyAcceleratorMenuFlashTime(Time(0.15)),
    _sfDefaultToolTip         (NULL)
{
}

LookAndFeelBase::LookAndFeelBase(const LookAndFeelBase &source) :
    Inherited(source),
    _mfPrototypes             (),
    _sfTextCaretRate          (source._sfTextCaretRate          ),
    _sfToolTipPopupTime       (source._sfToolTipPopupTime       ),
    _sfSubMenuPopupTime       (source._sfSubMenuPopupTime       ),
    _sfKeyAcceleratorMenuFlashTime(source._sfKeyAcceleratorMenuFlashTime),
    _sfDefaultToolTip         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

LookAndFeelBase::~LookAndFeelBase(void)
{
}

void LookAndFeelBase::onCreate(const LookAndFeel *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        LookAndFeel *pThis = static_cast<LookAndFeel *>(this);

        MFUnrecFieldContainerPtr::const_iterator PrototypesIt  =
            source->_mfPrototypes.begin();
        MFUnrecFieldContainerPtr::const_iterator PrototypesEnd =
            source->_mfPrototypes.end  ();

        while(PrototypesIt != PrototypesEnd)
        {
            pThis->pushToPrototypes(*PrototypesIt);

            ++PrototypesIt;
        }

        pThis->setDefaultToolTip(source->getDefaultToolTip());
    }
}

GetFieldHandlePtr LookAndFeelBase::getHandlePrototypes      (void) const
{
    MFUnrecFieldContainerPtr::GetHandlePtr returnValue(
        new  MFUnrecFieldContainerPtr::GetHandle(
             &_mfPrototypes,
             this->getType().getFieldDesc(PrototypesFieldId),
             const_cast<LookAndFeelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr LookAndFeelBase::editHandlePrototypes     (void)
{
    MFUnrecFieldContainerPtr::EditHandlePtr returnValue(
        new  MFUnrecFieldContainerPtr::EditHandle(
             &_mfPrototypes,
             this->getType().getFieldDesc(PrototypesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&LookAndFeel::pushToPrototypes,
                    static_cast<LookAndFeel *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&LookAndFeel::removeFromPrototypes,
                    static_cast<LookAndFeel *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&LookAndFeel::removeObjFromPrototypes,
                    static_cast<LookAndFeel *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&LookAndFeel::clearPrototypes,
                    static_cast<LookAndFeel *>(this)));

    editMField(PrototypesFieldMask, _mfPrototypes);

    return returnValue;
}

GetFieldHandlePtr LookAndFeelBase::getHandleTextCaretRate   (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfTextCaretRate,
             this->getType().getFieldDesc(TextCaretRateFieldId),
             const_cast<LookAndFeelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr LookAndFeelBase::editHandleTextCaretRate  (void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfTextCaretRate,
             this->getType().getFieldDesc(TextCaretRateFieldId),
             this));


    editSField(TextCaretRateFieldMask);

    return returnValue;
}

GetFieldHandlePtr LookAndFeelBase::getHandleToolTipPopupTime (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfToolTipPopupTime,
             this->getType().getFieldDesc(ToolTipPopupTimeFieldId),
             const_cast<LookAndFeelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr LookAndFeelBase::editHandleToolTipPopupTime(void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfToolTipPopupTime,
             this->getType().getFieldDesc(ToolTipPopupTimeFieldId),
             this));


    editSField(ToolTipPopupTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr LookAndFeelBase::getHandleSubMenuPopupTime (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfSubMenuPopupTime,
             this->getType().getFieldDesc(SubMenuPopupTimeFieldId),
             const_cast<LookAndFeelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr LookAndFeelBase::editHandleSubMenuPopupTime(void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfSubMenuPopupTime,
             this->getType().getFieldDesc(SubMenuPopupTimeFieldId),
             this));


    editSField(SubMenuPopupTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr LookAndFeelBase::getHandleKeyAcceleratorMenuFlashTime (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfKeyAcceleratorMenuFlashTime,
             this->getType().getFieldDesc(KeyAcceleratorMenuFlashTimeFieldId),
             const_cast<LookAndFeelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr LookAndFeelBase::editHandleKeyAcceleratorMenuFlashTime(void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfKeyAcceleratorMenuFlashTime,
             this->getType().getFieldDesc(KeyAcceleratorMenuFlashTimeFieldId),
             this));


    editSField(KeyAcceleratorMenuFlashTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr LookAndFeelBase::getHandleDefaultToolTip  (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentPtr::GetHandle(
             &_sfDefaultToolTip,
             this->getType().getFieldDesc(DefaultToolTipFieldId),
             const_cast<LookAndFeelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr LookAndFeelBase::editHandleDefaultToolTip (void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentPtr::EditHandle(
             &_sfDefaultToolTip,
             this->getType().getFieldDesc(DefaultToolTipFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&LookAndFeel::setDefaultToolTip,
                    static_cast<LookAndFeel *>(this), _1));

    editSField(DefaultToolTipFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void LookAndFeelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    LookAndFeel *pThis = static_cast<LookAndFeel *>(this);

    pThis->execSync(static_cast<LookAndFeel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void LookAndFeelBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<LookAndFeel *>(this)->clearPrototypes();

    static_cast<LookAndFeel *>(this)->setDefaultToolTip(NULL);


}


OSG_END_NAMESPACE
