/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SpringLayoutConstraints
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSPRINGLAYOUTCONSTRAINTSBASE_H_
#define _OSGSPRINGLAYOUTCONSTRAINTSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGLayoutConstraints.h" // Parent

#include "OSGLayoutSpringFields.h"      // NorthSpring type
#include "OSGComponentFields.h"         // Component type

#include "OSGSpringLayoutConstraintsFields.h"

OSG_BEGIN_NAMESPACE

class SpringLayoutConstraints;

//! \brief SpringLayoutConstraints Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING SpringLayoutConstraintsBase : public LayoutConstraints
{
  public:

    typedef LayoutConstraints Inherited;
    typedef LayoutConstraints ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SpringLayoutConstraints);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        NorthSpringFieldId = Inherited::NextFieldId,
        WestSpringFieldId = NorthSpringFieldId + 1,
        EastSpringFieldId = WestSpringFieldId + 1,
        SouthSpringFieldId = EastSpringFieldId + 1,
        WidthSpringFieldId = SouthSpringFieldId + 1,
        HeightSpringFieldId = WidthSpringFieldId + 1,
        HorizontalCenterSpringFieldId = HeightSpringFieldId + 1,
        VerticalCenterSpringFieldId = HorizontalCenterSpringFieldId + 1,
        BaselineSpringFieldId = VerticalCenterSpringFieldId + 1,
        ComponentFieldId = BaselineSpringFieldId + 1,
        NextFieldId = ComponentFieldId + 1
    };

    static const OSG::BitVector NorthSpringFieldMask =
        (TypeTraits<BitVector>::One << NorthSpringFieldId);
    static const OSG::BitVector WestSpringFieldMask =
        (TypeTraits<BitVector>::One << WestSpringFieldId);
    static const OSG::BitVector EastSpringFieldMask =
        (TypeTraits<BitVector>::One << EastSpringFieldId);
    static const OSG::BitVector SouthSpringFieldMask =
        (TypeTraits<BitVector>::One << SouthSpringFieldId);
    static const OSG::BitVector WidthSpringFieldMask =
        (TypeTraits<BitVector>::One << WidthSpringFieldId);
    static const OSG::BitVector HeightSpringFieldMask =
        (TypeTraits<BitVector>::One << HeightSpringFieldId);
    static const OSG::BitVector HorizontalCenterSpringFieldMask =
        (TypeTraits<BitVector>::One << HorizontalCenterSpringFieldId);
    static const OSG::BitVector VerticalCenterSpringFieldMask =
        (TypeTraits<BitVector>::One << VerticalCenterSpringFieldId);
    static const OSG::BitVector BaselineSpringFieldMask =
        (TypeTraits<BitVector>::One << BaselineSpringFieldId);
    static const OSG::BitVector ComponentFieldMask =
        (TypeTraits<BitVector>::One << ComponentFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecLayoutSpringPtr SFNorthSpringType;
    typedef SFUnrecLayoutSpringPtr SFWestSpringType;
    typedef SFUnrecLayoutSpringPtr SFEastSpringType;
    typedef SFUnrecLayoutSpringPtr SFSouthSpringType;
    typedef SFUnrecLayoutSpringPtr SFWidthSpringType;
    typedef SFUnrecLayoutSpringPtr SFHeightSpringType;
    typedef SFUnrecLayoutSpringPtr SFHorizontalCenterSpringType;
    typedef SFUnrecLayoutSpringPtr SFVerticalCenterSpringType;
    typedef SFUnrecLayoutSpringPtr SFBaselineSpringType;
    typedef SFWeakComponentPtr SFComponentType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecLayoutSpringPtr *getSFNorthSpring    (void) const;
                  SFUnrecLayoutSpringPtr *editSFNorthSpring    (void);
            const SFUnrecLayoutSpringPtr *getSFWestSpring     (void) const;
                  SFUnrecLayoutSpringPtr *editSFWestSpring     (void);
            const SFUnrecLayoutSpringPtr *getSFEastSpring     (void) const;
                  SFUnrecLayoutSpringPtr *editSFEastSpring     (void);
            const SFUnrecLayoutSpringPtr *getSFSouthSpring    (void) const;
                  SFUnrecLayoutSpringPtr *editSFSouthSpring    (void);
            const SFUnrecLayoutSpringPtr *getSFWidthSpring    (void) const;
                  SFUnrecLayoutSpringPtr *editSFWidthSpring    (void);
            const SFUnrecLayoutSpringPtr *getSFHeightSpring   (void) const;
                  SFUnrecLayoutSpringPtr *editSFHeightSpring   (void);
            const SFUnrecLayoutSpringPtr *getSFHorizontalCenterSpring(void) const;
                  SFUnrecLayoutSpringPtr *editSFHorizontalCenterSpring(void);
            const SFUnrecLayoutSpringPtr *getSFVerticalCenterSpring(void) const;
                  SFUnrecLayoutSpringPtr *editSFVerticalCenterSpring(void);
            const SFUnrecLayoutSpringPtr *getSFBaselineSpring (void) const;
                  SFUnrecLayoutSpringPtr *editSFBaselineSpring (void);
            const SFWeakComponentPtr  *getSFComponent      (void) const;
                  SFWeakComponentPtr  *editSFComponent      (void);


                  LayoutSpring * getNorthSpring    (void) const;

                  LayoutSpring * getWestSpring     (void) const;

                  LayoutSpring * getEastSpring     (void) const;

                  LayoutSpring * getSouthSpring    (void) const;

                  LayoutSpring * getWidthSpring    (void) const;

                  LayoutSpring * getHeightSpring   (void) const;

                  LayoutSpring * getHorizontalCenterSpring(void) const;

                  LayoutSpring * getVerticalCenterSpring(void) const;

                  LayoutSpring * getBaselineSpring (void) const;

                  Component * getComponent      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setNorthSpring    (LayoutSpring * const value);
            void setWestSpring     (LayoutSpring * const value);
            void setEastSpring     (LayoutSpring * const value);
            void setSouthSpring    (LayoutSpring * const value);
            void setWidthSpring    (LayoutSpring * const value);
            void setHeightSpring   (LayoutSpring * const value);
            void setHorizontalCenterSpring(LayoutSpring * const value);
            void setVerticalCenterSpring(LayoutSpring * const value);
            void setBaselineSpring (LayoutSpring * const value);
            void setComponent      (Component * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SpringLayoutConstraintsTransitPtr  create          (void);
    static  SpringLayoutConstraints           *createEmpty     (void);

    static  SpringLayoutConstraintsTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SpringLayoutConstraints            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SpringLayoutConstraintsTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecLayoutSpringPtr _sfNorthSpring;
    SFUnrecLayoutSpringPtr _sfWestSpring;
    SFUnrecLayoutSpringPtr _sfEastSpring;
    SFUnrecLayoutSpringPtr _sfSouthSpring;
    SFUnrecLayoutSpringPtr _sfWidthSpring;
    SFUnrecLayoutSpringPtr _sfHeightSpring;
    SFUnrecLayoutSpringPtr _sfHorizontalCenterSpring;
    SFUnrecLayoutSpringPtr _sfVerticalCenterSpring;
    SFUnrecLayoutSpringPtr _sfBaselineSpring;
    SFWeakComponentPtr _sfComponent;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SpringLayoutConstraintsBase(void);
    SpringLayoutConstraintsBase(const SpringLayoutConstraintsBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SpringLayoutConstraintsBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SpringLayoutConstraints *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleNorthSpring     (void) const;
    EditFieldHandlePtr editHandleNorthSpring    (void);
    GetFieldHandlePtr  getHandleWestSpring      (void) const;
    EditFieldHandlePtr editHandleWestSpring     (void);
    GetFieldHandlePtr  getHandleEastSpring      (void) const;
    EditFieldHandlePtr editHandleEastSpring     (void);
    GetFieldHandlePtr  getHandleSouthSpring     (void) const;
    EditFieldHandlePtr editHandleSouthSpring    (void);
    GetFieldHandlePtr  getHandleWidthSpring     (void) const;
    EditFieldHandlePtr editHandleWidthSpring    (void);
    GetFieldHandlePtr  getHandleHeightSpring    (void) const;
    EditFieldHandlePtr editHandleHeightSpring   (void);
    GetFieldHandlePtr  getHandleHorizontalCenterSpring (void) const;
    EditFieldHandlePtr editHandleHorizontalCenterSpring(void);
    GetFieldHandlePtr  getHandleVerticalCenterSpring (void) const;
    EditFieldHandlePtr editHandleVerticalCenterSpring(void);
    GetFieldHandlePtr  getHandleBaselineSpring  (void) const;
    EditFieldHandlePtr editHandleBaselineSpring (void);
    GetFieldHandlePtr  getHandleComponent       (void) const;
    EditFieldHandlePtr editHandleComponent      (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SpringLayoutConstraintsBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SpringLayoutConstraintsBase &source);
};

typedef SpringLayoutConstraintsBase *SpringLayoutConstraintsBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSPRINGLAYOUTCONSTRAINTSBASE_H_ */
