/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LayoutConstraints!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // ParentComponent Class

#include "OSGLayoutConstraintsBase.h"
#include "OSGLayoutConstraints.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::LayoutConstraints
    A UI LayoutConstraints Interface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * LayoutConstraintsBase::_mfParentComponent
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<LayoutConstraints *>::_type("LayoutConstraintsPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(LayoutConstraints *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           LayoutConstraints *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           LayoutConstraints *,
                           0);

DataType &FieldTraits< LayoutConstraints *, 1 >::getType(void)
{
    return FieldTraits<LayoutConstraints *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      LayoutConstraints *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void LayoutConstraintsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFParentFieldContainerPtr::Description(
        MFParentFieldContainerPtr::getClassType(),
        "ParentComponent",
        "",
        ParentComponentFieldId, ParentComponentFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&LayoutConstraints::invalidEditField),
        static_cast     <FieldGetMethodSig >(&LayoutConstraints::invalidGetField));

    oType.addInitialDesc(pDesc);
}


LayoutConstraintsBase::TypeObject LayoutConstraintsBase::_type(
    LayoutConstraintsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    LayoutConstraints::initMethod,
    LayoutConstraints::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&LayoutConstraints::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"LayoutConstraints\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"single\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI LayoutConstraints Interface.\n"
    "\t<Field\n"
    "\t   name=\"ParentComponent\"\n"
    "\t   type=\"FieldContainer\"\n"
    "\t   cardinality=\"multi\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"none\"\n"
    "       doRefCount=\"false\"\n"
    "       passFieldMask=\"true\"\n"
    "       category=\"parentpointer\"\n"
    "\t   >\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI LayoutConstraints Interface.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &LayoutConstraintsBase::getType(void)
{
    return _type;
}

const FieldContainerType &LayoutConstraintsBase::getType(void) const
{
    return _type;
}

UInt32 LayoutConstraintsBase::getContainerSize(void) const
{
    return sizeof(LayoutConstraints);
}

/*------------------------- decorator get ------------------------------*/







/*------------------------------ access -----------------------------------*/

UInt32 LayoutConstraintsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentComponentFieldMask & whichField))
    {
        returnValue += _mfParentComponent.getBinSize();
    }

    return returnValue;
}

void LayoutConstraintsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentComponentFieldMask & whichField))
    {
        _mfParentComponent.copyToBin(pMem);
    }
}

void LayoutConstraintsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentComponentFieldMask & whichField))
    {
        _mfParentComponent.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

LayoutConstraintsBase::LayoutConstraintsBase(void) :
    Inherited(),
    _mfParentComponent        ()
{
}

LayoutConstraintsBase::LayoutConstraintsBase(const LayoutConstraintsBase &source) :
    Inherited(source),
    _mfParentComponent        ()
{
}


/*-------------------------- destructors ----------------------------------*/

LayoutConstraintsBase::~LayoutConstraintsBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool LayoutConstraintsBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentComponentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            editMField(ParentComponentFieldMask, _mfParentComponent);

            _mfParentComponent.push_back(pParent, childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool LayoutConstraintsBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentComponentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            Int32 iParentIdx = _mfParentComponent.findIndex(pParent);

            if(iParentIdx != -1)
            {
                editMField(ParentComponentFieldMask, _mfParentComponent);

                _mfParentComponent.erase(iParentIdx);

                return true;
            }

            FWARNING(("LayoutConstraintsBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr LayoutConstraintsBase::getHandleParentComponent (void) const
{
    MFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr LayoutConstraintsBase::editHandleParentComponent(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void LayoutConstraintsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    LayoutConstraints *pThis = static_cast<LayoutConstraints *>(this);

    pThis->execSync(static_cast<LayoutConstraints *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void LayoutConstraintsBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
