/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ProxyLayoutSpring!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGSpringLayoutConstraints.h"   // Edge default header

#include "OSGComponent.h"               // Component Class
#include "OSGSpringLayout.h"            // Layout Class

#include "OSGProxyLayoutSpringBase.h"
#include "OSGProxyLayoutSpring.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ProxyLayoutSpring
    A UI Proxy LayoutSpring.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          ProxyLayoutSpringBase::_sfEdge
    
*/

/*! \var Component *     ProxyLayoutSpringBase::_sfComponent
    
*/

/*! \var SpringLayout *  ProxyLayoutSpringBase::_sfLayout
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ProxyLayoutSpring *>::_type("ProxyLayoutSpringPtr", "LayoutSpringPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ProxyLayoutSpring *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ProxyLayoutSpring *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ProxyLayoutSpring *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ProxyLayoutSpringBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Edge",
        "",
        EdgeFieldId, EdgeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ProxyLayoutSpring::editHandleEdge),
        static_cast<FieldGetMethodSig >(&ProxyLayoutSpring::getHandleEdge));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakComponentPtr::Description(
        SFWeakComponentPtr::getClassType(),
        "Component",
        "",
        ComponentFieldId, ComponentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ProxyLayoutSpring::editHandleComponent),
        static_cast<FieldGetMethodSig >(&ProxyLayoutSpring::getHandleComponent));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakSpringLayoutPtr::Description(
        SFWeakSpringLayoutPtr::getClassType(),
        "Layout",
        "",
        LayoutFieldId, LayoutFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ProxyLayoutSpring::editHandleLayout),
        static_cast<FieldGetMethodSig >(&ProxyLayoutSpring::getHandleLayout));

    oType.addInitialDesc(pDesc);
}


ProxyLayoutSpringBase::TypeObject ProxyLayoutSpringBase::_type(
    ProxyLayoutSpringBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ProxyLayoutSpringBase::createEmptyLocal),
    ProxyLayoutSpring::initMethod,
    ProxyLayoutSpring::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ProxyLayoutSpring::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ProxyLayoutSpring\"\n"
    "\tparent=\"LayoutSpring\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Proxy LayoutSpring.\n"
    "\t<Field\n"
    "\t\tname=\"Edge\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "\t\tdefaultValue=\"SpringLayoutConstraints::NO_EDGE\"\n"
    "\t\tdefaultHeader=\"OSGSpringLayoutConstraints.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"Component\"\n"
    "\t\ttype=\"Component\"\n"
    "        category=\"weakpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"Layout\"\n"
    "\t\ttype=\"SpringLayout\"\n"
    "        category=\"weakpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "</FieldContainer>\n",
    "A UI Proxy LayoutSpring.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ProxyLayoutSpringBase::getType(void)
{
    return _type;
}

const FieldContainerType &ProxyLayoutSpringBase::getType(void) const
{
    return _type;
}

UInt32 ProxyLayoutSpringBase::getContainerSize(void) const
{
    return sizeof(ProxyLayoutSpring);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *ProxyLayoutSpringBase::editSFEdge(void)
{
    editSField(EdgeFieldMask);

    return &_sfEdge;
}

const SFUInt32 *ProxyLayoutSpringBase::getSFEdge(void) const
{
    return &_sfEdge;
}


//! Get the ProxyLayoutSpring::_sfComponent field.
const SFWeakComponentPtr *ProxyLayoutSpringBase::getSFComponent(void) const
{
    return &_sfComponent;
}

SFWeakComponentPtr  *ProxyLayoutSpringBase::editSFComponent      (void)
{
    editSField(ComponentFieldMask);

    return &_sfComponent;
}

//! Get the ProxyLayoutSpring::_sfLayout field.
const SFWeakSpringLayoutPtr *ProxyLayoutSpringBase::getSFLayout(void) const
{
    return &_sfLayout;
}

SFWeakSpringLayoutPtr *ProxyLayoutSpringBase::editSFLayout         (void)
{
    editSField(LayoutFieldMask);

    return &_sfLayout;
}





/*------------------------------ access -----------------------------------*/

UInt32 ProxyLayoutSpringBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EdgeFieldMask & whichField))
    {
        returnValue += _sfEdge.getBinSize();
    }
    if(FieldBits::NoField != (ComponentFieldMask & whichField))
    {
        returnValue += _sfComponent.getBinSize();
    }
    if(FieldBits::NoField != (LayoutFieldMask & whichField))
    {
        returnValue += _sfLayout.getBinSize();
    }

    return returnValue;
}

void ProxyLayoutSpringBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EdgeFieldMask & whichField))
    {
        _sfEdge.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ComponentFieldMask & whichField))
    {
        _sfComponent.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LayoutFieldMask & whichField))
    {
        _sfLayout.copyToBin(pMem);
    }
}

void ProxyLayoutSpringBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EdgeFieldMask & whichField))
    {
        _sfEdge.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ComponentFieldMask & whichField))
    {
        _sfComponent.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LayoutFieldMask & whichField))
    {
        _sfLayout.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ProxyLayoutSpringTransitPtr ProxyLayoutSpringBase::createLocal(BitVector bFlags)
{
    ProxyLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ProxyLayoutSpring>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ProxyLayoutSpringTransitPtr ProxyLayoutSpringBase::createDependent(BitVector bFlags)
{
    ProxyLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ProxyLayoutSpring>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ProxyLayoutSpringTransitPtr ProxyLayoutSpringBase::create(void)
{
    ProxyLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ProxyLayoutSpring>(tmpPtr);
    }

    return fc;
}

ProxyLayoutSpring *ProxyLayoutSpringBase::createEmptyLocal(BitVector bFlags)
{
    ProxyLayoutSpring *returnValue;

    newPtr<ProxyLayoutSpring>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ProxyLayoutSpring *ProxyLayoutSpringBase::createEmpty(void)
{
    ProxyLayoutSpring *returnValue;

    newPtr<ProxyLayoutSpring>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ProxyLayoutSpringBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ProxyLayoutSpring *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ProxyLayoutSpring *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ProxyLayoutSpringBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ProxyLayoutSpring *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ProxyLayoutSpring *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ProxyLayoutSpringBase::shallowCopy(void) const
{
    ProxyLayoutSpring *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ProxyLayoutSpring *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ProxyLayoutSpringBase::ProxyLayoutSpringBase(void) :
    Inherited(),
    _sfEdge                   (UInt32(SpringLayoutConstraints::NO_EDGE)),
    _sfComponent              (NULL),
    _sfLayout                 (NULL)
{
}

ProxyLayoutSpringBase::ProxyLayoutSpringBase(const ProxyLayoutSpringBase &source) :
    Inherited(source),
    _sfEdge                   (source._sfEdge                   ),
    _sfComponent              (NULL),
    _sfLayout                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ProxyLayoutSpringBase::~ProxyLayoutSpringBase(void)
{
}

void ProxyLayoutSpringBase::onCreate(const ProxyLayoutSpring *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ProxyLayoutSpring *pThis = static_cast<ProxyLayoutSpring *>(this);

        pThis->setComponent(source->getComponent());

        pThis->setLayout(source->getLayout());
    }
}

GetFieldHandlePtr ProxyLayoutSpringBase::getHandleEdge            (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfEdge,
             this->getType().getFieldDesc(EdgeFieldId),
             const_cast<ProxyLayoutSpringBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProxyLayoutSpringBase::editHandleEdge           (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfEdge,
             this->getType().getFieldDesc(EdgeFieldId),
             this));


    editSField(EdgeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProxyLayoutSpringBase::getHandleComponent       (void) const
{
    SFWeakComponentPtr::GetHandlePtr returnValue(
        new  SFWeakComponentPtr::GetHandle(
             &_sfComponent,
             this->getType().getFieldDesc(ComponentFieldId),
             const_cast<ProxyLayoutSpringBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProxyLayoutSpringBase::editHandleComponent      (void)
{
    SFWeakComponentPtr::EditHandlePtr returnValue(
        new  SFWeakComponentPtr::EditHandle(
             &_sfComponent,
             this->getType().getFieldDesc(ComponentFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ProxyLayoutSpring::setComponent,
                    static_cast<ProxyLayoutSpring *>(this), _1));

    editSField(ComponentFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProxyLayoutSpringBase::getHandleLayout          (void) const
{
    SFWeakSpringLayoutPtr::GetHandlePtr returnValue(
        new  SFWeakSpringLayoutPtr::GetHandle(
             &_sfLayout,
             this->getType().getFieldDesc(LayoutFieldId),
             const_cast<ProxyLayoutSpringBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProxyLayoutSpringBase::editHandleLayout         (void)
{
    SFWeakSpringLayoutPtr::EditHandlePtr returnValue(
        new  SFWeakSpringLayoutPtr::EditHandle(
             &_sfLayout,
             this->getType().getFieldDesc(LayoutFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ProxyLayoutSpring::setLayout,
                    static_cast<ProxyLayoutSpring *>(this), _1));

    editSField(LayoutFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ProxyLayoutSpringBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ProxyLayoutSpring *pThis = static_cast<ProxyLayoutSpring *>(this);

    pThis->execSync(static_cast<ProxyLayoutSpring *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ProxyLayoutSpringBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ProxyLayoutSpring *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ProxyLayoutSpring *>(pRefAspect),
                  dynamic_cast<const ProxyLayoutSpring *>(this));

    return returnValue;
}
#endif

void ProxyLayoutSpringBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ProxyLayoutSpring *>(this)->setComponent(NULL);

    static_cast<ProxyLayoutSpring *>(this)->setLayout(NULL);


}


OSG_END_NAMESPACE
