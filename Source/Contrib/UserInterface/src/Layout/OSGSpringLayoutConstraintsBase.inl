/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SpringLayoutConstraints!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SpringLayoutConstraintsBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SpringLayoutConstraintsBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 SpringLayoutConstraintsBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the SpringLayoutConstraints::_sfNorthSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getNorthSpring(void) const
{
    return _sfNorthSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfNorthSpring field.
inline
void SpringLayoutConstraintsBase::setNorthSpring(LayoutSpring * const value)
{
    editSField(NorthSpringFieldMask);

    _sfNorthSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfWestSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getWestSpring(void) const
{
    return _sfWestSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfWestSpring field.
inline
void SpringLayoutConstraintsBase::setWestSpring(LayoutSpring * const value)
{
    editSField(WestSpringFieldMask);

    _sfWestSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfEastSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getEastSpring(void) const
{
    return _sfEastSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfEastSpring field.
inline
void SpringLayoutConstraintsBase::setEastSpring(LayoutSpring * const value)
{
    editSField(EastSpringFieldMask);

    _sfEastSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfSouthSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getSouthSpring(void) const
{
    return _sfSouthSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfSouthSpring field.
inline
void SpringLayoutConstraintsBase::setSouthSpring(LayoutSpring * const value)
{
    editSField(SouthSpringFieldMask);

    _sfSouthSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfWidthSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getWidthSpring(void) const
{
    return _sfWidthSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfWidthSpring field.
inline
void SpringLayoutConstraintsBase::setWidthSpring(LayoutSpring * const value)
{
    editSField(WidthSpringFieldMask);

    _sfWidthSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfHeightSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getHeightSpring(void) const
{
    return _sfHeightSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfHeightSpring field.
inline
void SpringLayoutConstraintsBase::setHeightSpring(LayoutSpring * const value)
{
    editSField(HeightSpringFieldMask);

    _sfHeightSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfHorizontalCenterSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getHorizontalCenterSpring(void) const
{
    return _sfHorizontalCenterSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfHorizontalCenterSpring field.
inline
void SpringLayoutConstraintsBase::setHorizontalCenterSpring(LayoutSpring * const value)
{
    editSField(HorizontalCenterSpringFieldMask);

    _sfHorizontalCenterSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfVerticalCenterSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getVerticalCenterSpring(void) const
{
    return _sfVerticalCenterSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfVerticalCenterSpring field.
inline
void SpringLayoutConstraintsBase::setVerticalCenterSpring(LayoutSpring * const value)
{
    editSField(VerticalCenterSpringFieldMask);

    _sfVerticalCenterSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfBaselineSpring field.
inline
LayoutSpring * SpringLayoutConstraintsBase::getBaselineSpring(void) const
{
    return _sfBaselineSpring.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfBaselineSpring field.
inline
void SpringLayoutConstraintsBase::setBaselineSpring(LayoutSpring * const value)
{
    editSField(BaselineSpringFieldMask);

    _sfBaselineSpring.setValue(value);
}

//! Get the value of the SpringLayoutConstraints::_sfComponent field.
inline
Component * SpringLayoutConstraintsBase::getComponent(void) const
{
    return _sfComponent.getValue();
}

//! Set the value of the SpringLayoutConstraints::_sfComponent field.
inline
void SpringLayoutConstraintsBase::setComponent(Component * const value)
{
    editSField(ComponentFieldMask);

    _sfComponent.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SpringLayoutConstraintsBase::execSync (      SpringLayoutConstraintsBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (NorthSpringFieldMask & whichField))
        _sfNorthSpring.syncWith(pFrom->_sfNorthSpring);

    if(FieldBits::NoField != (WestSpringFieldMask & whichField))
        _sfWestSpring.syncWith(pFrom->_sfWestSpring);

    if(FieldBits::NoField != (EastSpringFieldMask & whichField))
        _sfEastSpring.syncWith(pFrom->_sfEastSpring);

    if(FieldBits::NoField != (SouthSpringFieldMask & whichField))
        _sfSouthSpring.syncWith(pFrom->_sfSouthSpring);

    if(FieldBits::NoField != (WidthSpringFieldMask & whichField))
        _sfWidthSpring.syncWith(pFrom->_sfWidthSpring);

    if(FieldBits::NoField != (HeightSpringFieldMask & whichField))
        _sfHeightSpring.syncWith(pFrom->_sfHeightSpring);

    if(FieldBits::NoField != (HorizontalCenterSpringFieldMask & whichField))
        _sfHorizontalCenterSpring.syncWith(pFrom->_sfHorizontalCenterSpring);

    if(FieldBits::NoField != (VerticalCenterSpringFieldMask & whichField))
        _sfVerticalCenterSpring.syncWith(pFrom->_sfVerticalCenterSpring);

    if(FieldBits::NoField != (BaselineSpringFieldMask & whichField))
        _sfBaselineSpring.syncWith(pFrom->_sfBaselineSpring);

    if(FieldBits::NoField != (ComponentFieldMask & whichField))
        _sfComponent.syncWith(pFrom->_sfComponent);
}
#endif


inline
const Char8 *SpringLayoutConstraintsBase::getClassname(void)
{
    return "SpringLayoutConstraints";
}
OSG_GEN_CONTAINERPTR(SpringLayoutConstraints);

OSG_END_NAMESPACE

