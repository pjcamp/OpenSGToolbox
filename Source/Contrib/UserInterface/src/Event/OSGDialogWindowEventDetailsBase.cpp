/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DialogWindowEventDetails!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"





#include "OSGDialogWindowEventDetailsBase.h"
#include "OSGDialogWindowEventDetails.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DialogWindowEventDetails
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt8           DialogWindowEventDetailsBase::_sfOption
    
*/

/*! \var std::string     DialogWindowEventDetailsBase::_sfInput
    
*/

/*! \var UInt32          DialogWindowEventDetailsBase::_sfInputIndex
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DialogWindowEventDetails *>::_type("DialogWindowEventDetailsPtr", "EventDetailsPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DialogWindowEventDetails *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DialogWindowEventDetails *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DialogWindowEventDetails *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DialogWindowEventDetailsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "Option",
        "",
        OptionFieldId, OptionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindowEventDetails::editHandleOption),
        static_cast<FieldGetMethodSig >(&DialogWindowEventDetails::getHandleOption));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "Input",
        "",
        InputFieldId, InputFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindowEventDetails::editHandleInput),
        static_cast<FieldGetMethodSig >(&DialogWindowEventDetails::getHandleInput));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "InputIndex",
        "",
        InputIndexFieldId, InputIndexFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindowEventDetails::editHandleInputIndex),
        static_cast<FieldGetMethodSig >(&DialogWindowEventDetails::getHandleInputIndex));

    oType.addInitialDesc(pDesc);
}


DialogWindowEventDetailsBase::TypeObject DialogWindowEventDetailsBase::_type(
    DialogWindowEventDetailsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&DialogWindowEventDetailsBase::createEmptyLocal),
    DialogWindowEventDetails::initMethod,
    DialogWindowEventDetails::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DialogWindowEventDetails::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DialogWindowEventDetails\"\n"
    "\tparent=\"EventDetails\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Option\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"DialogWindowEventDetails::DIALOG_OPTION_OK\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Input\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InputIndex\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DialogWindowEventDetailsBase::getType(void)
{
    return _type;
}

const FieldContainerType &DialogWindowEventDetailsBase::getType(void) const
{
    return _type;
}

UInt32 DialogWindowEventDetailsBase::getContainerSize(void) const
{
    return sizeof(DialogWindowEventDetails);
}

/*------------------------- decorator get ------------------------------*/


SFUInt8 *DialogWindowEventDetailsBase::editSFOption(void)
{
    editSField(OptionFieldMask);

    return &_sfOption;
}

const SFUInt8 *DialogWindowEventDetailsBase::getSFOption(void) const
{
    return &_sfOption;
}


SFString *DialogWindowEventDetailsBase::editSFInput(void)
{
    editSField(InputFieldMask);

    return &_sfInput;
}

const SFString *DialogWindowEventDetailsBase::getSFInput(void) const
{
    return &_sfInput;
}


SFUInt32 *DialogWindowEventDetailsBase::editSFInputIndex(void)
{
    editSField(InputIndexFieldMask);

    return &_sfInputIndex;
}

const SFUInt32 *DialogWindowEventDetailsBase::getSFInputIndex(void) const
{
    return &_sfInputIndex;
}






/*------------------------------ access -----------------------------------*/

UInt32 DialogWindowEventDetailsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        returnValue += _sfOption.getBinSize();
    }
    if(FieldBits::NoField != (InputFieldMask & whichField))
    {
        returnValue += _sfInput.getBinSize();
    }
    if(FieldBits::NoField != (InputIndexFieldMask & whichField))
    {
        returnValue += _sfInputIndex.getBinSize();
    }

    return returnValue;
}

void DialogWindowEventDetailsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        _sfOption.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InputFieldMask & whichField))
    {
        _sfInput.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InputIndexFieldMask & whichField))
    {
        _sfInputIndex.copyToBin(pMem);
    }
}

void DialogWindowEventDetailsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        _sfOption.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InputFieldMask & whichField))
    {
        _sfInput.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InputIndexFieldMask & whichField))
    {
        _sfInputIndex.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DialogWindowEventDetailsTransitPtr DialogWindowEventDetailsBase::createLocal(BitVector bFlags)
{
    DialogWindowEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DialogWindowEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DialogWindowEventDetailsTransitPtr DialogWindowEventDetailsBase::createDependent(BitVector bFlags)
{
    DialogWindowEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DialogWindowEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DialogWindowEventDetailsTransitPtr DialogWindowEventDetailsBase::create(void)
{
    DialogWindowEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DialogWindowEventDetails>(tmpPtr);
    }

    return fc;
}

DialogWindowEventDetails *DialogWindowEventDetailsBase::createEmptyLocal(BitVector bFlags)
{
    DialogWindowEventDetails *returnValue;

    newPtr<DialogWindowEventDetails>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DialogWindowEventDetails *DialogWindowEventDetailsBase::createEmpty(void)
{
    DialogWindowEventDetails *returnValue;

    newPtr<DialogWindowEventDetails>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DialogWindowEventDetailsBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DialogWindowEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DialogWindowEventDetails *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DialogWindowEventDetailsBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DialogWindowEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DialogWindowEventDetails *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DialogWindowEventDetailsBase::shallowCopy(void) const
{
    DialogWindowEventDetails *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DialogWindowEventDetails *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

DialogWindowEventDetailsBase::DialogWindowEventDetailsBase(void) :
    Inherited(),
    _sfOption                 (UInt8(DialogWindowEventDetails::DIALOG_OPTION_OK)),
    _sfInput                  (),
    _sfInputIndex             (UInt32(0))
{
}

DialogWindowEventDetailsBase::DialogWindowEventDetailsBase(const DialogWindowEventDetailsBase &source) :
    Inherited(source),
    _sfOption                 (source._sfOption                 ),
    _sfInput                  (source._sfInput                  ),
    _sfInputIndex             (source._sfInputIndex             )
{
}


/*-------------------------- destructors ----------------------------------*/

DialogWindowEventDetailsBase::~DialogWindowEventDetailsBase(void)
{
}


GetFieldHandlePtr DialogWindowEventDetailsBase::getHandleOption          (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfOption,
             this->getType().getFieldDesc(OptionFieldId),
             const_cast<DialogWindowEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowEventDetailsBase::editHandleOption         (void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfOption,
             this->getType().getFieldDesc(OptionFieldId),
             this));


    editSField(OptionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DialogWindowEventDetailsBase::getHandleInput           (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfInput,
             this->getType().getFieldDesc(InputFieldId),
             const_cast<DialogWindowEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowEventDetailsBase::editHandleInput          (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfInput,
             this->getType().getFieldDesc(InputFieldId),
             this));


    editSField(InputFieldMask);

    return returnValue;
}

GetFieldHandlePtr DialogWindowEventDetailsBase::getHandleInputIndex      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfInputIndex,
             this->getType().getFieldDesc(InputIndexFieldId),
             const_cast<DialogWindowEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowEventDetailsBase::editHandleInputIndex     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfInputIndex,
             this->getType().getFieldDesc(InputIndexFieldId),
             this));


    editSField(InputIndexFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void DialogWindowEventDetailsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DialogWindowEventDetails *pThis = static_cast<DialogWindowEventDetails *>(this);

    pThis->execSync(static_cast<DialogWindowEventDetails *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DialogWindowEventDetailsBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DialogWindowEventDetails *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DialogWindowEventDetails *>(pRefAspect),
                  dynamic_cast<const DialogWindowEventDetails *>(this));

    return returnValue;
}
#endif

void DialogWindowEventDetailsBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
