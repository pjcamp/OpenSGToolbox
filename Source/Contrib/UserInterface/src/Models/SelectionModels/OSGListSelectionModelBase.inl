/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ListSelectionModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGListSelectionEventDetails.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ListSelectionModelBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ListSelectionModelBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &ListSelectionModelBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 ListSelectionModelBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 ListSelectionModelBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ListSelectionModel::_sfSelectionMode field.

inline
UInt32 &ListSelectionModelBase::editSelectionMode(void)
{
    editSField(SelectionModeFieldMask);

    return _sfSelectionMode.getValue();
}

//! Get the value of the ListSelectionModel::_sfSelectionMode field.
inline
      UInt32  ListSelectionModelBase::getSelectionMode(void) const
{
    return _sfSelectionMode.getValue();
}

//! Set the value of the ListSelectionModel::_sfSelectionMode field.
inline
void ListSelectionModelBase::setSelectionMode(const UInt32 value)
{
    editSField(SelectionModeFieldMask);

    _sfSelectionMode.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ListSelectionModelBase::execSync (      ListSelectionModelBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (SelectionModeFieldMask & whichField))
        _sfSelectionMode.syncWith(pFrom->_sfSelectionMode);
}
#endif


inline
const Char8 *ListSelectionModelBase::getClassname(void)
{
    return "ListSelectionModel";
}

inline
boost::signals2::connection ListSelectionModelBase::attachActivity(UInt32 eventId,
                                                              Activity* TheActivity)
{
    return connectEvent(eventId, boost::bind(&Activity::eventProduced, TheActivity, _1, _2) );
}

inline
UInt32 ListSelectionModelBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *ListSelectionModelBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *ListSelectionModelBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 ListSelectionModelBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  ListSelectionModelBase::connectSelectionChanged(const SelectionChangedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SelectionChangedEvent.connect(listener, at);
}

inline
boost::signals2::connection  ListSelectionModelBase::connectSelectionChanged(const SelectionChangedEventType::group_type &group,
                                                    const SelectionChangedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SelectionChangedEvent.connect(group, listener, at);
}

inline
void  ListSelectionModelBase::disconnectSelectionChanged(const SelectionChangedEventType::group_type &group)
{
    _SelectionChangedEvent.disconnect(group);
}

inline
void  ListSelectionModelBase::disconnectAllSlotsSelectionChanged(void)
{
    _SelectionChangedEvent.disconnect_all_slots();
}

inline
bool  ListSelectionModelBase::isEmptySelectionChanged(void) const
{
    return _SelectionChangedEvent.empty();
}

inline
UInt32  ListSelectionModelBase::numSlotsSelectionChanged(void) const
{
    return _SelectionChangedEvent.num_slots();
}

inline
void ListSelectionModelBase::produceSelectionChanged(SelectionChangedEventDetailsType* const e)
{
    produceEvent(SelectionChangedEventId, e);
}

OSG_GEN_CONTAINERPTR(ListSelectionModel);

OSG_END_NAMESPACE

