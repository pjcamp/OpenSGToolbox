/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ListSelectionModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGListSelectionModelBase.h"
#include "OSGListSelectionModel.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ListSelectionModel
    A UI SingleSelectionModel.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          ListSelectionModelBase::_sfSelectionMode
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ListSelectionModel *>::_type("ListSelectionModelPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ListSelectionModel *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ListSelectionModel *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ListSelectionModel *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ListSelectionModelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "SelectionMode",
        "",
        SelectionModeFieldId, SelectionModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ListSelectionModel::editHandleSelectionMode),
        static_cast<FieldGetMethodSig >(&ListSelectionModel::getHandleSelectionMode));

    oType.addInitialDesc(pDesc);
}


ListSelectionModelBase::TypeObject ListSelectionModelBase::_type(
    ListSelectionModelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ListSelectionModel::initMethod,
    ListSelectionModel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ListSelectionModel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ListSelectionModel\"\n"
    "\tparent=\"FieldContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI SingleSelectionModel.\n"
    "\t<Field\n"
    "\t\tname=\"SelectionMode\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"ListSelectionModel::SINGLE_SELECTION\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"SelectionChanged\"\n"
    "\t\tdetailsType=\"ListSelectionEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI SingleSelectionModel.\n"
    );

//! ListSelectionModel Produced Events

EventDescription *ListSelectionModelBase::_eventDesc[] =
{
    new EventDescription("SelectionChanged", 
                          "",
                          SelectionChangedEventId, 
                          FieldTraits<ListSelectionEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ListSelectionModelBase::getHandleSelectionChangedSignal))

};

EventProducerType ListSelectionModelBase::_producerType(
    "ListSelectionModelProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &ListSelectionModelBase::getType(void)
{
    return _type;
}

const FieldContainerType &ListSelectionModelBase::getType(void) const
{
    return _type;
}

const EventProducerType &ListSelectionModelBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 ListSelectionModelBase::getContainerSize(void) const
{
    return sizeof(ListSelectionModel);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *ListSelectionModelBase::editSFSelectionMode(void)
{
    editSField(SelectionModeFieldMask);

    return &_sfSelectionMode;
}

const SFUInt32 *ListSelectionModelBase::getSFSelectionMode(void) const
{
    return &_sfSelectionMode;
}






/*------------------------------ access -----------------------------------*/

UInt32 ListSelectionModelBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SelectionModeFieldMask & whichField))
    {
        returnValue += _sfSelectionMode.getBinSize();
    }

    return returnValue;
}

void ListSelectionModelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SelectionModeFieldMask & whichField))
    {
        _sfSelectionMode.copyToBin(pMem);
    }
}

void ListSelectionModelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SelectionModeFieldMask & whichField))
    {
        _sfSelectionMode.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void ListSelectionModelBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case SelectionChangedEventId:
        OSG_ASSERT(dynamic_cast<SelectionChangedEventDetailsType* const>(e));

        _SelectionChangedEvent.set_combiner(ConsumableEventCombiner(e));
        _SelectionChangedEvent(dynamic_cast<SelectionChangedEventDetailsType* const>(e), SelectionChangedEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection ListSelectionModelBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case SelectionChangedEventId:
        return _SelectionChangedEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  ListSelectionModelBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case SelectionChangedEventId:
        return _SelectionChangedEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  ListSelectionModelBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case SelectionChangedEventId:
        _SelectionChangedEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  ListSelectionModelBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case SelectionChangedEventId:
        _SelectionChangedEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  ListSelectionModelBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case SelectionChangedEventId:
        return _SelectionChangedEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  ListSelectionModelBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case SelectionChangedEventId:
        return _SelectionChangedEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

ListSelectionModelBase::ListSelectionModelBase(void) :
    Inherited(),
    _sfSelectionMode          (UInt32(ListSelectionModel::SINGLE_SELECTION))
{
}

ListSelectionModelBase::ListSelectionModelBase(const ListSelectionModelBase &source) :
    Inherited(source),
    _sfSelectionMode          (source._sfSelectionMode          )
{
}


/*-------------------------- destructors ----------------------------------*/

ListSelectionModelBase::~ListSelectionModelBase(void)
{
}


GetFieldHandlePtr ListSelectionModelBase::getHandleSelectionMode   (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSelectionMode,
             this->getType().getFieldDesc(SelectionModeFieldId),
             const_cast<ListSelectionModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListSelectionModelBase::editHandleSelectionMode  (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSelectionMode,
             this->getType().getFieldDesc(SelectionModeFieldId),
             this));


    editSField(SelectionModeFieldMask);

    return returnValue;
}


GetEventHandlePtr ListSelectionModelBase::getHandleSelectionChangedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<SelectionChangedEventType>(
             const_cast<SelectionChangedEventType *>(&_SelectionChangedEvent),
             _producerType.getEventDescription(SelectionChangedEventId),
             const_cast<ListSelectionModelBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ListSelectionModelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ListSelectionModel *pThis = static_cast<ListSelectionModel *>(this);

    pThis->execSync(static_cast<ListSelectionModel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ListSelectionModelBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
