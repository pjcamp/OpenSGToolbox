/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GlassLayer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGGlassLayerBase.h"
#include "OSGGlassLayer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GlassLayer
    UI Glass Layer.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt2f           GlassLayerBase::_sfStartPosition
    
*/

/*! \var Vec2f           GlassLayerBase::_sfStartDirection
    
*/

/*! \var Pnt2f           GlassLayerBase::_sfEndPosition
    
*/

/*! \var Vec2f           GlassLayerBase::_sfEndDirection
    
*/

/*! \var Color4f         GlassLayerBase::_sfCenterColor
    
*/

/*! \var Color4f         GlassLayerBase::_sfEdgeColor
    
*/

/*! \var UInt32          GlassLayerBase::_sfSegments
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GlassLayer *>::_type("GlassLayerPtr", "LayerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GlassLayer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GlassLayer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GlassLayer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GlassLayerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "StartPosition",
        "",
        StartPositionFieldId, StartPositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GlassLayer::editHandleStartPosition),
        static_cast<FieldGetMethodSig >(&GlassLayer::getHandleStartPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "StartDirection",
        "",
        StartDirectionFieldId, StartDirectionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GlassLayer::editHandleStartDirection),
        static_cast<FieldGetMethodSig >(&GlassLayer::getHandleStartDirection));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "EndPosition",
        "",
        EndPositionFieldId, EndPositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GlassLayer::editHandleEndPosition),
        static_cast<FieldGetMethodSig >(&GlassLayer::getHandleEndPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "EndDirection",
        "",
        EndDirectionFieldId, EndDirectionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GlassLayer::editHandleEndDirection),
        static_cast<FieldGetMethodSig >(&GlassLayer::getHandleEndDirection));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "CenterColor",
        "",
        CenterColorFieldId, CenterColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GlassLayer::editHandleCenterColor),
        static_cast<FieldGetMethodSig >(&GlassLayer::getHandleCenterColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "EdgeColor",
        "",
        EdgeColorFieldId, EdgeColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GlassLayer::editHandleEdgeColor),
        static_cast<FieldGetMethodSig >(&GlassLayer::getHandleEdgeColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Segments",
        "",
        SegmentsFieldId, SegmentsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GlassLayer::editHandleSegments),
        static_cast<FieldGetMethodSig >(&GlassLayer::getHandleSegments));

    oType.addInitialDesc(pDesc);
}


GlassLayerBase::TypeObject GlassLayerBase::_type(
    GlassLayerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&GlassLayerBase::createEmptyLocal),
    GlassLayer::initMethod,
    GlassLayer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&GlassLayer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GlassLayer\"\n"
    "\tparent=\"Layer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Glass Layer.\n"
    "\t<Field\n"
    "\t\tname=\"StartPosition\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"StartDirection\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,-1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EndPosition\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EndDirection\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CenterColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f,1.0f,1.0f,0.3f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EdgeColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f,1.0f,1.0f,0.5f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Segments\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"15\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI Glass Layer.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GlassLayerBase::getType(void)
{
    return _type;
}

const FieldContainerType &GlassLayerBase::getType(void) const
{
    return _type;
}

UInt32 GlassLayerBase::getContainerSize(void) const
{
    return sizeof(GlassLayer);
}

/*------------------------- decorator get ------------------------------*/


SFPnt2f *GlassLayerBase::editSFStartPosition(void)
{
    editSField(StartPositionFieldMask);

    return &_sfStartPosition;
}

const SFPnt2f *GlassLayerBase::getSFStartPosition(void) const
{
    return &_sfStartPosition;
}


SFVec2f *GlassLayerBase::editSFStartDirection(void)
{
    editSField(StartDirectionFieldMask);

    return &_sfStartDirection;
}

const SFVec2f *GlassLayerBase::getSFStartDirection(void) const
{
    return &_sfStartDirection;
}


SFPnt2f *GlassLayerBase::editSFEndPosition(void)
{
    editSField(EndPositionFieldMask);

    return &_sfEndPosition;
}

const SFPnt2f *GlassLayerBase::getSFEndPosition(void) const
{
    return &_sfEndPosition;
}


SFVec2f *GlassLayerBase::editSFEndDirection(void)
{
    editSField(EndDirectionFieldMask);

    return &_sfEndDirection;
}

const SFVec2f *GlassLayerBase::getSFEndDirection(void) const
{
    return &_sfEndDirection;
}


SFColor4f *GlassLayerBase::editSFCenterColor(void)
{
    editSField(CenterColorFieldMask);

    return &_sfCenterColor;
}

const SFColor4f *GlassLayerBase::getSFCenterColor(void) const
{
    return &_sfCenterColor;
}


SFColor4f *GlassLayerBase::editSFEdgeColor(void)
{
    editSField(EdgeColorFieldMask);

    return &_sfEdgeColor;
}

const SFColor4f *GlassLayerBase::getSFEdgeColor(void) const
{
    return &_sfEdgeColor;
}


SFUInt32 *GlassLayerBase::editSFSegments(void)
{
    editSField(SegmentsFieldMask);

    return &_sfSegments;
}

const SFUInt32 *GlassLayerBase::getSFSegments(void) const
{
    return &_sfSegments;
}






/*------------------------------ access -----------------------------------*/

UInt32 GlassLayerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (StartPositionFieldMask & whichField))
    {
        returnValue += _sfStartPosition.getBinSize();
    }
    if(FieldBits::NoField != (StartDirectionFieldMask & whichField))
    {
        returnValue += _sfStartDirection.getBinSize();
    }
    if(FieldBits::NoField != (EndPositionFieldMask & whichField))
    {
        returnValue += _sfEndPosition.getBinSize();
    }
    if(FieldBits::NoField != (EndDirectionFieldMask & whichField))
    {
        returnValue += _sfEndDirection.getBinSize();
    }
    if(FieldBits::NoField != (CenterColorFieldMask & whichField))
    {
        returnValue += _sfCenterColor.getBinSize();
    }
    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
    {
        returnValue += _sfEdgeColor.getBinSize();
    }
    if(FieldBits::NoField != (SegmentsFieldMask & whichField))
    {
        returnValue += _sfSegments.getBinSize();
    }

    return returnValue;
}

void GlassLayerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (StartPositionFieldMask & whichField))
    {
        _sfStartPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StartDirectionFieldMask & whichField))
    {
        _sfStartDirection.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EndPositionFieldMask & whichField))
    {
        _sfEndPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EndDirectionFieldMask & whichField))
    {
        _sfEndDirection.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CenterColorFieldMask & whichField))
    {
        _sfCenterColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
    {
        _sfEdgeColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SegmentsFieldMask & whichField))
    {
        _sfSegments.copyToBin(pMem);
    }
}

void GlassLayerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (StartPositionFieldMask & whichField))
    {
        _sfStartPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StartDirectionFieldMask & whichField))
    {
        _sfStartDirection.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EndPositionFieldMask & whichField))
    {
        _sfEndPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EndDirectionFieldMask & whichField))
    {
        _sfEndDirection.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CenterColorFieldMask & whichField))
    {
        _sfCenterColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
    {
        _sfEdgeColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SegmentsFieldMask & whichField))
    {
        _sfSegments.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GlassLayerTransitPtr GlassLayerBase::createLocal(BitVector bFlags)
{
    GlassLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GlassLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GlassLayerTransitPtr GlassLayerBase::createDependent(BitVector bFlags)
{
    GlassLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GlassLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GlassLayerTransitPtr GlassLayerBase::create(void)
{
    GlassLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GlassLayer>(tmpPtr);
    }

    return fc;
}

GlassLayer *GlassLayerBase::createEmptyLocal(BitVector bFlags)
{
    GlassLayer *returnValue;

    newPtr<GlassLayer>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GlassLayer *GlassLayerBase::createEmpty(void)
{
    GlassLayer *returnValue;

    newPtr<GlassLayer>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GlassLayerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GlassLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GlassLayer *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GlassLayerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GlassLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GlassLayer *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GlassLayerBase::shallowCopy(void) const
{
    GlassLayer *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GlassLayer *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

GlassLayerBase::GlassLayerBase(void) :
    Inherited(),
    _sfStartPosition          (Pnt2f(0.0f,1.0f)),
    _sfStartDirection         (Vec2f(0.0f,-1.0f)),
    _sfEndPosition            (Pnt2f(1.0f,0.0f)),
    _sfEndDirection           (Vec2f(1.0f,0.0f)),
    _sfCenterColor            (Color4f(1.0f,1.0f,1.0f,0.3f)),
    _sfEdgeColor              (Color4f(1.0f,1.0f,1.0f,0.5f)),
    _sfSegments               (UInt32(15))
{
}

GlassLayerBase::GlassLayerBase(const GlassLayerBase &source) :
    Inherited(source),
    _sfStartPosition          (source._sfStartPosition          ),
    _sfStartDirection         (source._sfStartDirection         ),
    _sfEndPosition            (source._sfEndPosition            ),
    _sfEndDirection           (source._sfEndDirection           ),
    _sfCenterColor            (source._sfCenterColor            ),
    _sfEdgeColor              (source._sfEdgeColor              ),
    _sfSegments               (source._sfSegments               )
{
}


/*-------------------------- destructors ----------------------------------*/

GlassLayerBase::~GlassLayerBase(void)
{
}


GetFieldHandlePtr GlassLayerBase::getHandleStartPosition   (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfStartPosition,
             this->getType().getFieldDesc(StartPositionFieldId),
             const_cast<GlassLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GlassLayerBase::editHandleStartPosition  (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfStartPosition,
             this->getType().getFieldDesc(StartPositionFieldId),
             this));


    editSField(StartPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr GlassLayerBase::getHandleStartDirection  (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfStartDirection,
             this->getType().getFieldDesc(StartDirectionFieldId),
             const_cast<GlassLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GlassLayerBase::editHandleStartDirection (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfStartDirection,
             this->getType().getFieldDesc(StartDirectionFieldId),
             this));


    editSField(StartDirectionFieldMask);

    return returnValue;
}

GetFieldHandlePtr GlassLayerBase::getHandleEndPosition     (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfEndPosition,
             this->getType().getFieldDesc(EndPositionFieldId),
             const_cast<GlassLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GlassLayerBase::editHandleEndPosition    (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfEndPosition,
             this->getType().getFieldDesc(EndPositionFieldId),
             this));


    editSField(EndPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr GlassLayerBase::getHandleEndDirection    (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfEndDirection,
             this->getType().getFieldDesc(EndDirectionFieldId),
             const_cast<GlassLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GlassLayerBase::editHandleEndDirection   (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfEndDirection,
             this->getType().getFieldDesc(EndDirectionFieldId),
             this));


    editSField(EndDirectionFieldMask);

    return returnValue;
}

GetFieldHandlePtr GlassLayerBase::getHandleCenterColor     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfCenterColor,
             this->getType().getFieldDesc(CenterColorFieldId),
             const_cast<GlassLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GlassLayerBase::editHandleCenterColor    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfCenterColor,
             this->getType().getFieldDesc(CenterColorFieldId),
             this));


    editSField(CenterColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr GlassLayerBase::getHandleEdgeColor       (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfEdgeColor,
             this->getType().getFieldDesc(EdgeColorFieldId),
             const_cast<GlassLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GlassLayerBase::editHandleEdgeColor      (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfEdgeColor,
             this->getType().getFieldDesc(EdgeColorFieldId),
             this));


    editSField(EdgeColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr GlassLayerBase::getHandleSegments        (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSegments,
             this->getType().getFieldDesc(SegmentsFieldId),
             const_cast<GlassLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GlassLayerBase::editHandleSegments       (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSegments,
             this->getType().getFieldDesc(SegmentsFieldId),
             this));


    editSField(SegmentsFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void GlassLayerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GlassLayer *pThis = static_cast<GlassLayer *>(this);

    pThis->execSync(static_cast<GlassLayer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GlassLayerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GlassLayer *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GlassLayer *>(pRefAspect),
                  dynamic_cast<const GlassLayer *>(this));

    return returnValue;
}
#endif

void GlassLayerBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
