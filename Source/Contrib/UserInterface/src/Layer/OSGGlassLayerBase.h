/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GlassLayer
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGGLASSLAYERBASE_H_
#define _OSGGLASSLAYERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGLayer.h" // Parent

#include "OSGVecFields.h"               // StartPosition type
#include "OSGBaseFields.h"              // CenterColor type
#include "OSGSysFields.h"               // Segments type

#include "OSGGlassLayerFields.h"

OSG_BEGIN_NAMESPACE

class GlassLayer;

//! \brief GlassLayer Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING GlassLayerBase : public Layer
{
  public:

    typedef Layer Inherited;
    typedef Layer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(GlassLayer);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        StartPositionFieldId = Inherited::NextFieldId,
        StartDirectionFieldId = StartPositionFieldId + 1,
        EndPositionFieldId = StartDirectionFieldId + 1,
        EndDirectionFieldId = EndPositionFieldId + 1,
        CenterColorFieldId = EndDirectionFieldId + 1,
        EdgeColorFieldId = CenterColorFieldId + 1,
        SegmentsFieldId = EdgeColorFieldId + 1,
        NextFieldId = SegmentsFieldId + 1
    };

    static const OSG::BitVector StartPositionFieldMask =
        (TypeTraits<BitVector>::One << StartPositionFieldId);
    static const OSG::BitVector StartDirectionFieldMask =
        (TypeTraits<BitVector>::One << StartDirectionFieldId);
    static const OSG::BitVector EndPositionFieldMask =
        (TypeTraits<BitVector>::One << EndPositionFieldId);
    static const OSG::BitVector EndDirectionFieldMask =
        (TypeTraits<BitVector>::One << EndDirectionFieldId);
    static const OSG::BitVector CenterColorFieldMask =
        (TypeTraits<BitVector>::One << CenterColorFieldId);
    static const OSG::BitVector EdgeColorFieldMask =
        (TypeTraits<BitVector>::One << EdgeColorFieldId);
    static const OSG::BitVector SegmentsFieldMask =
        (TypeTraits<BitVector>::One << SegmentsFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFPnt2f           SFStartPositionType;
    typedef SFVec2f           SFStartDirectionType;
    typedef SFPnt2f           SFEndPositionType;
    typedef SFVec2f           SFEndDirectionType;
    typedef SFColor4f         SFCenterColorType;
    typedef SFColor4f         SFEdgeColorType;
    typedef SFUInt32          SFSegmentsType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFPnt2f             *editSFStartPosition  (void);
            const SFPnt2f             *getSFStartPosition   (void) const;

                  SFVec2f             *editSFStartDirection (void);
            const SFVec2f             *getSFStartDirection  (void) const;

                  SFPnt2f             *editSFEndPosition    (void);
            const SFPnt2f             *getSFEndPosition     (void) const;

                  SFVec2f             *editSFEndDirection   (void);
            const SFVec2f             *getSFEndDirection    (void) const;

                  SFColor4f           *editSFCenterColor    (void);
            const SFColor4f           *getSFCenterColor     (void) const;

                  SFColor4f           *editSFEdgeColor      (void);
            const SFColor4f           *getSFEdgeColor       (void) const;

                  SFUInt32            *editSFSegments       (void);
            const SFUInt32            *getSFSegments        (void) const;


                  Pnt2f               &editStartPosition  (void);
            const Pnt2f               &getStartPosition   (void) const;

                  Vec2f               &editStartDirection (void);
            const Vec2f               &getStartDirection  (void) const;

                  Pnt2f               &editEndPosition    (void);
            const Pnt2f               &getEndPosition     (void) const;

                  Vec2f               &editEndDirection   (void);
            const Vec2f               &getEndDirection    (void) const;

                  Color4f             &editCenterColor    (void);
            const Color4f             &getCenterColor     (void) const;

                  Color4f             &editEdgeColor      (void);
            const Color4f             &getEdgeColor       (void) const;

                  UInt32              &editSegments       (void);
                  UInt32               getSegments        (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setStartPosition  (const Pnt2f &value);
            void setStartDirection (const Vec2f &value);
            void setEndPosition    (const Pnt2f &value);
            void setEndDirection   (const Vec2f &value);
            void setCenterColor    (const Color4f &value);
            void setEdgeColor      (const Color4f &value);
            void setSegments       (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  GlassLayerTransitPtr  create          (void);
    static  GlassLayer           *createEmpty     (void);

    static  GlassLayerTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  GlassLayer            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  GlassLayerTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPnt2f           _sfStartPosition;
    SFVec2f           _sfStartDirection;
    SFPnt2f           _sfEndPosition;
    SFVec2f           _sfEndDirection;
    SFColor4f         _sfCenterColor;
    SFColor4f         _sfEdgeColor;
    SFUInt32          _sfSegments;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    GlassLayerBase(void);
    GlassLayerBase(const GlassLayerBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~GlassLayerBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleStartPosition   (void) const;
    EditFieldHandlePtr editHandleStartPosition  (void);
    GetFieldHandlePtr  getHandleStartDirection  (void) const;
    EditFieldHandlePtr editHandleStartDirection (void);
    GetFieldHandlePtr  getHandleEndPosition     (void) const;
    EditFieldHandlePtr editHandleEndPosition    (void);
    GetFieldHandlePtr  getHandleEndDirection    (void) const;
    EditFieldHandlePtr editHandleEndDirection   (void);
    GetFieldHandlePtr  getHandleCenterColor     (void) const;
    EditFieldHandlePtr editHandleCenterColor    (void);
    GetFieldHandlePtr  getHandleEdgeColor       (void) const;
    EditFieldHandlePtr editHandleEdgeColor      (void);
    GetFieldHandlePtr  getHandleSegments        (void) const;
    EditFieldHandlePtr editHandleSegments       (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      GlassLayerBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const GlassLayerBase &source);
};

typedef GlassLayerBase *GlassLayerBaseP;

OSG_END_NAMESPACE

#endif /* _OSGGLASSLAYERBASE_H_ */
