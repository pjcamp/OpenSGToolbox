/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiColorMatteBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGMultiColorMatteBorderBase.h"
#include "OSGMultiColorMatteBorder.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MultiColorMatteBorder
    UI MultiColor Matte Border. Creates a matte-look border using a different color for each side. (The difference between this border and a line border is that you can specify the individual border dimensions as well as colors.)
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          MultiColorMatteBorderBase::_sfLeftWidth
    
*/

/*! \var Real32          MultiColorMatteBorderBase::_sfRightWidth
    
*/

/*! \var Real32          MultiColorMatteBorderBase::_sfTopWidth
    
*/

/*! \var Real32          MultiColorMatteBorderBase::_sfBottomWidth
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfLeftLineLeftColor
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfLeftLineRightColor
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfTopLineTopColor
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfTopLineBottomColor
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfRightLineLeftColor
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfRightLineRightColor
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfBottomLineTopColor
    
*/

/*! \var Color4f         MultiColorMatteBorderBase::_sfBottomLineBottomColor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MultiColorMatteBorder *>::_type("MultiColorMatteBorderPtr", "BorderPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MultiColorMatteBorder *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MultiColorMatteBorder *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MultiColorMatteBorder *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MultiColorMatteBorderBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "LeftWidth",
        "",
        LeftWidthFieldId, LeftWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleLeftWidth),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleLeftWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "RightWidth",
        "",
        RightWidthFieldId, RightWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleRightWidth),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleRightWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "TopWidth",
        "",
        TopWidthFieldId, TopWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleTopWidth),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleTopWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "BottomWidth",
        "",
        BottomWidthFieldId, BottomWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleBottomWidth),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleBottomWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "LeftLineLeftColor",
        "",
        LeftLineLeftColorFieldId, LeftLineLeftColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleLeftLineLeftColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleLeftLineLeftColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "LeftLineRightColor",
        "",
        LeftLineRightColorFieldId, LeftLineRightColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleLeftLineRightColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleLeftLineRightColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "TopLineTopColor",
        "",
        TopLineTopColorFieldId, TopLineTopColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleTopLineTopColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleTopLineTopColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "TopLineBottomColor",
        "",
        TopLineBottomColorFieldId, TopLineBottomColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleTopLineBottomColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleTopLineBottomColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "RightLineLeftColor",
        "",
        RightLineLeftColorFieldId, RightLineLeftColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleRightLineLeftColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleRightLineLeftColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "RightLineRightColor",
        "",
        RightLineRightColorFieldId, RightLineRightColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleRightLineRightColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleRightLineRightColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "BottomLineTopColor",
        "",
        BottomLineTopColorFieldId, BottomLineTopColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleBottomLineTopColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleBottomLineTopColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "BottomLineBottomColor",
        "",
        BottomLineBottomColorFieldId, BottomLineBottomColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColorMatteBorder::editHandleBottomLineBottomColor),
        static_cast<FieldGetMethodSig >(&MultiColorMatteBorder::getHandleBottomLineBottomColor));

    oType.addInitialDesc(pDesc);
}


MultiColorMatteBorderBase::TypeObject MultiColorMatteBorderBase::_type(
    MultiColorMatteBorderBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MultiColorMatteBorderBase::createEmptyLocal),
    MultiColorMatteBorder::initMethod,
    MultiColorMatteBorder::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MultiColorMatteBorder::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MultiColorMatteBorder\"\n"
    "\tparent=\"Border\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI MultiColor Matte Border. Creates a matte-look border using a different color for each side. (The difference between this border and a line border is that you can specify the individual border dimensions as well as colors.)\n"
    "\t<Field\n"
    "\t\tname=\"LeftWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RightWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TopWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BottomWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LeftLineLeftColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LeftLineRightColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TopLineTopColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TopLineBottomColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RightLineLeftColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RightLineRightColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BottomLineTopColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BottomLineBottomColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI MultiColor Matte Border. Creates a matte-look border using a different color for each side. (The difference between this border and a line border is that you can specify the individual border dimensions as well as colors.)\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MultiColorMatteBorderBase::getType(void)
{
    return _type;
}

const FieldContainerType &MultiColorMatteBorderBase::getType(void) const
{
    return _type;
}

UInt32 MultiColorMatteBorderBase::getContainerSize(void) const
{
    return sizeof(MultiColorMatteBorder);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *MultiColorMatteBorderBase::editSFLeftWidth(void)
{
    editSField(LeftWidthFieldMask);

    return &_sfLeftWidth;
}

const SFReal32 *MultiColorMatteBorderBase::getSFLeftWidth(void) const
{
    return &_sfLeftWidth;
}


SFReal32 *MultiColorMatteBorderBase::editSFRightWidth(void)
{
    editSField(RightWidthFieldMask);

    return &_sfRightWidth;
}

const SFReal32 *MultiColorMatteBorderBase::getSFRightWidth(void) const
{
    return &_sfRightWidth;
}


SFReal32 *MultiColorMatteBorderBase::editSFTopWidth(void)
{
    editSField(TopWidthFieldMask);

    return &_sfTopWidth;
}

const SFReal32 *MultiColorMatteBorderBase::getSFTopWidth(void) const
{
    return &_sfTopWidth;
}


SFReal32 *MultiColorMatteBorderBase::editSFBottomWidth(void)
{
    editSField(BottomWidthFieldMask);

    return &_sfBottomWidth;
}

const SFReal32 *MultiColorMatteBorderBase::getSFBottomWidth(void) const
{
    return &_sfBottomWidth;
}


SFColor4f *MultiColorMatteBorderBase::editSFLeftLineLeftColor(void)
{
    editSField(LeftLineLeftColorFieldMask);

    return &_sfLeftLineLeftColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFLeftLineLeftColor(void) const
{
    return &_sfLeftLineLeftColor;
}


SFColor4f *MultiColorMatteBorderBase::editSFLeftLineRightColor(void)
{
    editSField(LeftLineRightColorFieldMask);

    return &_sfLeftLineRightColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFLeftLineRightColor(void) const
{
    return &_sfLeftLineRightColor;
}


SFColor4f *MultiColorMatteBorderBase::editSFTopLineTopColor(void)
{
    editSField(TopLineTopColorFieldMask);

    return &_sfTopLineTopColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFTopLineTopColor(void) const
{
    return &_sfTopLineTopColor;
}


SFColor4f *MultiColorMatteBorderBase::editSFTopLineBottomColor(void)
{
    editSField(TopLineBottomColorFieldMask);

    return &_sfTopLineBottomColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFTopLineBottomColor(void) const
{
    return &_sfTopLineBottomColor;
}


SFColor4f *MultiColorMatteBorderBase::editSFRightLineLeftColor(void)
{
    editSField(RightLineLeftColorFieldMask);

    return &_sfRightLineLeftColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFRightLineLeftColor(void) const
{
    return &_sfRightLineLeftColor;
}


SFColor4f *MultiColorMatteBorderBase::editSFRightLineRightColor(void)
{
    editSField(RightLineRightColorFieldMask);

    return &_sfRightLineRightColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFRightLineRightColor(void) const
{
    return &_sfRightLineRightColor;
}


SFColor4f *MultiColorMatteBorderBase::editSFBottomLineTopColor(void)
{
    editSField(BottomLineTopColorFieldMask);

    return &_sfBottomLineTopColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFBottomLineTopColor(void) const
{
    return &_sfBottomLineTopColor;
}


SFColor4f *MultiColorMatteBorderBase::editSFBottomLineBottomColor(void)
{
    editSField(BottomLineBottomColorFieldMask);

    return &_sfBottomLineBottomColor;
}

const SFColor4f *MultiColorMatteBorderBase::getSFBottomLineBottomColor(void) const
{
    return &_sfBottomLineBottomColor;
}






/*------------------------------ access -----------------------------------*/

UInt32 MultiColorMatteBorderBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        returnValue += _sfLeftWidth.getBinSize();
    }
    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        returnValue += _sfRightWidth.getBinSize();
    }
    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        returnValue += _sfTopWidth.getBinSize();
    }
    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        returnValue += _sfBottomWidth.getBinSize();
    }
    if(FieldBits::NoField != (LeftLineLeftColorFieldMask & whichField))
    {
        returnValue += _sfLeftLineLeftColor.getBinSize();
    }
    if(FieldBits::NoField != (LeftLineRightColorFieldMask & whichField))
    {
        returnValue += _sfLeftLineRightColor.getBinSize();
    }
    if(FieldBits::NoField != (TopLineTopColorFieldMask & whichField))
    {
        returnValue += _sfTopLineTopColor.getBinSize();
    }
    if(FieldBits::NoField != (TopLineBottomColorFieldMask & whichField))
    {
        returnValue += _sfTopLineBottomColor.getBinSize();
    }
    if(FieldBits::NoField != (RightLineLeftColorFieldMask & whichField))
    {
        returnValue += _sfRightLineLeftColor.getBinSize();
    }
    if(FieldBits::NoField != (RightLineRightColorFieldMask & whichField))
    {
        returnValue += _sfRightLineRightColor.getBinSize();
    }
    if(FieldBits::NoField != (BottomLineTopColorFieldMask & whichField))
    {
        returnValue += _sfBottomLineTopColor.getBinSize();
    }
    if(FieldBits::NoField != (BottomLineBottomColorFieldMask & whichField))
    {
        returnValue += _sfBottomLineBottomColor.getBinSize();
    }

    return returnValue;
}

void MultiColorMatteBorderBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        _sfLeftWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        _sfRightWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        _sfTopWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        _sfBottomWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LeftLineLeftColorFieldMask & whichField))
    {
        _sfLeftLineLeftColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LeftLineRightColorFieldMask & whichField))
    {
        _sfLeftLineRightColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopLineTopColorFieldMask & whichField))
    {
        _sfTopLineTopColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopLineBottomColorFieldMask & whichField))
    {
        _sfTopLineBottomColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightLineLeftColorFieldMask & whichField))
    {
        _sfRightLineLeftColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightLineRightColorFieldMask & whichField))
    {
        _sfRightLineRightColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomLineTopColorFieldMask & whichField))
    {
        _sfBottomLineTopColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomLineBottomColorFieldMask & whichField))
    {
        _sfBottomLineBottomColor.copyToBin(pMem);
    }
}

void MultiColorMatteBorderBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        _sfLeftWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        _sfRightWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        _sfTopWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        _sfBottomWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LeftLineLeftColorFieldMask & whichField))
    {
        _sfLeftLineLeftColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LeftLineRightColorFieldMask & whichField))
    {
        _sfLeftLineRightColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopLineTopColorFieldMask & whichField))
    {
        _sfTopLineTopColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopLineBottomColorFieldMask & whichField))
    {
        _sfTopLineBottomColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightLineLeftColorFieldMask & whichField))
    {
        _sfRightLineLeftColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightLineRightColorFieldMask & whichField))
    {
        _sfRightLineRightColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomLineTopColorFieldMask & whichField))
    {
        _sfBottomLineTopColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomLineBottomColorFieldMask & whichField))
    {
        _sfBottomLineBottomColor.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MultiColorMatteBorderTransitPtr MultiColorMatteBorderBase::createLocal(BitVector bFlags)
{
    MultiColorMatteBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MultiColorMatteBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MultiColorMatteBorderTransitPtr MultiColorMatteBorderBase::createDependent(BitVector bFlags)
{
    MultiColorMatteBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MultiColorMatteBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MultiColorMatteBorderTransitPtr MultiColorMatteBorderBase::create(void)
{
    MultiColorMatteBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MultiColorMatteBorder>(tmpPtr);
    }

    return fc;
}

MultiColorMatteBorder *MultiColorMatteBorderBase::createEmptyLocal(BitVector bFlags)
{
    MultiColorMatteBorder *returnValue;

    newPtr<MultiColorMatteBorder>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MultiColorMatteBorder *MultiColorMatteBorderBase::createEmpty(void)
{
    MultiColorMatteBorder *returnValue;

    newPtr<MultiColorMatteBorder>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr MultiColorMatteBorderBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MultiColorMatteBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiColorMatteBorder *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiColorMatteBorderBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MultiColorMatteBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiColorMatteBorder *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiColorMatteBorderBase::shallowCopy(void) const
{
    MultiColorMatteBorder *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MultiColorMatteBorder *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

MultiColorMatteBorderBase::MultiColorMatteBorderBase(void) :
    Inherited(),
    _sfLeftWidth              (Real32(1)),
    _sfRightWidth             (Real32(1)),
    _sfTopWidth               (Real32(1)),
    _sfBottomWidth            (Real32(1)),
    _sfLeftLineLeftColor      (Color4f(0.0,0.0,0.0,1.0)),
    _sfLeftLineRightColor     (Color4f(0.0,0.0,0.0,1.0)),
    _sfTopLineTopColor        (Color4f(0.0,0.0,0.0,1.0)),
    _sfTopLineBottomColor     (Color4f(0.0,0.0,0.0,1.0)),
    _sfRightLineLeftColor     (Color4f(0.0,0.0,0.0,1.0)),
    _sfRightLineRightColor    (Color4f(0.0,0.0,0.0,1.0)),
    _sfBottomLineTopColor     (Color4f(0.0,0.0,0.0,1.0)),
    _sfBottomLineBottomColor  (Color4f(0.0,0.0,0.0,1.0))
{
}

MultiColorMatteBorderBase::MultiColorMatteBorderBase(const MultiColorMatteBorderBase &source) :
    Inherited(source),
    _sfLeftWidth              (source._sfLeftWidth              ),
    _sfRightWidth             (source._sfRightWidth             ),
    _sfTopWidth               (source._sfTopWidth               ),
    _sfBottomWidth            (source._sfBottomWidth            ),
    _sfLeftLineLeftColor      (source._sfLeftLineLeftColor      ),
    _sfLeftLineRightColor     (source._sfLeftLineRightColor     ),
    _sfTopLineTopColor        (source._sfTopLineTopColor        ),
    _sfTopLineBottomColor     (source._sfTopLineBottomColor     ),
    _sfRightLineLeftColor     (source._sfRightLineLeftColor     ),
    _sfRightLineRightColor    (source._sfRightLineRightColor    ),
    _sfBottomLineTopColor     (source._sfBottomLineTopColor     ),
    _sfBottomLineBottomColor  (source._sfBottomLineBottomColor  )
{
}


/*-------------------------- destructors ----------------------------------*/

MultiColorMatteBorderBase::~MultiColorMatteBorderBase(void)
{
}


GetFieldHandlePtr MultiColorMatteBorderBase::getHandleLeftWidth       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLeftWidth,
             this->getType().getFieldDesc(LeftWidthFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleLeftWidth      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLeftWidth,
             this->getType().getFieldDesc(LeftWidthFieldId),
             this));


    editSField(LeftWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleRightWidth      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfRightWidth,
             this->getType().getFieldDesc(RightWidthFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleRightWidth     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfRightWidth,
             this->getType().getFieldDesc(RightWidthFieldId),
             this));


    editSField(RightWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleTopWidth        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTopWidth,
             this->getType().getFieldDesc(TopWidthFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleTopWidth       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTopWidth,
             this->getType().getFieldDesc(TopWidthFieldId),
             this));


    editSField(TopWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleBottomWidth     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBottomWidth,
             this->getType().getFieldDesc(BottomWidthFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleBottomWidth    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBottomWidth,
             this->getType().getFieldDesc(BottomWidthFieldId),
             this));


    editSField(BottomWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleLeftLineLeftColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfLeftLineLeftColor,
             this->getType().getFieldDesc(LeftLineLeftColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleLeftLineLeftColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfLeftLineLeftColor,
             this->getType().getFieldDesc(LeftLineLeftColorFieldId),
             this));


    editSField(LeftLineLeftColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleLeftLineRightColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfLeftLineRightColor,
             this->getType().getFieldDesc(LeftLineRightColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleLeftLineRightColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfLeftLineRightColor,
             this->getType().getFieldDesc(LeftLineRightColorFieldId),
             this));


    editSField(LeftLineRightColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleTopLineTopColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfTopLineTopColor,
             this->getType().getFieldDesc(TopLineTopColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleTopLineTopColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfTopLineTopColor,
             this->getType().getFieldDesc(TopLineTopColorFieldId),
             this));


    editSField(TopLineTopColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleTopLineBottomColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfTopLineBottomColor,
             this->getType().getFieldDesc(TopLineBottomColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleTopLineBottomColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfTopLineBottomColor,
             this->getType().getFieldDesc(TopLineBottomColorFieldId),
             this));


    editSField(TopLineBottomColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleRightLineLeftColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfRightLineLeftColor,
             this->getType().getFieldDesc(RightLineLeftColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleRightLineLeftColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfRightLineLeftColor,
             this->getType().getFieldDesc(RightLineLeftColorFieldId),
             this));


    editSField(RightLineLeftColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleRightLineRightColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfRightLineRightColor,
             this->getType().getFieldDesc(RightLineRightColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleRightLineRightColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfRightLineRightColor,
             this->getType().getFieldDesc(RightLineRightColorFieldId),
             this));


    editSField(RightLineRightColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleBottomLineTopColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBottomLineTopColor,
             this->getType().getFieldDesc(BottomLineTopColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleBottomLineTopColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBottomLineTopColor,
             this->getType().getFieldDesc(BottomLineTopColorFieldId),
             this));


    editSField(BottomLineTopColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColorMatteBorderBase::getHandleBottomLineBottomColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBottomLineBottomColor,
             this->getType().getFieldDesc(BottomLineBottomColorFieldId),
             const_cast<MultiColorMatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColorMatteBorderBase::editHandleBottomLineBottomColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBottomLineBottomColor,
             this->getType().getFieldDesc(BottomLineBottomColorFieldId),
             this));


    editSField(BottomLineBottomColorFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void MultiColorMatteBorderBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MultiColorMatteBorder *pThis = static_cast<MultiColorMatteBorder *>(this);

    pThis->execSync(static_cast<MultiColorMatteBorder *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MultiColorMatteBorderBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MultiColorMatteBorder *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MultiColorMatteBorder *>(pRefAspect),
                  dynamic_cast<const MultiColorMatteBorder *>(this));

    return returnValue;
}
#endif

void MultiColorMatteBorderBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
