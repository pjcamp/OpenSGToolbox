/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComponentDecorator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOMPONENTDECORATORBASE_H_
#define _OSGCOMPONENTDECORATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponent.h" // Parent

#include "OSGComponentFields.h" // Decoratee type

#include "OSGComponentDecoratorFields.h"

//Event Producer Headers
#include "OSGActivity.h"
#include "OSGConsumableEventCombiner.h"

#include "OSGMouseEventDetailsFields.h"
#include "OSGMouseWheelEventDetailsFields.h"
#include "OSGKeyEventDetailsFields.h"
#include "OSGFocusEventDetailsFields.h"
#include "OSGComponentEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class ComponentDecorator;

//! \brief ComponentDecorator Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING ComponentDecoratorBase : public Component
{
  public:

    typedef Component Inherited;
    typedef Component ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ComponentDecorator);
    
    
    typedef MouseEventDetails  MouseMovedEventDetailsType;
    typedef MouseEventDetails  MouseDraggedEventDetailsType;
    typedef MouseEventDetails  MouseClickedEventDetailsType;
    typedef MouseEventDetails  MouseEnteredEventDetailsType;
    typedef MouseEventDetails  MouseExitedEventDetailsType;
    typedef MouseEventDetails  MousePressedEventDetailsType;
    typedef MouseEventDetails  MouseReleasedEventDetailsType;
    typedef MouseWheelEventDetails MouseWheelMovedEventDetailsType;
    typedef KeyEventDetails    KeyPressedEventDetailsType;
    typedef KeyEventDetails    KeyReleasedEventDetailsType;
    typedef KeyEventDetails    KeyTypedEventDetailsType;
    typedef FocusEventDetails  FocusGainedEventDetailsType;
    typedef FocusEventDetails  FocusLostEventDetailsType;
    typedef ComponentEventDetails ComponentHiddenEventDetailsType;
    typedef ComponentEventDetails ComponentVisibleEventDetailsType;
    typedef ComponentEventDetails ComponentMovedEventDetailsType;
    typedef ComponentEventDetails ComponentResizedEventDetailsType;
    typedef ComponentEventDetails ComponentEnabledEventDetailsType;
    typedef ComponentEventDetails ComponentDisabledEventDetailsType;

    typedef boost::signals2::signal<void (EventDetails* const            , UInt32)> BaseEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseMovedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseDraggedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseClickedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseEnteredEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseExitedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MousePressedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseReleasedEventType;
    typedef boost::signals2::signal<void (MouseWheelEventDetails* const, UInt32), ConsumableEventCombiner> MouseWheelMovedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyPressedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyReleasedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyTypedEventType;
    typedef boost::signals2::signal<void (FocusEventDetails* const, UInt32), ConsumableEventCombiner> FocusGainedEventType;
    typedef boost::signals2::signal<void (FocusEventDetails* const, UInt32), ConsumableEventCombiner> FocusLostEventType;
    typedef boost::signals2::signal<void (ComponentEventDetails* const, UInt32), ConsumableEventCombiner> ComponentHiddenEventType;
    typedef boost::signals2::signal<void (ComponentEventDetails* const, UInt32), ConsumableEventCombiner> ComponentVisibleEventType;
    typedef boost::signals2::signal<void (ComponentEventDetails* const, UInt32), ConsumableEventCombiner> ComponentMovedEventType;
    typedef boost::signals2::signal<void (ComponentEventDetails* const, UInt32), ConsumableEventCombiner> ComponentResizedEventType;
    typedef boost::signals2::signal<void (ComponentEventDetails* const, UInt32), ConsumableEventCombiner> ComponentEnabledEventType;
    typedef boost::signals2::signal<void (ComponentEventDetails* const, UInt32), ConsumableEventCombiner> ComponentDisabledEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        DecorateeFieldId        = Inherited::NextFieldId,
        NextFieldId             = DecorateeFieldId          + 1
    };

    static const OSG::BitVector DecorateeFieldMask =
        (TypeTraits<BitVector>::One << DecorateeFieldId);

    enum
    {
        MouseMovedEventId = 1,
        MouseDraggedEventId = MouseMovedEventId + 1,
        MouseClickedEventId = MouseDraggedEventId + 1,
        MouseEnteredEventId = MouseClickedEventId + 1,
        MouseExitedEventId = MouseEnteredEventId + 1,
        MousePressedEventId = MouseExitedEventId + 1,
        MouseReleasedEventId = MousePressedEventId + 1,
        MouseWheelMovedEventId = MouseReleasedEventId + 1,
        KeyPressedEventId = MouseWheelMovedEventId + 1,
        KeyReleasedEventId = KeyPressedEventId + 1,
        KeyTypedEventId = KeyReleasedEventId + 1,
        FocusGainedEventId = KeyTypedEventId + 1,
        FocusLostEventId = FocusGainedEventId + 1,
        ComponentHiddenEventId = FocusLostEventId + 1,
        ComponentVisibleEventId = ComponentHiddenEventId + 1,
        ComponentMovedEventId = ComponentVisibleEventId + 1,
        ComponentResizedEventId = ComponentMovedEventId + 1,
        ComponentEnabledEventId = ComponentResizedEventId + 1,
        ComponentDisabledEventId = ComponentEnabledEventId + 1,
        NextProducedEventId = ComponentDisabledEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    virtual       const SFUnrecComponentPtr *getSFDecoratee(void) const;

    virtual       SFPnt2f             *editSFPosition       (void);
    virtual const SFPnt2f             *getSFPosition        (void) const;

    virtual       SFVec2f             *editSFMinSize        (void);
    virtual const SFVec2f             *getSFMinSize         (void) const;

    virtual       SFVec2f             *editSFMaxSize        (void);
    virtual const SFVec2f             *getSFMaxSize         (void) const;

    virtual       SFVec2f             *editSFPreferredSize  (void);
    virtual const SFVec2f             *getSFPreferredSize   (void) const;

    virtual       SFVec2f             *editSFSize           (void);
    virtual const SFVec2f             *getSFSize            (void) const;

    virtual       SFBool              *editSFVisible        (void);
    virtual const SFBool              *getSFVisible         (void) const;

    virtual       SFBool              *editSFEnabled        (void);
    virtual const SFBool              *getSFEnabled         (void) const;

    virtual       SFBool              *editSFFocused        (void);
    virtual const SFBool              *getSFFocused         (void) const;
    virtual const SFUnrecChildLayoutConstraintsPtr *getSFConstraints    (void) const;
    virtual       SFUnrecChildLayoutConstraintsPtr *editSFConstraints    (void);
    virtual const SFUnrecBorderPtr    *getSFBorder         (void) const;
    virtual       SFUnrecBorderPtr    *editSFBorder         (void);
    virtual const SFUnrecLayerPtr     *getSFBackground     (void) const;
    virtual       SFUnrecLayerPtr     *editSFBackground     (void);
    virtual const SFUnrecBorderPtr    *getSFDisabledBorder (void) const;
    virtual       SFUnrecBorderPtr    *editSFDisabledBorder (void);
    virtual const SFUnrecLayerPtr     *getSFDisabledBackground(void) const;
    virtual       SFUnrecLayerPtr     *editSFDisabledBackground(void);

    virtual       SFBool              *editSFDragEnabled    (void);
    virtual const SFBool              *getSFDragEnabled     (void) const;
    virtual const SFUnrecTransferHandlerPtr *getSFTransferHandler(void) const;
    virtual       SFUnrecTransferHandlerPtr *editSFTransferHandler(void);
    virtual const SFUnrecBorderPtr    *getSFFocusedBorder  (void) const;
    virtual       SFUnrecBorderPtr    *editSFFocusedBorder  (void);
    virtual const SFUnrecLayerPtr     *getSFFocusedBackground(void) const;
    virtual       SFUnrecLayerPtr     *editSFFocusedBackground(void);
    virtual const SFUnrecBorderPtr    *getSFRolloverBorder (void) const;
    virtual       SFUnrecBorderPtr    *editSFRolloverBorder (void);
    virtual const SFUnrecLayerPtr     *getSFRolloverBackground(void) const;
    virtual       SFUnrecLayerPtr     *editSFRolloverBackground(void);

    virtual       SFString            *editSFToolTipText    (void);
    virtual const SFString            *getSFToolTipText     (void) const;

    virtual       SFReal32            *editSFOpacity        (void);
    virtual const SFReal32            *getSFOpacity         (void) const;

    virtual       SFBool              *editSFClipping       (void);
    virtual const SFBool              *getSFClipping        (void) const;
    virtual const SFUnrecPopupMenuPtr *getSFPopupMenu      (void) const;
    virtual       SFUnrecPopupMenuPtr *editSFPopupMenu      (void);
    virtual const SFUnrecLayerPtr     *getSFFocusedForeground(void) const;
    virtual       SFUnrecLayerPtr     *editSFFocusedForeground(void);
    virtual const SFUnrecLayerPtr     *getSFRolloverForeground(void) const;
    virtual       SFUnrecLayerPtr     *editSFRolloverForeground(void);
    virtual const SFUnrecLayerPtr     *getSFDisabledForeground(void) const;
    virtual       SFUnrecLayerPtr     *editSFDisabledForeground(void);
    virtual const SFUnrecLayerPtr     *getSFForeground     (void) const;
    virtual       SFUnrecLayerPtr     *editSFForeground     (void);

    virtual       SFUInt32            *editSFCursor         (void);
    virtual const SFUInt32            *getSFCursor          (void) const;

    virtual             Component *getDecoratee(void) const;

    virtual       Pnt2f               &editPosition       (void);
    virtual const Pnt2f               &getPosition        (void) const;

    virtual       Vec2f               &editMinSize        (void);
    virtual const Vec2f               &getMinSize         (void) const;

    virtual       Vec2f               &editMaxSize        (void);
    virtual const Vec2f               &getMaxSize         (void) const;

    virtual       Vec2f               &editPreferredSize  (void);
    virtual const Vec2f               &getPreferredSize   (void) const;

    virtual       Vec2f               &editSize           (void);
    virtual const Vec2f               &getSize            (void) const;

    virtual       bool                &editVisible        (void);
    virtual       bool                 getVisible         (void) const;

    virtual       bool                &editEnabled        (void);
    virtual       bool                 getEnabled         (void) const;

    virtual       bool                &editFocused        (void);
    virtual       bool                 getFocused         (void) const;

    virtual       LayoutConstraints * getConstraints    (void) const;

    virtual       Border * getBorder         (void) const;

    virtual       Layer * getBackground     (void) const;

    virtual       Border * getDisabledBorder (void) const;

    virtual       Layer * getDisabledBackground(void) const;

    virtual       bool                &editDragEnabled    (void);
    virtual       bool                 getDragEnabled     (void) const;

    virtual       TransferHandler * getTransferHandler(void) const;

    virtual       Border * getFocusedBorder  (void) const;

    virtual       Layer * getFocusedBackground(void) const;

    virtual       Border * getRolloverBorder (void) const;

    virtual       Layer * getRolloverBackground(void) const;

    virtual       std::string         &editToolTipText    (void);
    virtual const std::string         &getToolTipText     (void) const;

    virtual       Real32              &editOpacity        (void);
    virtual       Real32               getOpacity         (void) const;

    virtual       bool                &editClipping       (void);
    virtual       bool                 getClipping        (void) const;

    virtual       PopupMenu * getPopupMenu      (void) const;

    virtual       Layer * getFocusedForeground(void) const;

    virtual       Layer * getRolloverForeground(void) const;

    virtual       Layer * getDisabledForeground(void) const;

    virtual       Layer * getForeground     (void) const;

    virtual       UInt32              &editCursor         (void);
    virtual       UInt32               getCursor          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    virtual       void setDecoratee      (Component * const value);
    virtual void setPosition       (const Pnt2f &value);
    virtual void setMinSize        (const Vec2f &value);
    virtual void setMaxSize        (const Vec2f &value);
    virtual void setPreferredSize  (const Vec2f &value);
    virtual void setSize           (const Vec2f &value);
    virtual void setVisible        (const bool value);
    virtual void setEnabled        (const bool value);
    virtual void setFocused        (const bool value);
    virtual void setConstraints    (LayoutConstraints * const value);
    virtual void setBorder         (Border * const value);
    virtual void setBackground     (Layer * const value);
    virtual void setDisabledBorder (Border * const value);
    virtual void setDisabledBackground(Layer * const value);
    virtual void setDragEnabled    (const bool value);
    virtual void setTransferHandler(TransferHandler * const value);
    virtual void setFocusedBorder  (Border * const value);
    virtual void setFocusedBackground(Layer * const value);
    virtual void setRolloverBorder (Border * const value);
    virtual void setRolloverBackground(Layer * const value);
    virtual void setToolTipText    (const std::string &value);
    virtual void setOpacity        (const Real32 value);
    virtual void setClipping       (const bool value);
    virtual void setPopupMenu      (PopupMenu * const value);
    virtual void setFocusedForeground(Layer * const value);
    virtual void setRolloverForeground(Layer * const value);
    virtual void setDisabledForeground(Layer * const value);
    virtual void setForeground     (Layer * const value);
    virtual void setCursor         (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    virtual boost::signals2::connection attachActivity(UInt32 eventId,
                                                       Activity* TheActivity);
                                                         
    virtual UInt32                   getNumProducedEvents       (void                                ) const;
    virtual const EventDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    virtual const EventDescription *getProducedEventDescription(UInt32 ProducedEventId              ) const;
    virtual UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;
    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //MouseMoved
    boost::signals2::connection connectMouseMoved     (const MouseMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseMoved     (const MouseMovedEventType::group_type &group,
                                                       const MouseMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseMoved             (const MouseMovedEventType::group_type &group);
    void   disconnectAllSlotsMouseMoved     (void);
    bool   isEmptyMouseMoved                (void) const;
    UInt32 numSlotsMouseMoved               (void) const;
    
    //MouseDragged
    boost::signals2::connection connectMouseDragged   (const MouseDraggedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseDragged   (const MouseDraggedEventType::group_type &group,
                                                       const MouseDraggedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseDragged           (const MouseDraggedEventType::group_type &group);
    void   disconnectAllSlotsMouseDragged   (void);
    bool   isEmptyMouseDragged              (void) const;
    UInt32 numSlotsMouseDragged             (void) const;
    
    //MouseClicked
    boost::signals2::connection connectMouseClicked   (const MouseClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseClicked   (const MouseClickedEventType::group_type &group,
                                                       const MouseClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseClicked           (const MouseClickedEventType::group_type &group);
    void   disconnectAllSlotsMouseClicked   (void);
    bool   isEmptyMouseClicked              (void) const;
    UInt32 numSlotsMouseClicked             (void) const;
    
    //MouseEntered
    boost::signals2::connection connectMouseEntered   (const MouseEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseEntered   (const MouseEnteredEventType::group_type &group,
                                                       const MouseEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseEntered           (const MouseEnteredEventType::group_type &group);
    void   disconnectAllSlotsMouseEntered   (void);
    bool   isEmptyMouseEntered              (void) const;
    UInt32 numSlotsMouseEntered             (void) const;
    
    //MouseExited
    boost::signals2::connection connectMouseExited    (const MouseExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseExited    (const MouseExitedEventType::group_type &group,
                                                       const MouseExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseExited            (const MouseExitedEventType::group_type &group);
    void   disconnectAllSlotsMouseExited    (void);
    bool   isEmptyMouseExited               (void) const;
    UInt32 numSlotsMouseExited              (void) const;
    
    //MousePressed
    boost::signals2::connection connectMousePressed   (const MousePressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMousePressed   (const MousePressedEventType::group_type &group,
                                                       const MousePressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMousePressed           (const MousePressedEventType::group_type &group);
    void   disconnectAllSlotsMousePressed   (void);
    bool   isEmptyMousePressed              (void) const;
    UInt32 numSlotsMousePressed             (void) const;
    
    //MouseReleased
    boost::signals2::connection connectMouseReleased  (const MouseReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseReleased  (const MouseReleasedEventType::group_type &group,
                                                       const MouseReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseReleased          (const MouseReleasedEventType::group_type &group);
    void   disconnectAllSlotsMouseReleased  (void);
    bool   isEmptyMouseReleased             (void) const;
    UInt32 numSlotsMouseReleased            (void) const;
    
    //MouseWheelMoved
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedEventType::group_type &group,
                                                       const MouseWheelMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseWheelMoved        (const MouseWheelMovedEventType::group_type &group);
    void   disconnectAllSlotsMouseWheelMoved(void);
    bool   isEmptyMouseWheelMoved           (void) const;
    UInt32 numSlotsMouseWheelMoved          (void) const;
    
    //KeyPressed
    boost::signals2::connection connectKeyPressed     (const KeyPressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyPressed     (const KeyPressedEventType::group_type &group,
                                                       const KeyPressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyPressed             (const KeyPressedEventType::group_type &group);
    void   disconnectAllSlotsKeyPressed     (void);
    bool   isEmptyKeyPressed                (void) const;
    UInt32 numSlotsKeyPressed               (void) const;
    
    //KeyReleased
    boost::signals2::connection connectKeyReleased    (const KeyReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyReleased    (const KeyReleasedEventType::group_type &group,
                                                       const KeyReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyReleased            (const KeyReleasedEventType::group_type &group);
    void   disconnectAllSlotsKeyReleased    (void);
    bool   isEmptyKeyReleased               (void) const;
    UInt32 numSlotsKeyReleased              (void) const;
    
    //KeyTyped
    boost::signals2::connection connectKeyTyped       (const KeyTypedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyTyped       (const KeyTypedEventType::group_type &group,
                                                       const KeyTypedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyTyped               (const KeyTypedEventType::group_type &group);
    void   disconnectAllSlotsKeyTyped       (void);
    bool   isEmptyKeyTyped                  (void) const;
    UInt32 numSlotsKeyTyped                 (void) const;
    
    //FocusGained
    boost::signals2::connection connectFocusGained    (const FocusGainedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectFocusGained    (const FocusGainedEventType::group_type &group,
                                                       const FocusGainedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectFocusGained            (const FocusGainedEventType::group_type &group);
    void   disconnectAllSlotsFocusGained    (void);
    bool   isEmptyFocusGained               (void) const;
    UInt32 numSlotsFocusGained              (void) const;
    
    //FocusLost
    boost::signals2::connection connectFocusLost      (const FocusLostEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectFocusLost      (const FocusLostEventType::group_type &group,
                                                       const FocusLostEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectFocusLost              (const FocusLostEventType::group_type &group);
    void   disconnectAllSlotsFocusLost      (void);
    bool   isEmptyFocusLost                 (void) const;
    UInt32 numSlotsFocusLost                (void) const;
    
    //ComponentHidden
    boost::signals2::connection connectComponentHidden(const ComponentHiddenEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectComponentHidden(const ComponentHiddenEventType::group_type &group,
                                                       const ComponentHiddenEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectComponentHidden        (const ComponentHiddenEventType::group_type &group);
    void   disconnectAllSlotsComponentHidden(void);
    bool   isEmptyComponentHidden           (void) const;
    UInt32 numSlotsComponentHidden          (void) const;
    
    //ComponentVisible
    boost::signals2::connection connectComponentVisible(const ComponentVisibleEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectComponentVisible(const ComponentVisibleEventType::group_type &group,
                                                       const ComponentVisibleEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectComponentVisible       (const ComponentVisibleEventType::group_type &group);
    void   disconnectAllSlotsComponentVisible(void);
    bool   isEmptyComponentVisible          (void) const;
    UInt32 numSlotsComponentVisible         (void) const;
    
    //ComponentMoved
    boost::signals2::connection connectComponentMoved (const ComponentMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectComponentMoved (const ComponentMovedEventType::group_type &group,
                                                       const ComponentMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectComponentMoved         (const ComponentMovedEventType::group_type &group);
    void   disconnectAllSlotsComponentMoved (void);
    bool   isEmptyComponentMoved            (void) const;
    UInt32 numSlotsComponentMoved           (void) const;
    
    //ComponentResized
    boost::signals2::connection connectComponentResized(const ComponentResizedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectComponentResized(const ComponentResizedEventType::group_type &group,
                                                       const ComponentResizedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectComponentResized       (const ComponentResizedEventType::group_type &group);
    void   disconnectAllSlotsComponentResized(void);
    bool   isEmptyComponentResized          (void) const;
    UInt32 numSlotsComponentResized         (void) const;
    
    //ComponentEnabled
    boost::signals2::connection connectComponentEnabled(const ComponentEnabledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectComponentEnabled(const ComponentEnabledEventType::group_type &group,
                                                       const ComponentEnabledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectComponentEnabled       (const ComponentEnabledEventType::group_type &group);
    void   disconnectAllSlotsComponentEnabled(void);
    bool   isEmptyComponentEnabled          (void) const;
    UInt32 numSlotsComponentEnabled         (void) const;
    
    //ComponentDisabled
    boost::signals2::connection connectComponentDisabled(const ComponentDisabledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectComponentDisabled(const ComponentDisabledEventType::group_type &group,
                                                       const ComponentDisabledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectComponentDisabled      (const ComponentDisabledEventType::group_type &group);
    void   disconnectAllSlotsComponentDisabled(void);
    bool   isEmptyComponentDisabled         (void) const;
    UInt32 numSlotsComponentDisabled        (void) const;
    
    
    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    MouseMovedEventType _MouseMovedEvent;
    MouseDraggedEventType _MouseDraggedEvent;
    MouseClickedEventType _MouseClickedEvent;
    MouseEnteredEventType _MouseEnteredEvent;
    MouseExitedEventType _MouseExitedEvent;
    MousePressedEventType _MousePressedEvent;
    MouseReleasedEventType _MouseReleasedEvent;
    MouseWheelMovedEventType _MouseWheelMovedEvent;
    KeyPressedEventType _KeyPressedEvent;
    KeyReleasedEventType _KeyReleasedEvent;
    KeyTypedEventType _KeyTypedEvent;
    FocusGainedEventType _FocusGainedEvent;
    FocusLostEventType _FocusLostEvent;
    ComponentHiddenEventType _ComponentHiddenEvent;
    ComponentVisibleEventType _ComponentVisibleEvent;
    ComponentMovedEventType _ComponentMovedEvent;
    ComponentResizedEventType _ComponentResizedEvent;
    ComponentEnabledEventType _ComponentEnabledEvent;
    ComponentDisabledEventType _ComponentDisabledEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecComponentPtr _sfDecoratee;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ComponentDecoratorBase(void);
    ComponentDecoratorBase(const ComponentDecoratorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ComponentDecoratorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ComponentDecorator *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Parent linking                                               */
    /*! \{                                                                 */

    virtual bool linkParent  (FieldContainer * const pParent,
                              UInt16           const childFieldId,
                              UInt16           const parentFieldId);
    virtual bool unlinkParent(FieldContainer * const pParent,
                              UInt16           const parentFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleDecoratee (void) const;
    EditFieldHandlePtr editHandleDecoratee(void);

    GetFieldHandlePtr  getHandlePosition        (void) const;
    EditFieldHandlePtr editHandlePosition       (void);
    GetFieldHandlePtr  getHandleClipBounds      (void) const;
    EditFieldHandlePtr editHandleClipBounds     (void);
    GetFieldHandlePtr  getHandleMinSize         (void) const;
    EditFieldHandlePtr editHandleMinSize        (void);
    GetFieldHandlePtr  getHandleMaxSize         (void) const;
    EditFieldHandlePtr editHandleMaxSize        (void);
    GetFieldHandlePtr  getHandlePreferredSize   (void) const;
    EditFieldHandlePtr editHandlePreferredSize  (void);
    GetFieldHandlePtr  getHandleSize            (void) const;
    EditFieldHandlePtr editHandleSize           (void);
    GetFieldHandlePtr  getHandleVisible         (void) const;
    EditFieldHandlePtr editHandleVisible        (void);
    GetFieldHandlePtr  getHandleEnabled         (void) const;
    EditFieldHandlePtr editHandleEnabled        (void);
    GetFieldHandlePtr  getHandleFocused         (void) const;
    EditFieldHandlePtr editHandleFocused        (void);
    GetFieldHandlePtr  getHandleConstraints     (void) const;
    EditFieldHandlePtr editHandleConstraints    (void);
    GetFieldHandlePtr  getHandleBorder          (void) const;
    EditFieldHandlePtr editHandleBorder         (void);
    GetFieldHandlePtr  getHandleBackground      (void) const;
    EditFieldHandlePtr editHandleBackground     (void);
    GetFieldHandlePtr  getHandleDisabledBorder  (void) const;
    EditFieldHandlePtr editHandleDisabledBorder (void);
    GetFieldHandlePtr  getHandleDisabledBackground (void) const;
    EditFieldHandlePtr editHandleDisabledBackground(void);
    GetFieldHandlePtr  getHandleDragEnabled     (void) const;
    EditFieldHandlePtr editHandleDragEnabled    (void);
    GetFieldHandlePtr  getHandleTransferHandler (void) const;
    EditFieldHandlePtr editHandleTransferHandler(void);
    GetFieldHandlePtr  getHandleFocusedBorder   (void) const;
    EditFieldHandlePtr editHandleFocusedBorder  (void);
    GetFieldHandlePtr  getHandleFocusedBackground (void) const;
    EditFieldHandlePtr editHandleFocusedBackground(void);
    GetFieldHandlePtr  getHandleRolloverBorder  (void) const;
    EditFieldHandlePtr editHandleRolloverBorder (void);
    GetFieldHandlePtr  getHandleRolloverBackground (void) const;
    EditFieldHandlePtr editHandleRolloverBackground(void);
    GetFieldHandlePtr  getHandleToolTipText     (void) const;
    EditFieldHandlePtr editHandleToolTipText    (void);
    GetFieldHandlePtr  getHandleOpacity         (void) const;
    EditFieldHandlePtr editHandleOpacity        (void);
    GetFieldHandlePtr  getHandleParentContainer (void) const;
    EditFieldHandlePtr editHandleParentContainer(void);
    GetFieldHandlePtr  getHandleClipping        (void) const;
    EditFieldHandlePtr editHandleClipping       (void);
    GetFieldHandlePtr  getHandlePopupMenu       (void) const;
    EditFieldHandlePtr editHandlePopupMenu      (void);
    GetFieldHandlePtr  getHandleFocusedForeground (void) const;
    EditFieldHandlePtr editHandleFocusedForeground(void);
    GetFieldHandlePtr  getHandleRolloverForeground (void) const;
    EditFieldHandlePtr editHandleRolloverForeground(void);
    GetFieldHandlePtr  getHandleDisabledForeground (void) const;
    EditFieldHandlePtr editHandleDisabledForeground(void);
    GetFieldHandlePtr  getHandleForeground      (void) const;
    EditFieldHandlePtr editHandleForeground     (void);
    GetFieldHandlePtr  getHandleCursor          (void) const;
    EditFieldHandlePtr editHandleCursor         (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleMouseMovedSignal(void) const;
    GetEventHandlePtr getHandleMouseDraggedSignal(void) const;
    GetEventHandlePtr getHandleMouseClickedSignal(void) const;
    GetEventHandlePtr getHandleMouseEnteredSignal(void) const;
    GetEventHandlePtr getHandleMouseExitedSignal(void) const;
    GetEventHandlePtr getHandleMousePressedSignal(void) const;
    GetEventHandlePtr getHandleMouseReleasedSignal(void) const;
    GetEventHandlePtr getHandleMouseWheelMovedSignal(void) const;
    GetEventHandlePtr getHandleKeyPressedSignal(void) const;
    GetEventHandlePtr getHandleKeyReleasedSignal(void) const;
    GetEventHandlePtr getHandleKeyTypedSignal(void) const;
    GetEventHandlePtr getHandleFocusGainedSignal(void) const;
    GetEventHandlePtr getHandleFocusLostSignal(void) const;
    GetEventHandlePtr getHandleComponentHiddenSignal(void) const;
    GetEventHandlePtr getHandleComponentVisibleSignal(void) const;
    GetEventHandlePtr getHandleComponentMovedSignal(void) const;
    GetEventHandlePtr getHandleComponentResizedSignal(void) const;
    GetEventHandlePtr getHandleComponentEnabledSignal(void) const;
    GetEventHandlePtr getHandleComponentDisabledSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


    virtual       SFPnt4f             *editSFClipBounds     (void);
    virtual const SFPnt4f             *getSFClipBounds      (void) const;


    virtual       Pnt4f               &editClipBounds     (void);
    virtual const Pnt4f               &getClipBounds      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    virtual void setClipBounds     (const Pnt4f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceMouseMoved          (MouseMovedEventDetailsType* const e);
    void produceMouseDragged        (MouseDraggedEventDetailsType* const e);
    void produceMouseClicked        (MouseClickedEventDetailsType* const e);
    void produceMouseEntered        (MouseEnteredEventDetailsType* const e);
    void produceMouseExited         (MouseExitedEventDetailsType* const e);
    void produceMousePressed        (MousePressedEventDetailsType* const e);
    void produceMouseReleased       (MouseReleasedEventDetailsType* const e);
    void produceMouseWheelMoved     (MouseWheelMovedEventDetailsType* const e);
    void produceKeyPressed          (KeyPressedEventDetailsType* const e);
    void produceKeyReleased         (KeyReleasedEventDetailsType* const e);
    void produceKeyTyped            (KeyTypedEventDetailsType* const e);
    void produceFocusGained         (FocusGainedEventDetailsType* const e);
    void produceFocusLost           (FocusLostEventDetailsType* const e);
    void produceComponentHidden     (ComponentHiddenEventDetailsType* const e);
    void produceComponentVisible    (ComponentVisibleEventDetailsType* const e);
    void produceComponentMoved      (ComponentMovedEventDetailsType* const e);
    void produceComponentResized    (ComponentResizedEventDetailsType* const e);
    void produceComponentEnabled    (ComponentEnabledEventDetailsType* const e);
    void produceComponentDisabled   (ComponentDisabledEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ComponentDecoratorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ComponentDecoratorBase &source);
};

typedef ComponentDecoratorBase *ComponentDecoratorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCOMPONENTDECORATORBASE_H_ */
