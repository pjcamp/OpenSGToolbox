/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComponentDecorator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGWindowEventProducer.h"       // Cursor default header

#include "OSGLayoutConstraints.h"       // Constraints Class
#include "OSGBorder.h"                  // Border Class
#include "OSGLayer.h"                   // Background Class
#include "OSGComponent.h"               // ToolTip Class
#include "OSGFieldContainer.h"          // ParentContainer Class
#include "OSGPopupMenu.h"               // PopupMenu Class

#include "OSGComponentDecoratorBase.h"
#include "OSGComponentDecorator.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ComponentDecorator
    \brief An element of a graphical user interface.

    A Component represents a single element of a user interface. In other
    frameworks they may be called widgets or controls. All concrete GUI elements
    inherit from Component, like OSG::Button, OSG::Label, OSG::TextField,
    OSG::InternalWindow, etc.

    \par Component states:
    Components have states for Enabled, Focused,
    MouseOver, and Visible.  If a Component has Enabled == false, it doesn't receive
    or produce any events. If a Component has Visible == false, it is not drawn. 

    \par Event response:
    Components can respond to Mouse, Key, and Focus events.

    \par Event production: Components produce Mouse, Key, Focus, Component, and
    ToolTip events if enabled.

    \par Drawing: Component handles setting up the clipping of a component, and
    the drawing of the Border, Background, and Foreground.  The Border,
    Background, and Foreground used when drawing a Component depends on it's
    state, and can also be overridden by inheriting classes. There are separate
    Border, Background, and Foregrounds for Disabled, Focused, Rollover, and No stat
    states.

    \par Layout: The position and size of a Component is controlled by the
    OSG::ComponentContainer that contains it. For simple OSG::ComponentContainer
    like OSG::Panel, the OSG::Layout attached to the container is used to control
    the position and size of components.  For more complex containers like
    OSG::SplitPanel, the position and size are controlled by the specific
    behavior of the container.
    \warning User code should never set the position or size of a Component
    directly, this is controlled by the OSG::ComponentContainer of the Component.

    \par Focus: Zero, or one Component can have focus in a OSG::InternalWindow.
    Component has methods for taking, removing, or moving the focus.

    \par ToolTips: A component can have a ToolTip that will appear after a
    configurable amount of time passes with the mouse over the Component.

    \par PopupMenus: A OSG::PopupMenu can be attached to a Component that will
    be activated with a right-click mouse interaction.

    \par Scrolling: Components can be contained in a OSG::Viewport or a
    OSG::ScrollPanel for viewing large Components.

    \par Inheriting: Concrete GUI elements that inherit from Component must
    implement drawInternal().
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ComponentPtr ComponentDecoratorBase::_sfDecoratee
    The object being decorated
*/

/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ComponentDecorator *>::_type("ComponentDecoratorPtr", "ComponentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ComponentDecorator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ComponentDecorator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ComponentDecorator *,
                           0);

DataType &FieldTraits< ComponentDecorator *, 1 >::getType(void)
{
    return FieldTraits<ComponentDecorator *, 0>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      ComponentDecorator *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ComponentDecoratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "decoratee",
        "undocumented decoratee",
        DecorateeFieldId, DecorateeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ComponentDecorator::editHandleDecoratee),
        static_cast<FieldGetMethodSig >(&ComponentDecorator::getHandleDecoratee ));

    oType.addInitialDesc(pDesc);
}


ComponentDecoratorBase::TypeObject ComponentDecoratorBase::_type(
    ComponentDecoratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ComponentDecorator::initMethod,
    ComponentDecorator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ComponentDecorator::classDescInserter),
    false,
    StateFieldMask,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"Component\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"true\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    fieldsUnmarkedOnCreate=\"StateFieldMask\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    childFields=\"multi\"\n"
    "    >\n"
    "    \\brief An element of a graphical user interface.\n"
    "\n"
    "    A Component represents a single element of a user interface. In other\n"
    "    frameworks they may be called widgets or controls. All concrete GUI elements\n"
    "    inherit from Component, like OSG::Button, OSG::Label, OSG::TextField,\n"
    "    OSG::InternalWindow, etc.\n"
    "\n"
    "    \\par Component states:\n"
    "    Components have states for Enabled, Focused,\n"
    "    MouseOver, and Visible.  If a Component has Enabled == false, it doesn't receive\n"
    "    or produce any events. If a Component has Visible == false, it is not drawn. \n"
    "\n"
    "    \\par Event response:\n"
    "    Components can respond to Mouse, Key, and Focus events.\n"
    "\n"
    "    \\par Event production: Components produce Mouse, Key, Focus, Component, and\n"
    "    ToolTip events if enabled.\n"
    "\n"
    "    \\par Drawing: Component handles setting up the clipping of a component, and\n"
    "    the drawing of the Border, Background, and Foreground.  The Border,\n"
    "    Background, and Foreground used when drawing a Component depends on it's\n"
    "    state, and can also be overridden by inheriting classes. There are separate\n"
    "    Border, Background, and Foregrounds for Disabled, Focused, Rollover, and No stat\n"
    "    states.\n"
    "\n"
    "    \\par Layout: The position and size of a Component is controlled by the\n"
    "    OSG::ComponentContainer that contains it. For simple OSG::ComponentContainer\n"
    "    like OSG::Panel, the OSG::Layout attached to the container is used to control\n"
    "    the position and size of components.  For more complex containers like\n"
    "    OSG::SplitPanel, the position and size are controlled by the specific\n"
    "    behavior of the container.\n"
    "    \\warning User code should never set the position or size of a Component\n"
    "    directly, this is controlled by the OSG::ComponentContainer of the Component.\n"
    "\n"
    "\n"
    "    \\par Focus: Zero, or one Component can have focus in a OSG::InternalWindow.\n"
    "    Component has methods for taking, removing, or moving the focus.\n"
    "\n"
    "    \\par ToolTips: A component can have a ToolTip that will appear after a\n"
    "    configurable amount of time passes with the mouse over the Component.\n"
    "\n"
    "    \\par PopupMenus: A OSG::PopupMenu can be attached to a Component that will\n"
    "    be activated with a right-click mouse interaction.\n"
    "\n"
    "    \\par Scrolling: Components can be contained in a OSG::Viewport or a\n"
    "    OSG::ScrollPanel for viewing large Components.\n"
    "\n"
    "    \\par Inheriting: Concrete GUI elements that inherit from Component must\n"
    "    implement drawInternal().\n"
    "    <Field\n"
    "        name=\"Position\"\n"
    "        type=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0,0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The position of the Component, relative to it parent container.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ClipBounds\"\n"
    "        type=\"Pnt4f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0.0f,0.0f,0.0f,0.0f\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The clipping bounds of the Component.  The indexing of the bounds are: 0=Left,\n"
    "        1=Right, 2=Top, 3=Bottom.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"MinSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0,0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The minimum suggested size that this Component should be assigned by a parent\n"
    "        container\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"MaxSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"32767,32767\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The maximum suggested size that this Component should be assigned by a parent\n"
    "        container\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"PreferredSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"1,1\"\n"
    "        >\n"
    "        The preferred suggested size that this Component should be assigned by a parent\n"
    "        container\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Size\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The size of the Component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"State\"\n"
    "        type=\"UInt64\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Indicates the states of the Component. States include: Enabled, Visible, Focused, MouseOver, etc;\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Constraints\"\n"
    "        type=\"LayoutConstraints\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentComponent\"\n"
    "        >\n"
    "        Specific OSG::LayoutConstraints that may be used by the OSG::Layout of \n"
    "        the parent container of this Component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Border\"\n"
    "        type=\"Border\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when this Component has no state.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Background\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component has no state.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DisabledBorder\"\n"
    "        type=\"Border\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when this Component is disabled.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DisabledBackground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component is disabled.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DragEnabled\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Controls whether this Component creates drag-and-drop events when the \n"
    "        mouse is dragged.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ScrollTrackingCharacteristics\"\n"
    "        type=\"UInt16\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"Component::SCROLLABLE_TRACKING_OFF\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Controls scrolling characteristics.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"FocusedBorder\"\n"
    "        type=\"Border\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"pointer\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when this Component is focused.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"FocusedBackground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component is focused.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RolloverBorder\"\n"
    "        type=\"Border\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when the mouse is hovering over this component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RolloverBackground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when the mouse is hovering over this component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"FocusedForeground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The foreground to draw when this Component is focused.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RolloverForeground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The foreground to draw when the mouse is hovering over this component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DisabledForeground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The foreground to draw when this Component is disabled.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Foreground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component has no state.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ToolTip\"\n"
    "        type=\"Component\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "        The ToolTip used by this Component.  If NULL, then no ToolTip is used.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Opacity\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1.0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The opacity this Compnent is drawn with.  0.0 = transparent, 1.0 = opaque.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ParentContainer\"\n"
    "        type=\"FieldContainer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"none\"\n"
    "        category=\"parentpointer\"\n"
    "        >\n"
    "        The Component Container this Component is contained in.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Clipping\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Controls whether clipping is used when drawing this component. Under most\n"
    "        conditions this should be on, otherwise the Component may draw outside of its\n"
    "        boundaries.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"PopupMenu\"\n"
    "        type=\"PopupMenu\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The OSG::PopupMenu to use for this Component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Cursor\"\n"
    "        type=\"UInt32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"WindowEventProducer::CURSOR_POINTER\"\n"
    "        defaultHeader=\"OSGWindowEventProducer.h\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The cursor to use when the mouse is hovering over this Component.\n"
    "    </Field>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseMoved\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and moves.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseDragged\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and moves \n"
    "        when a mouse button is down.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseClicked\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and a \n"
    "        mouse button is clicked.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseEntered\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse enters this Component.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseExited\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse exits this Component.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MousePressed\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and a \n"
    "        mouse button is pressed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseReleased\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and a \n"
    "        mouse button is released.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseWheelMoved\"\n"
    "        detailsType=\"MouseWheelEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and the\n"
    "        mouse wheel is moved.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyPressed\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component has focused and a keyboard key is \n"
    "        pressed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyReleased\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component has focused and a keyboard key is \n"
    "        released.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyTyped\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component has focused and a keyboard key is \n"
    "        typed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"FocusGained\"\n"
    "        detailsType=\"FocusEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component gains focus.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"FocusLost\"\n"
    "        detailsType=\"FocusEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component loses focus.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentHidden\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Visible field is set to false.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentVisible\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Visible field is set to true.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentMoved\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Position field changes.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentResized\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Size field changes.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentEnabled\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Enabled field is set to true.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentDisabled\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Enabled field is set to false.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ToolTipActivated\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the ToolTip for this Component is activated.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ToolTipDeactivated\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the ToolTip for this Component is deactivated.\n"
    "    </ProducedEvent>\n"
    "</FieldContainer>\n",
    "\\brief An element of a graphical user interface.\n"
    "\n"
    "A Component represents a single element of a user interface. In other\n"
    "frameworks they may be called widgets or controls. All concrete GUI elements\n"
    "inherit from Component, like OSG::Button, OSG::Label, OSG::TextField,\n"
    "OSG::InternalWindow, etc.\n"
    "\n"
    "\\par Component states:\n"
    "Components have states for Enabled, Focused,\n"
    "MouseOver, and Visible.  If a Component has Enabled == false, it doesn't receive\n"
    "or produce any events. If a Component has Visible == false, it is not drawn. \n"
    "\n"
    "\\par Event response:\n"
    "Components can respond to Mouse, Key, and Focus events.\n"
    "\n"
    "\\par Event production: Components produce Mouse, Key, Focus, Component, and\n"
    "ToolTip events if enabled.\n"
    "\n"
    "\\par Drawing: Component handles setting up the clipping of a component, and\n"
    "the drawing of the Border, Background, and Foreground.  The Border,\n"
    "Background, and Foreground used when drawing a Component depends on it's\n"
    "state, and can also be overridden by inheriting classes. There are separate\n"
    "Border, Background, and Foregrounds for Disabled, Focused, Rollover, and No stat\n"
    "states.\n"
    "\n"
    "\\par Layout: The position and size of a Component is controlled by the\n"
    "OSG::ComponentContainer that contains it. For simple OSG::ComponentContainer\n"
    "like OSG::Panel, the OSG::Layout attached to the container is used to control\n"
    "the position and size of components.  For more complex containers like\n"
    "OSG::SplitPanel, the position and size are controlled by the specific\n"
    "behavior of the container.\n"
    "\\warning User code should never set the position or size of a Component\n"
    "directly, this is controlled by the OSG::ComponentContainer of the Component.\n"
    "\n"
    "\n"
    "\\par Focus: Zero, or one Component can have focus in a OSG::InternalWindow.\n"
    "Component has methods for taking, removing, or moving the focus.\n"
    "\n"
    "\\par ToolTips: A component can have a ToolTip that will appear after a\n"
    "configurable amount of time passes with the mouse over the Component.\n"
    "\n"
    "\\par PopupMenus: A OSG::PopupMenu can be attached to a Component that will\n"
    "be activated with a right-click mouse interaction.\n"
    "\n"
    "\\par Scrolling: Components can be contained in a OSG::Viewport or a\n"
    "OSG::ScrollPanel for viewing large Components.\n"
    "\n"
    "\\par Inheriting: Concrete GUI elements that inherit from Component must\n"
    "implement drawInternal().\n"
    );

//! ComponentDecorator Produced Events

EventDescription *ComponentDecoratorBase::_eventDesc[] =
{
    new EventDescription("MouseMoved", 
                          "Event produced when the mouse is hovering over this Component and moves.\n",
                          MouseMovedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseMovedSignal)),

    new EventDescription("MouseDragged", 
                          "Event produced when the mouse is hovering over this Component and moves \n"
                          "when a mouse button is down.\n",
                          MouseDraggedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseDraggedSignal)),

    new EventDescription("MouseClicked", 
                          "Event produced when the mouse is hovering over this Component and a \n"
                          "mouse button is clicked.\n",
                          MouseClickedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseClickedSignal)),

    new EventDescription("MouseEntered", 
                          "Event produced when the mouse enters this Component.\n",
                          MouseEnteredEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseEnteredSignal)),

    new EventDescription("MouseExited", 
                          "Event produced when the mouse exits this Component.\n",
                          MouseExitedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseExitedSignal)),

    new EventDescription("MousePressed", 
                          "Event produced when the mouse is hovering over this Component and a \n"
                          "mouse button is pressed.\n",
                          MousePressedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMousePressedSignal)),

    new EventDescription("MouseReleased", 
                          "Event produced when the mouse is hovering over this Component and a \n"
                          "mouse button is released.\n",
                          MouseReleasedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseReleasedSignal)),

    new EventDescription("MouseWheelMoved", 
                          "Event produced when the mouse is hovering over this Component and the\n"
                          "mouse wheel is moved.\n",
                          MouseWheelMovedEventId, 
                          FieldTraits<MouseWheelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseWheelMovedSignal)),

    new EventDescription("KeyPressed", 
                          "Event produced when this Component has focused and a keyboard key is \n"
                          "pressed.\n",
                          KeyPressedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleKeyPressedSignal)),

    new EventDescription("KeyReleased", 
                          "Event produced when this Component has focused and a keyboard key is \n"
                          "released.\n",
                          KeyReleasedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleKeyReleasedSignal)),

    new EventDescription("KeyTyped", 
                          "Event produced when this Component has focused and a keyboard key is \n"
                          "typed.\n",
                          KeyTypedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleKeyTypedSignal)),

    new EventDescription("FocusGained", 
                          "Event produced when this Component gains focus.\n",
                          FocusGainedEventId, 
                          FieldTraits<FocusEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleFocusGainedSignal)),

    new EventDescription("FocusLost", 
                          "Event produced when this Component loses focus.\n",
                          FocusLostEventId, 
                          FieldTraits<FocusEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleFocusLostSignal)),

    new EventDescription("ComponentHidden", 
                          "Event produced when this Component's Visible field is set to false.\n",
                          ComponentHiddenEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentHiddenSignal)),

    new EventDescription("ComponentVisible", 
                          "Event produced when this Component's Visible field is set to true.\n",
                          ComponentVisibleEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentVisibleSignal)),

    new EventDescription("ComponentMoved", 
                          "Event produced when this Component's Position field changes.\n",
                          ComponentMovedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentMovedSignal)),

    new EventDescription("ComponentResized", 
                          "Event produced when this Component's Size field changes.\n",
                          ComponentResizedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentResizedSignal)),

    new EventDescription("ComponentEnabled", 
                          "Event produced when this Component's Enabled field is set to true.\n",
                          ComponentEnabledEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentEnabledSignal)),

    new EventDescription("ComponentDisabled", 
                          "Event produced when this Component's Enabled field is set to false.\n",
                          ComponentDisabledEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentDisabledSignal)),

    new EventDescription("ToolTipActivated", 
                          "Event produced when the ToolTip for this Component is activated.\n",
                          ToolTipActivatedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleToolTipActivatedSignal)),

    new EventDescription("ToolTipDeactivated", 
                          "Event produced when the ToolTip for this Component is deactivated.\n",
                          ToolTipDeactivatedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleToolTipDeactivatedSignal))

};

EventProducerType ComponentDecoratorBase::_producerType(
    "ComponentDecoratorProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComponentDecoratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ComponentDecoratorBase::getType(void) const
{
    return _type;
}

const EventProducerType &ComponentDecoratorBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 ComponentDecoratorBase::getContainerSize(void) const
{
    return sizeof(ComponentDecorator);
}

/*------------------------- decorator get ------------------------------*/

const SFUnrecComponentPtr *ComponentDecoratorBase::getSFDecoratee(void) const
{
    return &_sfDecoratee;
}

SFPnt2f *ComponentDecoratorBase::editSFPosition(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFPosition();
    }
    else
    {
        return NULL;
    }
}

const SFPnt2f *ComponentDecoratorBase::getSFPosition(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFPosition();
    }
    else
    {
        return NULL;
    }
}

SFPnt4f *ComponentDecoratorBase::editSFClipBounds(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFClipBounds();
    }
    else
    {
        return NULL;
    }
}

const SFPnt4f *ComponentDecoratorBase::getSFClipBounds(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFClipBounds();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFMinSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFMinSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFMinSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFMinSize();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFMaxSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFMaxSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFMaxSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFMaxSize();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFPreferredSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFPreferredSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFPreferredSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFPreferredSize();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFSize();
    }
    else
    {
        return NULL;
    }
}

SFUInt64 *ComponentDecoratorBase::editSFState(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFState();
    }
    else
    {
        return NULL;
    }
}

const SFUInt64 *ComponentDecoratorBase::getSFState(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFState();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfConstraints field.
const SFUnrecChildLayoutConstraintsPtr *ComponentDecoratorBase::getSFConstraints(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFConstraints();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfConstraints field.
SFUnrecChildLayoutConstraintsPtr *ComponentDecoratorBase::editSFConstraints(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFConstraints();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFBackground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfDisabledBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFDisabledBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDisabledBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfDisabledBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFDisabledBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDisabledBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfDisabledBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFDisabledBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDisabledBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfDisabledBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFDisabledBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDisabledBackground();
    }
    else
    {
        return NULL;
    }
}

SFBool *ComponentDecoratorBase::editSFDragEnabled(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDragEnabled();
    }
    else
    {
        return NULL;
    }
}

const SFBool *ComponentDecoratorBase::getSFDragEnabled(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDragEnabled();
    }
    else
    {
        return NULL;
    }
}

SFUInt16 *ComponentDecoratorBase::editSFScrollTrackingCharacteristics(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFScrollTrackingCharacteristics();
    }
    else
    {
        return NULL;
    }
}

const SFUInt16 *ComponentDecoratorBase::getSFScrollTrackingCharacteristics(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFScrollTrackingCharacteristics();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfFocusedBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFFocusedBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFFocusedBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfFocusedBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFFocusedBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFFocusedBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfFocusedBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFFocusedBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFFocusedBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfFocusedBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFFocusedBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFFocusedBackground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfRolloverBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFRolloverBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFRolloverBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfRolloverBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFRolloverBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFRolloverBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfRolloverBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFRolloverBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFRolloverBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfRolloverBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFRolloverBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFRolloverBackground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfFocusedForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFFocusedForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFFocusedForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfFocusedForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFFocusedForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFFocusedForeground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfRolloverForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFRolloverForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFRolloverForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfRolloverForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFRolloverForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFRolloverForeground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfDisabledForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFDisabledForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDisabledForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfDisabledForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFDisabledForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDisabledForeground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFForeground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfToolTip field.
const SFUnrecComponentPtr *ComponentDecoratorBase::getSFToolTip(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFToolTip();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfToolTip field.
SFUnrecComponentPtr *ComponentDecoratorBase::editSFToolTip(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFToolTip();
    }
    else
    {
        return NULL;
    }
}

SFReal32 *ComponentDecoratorBase::editSFOpacity(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFOpacity();
    }
    else
    {
        return NULL;
    }
}

const SFReal32 *ComponentDecoratorBase::getSFOpacity(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFOpacity();
    }
    else
    {
        return NULL;
    }
}


SFBool *ComponentDecoratorBase::editSFClipping(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFClipping();
    }
    else
    {
        return NULL;
    }
}

const SFBool *ComponentDecoratorBase::getSFClipping(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFClipping();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfPopupMenu field.
const SFUnrecPopupMenuPtr *ComponentDecoratorBase::getSFPopupMenu(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFPopupMenu();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfPopupMenu field.
SFUnrecPopupMenuPtr *ComponentDecoratorBase::editSFPopupMenu(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFPopupMenu();
    }
    else
    {
        return NULL;
    }
}

SFUInt32 *ComponentDecoratorBase::editSFCursor(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFCursor();
    }
    else
    {
        return NULL;
    }
}

const SFUInt32 *ComponentDecoratorBase::getSFCursor(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFCursor();
    }
    else
    {
        return NULL;
    }
}






/*------------------------------ access -----------------------------------*/

UInt32 ComponentDecoratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        returnValue += _sfDecoratee.getBinSize();
    }

    return returnValue;
}

void ComponentDecoratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyToBin(pMem);
    }
}

void ComponentDecoratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        editSField(DecorateeFieldMask);
        _sfDecoratee.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void ComponentDecoratorBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseMovedEventDetailsType* const>(e));

        _MouseMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseMovedEvent(dynamic_cast<MouseMovedEventDetailsType* const>(e), MouseMovedEventId);
        break;
    case MouseDraggedEventId:
        OSG_ASSERT(dynamic_cast<MouseDraggedEventDetailsType* const>(e));

        _MouseDraggedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseDraggedEvent(dynamic_cast<MouseDraggedEventDetailsType* const>(e), MouseDraggedEventId);
        break;
    case MouseClickedEventId:
        OSG_ASSERT(dynamic_cast<MouseClickedEventDetailsType* const>(e));

        _MouseClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseClickedEvent(dynamic_cast<MouseClickedEventDetailsType* const>(e), MouseClickedEventId);
        break;
    case MouseEnteredEventId:
        OSG_ASSERT(dynamic_cast<MouseEnteredEventDetailsType* const>(e));

        _MouseEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseEnteredEvent(dynamic_cast<MouseEnteredEventDetailsType* const>(e), MouseEnteredEventId);
        break;
    case MouseExitedEventId:
        OSG_ASSERT(dynamic_cast<MouseExitedEventDetailsType* const>(e));

        _MouseExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseExitedEvent(dynamic_cast<MouseExitedEventDetailsType* const>(e), MouseExitedEventId);
        break;
    case MousePressedEventId:
        OSG_ASSERT(dynamic_cast<MousePressedEventDetailsType* const>(e));

        _MousePressedEvent.set_combiner(ConsumableEventCombiner(e));
        _MousePressedEvent(dynamic_cast<MousePressedEventDetailsType* const>(e), MousePressedEventId);
        break;
    case MouseReleasedEventId:
        OSG_ASSERT(dynamic_cast<MouseReleasedEventDetailsType* const>(e));

        _MouseReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseReleasedEvent(dynamic_cast<MouseReleasedEventDetailsType* const>(e), MouseReleasedEventId);
        break;
    case MouseWheelMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e));

        _MouseWheelMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseWheelMovedEvent(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e), MouseWheelMovedEventId);
        break;
    case KeyPressedEventId:
        OSG_ASSERT(dynamic_cast<KeyPressedEventDetailsType* const>(e));

        _KeyPressedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyPressedEvent(dynamic_cast<KeyPressedEventDetailsType* const>(e), KeyPressedEventId);
        break;
    case KeyReleasedEventId:
        OSG_ASSERT(dynamic_cast<KeyReleasedEventDetailsType* const>(e));

        _KeyReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyReleasedEvent(dynamic_cast<KeyReleasedEventDetailsType* const>(e), KeyReleasedEventId);
        break;
    case KeyTypedEventId:
        OSG_ASSERT(dynamic_cast<KeyTypedEventDetailsType* const>(e));

        _KeyTypedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyTypedEvent(dynamic_cast<KeyTypedEventDetailsType* const>(e), KeyTypedEventId);
        break;
    case FocusGainedEventId:
        OSG_ASSERT(dynamic_cast<FocusGainedEventDetailsType* const>(e));

        _FocusGainedEvent.set_combiner(ConsumableEventCombiner(e));
        _FocusGainedEvent(dynamic_cast<FocusGainedEventDetailsType* const>(e), FocusGainedEventId);
        break;
    case FocusLostEventId:
        OSG_ASSERT(dynamic_cast<FocusLostEventDetailsType* const>(e));

        _FocusLostEvent.set_combiner(ConsumableEventCombiner(e));
        _FocusLostEvent(dynamic_cast<FocusLostEventDetailsType* const>(e), FocusLostEventId);
        break;
    case ComponentHiddenEventId:
        OSG_ASSERT(dynamic_cast<ComponentHiddenEventDetailsType* const>(e));

        _ComponentHiddenEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentHiddenEvent(dynamic_cast<ComponentHiddenEventDetailsType* const>(e), ComponentHiddenEventId);
        break;
    case ComponentVisibleEventId:
        OSG_ASSERT(dynamic_cast<ComponentVisibleEventDetailsType* const>(e));

        _ComponentVisibleEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentVisibleEvent(dynamic_cast<ComponentVisibleEventDetailsType* const>(e), ComponentVisibleEventId);
        break;
    case ComponentMovedEventId:
        OSG_ASSERT(dynamic_cast<ComponentMovedEventDetailsType* const>(e));

        _ComponentMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentMovedEvent(dynamic_cast<ComponentMovedEventDetailsType* const>(e), ComponentMovedEventId);
        break;
    case ComponentResizedEventId:
        OSG_ASSERT(dynamic_cast<ComponentResizedEventDetailsType* const>(e));

        _ComponentResizedEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentResizedEvent(dynamic_cast<ComponentResizedEventDetailsType* const>(e), ComponentResizedEventId);
        break;
    case ComponentEnabledEventId:
        OSG_ASSERT(dynamic_cast<ComponentEnabledEventDetailsType* const>(e));

        _ComponentEnabledEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentEnabledEvent(dynamic_cast<ComponentEnabledEventDetailsType* const>(e), ComponentEnabledEventId);
        break;
    case ComponentDisabledEventId:
        OSG_ASSERT(dynamic_cast<ComponentDisabledEventDetailsType* const>(e));

        _ComponentDisabledEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentDisabledEvent(dynamic_cast<ComponentDisabledEventDetailsType* const>(e), ComponentDisabledEventId);
        break;
    case ToolTipActivatedEventId:
        OSG_ASSERT(dynamic_cast<ToolTipActivatedEventDetailsType* const>(e));

        _ToolTipActivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _ToolTipActivatedEvent(dynamic_cast<ToolTipActivatedEventDetailsType* const>(e), ToolTipActivatedEventId);
        break;
    case ToolTipDeactivatedEventId:
        OSG_ASSERT(dynamic_cast<ToolTipDeactivatedEventDetailsType* const>(e));

        _ToolTipDeactivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _ToolTipDeactivatedEvent(dynamic_cast<ToolTipDeactivatedEventDetailsType* const>(e), ToolTipDeactivatedEventId);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

boost::signals2::connection ComponentDecoratorBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(listener, at);
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.connect(listener, at);
        break;
    case FocusLostEventId:
        return _FocusLostEvent.connect(listener, at);
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.connect(listener, at);
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.connect(listener, at);
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.connect(listener, at);
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.connect(listener, at);
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.connect(listener, at);
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.connect(listener, at);
        break;
    case ToolTipActivatedEventId:
        return _ToolTipActivatedEvent.connect(listener, at);
        break;
    case ToolTipDeactivatedEventId:
        return _ToolTipDeactivatedEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  ComponentDecoratorBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(group, listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(group, listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(group, listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(group, listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(group, listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(group, listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(group, listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(group, listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(group, listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(group, listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(group, listener, at);
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.connect(group, listener, at);
        break;
    case FocusLostEventId:
        return _FocusLostEvent.connect(group, listener, at);
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.connect(group, listener, at);
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.connect(group, listener, at);
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.connect(group, listener, at);
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.connect(group, listener, at);
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.connect(group, listener, at);
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.connect(group, listener, at);
        break;
    case ToolTipActivatedEventId:
        return _ToolTipActivatedEvent.connect(group, listener, at);
        break;
    case ToolTipDeactivatedEventId:
        return _ToolTipDeactivatedEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  ComponentDecoratorBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect(group);
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect(group);
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect(group);
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect(group);
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect(group);
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect(group);
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect(group);
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect(group);
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect(group);
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect(group);
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect(group);
        break;
    case FocusGainedEventId:
        _FocusGainedEvent.disconnect(group);
        break;
    case FocusLostEventId:
        _FocusLostEvent.disconnect(group);
        break;
    case ComponentHiddenEventId:
        _ComponentHiddenEvent.disconnect(group);
        break;
    case ComponentVisibleEventId:
        _ComponentVisibleEvent.disconnect(group);
        break;
    case ComponentMovedEventId:
        _ComponentMovedEvent.disconnect(group);
        break;
    case ComponentResizedEventId:
        _ComponentResizedEvent.disconnect(group);
        break;
    case ComponentEnabledEventId:
        _ComponentEnabledEvent.disconnect(group);
        break;
    case ComponentDisabledEventId:
        _ComponentDisabledEvent.disconnect(group);
        break;
    case ToolTipActivatedEventId:
        _ToolTipActivatedEvent.disconnect(group);
        break;
    case ToolTipDeactivatedEventId:
        _ToolTipDeactivatedEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

void  ComponentDecoratorBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect_all_slots();
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect_all_slots();
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect_all_slots();
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect_all_slots();
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect_all_slots();
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect_all_slots();
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect_all_slots();
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect_all_slots();
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect_all_slots();
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect_all_slots();
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect_all_slots();
        break;
    case FocusGainedEventId:
        _FocusGainedEvent.disconnect_all_slots();
        break;
    case FocusLostEventId:
        _FocusLostEvent.disconnect_all_slots();
        break;
    case ComponentHiddenEventId:
        _ComponentHiddenEvent.disconnect_all_slots();
        break;
    case ComponentVisibleEventId:
        _ComponentVisibleEvent.disconnect_all_slots();
        break;
    case ComponentMovedEventId:
        _ComponentMovedEvent.disconnect_all_slots();
        break;
    case ComponentResizedEventId:
        _ComponentResizedEvent.disconnect_all_slots();
        break;
    case ComponentEnabledEventId:
        _ComponentEnabledEvent.disconnect_all_slots();
        break;
    case ComponentDisabledEventId:
        _ComponentDisabledEvent.disconnect_all_slots();
        break;
    case ToolTipActivatedEventId:
        _ToolTipActivatedEvent.disconnect_all_slots();
        break;
    case ToolTipDeactivatedEventId:
        _ToolTipDeactivatedEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

bool  ComponentDecoratorBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.empty();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.empty();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.empty();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.empty();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.empty();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.empty();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.empty();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.empty();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.empty();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.empty();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.empty();
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.empty();
        break;
    case FocusLostEventId:
        return _FocusLostEvent.empty();
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.empty();
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.empty();
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.empty();
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.empty();
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.empty();
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.empty();
        break;
    case ToolTipActivatedEventId:
        return _ToolTipActivatedEvent.empty();
        break;
    case ToolTipDeactivatedEventId:
        return _ToolTipDeactivatedEvent.empty();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return true;
        break;
    }
}

UInt32  ComponentDecoratorBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.num_slots();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.num_slots();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.num_slots();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.num_slots();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.num_slots();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.num_slots();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.num_slots();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.num_slots();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.num_slots();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.num_slots();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.num_slots();
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.num_slots();
        break;
    case FocusLostEventId:
        return _FocusLostEvent.num_slots();
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.num_slots();
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.num_slots();
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.num_slots();
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.num_slots();
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.num_slots();
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.num_slots();
        break;
    case ToolTipActivatedEventId:
        return _ToolTipActivatedEvent.num_slots();
        break;
    case ToolTipDeactivatedEventId:
        return _ToolTipDeactivatedEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

ComponentDecoratorBase::ComponentDecoratorBase(void) :
    Inherited(),
    _sfDecoratee()
{
}

ComponentDecoratorBase::ComponentDecoratorBase(const ComponentDecoratorBase &source) :
    Inherited(source),
    _sfDecoratee(source._sfDecoratee)
{
}


/*-------------------------- destructors ----------------------------------*/

ComponentDecoratorBase::~ComponentDecoratorBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool ComponentDecoratorBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentContainer.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentContainer.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentContainerFieldMask);

            _sfParentContainer.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool ComponentDecoratorBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentContainer.getValue() == pTypedParent)
            {
                editSField(ParentContainerFieldMask);

                _sfParentContainer.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ComponentDecoratorBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ConstraintsFieldId)
    {
        LayoutConstraints * pTypedChild =
            dynamic_cast<LayoutConstraints *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfConstraints.getValue() == pTypedChild)
            {
                editSField(ConstraintsFieldMask);

                _sfConstraints.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ComponentDecoratorBase::onCreate(const ComponentDecorator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ComponentDecorator *pThis = static_cast<ComponentDecorator *>(this);

        pThis->setConstraints(source->getConstraints());

        pThis->setBorder(source->getBorder());

        pThis->setBackground(source->getBackground());

        pThis->setDisabledBorder(source->getDisabledBorder());

        pThis->setDisabledBackground(source->getDisabledBackground());

        pThis->setFocusedBorder(source->getFocusedBorder());

        pThis->setFocusedBackground(source->getFocusedBackground());

        pThis->setRolloverBorder(source->getRolloverBorder());

        pThis->setRolloverBackground(source->getRolloverBackground());

        pThis->setFocusedForeground(source->getFocusedForeground());

        pThis->setRolloverForeground(source->getRolloverForeground());

        pThis->setDisabledForeground(source->getDisabledForeground());

        pThis->setForeground(source->getForeground());

        pThis->setToolTip(source->getToolTip());

        pThis->setPopupMenu(source->getPopupMenu());
    }
}

GetFieldHandlePtr  ComponentDecoratorBase::getHandleDecoratee (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new SFUnrecComponentPtr::GetHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId),
            const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDecoratee(void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new SFUnrecComponentPtr::EditHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId),
            this));

    returnValue->setSetMethod(boost::bind(&ComponentDecorator::setDecoratee,
                              static_cast<ComponentDecorator *>(this), _1));

    editSField(DecorateeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandlePosition        (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandlePosition       (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleClipBounds      (void) const
{
    SFPnt4f::GetHandlePtr returnValue(
        new  SFPnt4f::GetHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleClipBounds     (void)
{
    SFPnt4f::EditHandlePtr returnValue(
        new  SFPnt4f::EditHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             this));


    editSField(ClipBoundsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleMinSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleMinSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             this));


    editSField(MinSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleMaxSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleMaxSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             this));


    editSField(MaxSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandlePreferredSize   (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandlePreferredSize  (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             this));


    editSField(PreferredSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleSize            (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleSize           (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleState           (void) const
{
    SFUInt64::GetHandlePtr returnValue(
        new  SFUInt64::GetHandle(
             &_sfState,
             this->getType().getFieldDesc(StateFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleState          (void)
{
    SFUInt64::EditHandlePtr returnValue(
        new  SFUInt64::EditHandle(
             &_sfState,
             this->getType().getFieldDesc(StateFieldId),
             this));


    editSField(StateFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleConstraints     (void) const
{
    SFUnrecChildLayoutConstraintsPtr::GetHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::GetHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleConstraints    (void)
{
    SFUnrecChildLayoutConstraintsPtr::EditHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::EditHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setConstraints,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(ConstraintsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleBorder          (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleBorder         (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(BorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleBackground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleBackground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(BackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDisabledBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDisabledBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setDisabledBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(DisabledBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDisabledBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDisabledBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setDisabledBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(DisabledBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDragEnabled     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDragEnabled    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             this));


    editSField(DragEnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleScrollTrackingCharacteristics (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfScrollTrackingCharacteristics,
             this->getType().getFieldDesc(ScrollTrackingCharacteristicsFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleScrollTrackingCharacteristics(void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfScrollTrackingCharacteristics,
             this->getType().getFieldDesc(ScrollTrackingCharacteristicsFieldId),
             this));


    editSField(ScrollTrackingCharacteristicsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleFocusedBorder   (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleFocusedBorder  (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setFocusedBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(FocusedBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleFocusedBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleFocusedBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setFocusedBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(FocusedBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleRolloverBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleRolloverBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setRolloverBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(RolloverBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleRolloverBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleRolloverBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setRolloverBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(RolloverBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleFocusedForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleFocusedForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setFocusedForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(FocusedForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleRolloverForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleRolloverForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setRolloverForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(RolloverForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDisabledForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDisabledForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setDisabledForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(DisabledForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleForeground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleForeground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(ForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleToolTip         (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentPtr::GetHandle(
             &_sfToolTip,
             this->getType().getFieldDesc(ToolTipFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleToolTip        (void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentPtr::EditHandle(
             &_sfToolTip,
             this->getType().getFieldDesc(ToolTipFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setToolTip,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(ToolTipFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleParentContainer (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleParentContainer(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleClipping        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleClipping       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             this));


    editSField(ClippingFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandlePopupMenu       (void) const
{
    SFUnrecPopupMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::GetHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandlePopupMenu      (void)
{
    SFUnrecPopupMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::EditHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setPopupMenu,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(PopupMenuFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleCursor          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleCursor         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             this));


    editSField(CursorFieldMask);

    return returnValue;
}


GetEventHandlePtr ComponentDecoratorBase::getHandleMouseMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseMovedEventType>(
             const_cast<MouseMovedEventType *>(&_MouseMovedEvent),
             _producerType.getEventDescription(MouseMovedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseDraggedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseDraggedEventType>(
             const_cast<MouseDraggedEventType *>(&_MouseDraggedEvent),
             _producerType.getEventDescription(MouseDraggedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseClickedEventType>(
             const_cast<MouseClickedEventType *>(&_MouseClickedEvent),
             _producerType.getEventDescription(MouseClickedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseEnteredEventType>(
             const_cast<MouseEnteredEventType *>(&_MouseEnteredEvent),
             _producerType.getEventDescription(MouseEnteredEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseExitedEventType>(
             const_cast<MouseExitedEventType *>(&_MouseExitedEvent),
             _producerType.getEventDescription(MouseExitedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMousePressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MousePressedEventType>(
             const_cast<MousePressedEventType *>(&_MousePressedEvent),
             _producerType.getEventDescription(MousePressedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseReleasedEventType>(
             const_cast<MouseReleasedEventType *>(&_MouseReleasedEvent),
             _producerType.getEventDescription(MouseReleasedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseWheelMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseWheelMovedEventType>(
             const_cast<MouseWheelMovedEventType *>(&_MouseWheelMovedEvent),
             _producerType.getEventDescription(MouseWheelMovedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleKeyPressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyPressedEventType>(
             const_cast<KeyPressedEventType *>(&_KeyPressedEvent),
             _producerType.getEventDescription(KeyPressedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleKeyReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyReleasedEventType>(
             const_cast<KeyReleasedEventType *>(&_KeyReleasedEvent),
             _producerType.getEventDescription(KeyReleasedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleKeyTypedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyTypedEventType>(
             const_cast<KeyTypedEventType *>(&_KeyTypedEvent),
             _producerType.getEventDescription(KeyTypedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleFocusGainedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<FocusGainedEventType>(
             const_cast<FocusGainedEventType *>(&_FocusGainedEvent),
             _producerType.getEventDescription(FocusGainedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleFocusLostSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<FocusLostEventType>(
             const_cast<FocusLostEventType *>(&_FocusLostEvent),
             _producerType.getEventDescription(FocusLostEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentHiddenSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentHiddenEventType>(
             const_cast<ComponentHiddenEventType *>(&_ComponentHiddenEvent),
             _producerType.getEventDescription(ComponentHiddenEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentVisibleSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentVisibleEventType>(
             const_cast<ComponentVisibleEventType *>(&_ComponentVisibleEvent),
             _producerType.getEventDescription(ComponentVisibleEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentMovedEventType>(
             const_cast<ComponentMovedEventType *>(&_ComponentMovedEvent),
             _producerType.getEventDescription(ComponentMovedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentResizedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentResizedEventType>(
             const_cast<ComponentResizedEventType *>(&_ComponentResizedEvent),
             _producerType.getEventDescription(ComponentResizedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentEnabledSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentEnabledEventType>(
             const_cast<ComponentEnabledEventType *>(&_ComponentEnabledEvent),
             _producerType.getEventDescription(ComponentEnabledEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentDisabledSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentDisabledEventType>(
             const_cast<ComponentDisabledEventType *>(&_ComponentDisabledEvent),
             _producerType.getEventDescription(ComponentDisabledEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleToolTipActivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ToolTipActivatedEventType>(
             const_cast<ToolTipActivatedEventType *>(&_ToolTipActivatedEvent),
             _producerType.getEventDescription(ToolTipActivatedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleToolTipDeactivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ToolTipDeactivatedEventType>(
             const_cast<ToolTipDeactivatedEventType *>(&_ToolTipDeactivatedEvent),
             _producerType.getEventDescription(ToolTipDeactivatedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ComponentDecoratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ComponentDecorator *pThis = static_cast<ComponentDecorator *>(this);

    pThis->execSync(static_cast<ComponentDecorator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ComponentDecoratorBase::resolveLinks(void)
{
    static_cast<ComponentDecorator *>(this)->setDecoratee(NULL);    

    Inherited::resolveLinks();

    static_cast<ComponentDecorator *>(this)->setConstraints(NULL);

    static_cast<ComponentDecorator *>(this)->setBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setDisabledBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setDisabledBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setFocusedBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setFocusedBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setRolloverBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setRolloverBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setFocusedForeground(NULL);

    static_cast<ComponentDecorator *>(this)->setRolloverForeground(NULL);

    static_cast<ComponentDecorator *>(this)->setDisabledForeground(NULL);

    static_cast<ComponentDecorator *>(this)->setForeground(NULL);

    static_cast<ComponentDecorator *>(this)->setToolTip(NULL);

    static_cast<ComponentDecorator *>(this)->setPopupMenu(NULL);


}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ComponentDecorator::_sfPosition field.
Pnt2f &ComponentDecoratorBase::editPosition(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editPosition();
    }
    else
    {
        return Inherited::editPosition();
    }
}

//! Get the value of the ComponentDecorator::_sfPosition field.
const Pnt2f &ComponentDecoratorBase::getPosition(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getPosition();
    }
    else
    {
        return Inherited::getPosition();
    }
}


//! Set the value of the ComponentDecorator::_sfPosition field.
void ComponentDecoratorBase::setPosition(const Pnt2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setPosition(value);
    }
    else
    {
        Inherited::setPosition(value);
    }
}

//! Get the value of the ComponentDecorator::_sfClipBounds field.
Pnt4f &ComponentDecoratorBase::editClipBounds(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editClipBounds();
    }
    else
    {
        return Inherited::editClipBounds();
    }
}

//! Get the value of the ComponentDecorator::_sfClipBounds field.
const Pnt4f &ComponentDecoratorBase::getClipBounds(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getClipBounds();
    }
    else
    {
        return Inherited::getClipBounds();
    }
}


//! Set the value of the ComponentDecorator::_sfClipBounds field.
void ComponentDecoratorBase::setClipBounds(const Pnt4f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setClipBounds(value);
    }
    else
    {
        Inherited::setClipBounds(value);
    }
}

//! Get the value of the ComponentDecorator::_sfMinSize field.
Vec2f &ComponentDecoratorBase::editMinSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editMinSize();
    }
    else
    {
        return Inherited::editMinSize();
    }
}

//! Get the value of the ComponentDecorator::_sfMinSize field.
const Vec2f &ComponentDecoratorBase::getMinSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getMinSize();
    }
    else
    {
        return Inherited::getMinSize();
    }
}


//! Set the value of the ComponentDecorator::_sfMinSize field.
void ComponentDecoratorBase::setMinSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setMinSize(value);
    }
    else
    {
        Inherited::setMinSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfMaxSize field.
Vec2f &ComponentDecoratorBase::editMaxSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editMaxSize();
    }
    else
    {
        return Inherited::editMaxSize();
    }
}

//! Get the value of the ComponentDecorator::_sfMaxSize field.
const Vec2f &ComponentDecoratorBase::getMaxSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getMaxSize();
    }
    else
    {
        return Inherited::getMaxSize();
    }
}


//! Set the value of the ComponentDecorator::_sfMaxSize field.
void ComponentDecoratorBase::setMaxSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setMaxSize(value);
    }
    else
    {
        Inherited::setMaxSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfPreferredSize field.
Vec2f &ComponentDecoratorBase::editPreferredSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editPreferredSize();
    }
    else
    {
        return Inherited::editPreferredSize();
    }
}

//! Get the value of the ComponentDecorator::_sfPreferredSize field.
const Vec2f &ComponentDecoratorBase::getPreferredSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getPreferredSize();
    }
    else
    {
        return Inherited::getPreferredSize();
    }
}


//! Set the value of the ComponentDecorator::_sfPreferredSize field.
void ComponentDecoratorBase::setPreferredSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setPreferredSize(value);
    }
    else
    {
        Inherited::setPreferredSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfSize field.
Vec2f &ComponentDecoratorBase::editSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSize();
    }
    else
    {
        return Inherited::editSize();
    }
}

//! Get the value of the ComponentDecorator::_sfSize field.
const Vec2f &ComponentDecoratorBase::getSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSize();
    }
    else
    {
        return Inherited::getSize();
    }
}


//! Set the value of the ComponentDecorator::_sfSize field.
void ComponentDecoratorBase::setSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setSize(value);
    }
    else
    {
        Inherited::setSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfState field.
UInt64 &ComponentDecoratorBase::editState(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editState();
    }
    else
    {
        return Inherited::editState();
    }
}

//! Get the value of the ComponentDecorator::_sfState field.
      UInt64  ComponentDecoratorBase::getState(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getState();
    }
    else
    {
        return Inherited::getState();
    }
}


//! Set the value of the ComponentDecorator::_sfState field.
void ComponentDecoratorBase::setState(const UInt64 value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setState(value);
    }
    else
    {
        Inherited::setState(value);
    }
}

//! Get the value of the ComponentDecorator::_sfConstraints field.
LayoutConstraints * ComponentDecoratorBase::getConstraints(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getConstraints();
    }
    else
    {
        return Inherited::getConstraints();
    }
}

//! Set the value of the ComponentDecorator::_sfConstraints field.
void ComponentDecoratorBase::setConstraints(LayoutConstraints * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setConstraints(value);
    }
    else
    {
        Inherited::setConstraints(value);
    }
}

//! Get the value of the ComponentDecorator::_sfBorder field.
Border * ComponentDecoratorBase::getBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getBorder();
    }
    else
    {
        return Inherited::getBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfBorder field.
void ComponentDecoratorBase::setBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setBorder(value);
    }
    else
    {
        Inherited::setBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfBackground field.
Layer * ComponentDecoratorBase::getBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getBackground();
    }
    else
    {
        return Inherited::getBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfBackground field.
void ComponentDecoratorBase::setBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setBackground(value);
    }
    else
    {
        Inherited::setBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDisabledBorder field.
Border * ComponentDecoratorBase::getDisabledBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDisabledBorder();
    }
    else
    {
        return Inherited::getDisabledBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfDisabledBorder field.
void ComponentDecoratorBase::setDisabledBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDisabledBorder(value);
    }
    else
    {
        Inherited::setDisabledBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDisabledBackground field.
Layer * ComponentDecoratorBase::getDisabledBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDisabledBackground();
    }
    else
    {
        return Inherited::getDisabledBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfDisabledBackground field.
void ComponentDecoratorBase::setDisabledBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDisabledBackground(value);
    }
    else
    {
        Inherited::setDisabledBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDragEnabled field.
bool &ComponentDecoratorBase::editDragEnabled(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editDragEnabled();
    }
    else
    {
        return Inherited::editDragEnabled();
    }
}

//! Get the value of the ComponentDecorator::_sfDragEnabled field.
      bool  ComponentDecoratorBase::getDragEnabled(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDragEnabled();
    }
    else
    {
        return Inherited::getDragEnabled();
    }
}


//! Set the value of the ComponentDecorator::_sfDragEnabled field.
void ComponentDecoratorBase::setDragEnabled(const bool value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDragEnabled(value);
    }
    else
    {
        Inherited::setDragEnabled(value);
    }
}

//! Get the value of the ComponentDecorator::_sfScrollTrackingCharacteristics field.
UInt16 &ComponentDecoratorBase::editScrollTrackingCharacteristics(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editScrollTrackingCharacteristics();
    }
    else
    {
        return Inherited::editScrollTrackingCharacteristics();
    }
}

//! Get the value of the ComponentDecorator::_sfScrollTrackingCharacteristics field.
      UInt16  ComponentDecoratorBase::getScrollTrackingCharacteristics(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getScrollTrackingCharacteristics();
    }
    else
    {
        return Inherited::getScrollTrackingCharacteristics();
    }
}


//! Set the value of the ComponentDecorator::_sfScrollTrackingCharacteristics field.
void ComponentDecoratorBase::setScrollTrackingCharacteristics(const UInt16 value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setScrollTrackingCharacteristics(value);
    }
    else
    {
        Inherited::setScrollTrackingCharacteristics(value);
    }
}

//! Get the value of the ComponentDecorator::_sfFocusedBorder field.
Border * ComponentDecoratorBase::getFocusedBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getFocusedBorder();
    }
    else
    {
        return Inherited::getFocusedBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfFocusedBorder field.
void ComponentDecoratorBase::setFocusedBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setFocusedBorder(value);
    }
    else
    {
        Inherited::setFocusedBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfFocusedBackground field.
Layer * ComponentDecoratorBase::getFocusedBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getFocusedBackground();
    }
    else
    {
        return Inherited::getFocusedBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfFocusedBackground field.
void ComponentDecoratorBase::setFocusedBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setFocusedBackground(value);
    }
    else
    {
        Inherited::setFocusedBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfRolloverBorder field.
Border * ComponentDecoratorBase::getRolloverBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getRolloverBorder();
    }
    else
    {
        return Inherited::getRolloverBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfRolloverBorder field.
void ComponentDecoratorBase::setRolloverBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setRolloverBorder(value);
    }
    else
    {
        Inherited::setRolloverBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfRolloverBackground field.
Layer * ComponentDecoratorBase::getRolloverBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getRolloverBackground();
    }
    else
    {
        return Inherited::getRolloverBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfRolloverBackground field.
void ComponentDecoratorBase::setRolloverBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setRolloverBackground(value);
    }
    else
    {
        Inherited::setRolloverBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfFocusedForeground field.
Layer * ComponentDecoratorBase::getFocusedForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getFocusedForeground();
    }
    else
    {
        return Inherited::getFocusedForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfFocusedForeground field.
void ComponentDecoratorBase::setFocusedForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setFocusedForeground(value);
    }
    else
    {
        Inherited::setFocusedForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfRolloverForeground field.
Layer * ComponentDecoratorBase::getRolloverForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getRolloverForeground();
    }
    else
    {
        return Inherited::getRolloverForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfRolloverForeground field.
void ComponentDecoratorBase::setRolloverForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setRolloverForeground(value);
    }
    else
    {
        Inherited::setRolloverForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDisabledForeground field.
Layer * ComponentDecoratorBase::getDisabledForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDisabledForeground();
    }
    else
    {
        return Inherited::getDisabledForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfDisabledForeground field.
void ComponentDecoratorBase::setDisabledForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDisabledForeground(value);
    }
    else
    {
        Inherited::setDisabledForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfForeground field.
Layer * ComponentDecoratorBase::getForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getForeground();
    }
    else
    {
        return Inherited::getForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfForeground field.
void ComponentDecoratorBase::setForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setForeground(value);
    }
    else
    {
        Inherited::setForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfToolTip field.
Component * ComponentDecoratorBase::getToolTip(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getToolTip();
    }
    else
    {
        return Inherited::getToolTip();
    }
}

//! Set the value of the ComponentDecorator::_sfToolTip field.
void ComponentDecoratorBase::setToolTip(Component * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setToolTip(value);
    }
    else
    {
        Inherited::setToolTip(value);
    }
}

//! Get the value of the ComponentDecorator::_sfOpacity field.
Real32 &ComponentDecoratorBase::editOpacity(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editOpacity();
    }
    else
    {
        return Inherited::editOpacity();
    }
}

//! Get the value of the ComponentDecorator::_sfOpacity field.
      Real32  ComponentDecoratorBase::getOpacity(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getOpacity();
    }
    else
    {
        return Inherited::getOpacity();
    }
}


//! Set the value of the ComponentDecorator::_sfOpacity field.
void ComponentDecoratorBase::setOpacity(const Real32 value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setOpacity(value);
    }
    else
    {
        Inherited::setOpacity(value);
    }
}

//! Get the value of the ComponentDecorator::_sfClipping field.
bool &ComponentDecoratorBase::editClipping(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editClipping();
    }
    else
    {
        return Inherited::editClipping();
    }
}

//! Get the value of the ComponentDecorator::_sfClipping field.
      bool  ComponentDecoratorBase::getClipping(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getClipping();
    }
    else
    {
        return Inherited::getClipping();
    }
}


//! Set the value of the ComponentDecorator::_sfClipping field.
void ComponentDecoratorBase::setClipping(const bool value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setClipping(value);
    }
    else
    {
        Inherited::setClipping(value);
    }
}

//! Get the value of the ComponentDecorator::_sfPopupMenu field.
PopupMenu * ComponentDecoratorBase::getPopupMenu(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getPopupMenu();
    }
    else
    {
        return Inherited::getPopupMenu();
    }
}

//! Set the value of the ComponentDecorator::_sfPopupMenu field.
void ComponentDecoratorBase::setPopupMenu(PopupMenu * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setPopupMenu(value);
    }
    else
    {
        Inherited::setPopupMenu(value);
    }
}

//! Get the value of the ComponentDecorator::_sfCursor field.
UInt32 &ComponentDecoratorBase::editCursor(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editCursor();
    }
    else
    {
        return Inherited::editCursor();
    }
}

//! Get the value of the ComponentDecorator::_sfCursor field.
      UInt32  ComponentDecoratorBase::getCursor(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getCursor();
    }
    else
    {
        return Inherited::getCursor();
    }
}


//! Set the value of the ComponentDecorator::_sfCursor field.
void ComponentDecoratorBase::setCursor(const UInt32 value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setCursor(value);
    }
    else
    {
        Inherited::setCursor(value);
    }
}


OSG_END_NAMESPACE
