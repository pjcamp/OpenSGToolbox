/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComponentDecorator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGWindowEventProducer.h"       // Cursor default header

#include "OSGLayoutConstraints.h"       // Constraints Class
#include "OSGBorder.h"                  // Border Class
#include "OSGLayer.h"                   // Background Class
#include "OSGTransferHandler.h"         // TransferHandler Class
#include "OSGFieldContainer.h"          // ParentContainer Class
#include "OSGPopupMenu.h"               // PopupMenu Class

#include "OSGComponentDecoratorBase.h"
#include "OSGComponentDecorator.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ComponentDecorator
    A UI Component Interface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ComponentPtr ComponentDecoratorBase::_sfDecoratee
    The object being decorated
*/

/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ComponentDecorator *>::_type("ComponentDecoratorPtr", "ComponentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ComponentDecorator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ComponentDecorator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ComponentDecorator *,
                           0);

DataType &FieldTraits< ComponentDecorator *, 1 >::getType(void)
{
    return FieldTraits<ComponentDecorator *, 0>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      ComponentDecorator *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ComponentDecoratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "decoratee",
        "undocumented decoratee",
        DecorateeFieldId, DecorateeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ComponentDecorator::editHandleDecoratee),
        static_cast<FieldGetMethodSig >(&ComponentDecorator::getHandleDecoratee ));

    oType.addInitialDesc(pDesc);
}


ComponentDecoratorBase::TypeObject ComponentDecoratorBase::_type(
    ComponentDecoratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ComponentDecorator::initMethod,
    ComponentDecorator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ComponentDecorator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Component\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"true\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    childFields=\"multi\"\n"
    ">\n"
    "A UI Component Interface.\n"
    "\t<Field\n"
    "\t\tname=\"Position\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ClipBounds\"\n"
    "\t\ttype=\"Pnt4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f,0.0f\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MinSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MaxSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"32767,32767\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"PreferredSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1,1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Size\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Visible\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Enabled\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Focused\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Constraints\"\n"
    "\t\ttype=\"LayoutConstraints\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentComponent\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Border\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Background\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DragEnabled\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TransferHandler\"\n"
    "\t\ttype=\"TransferHandler\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ToolTipText\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Opacity\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"ParentContainer\"\n"
    "\t   type=\"FieldContainer\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"none\"\n"
    "       doRefCount=\"false\"\n"
    "       passFieldMask=\"true\"\n"
    "       category=\"parentpointer\"\n"
    "\t   >\n"
    "\t  The Component Container this Component is contained in.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Clipping\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"PopupMenu\"\n"
    "\t\ttype=\"PopupMenu\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "   <Field\n"
    "\t\tname=\"FocusedForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Foreground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Cursor\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"WindowEventProducer::CURSOR_POINTER\"\n"
    "\t\tdefaultHeader=\"OSGWindowEventProducer.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseMoved\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseDragged\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseClicked\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseEntered\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseExited\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MousePressed\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseReleased\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseWheelMoved\"\n"
    "\t\tdetailsType=\"MouseWheelEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyPressed\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyReleased\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyTyped\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"FocusGained\"\n"
    "\t\tdetailsType=\"FocusEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"FocusLost\"\n"
    "\t\tdetailsType=\"FocusEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentHidden\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentVisible\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentMoved\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentResized\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentEnabled\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentDisabled\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI Component Interface.\n"
    );

//! ComponentDecorator Produced Events

EventDescription *ComponentDecoratorBase::_eventDesc[] =
{
    new EventDescription("MouseMoved", 
                          "",
                          MouseMovedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseMovedSignal)),

    new EventDescription("MouseDragged", 
                          "",
                          MouseDraggedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseDraggedSignal)),

    new EventDescription("MouseClicked", 
                          "",
                          MouseClickedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseClickedSignal)),

    new EventDescription("MouseEntered", 
                          "",
                          MouseEnteredEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseEnteredSignal)),

    new EventDescription("MouseExited", 
                          "",
                          MouseExitedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseExitedSignal)),

    new EventDescription("MousePressed", 
                          "",
                          MousePressedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMousePressedSignal)),

    new EventDescription("MouseReleased", 
                          "",
                          MouseReleasedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseReleasedSignal)),

    new EventDescription("MouseWheelMoved", 
                          "",
                          MouseWheelMovedEventId, 
                          FieldTraits<MouseWheelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleMouseWheelMovedSignal)),

    new EventDescription("KeyPressed", 
                          "",
                          KeyPressedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleKeyPressedSignal)),

    new EventDescription("KeyReleased", 
                          "",
                          KeyReleasedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleKeyReleasedSignal)),

    new EventDescription("KeyTyped", 
                          "",
                          KeyTypedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleKeyTypedSignal)),

    new EventDescription("FocusGained", 
                          "",
                          FocusGainedEventId, 
                          FieldTraits<FocusEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleFocusGainedSignal)),

    new EventDescription("FocusLost", 
                          "",
                          FocusLostEventId, 
                          FieldTraits<FocusEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleFocusLostSignal)),

    new EventDescription("ComponentHidden", 
                          "",
                          ComponentHiddenEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentHiddenSignal)),

    new EventDescription("ComponentVisible", 
                          "",
                          ComponentVisibleEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentVisibleSignal)),

    new EventDescription("ComponentMoved", 
                          "",
                          ComponentMovedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentMovedSignal)),

    new EventDescription("ComponentResized", 
                          "",
                          ComponentResizedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentResizedSignal)),

    new EventDescription("ComponentEnabled", 
                          "",
                          ComponentEnabledEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentEnabledSignal)),

    new EventDescription("ComponentDisabled", 
                          "",
                          ComponentDisabledEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentDecoratorBase::getHandleComponentDisabledSignal))

};

EventProducerType ComponentDecoratorBase::_producerType(
    "ComponentDecoratorProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComponentDecoratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ComponentDecoratorBase::getType(void) const
{
    return _type;
}

const EventProducerType &ComponentDecoratorBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 ComponentDecoratorBase::getContainerSize(void) const
{
    return sizeof(ComponentDecorator);
}

/*------------------------- decorator get ------------------------------*/

const SFUnrecComponentPtr *ComponentDecoratorBase::getSFDecoratee(void) const
{
    return &_sfDecoratee;
}

SFPnt2f *ComponentDecoratorBase::editSFPosition(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFPosition();
    }
    else
    {
        return NULL;
    }
}

const SFPnt2f *ComponentDecoratorBase::getSFPosition(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFPosition();
    }
    else
    {
        return NULL;
    }
}

SFPnt4f *ComponentDecoratorBase::editSFClipBounds(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFClipBounds();
    }
    else
    {
        return NULL;
    }
}

const SFPnt4f *ComponentDecoratorBase::getSFClipBounds(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFClipBounds();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFMinSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFMinSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFMinSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFMinSize();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFMaxSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFMaxSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFMaxSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFMaxSize();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFPreferredSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFPreferredSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFPreferredSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFPreferredSize();
    }
    else
    {
        return NULL;
    }
}

SFVec2f *ComponentDecoratorBase::editSFSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFSize();
    }
    else
    {
        return NULL;
    }
}

const SFVec2f *ComponentDecoratorBase::getSFSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFSize();
    }
    else
    {
        return NULL;
    }
}

SFBool *ComponentDecoratorBase::editSFVisible(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFVisible();
    }
    else
    {
        return NULL;
    }
}

const SFBool *ComponentDecoratorBase::getSFVisible(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFVisible();
    }
    else
    {
        return NULL;
    }
}

SFBool *ComponentDecoratorBase::editSFEnabled(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFEnabled();
    }
    else
    {
        return NULL;
    }
}

const SFBool *ComponentDecoratorBase::getSFEnabled(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFEnabled();
    }
    else
    {
        return NULL;
    }
}

SFBool *ComponentDecoratorBase::editSFFocused(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFFocused();
    }
    else
    {
        return NULL;
    }
}

const SFBool *ComponentDecoratorBase::getSFFocused(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFFocused();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfConstraints field.
const SFUnrecChildLayoutConstraintsPtr *ComponentDecoratorBase::getSFConstraints(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFConstraints();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfConstraints field.
SFUnrecChildLayoutConstraintsPtr *ComponentDecoratorBase::editSFConstraints(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFConstraints();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFBackground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfDisabledBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFDisabledBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDisabledBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfDisabledBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFDisabledBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDisabledBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfDisabledBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFDisabledBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDisabledBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfDisabledBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFDisabledBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDisabledBackground();
    }
    else
    {
        return NULL;
    }
}

SFBool *ComponentDecoratorBase::editSFDragEnabled(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDragEnabled();
    }
    else
    {
        return NULL;
    }
}

const SFBool *ComponentDecoratorBase::getSFDragEnabled(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDragEnabled();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfTransferHandler field.
const SFUnrecTransferHandlerPtr *ComponentDecoratorBase::getSFTransferHandler(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFTransferHandler();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfTransferHandler field.
SFUnrecTransferHandlerPtr *ComponentDecoratorBase::editSFTransferHandler(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFTransferHandler();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfFocusedBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFFocusedBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFFocusedBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfFocusedBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFFocusedBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFFocusedBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfFocusedBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFFocusedBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFFocusedBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfFocusedBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFFocusedBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFFocusedBackground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfRolloverBorder field.
const SFUnrecBorderPtr *ComponentDecoratorBase::getSFRolloverBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFRolloverBorder();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfRolloverBorder field.
SFUnrecBorderPtr *ComponentDecoratorBase::editSFRolloverBorder(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFRolloverBorder();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfRolloverBackground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFRolloverBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFRolloverBackground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfRolloverBackground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFRolloverBackground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFRolloverBackground();
    }
    else
    {
        return NULL;
    }
}

SFString *ComponentDecoratorBase::editSFToolTipText(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFToolTipText();
    }
    else
    {
        return NULL;
    }
}

const SFString *ComponentDecoratorBase::getSFToolTipText(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFToolTipText();
    }
    else
    {
        return NULL;
    }
}

SFReal32 *ComponentDecoratorBase::editSFOpacity(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFOpacity();
    }
    else
    {
        return NULL;
    }
}

const SFReal32 *ComponentDecoratorBase::getSFOpacity(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFOpacity();
    }
    else
    {
        return NULL;
    }
}


SFBool *ComponentDecoratorBase::editSFClipping(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFClipping();
    }
    else
    {
        return NULL;
    }
}

const SFBool *ComponentDecoratorBase::getSFClipping(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFClipping();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfPopupMenu field.
const SFUnrecPopupMenuPtr *ComponentDecoratorBase::getSFPopupMenu(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFPopupMenu();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfPopupMenu field.
SFUnrecPopupMenuPtr *ComponentDecoratorBase::editSFPopupMenu(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFPopupMenu();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfFocusedForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFFocusedForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFFocusedForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfFocusedForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFFocusedForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFFocusedForeground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfRolloverForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFRolloverForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFRolloverForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfRolloverForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFRolloverForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFRolloverForeground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfDisabledForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFDisabledForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFDisabledForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfDisabledForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFDisabledForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFDisabledForeground();
    }
    else
    {
        return NULL;
    }
}

//! Get the ComponentDecorator::_sfForeground field.
const SFUnrecLayerPtr *ComponentDecoratorBase::getSFForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFForeground();
    }
    else
    {
        return NULL;
    }
}
//! Get the ComponentDecorator::_sfForeground field.
SFUnrecLayerPtr *ComponentDecoratorBase::editSFForeground(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFForeground();
    }
    else
    {
        return NULL;
    }
}

SFUInt32 *ComponentDecoratorBase::editSFCursor(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSFCursor();
    }
    else
    {
        return NULL;
    }
}

const SFUInt32 *ComponentDecoratorBase::getSFCursor(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSFCursor();
    }
    else
    {
        return NULL;
    }
}






/*------------------------------ access -----------------------------------*/

UInt32 ComponentDecoratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        returnValue += _sfDecoratee.getBinSize();
    }

    return returnValue;
}

void ComponentDecoratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyToBin(pMem);
    }
}

void ComponentDecoratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void ComponentDecoratorBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseMovedEventDetailsType* const>(e));

        _MouseMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseMovedEvent(dynamic_cast<MouseMovedEventDetailsType* const>(e), MouseMovedEventId);
        break;
    case MouseDraggedEventId:
        OSG_ASSERT(dynamic_cast<MouseDraggedEventDetailsType* const>(e));

        _MouseDraggedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseDraggedEvent(dynamic_cast<MouseDraggedEventDetailsType* const>(e), MouseDraggedEventId);
        break;
    case MouseClickedEventId:
        OSG_ASSERT(dynamic_cast<MouseClickedEventDetailsType* const>(e));

        _MouseClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseClickedEvent(dynamic_cast<MouseClickedEventDetailsType* const>(e), MouseClickedEventId);
        break;
    case MouseEnteredEventId:
        OSG_ASSERT(dynamic_cast<MouseEnteredEventDetailsType* const>(e));

        _MouseEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseEnteredEvent(dynamic_cast<MouseEnteredEventDetailsType* const>(e), MouseEnteredEventId);
        break;
    case MouseExitedEventId:
        OSG_ASSERT(dynamic_cast<MouseExitedEventDetailsType* const>(e));

        _MouseExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseExitedEvent(dynamic_cast<MouseExitedEventDetailsType* const>(e), MouseExitedEventId);
        break;
    case MousePressedEventId:
        OSG_ASSERT(dynamic_cast<MousePressedEventDetailsType* const>(e));

        _MousePressedEvent.set_combiner(ConsumableEventCombiner(e));
        _MousePressedEvent(dynamic_cast<MousePressedEventDetailsType* const>(e), MousePressedEventId);
        break;
    case MouseReleasedEventId:
        OSG_ASSERT(dynamic_cast<MouseReleasedEventDetailsType* const>(e));

        _MouseReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseReleasedEvent(dynamic_cast<MouseReleasedEventDetailsType* const>(e), MouseReleasedEventId);
        break;
    case MouseWheelMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e));

        _MouseWheelMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseWheelMovedEvent(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e), MouseWheelMovedEventId);
        break;
    case KeyPressedEventId:
        OSG_ASSERT(dynamic_cast<KeyPressedEventDetailsType* const>(e));

        _KeyPressedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyPressedEvent(dynamic_cast<KeyPressedEventDetailsType* const>(e), KeyPressedEventId);
        break;
    case KeyReleasedEventId:
        OSG_ASSERT(dynamic_cast<KeyReleasedEventDetailsType* const>(e));

        _KeyReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyReleasedEvent(dynamic_cast<KeyReleasedEventDetailsType* const>(e), KeyReleasedEventId);
        break;
    case KeyTypedEventId:
        OSG_ASSERT(dynamic_cast<KeyTypedEventDetailsType* const>(e));

        _KeyTypedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyTypedEvent(dynamic_cast<KeyTypedEventDetailsType* const>(e), KeyTypedEventId);
        break;
    case FocusGainedEventId:
        OSG_ASSERT(dynamic_cast<FocusGainedEventDetailsType* const>(e));

        _FocusGainedEvent.set_combiner(ConsumableEventCombiner(e));
        _FocusGainedEvent(dynamic_cast<FocusGainedEventDetailsType* const>(e), FocusGainedEventId);
        break;
    case FocusLostEventId:
        OSG_ASSERT(dynamic_cast<FocusLostEventDetailsType* const>(e));

        _FocusLostEvent.set_combiner(ConsumableEventCombiner(e));
        _FocusLostEvent(dynamic_cast<FocusLostEventDetailsType* const>(e), FocusLostEventId);
        break;
    case ComponentHiddenEventId:
        OSG_ASSERT(dynamic_cast<ComponentHiddenEventDetailsType* const>(e));

        _ComponentHiddenEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentHiddenEvent(dynamic_cast<ComponentHiddenEventDetailsType* const>(e), ComponentHiddenEventId);
        break;
    case ComponentVisibleEventId:
        OSG_ASSERT(dynamic_cast<ComponentVisibleEventDetailsType* const>(e));

        _ComponentVisibleEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentVisibleEvent(dynamic_cast<ComponentVisibleEventDetailsType* const>(e), ComponentVisibleEventId);
        break;
    case ComponentMovedEventId:
        OSG_ASSERT(dynamic_cast<ComponentMovedEventDetailsType* const>(e));

        _ComponentMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentMovedEvent(dynamic_cast<ComponentMovedEventDetailsType* const>(e), ComponentMovedEventId);
        break;
    case ComponentResizedEventId:
        OSG_ASSERT(dynamic_cast<ComponentResizedEventDetailsType* const>(e));

        _ComponentResizedEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentResizedEvent(dynamic_cast<ComponentResizedEventDetailsType* const>(e), ComponentResizedEventId);
        break;
    case ComponentEnabledEventId:
        OSG_ASSERT(dynamic_cast<ComponentEnabledEventDetailsType* const>(e));

        _ComponentEnabledEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentEnabledEvent(dynamic_cast<ComponentEnabledEventDetailsType* const>(e), ComponentEnabledEventId);
        break;
    case ComponentDisabledEventId:
        OSG_ASSERT(dynamic_cast<ComponentDisabledEventDetailsType* const>(e));

        _ComponentDisabledEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentDisabledEvent(dynamic_cast<ComponentDisabledEventDetailsType* const>(e), ComponentDisabledEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection ComponentDecoratorBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(listener, at);
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.connect(listener, at);
        break;
    case FocusLostEventId:
        return _FocusLostEvent.connect(listener, at);
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.connect(listener, at);
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.connect(listener, at);
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.connect(listener, at);
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.connect(listener, at);
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.connect(listener, at);
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  ComponentDecoratorBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(group, listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(group, listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(group, listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(group, listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(group, listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(group, listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(group, listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(group, listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(group, listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(group, listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(group, listener, at);
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.connect(group, listener, at);
        break;
    case FocusLostEventId:
        return _FocusLostEvent.connect(group, listener, at);
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.connect(group, listener, at);
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.connect(group, listener, at);
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.connect(group, listener, at);
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.connect(group, listener, at);
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.connect(group, listener, at);
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  ComponentDecoratorBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect(group);
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect(group);
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect(group);
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect(group);
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect(group);
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect(group);
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect(group);
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect(group);
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect(group);
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect(group);
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect(group);
        break;
    case FocusGainedEventId:
        _FocusGainedEvent.disconnect(group);
        break;
    case FocusLostEventId:
        _FocusLostEvent.disconnect(group);
        break;
    case ComponentHiddenEventId:
        _ComponentHiddenEvent.disconnect(group);
        break;
    case ComponentVisibleEventId:
        _ComponentVisibleEvent.disconnect(group);
        break;
    case ComponentMovedEventId:
        _ComponentMovedEvent.disconnect(group);
        break;
    case ComponentResizedEventId:
        _ComponentResizedEvent.disconnect(group);
        break;
    case ComponentEnabledEventId:
        _ComponentEnabledEvent.disconnect(group);
        break;
    case ComponentDisabledEventId:
        _ComponentDisabledEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  ComponentDecoratorBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect_all_slots();
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect_all_slots();
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect_all_slots();
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect_all_slots();
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect_all_slots();
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect_all_slots();
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect_all_slots();
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect_all_slots();
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect_all_slots();
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect_all_slots();
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect_all_slots();
        break;
    case FocusGainedEventId:
        _FocusGainedEvent.disconnect_all_slots();
        break;
    case FocusLostEventId:
        _FocusLostEvent.disconnect_all_slots();
        break;
    case ComponentHiddenEventId:
        _ComponentHiddenEvent.disconnect_all_slots();
        break;
    case ComponentVisibleEventId:
        _ComponentVisibleEvent.disconnect_all_slots();
        break;
    case ComponentMovedEventId:
        _ComponentMovedEvent.disconnect_all_slots();
        break;
    case ComponentResizedEventId:
        _ComponentResizedEvent.disconnect_all_slots();
        break;
    case ComponentEnabledEventId:
        _ComponentEnabledEvent.disconnect_all_slots();
        break;
    case ComponentDisabledEventId:
        _ComponentDisabledEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  ComponentDecoratorBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.empty();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.empty();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.empty();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.empty();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.empty();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.empty();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.empty();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.empty();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.empty();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.empty();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.empty();
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.empty();
        break;
    case FocusLostEventId:
        return _FocusLostEvent.empty();
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.empty();
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.empty();
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.empty();
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.empty();
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.empty();
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  ComponentDecoratorBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.num_slots();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.num_slots();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.num_slots();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.num_slots();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.num_slots();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.num_slots();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.num_slots();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.num_slots();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.num_slots();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.num_slots();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.num_slots();
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.num_slots();
        break;
    case FocusLostEventId:
        return _FocusLostEvent.num_slots();
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.num_slots();
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.num_slots();
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.num_slots();
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.num_slots();
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.num_slots();
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

ComponentDecoratorBase::ComponentDecoratorBase(void) :
    Inherited(),
    _sfDecoratee()
{
}

ComponentDecoratorBase::ComponentDecoratorBase(const ComponentDecoratorBase &source) :
    Inherited(source),
    _sfDecoratee(source._sfDecoratee)
{
}


/*-------------------------- destructors ----------------------------------*/

ComponentDecoratorBase::~ComponentDecoratorBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool ComponentDecoratorBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentContainer.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentContainer.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentContainerFieldMask);

            _sfParentContainer.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool ComponentDecoratorBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentContainer.getValue() == pParent)
            {
                editSField(ParentContainerFieldMask);

                _sfParentContainer.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("ComponentDecoratorBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ComponentDecoratorBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ConstraintsFieldId)
    {
        LayoutConstraints * pTypedChild =
            dynamic_cast<LayoutConstraints *>(pChild);

        if(pTypedChild != NULL)
        {
            if(pTypedChild == _sfConstraints.getValue())
            {
                editSField(ConstraintsFieldMask);

                _sfConstraints.setValue(NULL);

                return true;
            }

            FWARNING(("ComponentDecoratorBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ComponentDecoratorBase::onCreate(const ComponentDecorator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ComponentDecorator *pThis = static_cast<ComponentDecorator *>(this);

        pThis->setConstraints(source->getConstraints());

        pThis->setBorder(source->getBorder());

        pThis->setBackground(source->getBackground());

        pThis->setDisabledBorder(source->getDisabledBorder());

        pThis->setDisabledBackground(source->getDisabledBackground());

        pThis->setTransferHandler(source->getTransferHandler());

        pThis->setFocusedBorder(source->getFocusedBorder());

        pThis->setFocusedBackground(source->getFocusedBackground());

        pThis->setRolloverBorder(source->getRolloverBorder());

        pThis->setRolloverBackground(source->getRolloverBackground());

        pThis->setPopupMenu(source->getPopupMenu());

        pThis->setFocusedForeground(source->getFocusedForeground());

        pThis->setRolloverForeground(source->getRolloverForeground());

        pThis->setDisabledForeground(source->getDisabledForeground());

        pThis->setForeground(source->getForeground());
    }
}

GetFieldHandlePtr  ComponentDecoratorBase::getHandleDecoratee (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new SFUnrecComponentPtr::GetHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId),
            const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDecoratee(void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new SFUnrecComponentPtr::EditHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId),
            this));

    returnValue->setSetMethod(boost::bind(&ComponentDecorator::setDecoratee,
                              static_cast<ComponentDecorator *>(this), _1));

    editSField(DecorateeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandlePosition        (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandlePosition       (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleClipBounds      (void) const
{
    SFPnt4f::GetHandlePtr returnValue(
        new  SFPnt4f::GetHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleClipBounds     (void)
{
    SFPnt4f::EditHandlePtr returnValue(
        new  SFPnt4f::EditHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             this));


    editSField(ClipBoundsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleMinSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleMinSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             this));


    editSField(MinSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleMaxSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleMaxSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             this));


    editSField(MaxSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandlePreferredSize   (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandlePreferredSize  (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             this));


    editSField(PreferredSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleSize            (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleSize           (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleVisible         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfVisible,
             this->getType().getFieldDesc(VisibleFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleVisible        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfVisible,
             this->getType().getFieldDesc(VisibleFieldId),
             this));


    editSField(VisibleFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleEnabled         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleEnabled        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             this));


    editSField(EnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleFocused         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFocused,
             this->getType().getFieldDesc(FocusedFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleFocused        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFocused,
             this->getType().getFieldDesc(FocusedFieldId),
             this));


    editSField(FocusedFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleConstraints     (void) const
{
    SFUnrecChildLayoutConstraintsPtr::GetHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::GetHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleConstraints    (void)
{
    SFUnrecChildLayoutConstraintsPtr::EditHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::EditHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setConstraints,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(ConstraintsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleBorder          (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleBorder         (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(BorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleBackground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleBackground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(BackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDisabledBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDisabledBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setDisabledBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(DisabledBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDisabledBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDisabledBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setDisabledBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(DisabledBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDragEnabled     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDragEnabled    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             this));


    editSField(DragEnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleTransferHandler (void) const
{
    SFUnrecTransferHandlerPtr::GetHandlePtr returnValue(
        new  SFUnrecTransferHandlerPtr::GetHandle(
             &_sfTransferHandler,
             this->getType().getFieldDesc(TransferHandlerFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleTransferHandler(void)
{
    SFUnrecTransferHandlerPtr::EditHandlePtr returnValue(
        new  SFUnrecTransferHandlerPtr::EditHandle(
             &_sfTransferHandler,
             this->getType().getFieldDesc(TransferHandlerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setTransferHandler,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(TransferHandlerFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleFocusedBorder   (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleFocusedBorder  (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setFocusedBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(FocusedBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleFocusedBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleFocusedBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setFocusedBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(FocusedBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleRolloverBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleRolloverBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setRolloverBorder,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(RolloverBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleRolloverBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleRolloverBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setRolloverBackground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(RolloverBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleToolTipText     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfToolTipText,
             this->getType().getFieldDesc(ToolTipTextFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleToolTipText    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfToolTipText,
             this->getType().getFieldDesc(ToolTipTextFieldId),
             this));


    editSField(ToolTipTextFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleParentContainer (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleParentContainer(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleClipping        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleClipping       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             this));


    editSField(ClippingFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandlePopupMenu       (void) const
{
    SFUnrecPopupMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::GetHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandlePopupMenu      (void)
{
    SFUnrecPopupMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::EditHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setPopupMenu,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(PopupMenuFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleFocusedForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleFocusedForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setFocusedForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(FocusedForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleRolloverForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleRolloverForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setRolloverForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(RolloverForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleDisabledForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleDisabledForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setDisabledForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(DisabledForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleForeground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleForeground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComponentDecorator::setForeground,
                    static_cast<ComponentDecorator *>(this), _1));

    editSField(ForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentDecoratorBase::getHandleCursor          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentDecoratorBase::editHandleCursor         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             this));


    editSField(CursorFieldMask);

    return returnValue;
}


GetEventHandlePtr ComponentDecoratorBase::getHandleMouseMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseMovedEventType>(
             const_cast<MouseMovedEventType *>(&_MouseMovedEvent),
             _producerType.getEventDescription(MouseMovedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseDraggedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseDraggedEventType>(
             const_cast<MouseDraggedEventType *>(&_MouseDraggedEvent),
             _producerType.getEventDescription(MouseDraggedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseClickedEventType>(
             const_cast<MouseClickedEventType *>(&_MouseClickedEvent),
             _producerType.getEventDescription(MouseClickedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseEnteredEventType>(
             const_cast<MouseEnteredEventType *>(&_MouseEnteredEvent),
             _producerType.getEventDescription(MouseEnteredEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseExitedEventType>(
             const_cast<MouseExitedEventType *>(&_MouseExitedEvent),
             _producerType.getEventDescription(MouseExitedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMousePressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MousePressedEventType>(
             const_cast<MousePressedEventType *>(&_MousePressedEvent),
             _producerType.getEventDescription(MousePressedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseReleasedEventType>(
             const_cast<MouseReleasedEventType *>(&_MouseReleasedEvent),
             _producerType.getEventDescription(MouseReleasedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleMouseWheelMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseWheelMovedEventType>(
             const_cast<MouseWheelMovedEventType *>(&_MouseWheelMovedEvent),
             _producerType.getEventDescription(MouseWheelMovedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleKeyPressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyPressedEventType>(
             const_cast<KeyPressedEventType *>(&_KeyPressedEvent),
             _producerType.getEventDescription(KeyPressedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleKeyReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyReleasedEventType>(
             const_cast<KeyReleasedEventType *>(&_KeyReleasedEvent),
             _producerType.getEventDescription(KeyReleasedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleKeyTypedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyTypedEventType>(
             const_cast<KeyTypedEventType *>(&_KeyTypedEvent),
             _producerType.getEventDescription(KeyTypedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleFocusGainedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<FocusGainedEventType>(
             const_cast<FocusGainedEventType *>(&_FocusGainedEvent),
             _producerType.getEventDescription(FocusGainedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleFocusLostSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<FocusLostEventType>(
             const_cast<FocusLostEventType *>(&_FocusLostEvent),
             _producerType.getEventDescription(FocusLostEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentHiddenSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentHiddenEventType>(
             const_cast<ComponentHiddenEventType *>(&_ComponentHiddenEvent),
             _producerType.getEventDescription(ComponentHiddenEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentVisibleSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentVisibleEventType>(
             const_cast<ComponentVisibleEventType *>(&_ComponentVisibleEvent),
             _producerType.getEventDescription(ComponentVisibleEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentMovedEventType>(
             const_cast<ComponentMovedEventType *>(&_ComponentMovedEvent),
             _producerType.getEventDescription(ComponentMovedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentResizedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentResizedEventType>(
             const_cast<ComponentResizedEventType *>(&_ComponentResizedEvent),
             _producerType.getEventDescription(ComponentResizedEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentEnabledSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentEnabledEventType>(
             const_cast<ComponentEnabledEventType *>(&_ComponentEnabledEvent),
             _producerType.getEventDescription(ComponentEnabledEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentDecoratorBase::getHandleComponentDisabledSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentDisabledEventType>(
             const_cast<ComponentDisabledEventType *>(&_ComponentDisabledEvent),
             _producerType.getEventDescription(ComponentDisabledEventId),
             const_cast<ComponentDecoratorBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ComponentDecoratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ComponentDecorator *pThis = static_cast<ComponentDecorator *>(this);

    pThis->execSync(static_cast<ComponentDecorator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ComponentDecoratorBase::resolveLinks(void)
{
    static_cast<ComponentDecorator *>(this)->setDecoratee(NULL);    

    Inherited::resolveLinks();

    static_cast<ComponentDecorator *>(this)->setConstraints(NULL);

    static_cast<ComponentDecorator *>(this)->setBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setDisabledBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setDisabledBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setTransferHandler(NULL);

    static_cast<ComponentDecorator *>(this)->setFocusedBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setFocusedBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setRolloverBorder(NULL);

    static_cast<ComponentDecorator *>(this)->setRolloverBackground(NULL);

    static_cast<ComponentDecorator *>(this)->setPopupMenu(NULL);

    static_cast<ComponentDecorator *>(this)->setFocusedForeground(NULL);

    static_cast<ComponentDecorator *>(this)->setRolloverForeground(NULL);

    static_cast<ComponentDecorator *>(this)->setDisabledForeground(NULL);

    static_cast<ComponentDecorator *>(this)->setForeground(NULL);


}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ComponentDecorator::_sfPosition field.
Pnt2f &ComponentDecoratorBase::editPosition(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editPosition();
    }
    else
    {
        return Inherited::editPosition();
    }
}

//! Get the value of the ComponentDecorator::_sfPosition field.
const Pnt2f &ComponentDecoratorBase::getPosition(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getPosition();
    }
    else
    {
        return Inherited::getPosition();
    }
}


//! Set the value of the ComponentDecorator::_sfPosition field.
void ComponentDecoratorBase::setPosition(const Pnt2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setPosition(value);
    }
    else
    {
        Inherited::setPosition(value);
    }
}

//! Get the value of the ComponentDecorator::_sfClipBounds field.
Pnt4f &ComponentDecoratorBase::editClipBounds(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editClipBounds();
    }
    else
    {
        return Inherited::editClipBounds();
    }
}

//! Get the value of the ComponentDecorator::_sfClipBounds field.
const Pnt4f &ComponentDecoratorBase::getClipBounds(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getClipBounds();
    }
    else
    {
        return Inherited::getClipBounds();
    }
}


//! Set the value of the ComponentDecorator::_sfClipBounds field.
void ComponentDecoratorBase::setClipBounds(const Pnt4f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setClipBounds(value);
    }
    else
    {
        Inherited::setClipBounds(value);
    }
}

//! Get the value of the ComponentDecorator::_sfMinSize field.
Vec2f &ComponentDecoratorBase::editMinSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editMinSize();
    }
    else
    {
        return Inherited::editMinSize();
    }
}

//! Get the value of the ComponentDecorator::_sfMinSize field.
const Vec2f &ComponentDecoratorBase::getMinSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getMinSize();
    }
    else
    {
        return Inherited::getMinSize();
    }
}


//! Set the value of the ComponentDecorator::_sfMinSize field.
void ComponentDecoratorBase::setMinSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setMinSize(value);
    }
    else
    {
        Inherited::setMinSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfMaxSize field.
Vec2f &ComponentDecoratorBase::editMaxSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editMaxSize();
    }
    else
    {
        return Inherited::editMaxSize();
    }
}

//! Get the value of the ComponentDecorator::_sfMaxSize field.
const Vec2f &ComponentDecoratorBase::getMaxSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getMaxSize();
    }
    else
    {
        return Inherited::getMaxSize();
    }
}


//! Set the value of the ComponentDecorator::_sfMaxSize field.
void ComponentDecoratorBase::setMaxSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setMaxSize(value);
    }
    else
    {
        Inherited::setMaxSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfPreferredSize field.
Vec2f &ComponentDecoratorBase::editPreferredSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editPreferredSize();
    }
    else
    {
        return Inherited::editPreferredSize();
    }
}

//! Get the value of the ComponentDecorator::_sfPreferredSize field.
const Vec2f &ComponentDecoratorBase::getPreferredSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getPreferredSize();
    }
    else
    {
        return Inherited::getPreferredSize();
    }
}


//! Set the value of the ComponentDecorator::_sfPreferredSize field.
void ComponentDecoratorBase::setPreferredSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setPreferredSize(value);
    }
    else
    {
        Inherited::setPreferredSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfSize field.
Vec2f &ComponentDecoratorBase::editSize(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editSize();
    }
    else
    {
        return Inherited::editSize();
    }
}

//! Get the value of the ComponentDecorator::_sfSize field.
const Vec2f &ComponentDecoratorBase::getSize(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getSize();
    }
    else
    {
        return Inherited::getSize();
    }
}


//! Set the value of the ComponentDecorator::_sfSize field.
void ComponentDecoratorBase::setSize(const Vec2f &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setSize(value);
    }
    else
    {
        Inherited::setSize(value);
    }
}

//! Get the value of the ComponentDecorator::_sfVisible field.
bool &ComponentDecoratorBase::editVisible(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editVisible();
    }
    else
    {
        return Inherited::editVisible();
    }
}

//! Get the value of the ComponentDecorator::_sfVisible field.
      bool  ComponentDecoratorBase::getVisible(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getVisible();
    }
    else
    {
        return Inherited::getVisible();
    }
}


//! Set the value of the ComponentDecorator::_sfVisible field.
void ComponentDecoratorBase::setVisible(const bool value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setVisible(value);
    }
    else
    {
        Inherited::setVisible(value);
    }
}

//! Get the value of the ComponentDecorator::_sfEnabled field.
bool &ComponentDecoratorBase::editEnabled(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editEnabled();
    }
    else
    {
        return Inherited::editEnabled();
    }
}

//! Get the value of the ComponentDecorator::_sfEnabled field.
      bool  ComponentDecoratorBase::getEnabled(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getEnabled();
    }
    else
    {
        return Inherited::getEnabled();
    }
}


//! Set the value of the ComponentDecorator::_sfEnabled field.
void ComponentDecoratorBase::setEnabled(const bool value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setEnabled(value);
    }
    else
    {
        Inherited::setEnabled(value);
    }
}

//! Get the value of the ComponentDecorator::_sfFocused field.
bool &ComponentDecoratorBase::editFocused(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editFocused();
    }
    else
    {
        return Inherited::editFocused();
    }
}

//! Get the value of the ComponentDecorator::_sfFocused field.
      bool  ComponentDecoratorBase::getFocused(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getFocused();
    }
    else
    {
        return Inherited::getFocused();
    }
}


//! Set the value of the ComponentDecorator::_sfFocused field.
void ComponentDecoratorBase::setFocused(const bool value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setFocused(value);
    }
    else
    {
        Inherited::setFocused(value);
    }
}

//! Get the value of the ComponentDecorator::_sfConstraints field.
LayoutConstraints * ComponentDecoratorBase::getConstraints(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getConstraints();
    }
    else
    {
        return Inherited::getConstraints();
    }
}

//! Set the value of the ComponentDecorator::_sfConstraints field.
void ComponentDecoratorBase::setConstraints(LayoutConstraints * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setConstraints(value);
    }
    else
    {
        Inherited::setConstraints(value);
    }
}

//! Get the value of the ComponentDecorator::_sfBorder field.
Border * ComponentDecoratorBase::getBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getBorder();
    }
    else
    {
        return Inherited::getBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfBorder field.
void ComponentDecoratorBase::setBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setBorder(value);
    }
    else
    {
        Inherited::setBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfBackground field.
Layer * ComponentDecoratorBase::getBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getBackground();
    }
    else
    {
        return Inherited::getBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfBackground field.
void ComponentDecoratorBase::setBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setBackground(value);
    }
    else
    {
        Inherited::setBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDisabledBorder field.
Border * ComponentDecoratorBase::getDisabledBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDisabledBorder();
    }
    else
    {
        return Inherited::getDisabledBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfDisabledBorder field.
void ComponentDecoratorBase::setDisabledBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDisabledBorder(value);
    }
    else
    {
        Inherited::setDisabledBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDisabledBackground field.
Layer * ComponentDecoratorBase::getDisabledBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDisabledBackground();
    }
    else
    {
        return Inherited::getDisabledBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfDisabledBackground field.
void ComponentDecoratorBase::setDisabledBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDisabledBackground(value);
    }
    else
    {
        Inherited::setDisabledBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDragEnabled field.
bool &ComponentDecoratorBase::editDragEnabled(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editDragEnabled();
    }
    else
    {
        return Inherited::editDragEnabled();
    }
}

//! Get the value of the ComponentDecorator::_sfDragEnabled field.
      bool  ComponentDecoratorBase::getDragEnabled(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDragEnabled();
    }
    else
    {
        return Inherited::getDragEnabled();
    }
}


//! Set the value of the ComponentDecorator::_sfDragEnabled field.
void ComponentDecoratorBase::setDragEnabled(const bool value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDragEnabled(value);
    }
    else
    {
        Inherited::setDragEnabled(value);
    }
}

//! Get the value of the ComponentDecorator::_sfTransferHandler field.
TransferHandler * ComponentDecoratorBase::getTransferHandler(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getTransferHandler();
    }
    else
    {
        return Inherited::getTransferHandler();
    }
}

//! Set the value of the ComponentDecorator::_sfTransferHandler field.
void ComponentDecoratorBase::setTransferHandler(TransferHandler * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setTransferHandler(value);
    }
    else
    {
        Inherited::setTransferHandler(value);
    }
}

//! Get the value of the ComponentDecorator::_sfFocusedBorder field.
Border * ComponentDecoratorBase::getFocusedBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getFocusedBorder();
    }
    else
    {
        return Inherited::getFocusedBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfFocusedBorder field.
void ComponentDecoratorBase::setFocusedBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setFocusedBorder(value);
    }
    else
    {
        Inherited::setFocusedBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfFocusedBackground field.
Layer * ComponentDecoratorBase::getFocusedBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getFocusedBackground();
    }
    else
    {
        return Inherited::getFocusedBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfFocusedBackground field.
void ComponentDecoratorBase::setFocusedBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setFocusedBackground(value);
    }
    else
    {
        Inherited::setFocusedBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfRolloverBorder field.
Border * ComponentDecoratorBase::getRolloverBorder(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getRolloverBorder();
    }
    else
    {
        return Inherited::getRolloverBorder();
    }
}

//! Set the value of the ComponentDecorator::_sfRolloverBorder field.
void ComponentDecoratorBase::setRolloverBorder(Border * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setRolloverBorder(value);
    }
    else
    {
        Inherited::setRolloverBorder(value);
    }
}

//! Get the value of the ComponentDecorator::_sfRolloverBackground field.
Layer * ComponentDecoratorBase::getRolloverBackground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getRolloverBackground();
    }
    else
    {
        return Inherited::getRolloverBackground();
    }
}

//! Set the value of the ComponentDecorator::_sfRolloverBackground field.
void ComponentDecoratorBase::setRolloverBackground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setRolloverBackground(value);
    }
    else
    {
        Inherited::setRolloverBackground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfToolTipText field.
std::string &ComponentDecoratorBase::editToolTipText(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editToolTipText();
    }
    else
    {
        return Inherited::editToolTipText();
    }
}

//! Get the value of the ComponentDecorator::_sfToolTipText field.
const std::string &ComponentDecoratorBase::getToolTipText(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getToolTipText();
    }
    else
    {
        return Inherited::getToolTipText();
    }
}


//! Set the value of the ComponentDecorator::_sfToolTipText field.
void ComponentDecoratorBase::setToolTipText(const std::string &value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setToolTipText(value);
    }
    else
    {
        Inherited::setToolTipText(value);
    }
}

//! Get the value of the ComponentDecorator::_sfOpacity field.
Real32 &ComponentDecoratorBase::editOpacity(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editOpacity();
    }
    else
    {
        return Inherited::editOpacity();
    }
}

//! Get the value of the ComponentDecorator::_sfOpacity field.
      Real32  ComponentDecoratorBase::getOpacity(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getOpacity();
    }
    else
    {
        return Inherited::getOpacity();
    }
}


//! Set the value of the ComponentDecorator::_sfOpacity field.
void ComponentDecoratorBase::setOpacity(const Real32 value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setOpacity(value);
    }
    else
    {
        Inherited::setOpacity(value);
    }
}

//! Get the value of the ComponentDecorator::_sfClipping field.
bool &ComponentDecoratorBase::editClipping(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editClipping();
    }
    else
    {
        return Inherited::editClipping();
    }
}

//! Get the value of the ComponentDecorator::_sfClipping field.
      bool  ComponentDecoratorBase::getClipping(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getClipping();
    }
    else
    {
        return Inherited::getClipping();
    }
}


//! Set the value of the ComponentDecorator::_sfClipping field.
void ComponentDecoratorBase::setClipping(const bool value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setClipping(value);
    }
    else
    {
        Inherited::setClipping(value);
    }
}

//! Get the value of the ComponentDecorator::_sfPopupMenu field.
PopupMenu * ComponentDecoratorBase::getPopupMenu(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getPopupMenu();
    }
    else
    {
        return Inherited::getPopupMenu();
    }
}

//! Set the value of the ComponentDecorator::_sfPopupMenu field.
void ComponentDecoratorBase::setPopupMenu(PopupMenu * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setPopupMenu(value);
    }
    else
    {
        Inherited::setPopupMenu(value);
    }
}

//! Get the value of the ComponentDecorator::_sfFocusedForeground field.
Layer * ComponentDecoratorBase::getFocusedForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getFocusedForeground();
    }
    else
    {
        return Inherited::getFocusedForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfFocusedForeground field.
void ComponentDecoratorBase::setFocusedForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setFocusedForeground(value);
    }
    else
    {
        Inherited::setFocusedForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfRolloverForeground field.
Layer * ComponentDecoratorBase::getRolloverForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getRolloverForeground();
    }
    else
    {
        return Inherited::getRolloverForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfRolloverForeground field.
void ComponentDecoratorBase::setRolloverForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setRolloverForeground(value);
    }
    else
    {
        Inherited::setRolloverForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfDisabledForeground field.
Layer * ComponentDecoratorBase::getDisabledForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getDisabledForeground();
    }
    else
    {
        return Inherited::getDisabledForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfDisabledForeground field.
void ComponentDecoratorBase::setDisabledForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setDisabledForeground(value);
    }
    else
    {
        Inherited::setDisabledForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfForeground field.
Layer * ComponentDecoratorBase::getForeground(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getForeground();
    }
    else
    {
        return Inherited::getForeground();
    }
}

//! Set the value of the ComponentDecorator::_sfForeground field.
void ComponentDecoratorBase::setForeground(Layer * const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setForeground(value);
    }
    else
    {
        Inherited::setForeground(value);
    }
}

//! Get the value of the ComponentDecorator::_sfCursor field.
UInt32 &ComponentDecoratorBase::editCursor(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->editCursor();
    }
    else
    {
        return Inherited::editCursor();
    }
}

//! Get the value of the ComponentDecorator::_sfCursor field.
      UInt32  ComponentDecoratorBase::getCursor(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->getCursor();
    }
    else
    {
        return Inherited::getCursor();
    }
}


//! Set the value of the ComponentDecorator::_sfCursor field.
void ComponentDecoratorBase::setCursor(const UInt32 value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->setCursor(value);
    }
    else
    {
        Inherited::setCursor(value);
    }
}


OSG_END_NAMESPACE
