/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScrollBar!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGAdjustmentEventDetails.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ScrollBarBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ScrollBarBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &ScrollBarBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 ScrollBarBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 ScrollBarBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ScrollBar::_sfOrientation field.

inline
UInt32 &ScrollBarBase::editOrientation(void)
{
    editSField(OrientationFieldMask);

    return _sfOrientation.getValue();
}

//! Get the value of the ScrollBar::_sfOrientation field.
inline
      UInt32  ScrollBarBase::getOrientation(void) const
{
    return _sfOrientation.getValue();
}

//! Set the value of the ScrollBar::_sfOrientation field.
inline
void ScrollBarBase::setOrientation(const UInt32 value)
{
    editSField(OrientationFieldMask);

    _sfOrientation.setValue(value);
}
//! Get the value of the ScrollBar::_sfUnitIncrement field.

inline
UInt32 &ScrollBarBase::editUnitIncrement(void)
{
    editSField(UnitIncrementFieldMask);

    return _sfUnitIncrement.getValue();
}

//! Get the value of the ScrollBar::_sfUnitIncrement field.
inline
      UInt32  ScrollBarBase::getUnitIncrement(void) const
{
    return _sfUnitIncrement.getValue();
}

//! Set the value of the ScrollBar::_sfUnitIncrement field.
inline
void ScrollBarBase::setUnitIncrement(const UInt32 value)
{
    editSField(UnitIncrementFieldMask);

    _sfUnitIncrement.setValue(value);
}
//! Get the value of the ScrollBar::_sfBlockIncrement field.

inline
UInt32 &ScrollBarBase::editBlockIncrement(void)
{
    editSField(BlockIncrementFieldMask);

    return _sfBlockIncrement.getValue();
}

//! Get the value of the ScrollBar::_sfBlockIncrement field.
inline
      UInt32  ScrollBarBase::getBlockIncrement(void) const
{
    return _sfBlockIncrement.getValue();
}

//! Set the value of the ScrollBar::_sfBlockIncrement field.
inline
void ScrollBarBase::setBlockIncrement(const UInt32 value)
{
    editSField(BlockIncrementFieldMask);

    _sfBlockIncrement.setValue(value);
}

//! Get the value of the ScrollBar::_sfVerticalMinButton field.
inline
Button * ScrollBarBase::getVerticalMinButton(void) const
{
    return _sfVerticalMinButton.getValue();
}

//! Set the value of the ScrollBar::_sfVerticalMinButton field.
inline
void ScrollBarBase::setVerticalMinButton(Button * const value)
{
    editSField(VerticalMinButtonFieldMask);

    _sfVerticalMinButton.setValue(value);
}

//! Get the value of the ScrollBar::_sfVerticalMaxButton field.
inline
Button * ScrollBarBase::getVerticalMaxButton(void) const
{
    return _sfVerticalMaxButton.getValue();
}

//! Set the value of the ScrollBar::_sfVerticalMaxButton field.
inline
void ScrollBarBase::setVerticalMaxButton(Button * const value)
{
    editSField(VerticalMaxButtonFieldMask);

    _sfVerticalMaxButton.setValue(value);
}

//! Get the value of the ScrollBar::_sfVerticalScrollBar field.
inline
Button * ScrollBarBase::getVerticalScrollBar(void) const
{
    return _sfVerticalScrollBar.getValue();
}

//! Set the value of the ScrollBar::_sfVerticalScrollBar field.
inline
void ScrollBarBase::setVerticalScrollBar(Button * const value)
{
    editSField(VerticalScrollBarFieldMask);

    _sfVerticalScrollBar.setValue(value);
}

//! Get the value of the ScrollBar::_sfVerticalScrollField field.
inline
Button * ScrollBarBase::getVerticalScrollField(void) const
{
    return _sfVerticalScrollField.getValue();
}

//! Set the value of the ScrollBar::_sfVerticalScrollField field.
inline
void ScrollBarBase::setVerticalScrollField(Button * const value)
{
    editSField(VerticalScrollFieldFieldMask);

    _sfVerticalScrollField.setValue(value);
}

//! Get the value of the ScrollBar::_sfHorizontalMinButton field.
inline
Button * ScrollBarBase::getHorizontalMinButton(void) const
{
    return _sfHorizontalMinButton.getValue();
}

//! Set the value of the ScrollBar::_sfHorizontalMinButton field.
inline
void ScrollBarBase::setHorizontalMinButton(Button * const value)
{
    editSField(HorizontalMinButtonFieldMask);

    _sfHorizontalMinButton.setValue(value);
}

//! Get the value of the ScrollBar::_sfHorizontalMaxButton field.
inline
Button * ScrollBarBase::getHorizontalMaxButton(void) const
{
    return _sfHorizontalMaxButton.getValue();
}

//! Set the value of the ScrollBar::_sfHorizontalMaxButton field.
inline
void ScrollBarBase::setHorizontalMaxButton(Button * const value)
{
    editSField(HorizontalMaxButtonFieldMask);

    _sfHorizontalMaxButton.setValue(value);
}

//! Get the value of the ScrollBar::_sfHorizontalScrollBar field.
inline
Button * ScrollBarBase::getHorizontalScrollBar(void) const
{
    return _sfHorizontalScrollBar.getValue();
}

//! Set the value of the ScrollBar::_sfHorizontalScrollBar field.
inline
void ScrollBarBase::setHorizontalScrollBar(Button * const value)
{
    editSField(HorizontalScrollBarFieldMask);

    _sfHorizontalScrollBar.setValue(value);
}

//! Get the value of the ScrollBar::_sfHorizontalScrollField field.
inline
Button * ScrollBarBase::getHorizontalScrollField(void) const
{
    return _sfHorizontalScrollField.getValue();
}

//! Set the value of the ScrollBar::_sfHorizontalScrollField field.
inline
void ScrollBarBase::setHorizontalScrollField(Button * const value)
{
    editSField(HorizontalScrollFieldFieldMask);

    _sfHorizontalScrollField.setValue(value);
}
//! Get the value of the ScrollBar::_sfScrollBarMinLength field.

inline
UInt32 &ScrollBarBase::editScrollBarMinLength(void)
{
    editSField(ScrollBarMinLengthFieldMask);

    return _sfScrollBarMinLength.getValue();
}

//! Get the value of the ScrollBar::_sfScrollBarMinLength field.
inline
      UInt32  ScrollBarBase::getScrollBarMinLength(void) const
{
    return _sfScrollBarMinLength.getValue();
}

//! Set the value of the ScrollBar::_sfScrollBarMinLength field.
inline
void ScrollBarBase::setScrollBarMinLength(const UInt32 value)
{
    editSField(ScrollBarMinLengthFieldMask);

    _sfScrollBarMinLength.setValue(value);
}

//! Get the value of the ScrollBar::_sfRangeModel field.
inline
BoundedRangeModel * ScrollBarBase::getRangeModel(void) const
{
    return _sfRangeModel.getValue();
}

//! Set the value of the ScrollBar::_sfRangeModel field.
inline
void ScrollBarBase::setRangeModel(BoundedRangeModel * const value)
{
    editSField(RangeModelFieldMask);

    _sfRangeModel.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ScrollBarBase::execSync (      ScrollBarBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pFrom->_sfOrientation);

    if(FieldBits::NoField != (UnitIncrementFieldMask & whichField))
        _sfUnitIncrement.syncWith(pFrom->_sfUnitIncrement);

    if(FieldBits::NoField != (BlockIncrementFieldMask & whichField))
        _sfBlockIncrement.syncWith(pFrom->_sfBlockIncrement);

    if(FieldBits::NoField != (VerticalMinButtonFieldMask & whichField))
        _sfVerticalMinButton.syncWith(pFrom->_sfVerticalMinButton);

    if(FieldBits::NoField != (VerticalMaxButtonFieldMask & whichField))
        _sfVerticalMaxButton.syncWith(pFrom->_sfVerticalMaxButton);

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
        _sfVerticalScrollBar.syncWith(pFrom->_sfVerticalScrollBar);

    if(FieldBits::NoField != (VerticalScrollFieldFieldMask & whichField))
        _sfVerticalScrollField.syncWith(pFrom->_sfVerticalScrollField);

    if(FieldBits::NoField != (HorizontalMinButtonFieldMask & whichField))
        _sfHorizontalMinButton.syncWith(pFrom->_sfHorizontalMinButton);

    if(FieldBits::NoField != (HorizontalMaxButtonFieldMask & whichField))
        _sfHorizontalMaxButton.syncWith(pFrom->_sfHorizontalMaxButton);

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
        _sfHorizontalScrollBar.syncWith(pFrom->_sfHorizontalScrollBar);

    if(FieldBits::NoField != (HorizontalScrollFieldFieldMask & whichField))
        _sfHorizontalScrollField.syncWith(pFrom->_sfHorizontalScrollField);

    if(FieldBits::NoField != (ScrollBarMinLengthFieldMask & whichField))
        _sfScrollBarMinLength.syncWith(pFrom->_sfScrollBarMinLength);

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
        _sfRangeModel.syncWith(pFrom->_sfRangeModel);
}
#endif


inline
const Char8 *ScrollBarBase::getClassname(void)
{
    return "ScrollBar";
}
inline
boost::signals2::connection  ScrollBarBase::connectAdjustmentValueChanged(const AdjustmentValueChangedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _AdjustmentValueChangedEvent.connect(listener, at);
}

inline
boost::signals2::connection  ScrollBarBase::connectAdjustmentValueChanged(const AdjustmentValueChangedEventType::group_type &group,
                                                    const AdjustmentValueChangedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _AdjustmentValueChangedEvent.connect(group, listener, at);
}

inline
void  ScrollBarBase::disconnectAdjustmentValueChanged(const AdjustmentValueChangedEventType::group_type &group)
{
    _AdjustmentValueChangedEvent.disconnect(group);
}

inline
void  ScrollBarBase::disconnectAllSlotsAdjustmentValueChanged(void)
{
    _AdjustmentValueChangedEvent.disconnect_all_slots();
}

inline
bool  ScrollBarBase::isEmptyAdjustmentValueChanged(void) const
{
    return _AdjustmentValueChangedEvent.empty();
}

inline
UInt32  ScrollBarBase::numSlotsAdjustmentValueChanged(void) const
{
    return _AdjustmentValueChangedEvent.num_slots();
}

inline
void ScrollBarBase::produceAdjustmentValueChanged(AdjustmentValueChangedEventDetailsType* const e)
{
    produceEvent(AdjustmentValueChangedEventId, e);
}

OSG_GEN_CONTAINERPTR(ScrollBar);

OSG_END_NAMESPACE

