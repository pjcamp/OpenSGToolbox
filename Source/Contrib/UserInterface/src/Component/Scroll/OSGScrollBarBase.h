/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScrollBar
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSCROLLBARBASE_H_
#define _OSGSCROLLBARBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponentContainer.h" // Parent

#include "OSGSysFields.h"               // Orientation type
#include "OSGButtonFields.h"            // VerticalMinButton type
#include "OSGBoundedRangeModelFields.h" // RangeModel type

#include "OSGScrollBarFields.h"

#include "OSGAdjustmentEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class ScrollBar;

//! \brief ScrollBar Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING ScrollBarBase : public ComponentContainer
{
  public:

    typedef ComponentContainer Inherited;
    typedef ComponentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ScrollBar);
    
    
    typedef AdjustmentEventDetails AdjustmentValueChangedEventDetailsType;

    typedef boost::signals2::signal<void (AdjustmentEventDetails* const, UInt32), ConsumableEventCombiner> AdjustmentValueChangedEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        OrientationFieldId = Inherited::NextFieldId,
        UnitIncrementFieldId = OrientationFieldId + 1,
        BlockIncrementFieldId = UnitIncrementFieldId + 1,
        VerticalMinButtonFieldId = BlockIncrementFieldId + 1,
        VerticalMaxButtonFieldId = VerticalMinButtonFieldId + 1,
        VerticalScrollBarFieldId = VerticalMaxButtonFieldId + 1,
        VerticalScrollFieldFieldId = VerticalScrollBarFieldId + 1,
        HorizontalMinButtonFieldId = VerticalScrollFieldFieldId + 1,
        HorizontalMaxButtonFieldId = HorizontalMinButtonFieldId + 1,
        HorizontalScrollBarFieldId = HorizontalMaxButtonFieldId + 1,
        HorizontalScrollFieldFieldId = HorizontalScrollBarFieldId + 1,
        ScrollBarMinLengthFieldId = HorizontalScrollFieldFieldId + 1,
        RangeModelFieldId = ScrollBarMinLengthFieldId + 1,
        NextFieldId = RangeModelFieldId + 1
    };

    static const OSG::BitVector OrientationFieldMask =
        (TypeTraits<BitVector>::One << OrientationFieldId);
    static const OSG::BitVector UnitIncrementFieldMask =
        (TypeTraits<BitVector>::One << UnitIncrementFieldId);
    static const OSG::BitVector BlockIncrementFieldMask =
        (TypeTraits<BitVector>::One << BlockIncrementFieldId);
    static const OSG::BitVector VerticalMinButtonFieldMask =
        (TypeTraits<BitVector>::One << VerticalMinButtonFieldId);
    static const OSG::BitVector VerticalMaxButtonFieldMask =
        (TypeTraits<BitVector>::One << VerticalMaxButtonFieldId);
    static const OSG::BitVector VerticalScrollBarFieldMask =
        (TypeTraits<BitVector>::One << VerticalScrollBarFieldId);
    static const OSG::BitVector VerticalScrollFieldFieldMask =
        (TypeTraits<BitVector>::One << VerticalScrollFieldFieldId);
    static const OSG::BitVector HorizontalMinButtonFieldMask =
        (TypeTraits<BitVector>::One << HorizontalMinButtonFieldId);
    static const OSG::BitVector HorizontalMaxButtonFieldMask =
        (TypeTraits<BitVector>::One << HorizontalMaxButtonFieldId);
    static const OSG::BitVector HorizontalScrollBarFieldMask =
        (TypeTraits<BitVector>::One << HorizontalScrollBarFieldId);
    static const OSG::BitVector HorizontalScrollFieldFieldMask =
        (TypeTraits<BitVector>::One << HorizontalScrollFieldFieldId);
    static const OSG::BitVector ScrollBarMinLengthFieldMask =
        (TypeTraits<BitVector>::One << ScrollBarMinLengthFieldId);
    static const OSG::BitVector RangeModelFieldMask =
        (TypeTraits<BitVector>::One << RangeModelFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUInt32          SFOrientationType;
    typedef SFUInt32          SFUnitIncrementType;
    typedef SFUInt32          SFBlockIncrementType;
    typedef SFUnrecButtonPtr  SFVerticalMinButtonType;
    typedef SFUnrecButtonPtr  SFVerticalMaxButtonType;
    typedef SFUnrecButtonPtr  SFVerticalScrollBarType;
    typedef SFUnrecButtonPtr  SFVerticalScrollFieldType;
    typedef SFUnrecButtonPtr  SFHorizontalMinButtonType;
    typedef SFUnrecButtonPtr  SFHorizontalMaxButtonType;
    typedef SFUnrecButtonPtr  SFHorizontalScrollBarType;
    typedef SFUnrecButtonPtr  SFHorizontalScrollFieldType;
    typedef SFUInt32          SFScrollBarMinLengthType;
    typedef SFUnrecBoundedRangeModelPtr SFRangeModelType;

    enum
    {
        AdjustmentValueChangedEventId = Inherited::NextProducedEventId,
        NextProducedEventId = AdjustmentValueChangedEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt32            *editSFOrientation    (void);
            const SFUInt32            *getSFOrientation     (void) const;

                  SFUInt32            *editSFUnitIncrement  (void);
            const SFUInt32            *getSFUnitIncrement   (void) const;

                  SFUInt32            *editSFBlockIncrement (void);
            const SFUInt32            *getSFBlockIncrement  (void) const;
            const SFUnrecButtonPtr    *getSFVerticalMinButton(void) const;
                  SFUnrecButtonPtr    *editSFVerticalMinButton(void);
            const SFUnrecButtonPtr    *getSFVerticalMaxButton(void) const;
                  SFUnrecButtonPtr    *editSFVerticalMaxButton(void);
            const SFUnrecButtonPtr    *getSFVerticalScrollBar(void) const;
                  SFUnrecButtonPtr    *editSFVerticalScrollBar(void);
            const SFUnrecButtonPtr    *getSFVerticalScrollField(void) const;
                  SFUnrecButtonPtr    *editSFVerticalScrollField(void);
            const SFUnrecButtonPtr    *getSFHorizontalMinButton(void) const;
                  SFUnrecButtonPtr    *editSFHorizontalMinButton(void);
            const SFUnrecButtonPtr    *getSFHorizontalMaxButton(void) const;
                  SFUnrecButtonPtr    *editSFHorizontalMaxButton(void);
            const SFUnrecButtonPtr    *getSFHorizontalScrollBar(void) const;
                  SFUnrecButtonPtr    *editSFHorizontalScrollBar(void);
            const SFUnrecButtonPtr    *getSFHorizontalScrollField(void) const;
                  SFUnrecButtonPtr    *editSFHorizontalScrollField(void);

                  SFUInt32            *editSFScrollBarMinLength(void);
            const SFUInt32            *getSFScrollBarMinLength (void) const;
            const SFUnrecBoundedRangeModelPtr *getSFRangeModel     (void) const;
                  SFUnrecBoundedRangeModelPtr *editSFRangeModel     (void);


                  UInt32              &editOrientation    (void);
                  UInt32               getOrientation     (void) const;

                  UInt32              &editUnitIncrement  (void);
                  UInt32               getUnitIncrement   (void) const;

                  UInt32              &editBlockIncrement (void);
                  UInt32               getBlockIncrement  (void) const;

                  Button * getVerticalMinButton(void) const;

                  Button * getVerticalMaxButton(void) const;

                  Button * getVerticalScrollBar(void) const;

                  Button * getVerticalScrollField(void) const;

                  Button * getHorizontalMinButton(void) const;

                  Button * getHorizontalMaxButton(void) const;

                  Button * getHorizontalScrollBar(void) const;

                  Button * getHorizontalScrollField(void) const;

                  UInt32              &editScrollBarMinLength(void);
                  UInt32               getScrollBarMinLength (void) const;

                  BoundedRangeModel * getRangeModel     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setOrientation    (const UInt32 value);
            void setUnitIncrement  (const UInt32 value);
            void setBlockIncrement (const UInt32 value);
            void setVerticalMinButton(Button * const value);
            void setVerticalMaxButton(Button * const value);
            void setVerticalScrollBar(Button * const value);
            void setVerticalScrollField(Button * const value);
            void setHorizontalMinButton(Button * const value);
            void setHorizontalMaxButton(Button * const value);
            void setHorizontalScrollBar(Button * const value);
            void setHorizontalScrollField(Button * const value);
            void setScrollBarMinLength(const UInt32 value);
            void setRangeModel     (BoundedRangeModel * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //AdjustmentValueChanged
    boost::signals2::connection connectAdjustmentValueChanged(const AdjustmentValueChangedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectAdjustmentValueChanged(const AdjustmentValueChangedEventType::group_type &group,
                                                       const AdjustmentValueChangedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectAdjustmentValueChanged (const AdjustmentValueChangedEventType::group_type &group);
    void   disconnectAllSlotsAdjustmentValueChanged(void);
    bool   isEmptyAdjustmentValueChanged    (void) const;
    UInt32 numSlotsAdjustmentValueChanged   (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ScrollBarTransitPtr  create          (void);
    static  ScrollBar           *createEmpty     (void);

    static  ScrollBarTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ScrollBar            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ScrollBarTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    AdjustmentValueChangedEventType _AdjustmentValueChangedEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt32          _sfOrientation;
    SFUInt32          _sfUnitIncrement;
    SFUInt32          _sfBlockIncrement;
    SFUnrecButtonPtr  _sfVerticalMinButton;
    SFUnrecButtonPtr  _sfVerticalMaxButton;
    SFUnrecButtonPtr  _sfVerticalScrollBar;
    SFUnrecButtonPtr  _sfVerticalScrollField;
    SFUnrecButtonPtr  _sfHorizontalMinButton;
    SFUnrecButtonPtr  _sfHorizontalMaxButton;
    SFUnrecButtonPtr  _sfHorizontalScrollBar;
    SFUnrecButtonPtr  _sfHorizontalScrollField;
    SFUInt32          _sfScrollBarMinLength;
    SFUnrecBoundedRangeModelPtr _sfRangeModel;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ScrollBarBase(void);
    ScrollBarBase(const ScrollBarBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ScrollBarBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ScrollBar *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleOrientation     (void) const;
    EditFieldHandlePtr editHandleOrientation    (void);
    GetFieldHandlePtr  getHandleUnitIncrement   (void) const;
    EditFieldHandlePtr editHandleUnitIncrement  (void);
    GetFieldHandlePtr  getHandleBlockIncrement  (void) const;
    EditFieldHandlePtr editHandleBlockIncrement (void);
    GetFieldHandlePtr  getHandleVerticalMinButton (void) const;
    EditFieldHandlePtr editHandleVerticalMinButton(void);
    GetFieldHandlePtr  getHandleVerticalMaxButton (void) const;
    EditFieldHandlePtr editHandleVerticalMaxButton(void);
    GetFieldHandlePtr  getHandleVerticalScrollBar (void) const;
    EditFieldHandlePtr editHandleVerticalScrollBar(void);
    GetFieldHandlePtr  getHandleVerticalScrollField (void) const;
    EditFieldHandlePtr editHandleVerticalScrollField(void);
    GetFieldHandlePtr  getHandleHorizontalMinButton (void) const;
    EditFieldHandlePtr editHandleHorizontalMinButton(void);
    GetFieldHandlePtr  getHandleHorizontalMaxButton (void) const;
    EditFieldHandlePtr editHandleHorizontalMaxButton(void);
    GetFieldHandlePtr  getHandleHorizontalScrollBar (void) const;
    EditFieldHandlePtr editHandleHorizontalScrollBar(void);
    GetFieldHandlePtr  getHandleHorizontalScrollField (void) const;
    EditFieldHandlePtr editHandleHorizontalScrollField(void);
    GetFieldHandlePtr  getHandleScrollBarMinLength (void) const;
    EditFieldHandlePtr editHandleScrollBarMinLength(void);
    GetFieldHandlePtr  getHandleRangeModel      (void) const;
    EditFieldHandlePtr editHandleRangeModel     (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleAdjustmentValueChangedSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceAdjustmentValueChanged  (AdjustmentValueChangedEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ScrollBarBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ScrollBarBase &source);
};

typedef ScrollBarBase *ScrollBarBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSCROLLBARBASE_H_ */
