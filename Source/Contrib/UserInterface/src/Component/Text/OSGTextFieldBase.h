/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextField
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTEXTFIELDBASE_H_
#define _OSGTEXTFIELDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGEditableTextComponent.h" // Parent

#include "OSGVecFields.h"               // Alignment type
#include "OSGUIFontFields.h"            // EmptyDescTextFont type
#include "OSGBaseFields.h"              // EmptyDescText type

#include "OSGTextFieldFields.h"

#include "OSGActionEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class TextField;

//! \brief TextField Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING TextFieldBase : public EditableTextComponent
{
  public:

    typedef EditableTextComponent Inherited;
    typedef EditableTextComponent ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(TextField);
    
    
    typedef ActionEventDetails ActionPerformedEventDetailsType;

    typedef boost::signals2::signal<void (ActionEventDetails* const, UInt32), ConsumableEventCombiner> ActionPerformedEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        AlignmentFieldId = Inherited::NextFieldId,
        EmptyDescTextFontFieldId = AlignmentFieldId + 1,
        EmptyDescTextFieldId = EmptyDescTextFontFieldId + 1,
        EmptyDescTextColorFieldId = EmptyDescTextFieldId + 1,
        NextFieldId = EmptyDescTextColorFieldId + 1
    };

    static const OSG::BitVector AlignmentFieldMask =
        (TypeTraits<BitVector>::One << AlignmentFieldId);
    static const OSG::BitVector EmptyDescTextFontFieldMask =
        (TypeTraits<BitVector>::One << EmptyDescTextFontFieldId);
    static const OSG::BitVector EmptyDescTextFieldMask =
        (TypeTraits<BitVector>::One << EmptyDescTextFieldId);
    static const OSG::BitVector EmptyDescTextColorFieldMask =
        (TypeTraits<BitVector>::One << EmptyDescTextColorFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFVec2f           SFAlignmentType;
    typedef SFUnrecUIFontPtr  SFEmptyDescTextFontType;
    typedef SFString          SFEmptyDescTextType;
    typedef SFColor4f         SFEmptyDescTextColorType;

    enum
    {
        ActionPerformedEventId = Inherited::NextProducedEventId,
        NextProducedEventId = ActionPerformedEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFVec2f             *editSFAlignment      (void);
            const SFVec2f             *getSFAlignment       (void) const;
            const SFUnrecUIFontPtr    *getSFEmptyDescTextFont(void) const;
                  SFUnrecUIFontPtr    *editSFEmptyDescTextFont(void);

                  SFString            *editSFEmptyDescText  (void);
            const SFString            *getSFEmptyDescText   (void) const;

                  SFColor4f           *editSFEmptyDescTextColor(void);
            const SFColor4f           *getSFEmptyDescTextColor (void) const;


                  Vec2f               &editAlignment      (void);
            const Vec2f               &getAlignment       (void) const;

                  UIFont * getEmptyDescTextFont(void) const;

                  std::string         &editEmptyDescText  (void);
            const std::string         &getEmptyDescText   (void) const;

                  Color4f             &editEmptyDescTextColor(void);
            const Color4f             &getEmptyDescTextColor (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setAlignment      (const Vec2f &value);
            void setEmptyDescTextFont(UIFont * const value);
            void setEmptyDescText  (const std::string &value);
            void setEmptyDescTextColor(const Color4f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //ActionPerformed
    boost::signals2::connection connectActionPerformed(const ActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectActionPerformed(const ActionPerformedEventType::group_type &group,
                                                       const ActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectActionPerformed        (const ActionPerformedEventType::group_type &group);
    void   disconnectAllSlotsActionPerformed(void);
    bool   isEmptyActionPerformed           (void) const;
    UInt32 numSlotsActionPerformed          (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TextFieldTransitPtr  create          (void);
    static  TextField           *createEmpty     (void);

    static  TextFieldTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  TextField            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  TextFieldTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    ActionPerformedEventType _ActionPerformedEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFVec2f           _sfAlignment;
    SFUnrecUIFontPtr  _sfEmptyDescTextFont;
    SFString          _sfEmptyDescText;
    SFColor4f         _sfEmptyDescTextColor;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TextFieldBase(void);
    TextFieldBase(const TextFieldBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TextFieldBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TextField *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleAlignment       (void) const;
    EditFieldHandlePtr editHandleAlignment      (void);
    GetFieldHandlePtr  getHandleEmptyDescTextFont (void) const;
    EditFieldHandlePtr editHandleEmptyDescTextFont(void);
    GetFieldHandlePtr  getHandleEmptyDescText   (void) const;
    EditFieldHandlePtr editHandleEmptyDescText  (void);
    GetFieldHandlePtr  getHandleEmptyDescTextColor (void) const;
    EditFieldHandlePtr editHandleEmptyDescTextColor(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleActionPerformedSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceActionPerformed     (ActionPerformedEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TextFieldBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TextFieldBase &source);
};

typedef TextFieldBase *TextFieldBaseP;

OSG_END_NAMESPACE

#endif /* _OSGTEXTFIELDBASE_H_ */
