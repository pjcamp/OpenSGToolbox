/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextField!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGActionEventDetails.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextFieldBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TextFieldBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &TextFieldBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 TextFieldBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 TextFieldBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the TextField::_sfAlignment field.

inline
Vec2f &TextFieldBase::editAlignment(void)
{
    editSField(AlignmentFieldMask);

    return _sfAlignment.getValue();
}

//! Get the value of the TextField::_sfAlignment field.
inline
const Vec2f &TextFieldBase::getAlignment(void) const
{
    return _sfAlignment.getValue();
}

//! Set the value of the TextField::_sfAlignment field.
inline
void TextFieldBase::setAlignment(const Vec2f &value)
{
    editSField(AlignmentFieldMask);

    _sfAlignment.setValue(value);
}

//! Get the value of the TextField::_sfEmptyDescTextFont field.
inline
UIFont * TextFieldBase::getEmptyDescTextFont(void) const
{
    return _sfEmptyDescTextFont.getValue();
}

//! Set the value of the TextField::_sfEmptyDescTextFont field.
inline
void TextFieldBase::setEmptyDescTextFont(UIFont * const value)
{
    editSField(EmptyDescTextFontFieldMask);

    _sfEmptyDescTextFont.setValue(value);
}
//! Get the value of the TextField::_sfEmptyDescText field.

inline
std::string &TextFieldBase::editEmptyDescText(void)
{
    editSField(EmptyDescTextFieldMask);

    return _sfEmptyDescText.getValue();
}

//! Get the value of the TextField::_sfEmptyDescText field.
inline
const std::string &TextFieldBase::getEmptyDescText(void) const
{
    return _sfEmptyDescText.getValue();
}

//! Set the value of the TextField::_sfEmptyDescText field.
inline
void TextFieldBase::setEmptyDescText(const std::string &value)
{
    editSField(EmptyDescTextFieldMask);

    _sfEmptyDescText.setValue(value);
}
//! Get the value of the TextField::_sfEmptyDescTextColor field.

inline
Color4f &TextFieldBase::editEmptyDescTextColor(void)
{
    editSField(EmptyDescTextColorFieldMask);

    return _sfEmptyDescTextColor.getValue();
}

//! Get the value of the TextField::_sfEmptyDescTextColor field.
inline
const Color4f &TextFieldBase::getEmptyDescTextColor(void) const
{
    return _sfEmptyDescTextColor.getValue();
}

//! Set the value of the TextField::_sfEmptyDescTextColor field.
inline
void TextFieldBase::setEmptyDescTextColor(const Color4f &value)
{
    editSField(EmptyDescTextColorFieldMask);

    _sfEmptyDescTextColor.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TextFieldBase::execSync (      TextFieldBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
        _sfAlignment.syncWith(pFrom->_sfAlignment);

    if(FieldBits::NoField != (EmptyDescTextFontFieldMask & whichField))
        _sfEmptyDescTextFont.syncWith(pFrom->_sfEmptyDescTextFont);

    if(FieldBits::NoField != (EmptyDescTextFieldMask & whichField))
        _sfEmptyDescText.syncWith(pFrom->_sfEmptyDescText);

    if(FieldBits::NoField != (EmptyDescTextColorFieldMask & whichField))
        _sfEmptyDescTextColor.syncWith(pFrom->_sfEmptyDescTextColor);
}
#endif


inline
const Char8 *TextFieldBase::getClassname(void)
{
    return "TextField";
}
inline
boost::signals2::connection  TextFieldBase::connectActionPerformed(const ActionPerformedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _ActionPerformedEvent.connect(listener, at);
}

inline
boost::signals2::connection  TextFieldBase::connectActionPerformed(const ActionPerformedEventType::group_type &group,
                                                    const ActionPerformedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _ActionPerformedEvent.connect(group, listener, at);
}

inline
void  TextFieldBase::disconnectActionPerformed(const ActionPerformedEventType::group_type &group)
{
    _ActionPerformedEvent.disconnect(group);
}

inline
void  TextFieldBase::disconnectAllSlotsActionPerformed(void)
{
    _ActionPerformedEvent.disconnect_all_slots();
}

inline
bool  TextFieldBase::isEmptyActionPerformed(void) const
{
    return _ActionPerformedEvent.empty();
}

inline
UInt32  TextFieldBase::numSlotsActionPerformed(void) const
{
    return _ActionPerformedEvent.num_slots();
}

inline
void TextFieldBase::produceActionPerformed(ActionPerformedEventDetailsType* const e)
{
    produceEvent(ActionPerformedEventId, e);
}

OSG_GEN_CONTAINERPTR(TextField);

OSG_END_NAMESPACE

