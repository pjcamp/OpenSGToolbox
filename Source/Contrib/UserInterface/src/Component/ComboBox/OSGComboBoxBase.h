/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComboBox
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOMBOBOXBASE_H_
#define _OSGCOMBOBOXBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponentContainer.h" // Parent

#include "OSGToggleButtonFields.h"      // ExpandButton type
#include "OSGComboBoxEditorFields.h"    // Editor type
#include "OSGComboBoxModelFields.h"     // Model type
#include "OSGComponentGeneratorFields.h" // CellGenerator type
#include "OSGComponentFields.h"         // ComponentGeneratorSelectedItem type
#include "OSGSysFields.h"               // Editable type
#include "OSGListGeneratedPopupMenuFields.h" // ComboListPopupMenu type

#include "OSGComboBoxFields.h"

#include "OSGActionEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class ComboBox;

//! \brief ComboBox Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING ComboBoxBase : public ComponentContainer
{
  public:

    typedef ComponentContainer Inherited;
    typedef ComponentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ComboBox);
    
    
    typedef ActionEventDetails ActionPerformedEventDetailsType;

    typedef boost::signals2::signal<void (ActionEventDetails* const, UInt32), ConsumableEventCombiner> ActionPerformedEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ExpandButtonFieldId = Inherited::NextFieldId,
        EditorFieldId = ExpandButtonFieldId + 1,
        ModelFieldId = EditorFieldId + 1,
        CellGeneratorFieldId = ModelFieldId + 1,
        ComponentGeneratorSelectedItemFieldId = CellGeneratorFieldId + 1,
        EditableFieldId = ComponentGeneratorSelectedItemFieldId + 1,
        MaxRowCountFieldId = EditableFieldId + 1,
        ComboListPopupMenuFieldId = MaxRowCountFieldId + 1,
        NextFieldId = ComboListPopupMenuFieldId + 1
    };

    static const OSG::BitVector ExpandButtonFieldMask =
        (TypeTraits<BitVector>::One << ExpandButtonFieldId);
    static const OSG::BitVector EditorFieldMask =
        (TypeTraits<BitVector>::One << EditorFieldId);
    static const OSG::BitVector ModelFieldMask =
        (TypeTraits<BitVector>::One << ModelFieldId);
    static const OSG::BitVector CellGeneratorFieldMask =
        (TypeTraits<BitVector>::One << CellGeneratorFieldId);
    static const OSG::BitVector ComponentGeneratorSelectedItemFieldMask =
        (TypeTraits<BitVector>::One << ComponentGeneratorSelectedItemFieldId);
    static const OSG::BitVector EditableFieldMask =
        (TypeTraits<BitVector>::One << EditableFieldId);
    static const OSG::BitVector MaxRowCountFieldMask =
        (TypeTraits<BitVector>::One << MaxRowCountFieldId);
    static const OSG::BitVector ComboListPopupMenuFieldMask =
        (TypeTraits<BitVector>::One << ComboListPopupMenuFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecToggleButtonPtr SFExpandButtonType;
    typedef SFUnrecComboBoxEditorPtr SFEditorType;
    typedef SFUnrecComboBoxModelPtr SFModelType;
    typedef SFUnrecComponentGeneratorPtr SFCellGeneratorType;
    typedef SFUnrecComponentPtr SFComponentGeneratorSelectedItemType;
    typedef SFBool            SFEditableType;
    typedef SFUInt32          SFMaxRowCountType;
    typedef SFUnrecListGeneratedPopupMenuPtr SFComboListPopupMenuType;

    enum
    {
        ActionPerformedEventId = Inherited::NextProducedEventId,
        NextProducedEventId = ActionPerformedEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecToggleButtonPtr *getSFExpandButton   (void) const;
                  SFUnrecToggleButtonPtr *editSFExpandButton   (void);
            const SFUnrecComboBoxEditorPtr *getSFEditor         (void) const;
                  SFUnrecComboBoxEditorPtr *editSFEditor         (void);
            const SFUnrecComboBoxModelPtr *getSFModel          (void) const;
                  SFUnrecComboBoxModelPtr *editSFModel          (void);
            const SFUnrecComponentGeneratorPtr *getSFCellGenerator  (void) const;
                  SFUnrecComponentGeneratorPtr *editSFCellGenerator  (void);

                  SFBool              *editSFEditable       (void);
            const SFBool              *getSFEditable        (void) const;

                  SFUInt32            *editSFMaxRowCount    (void);
            const SFUInt32            *getSFMaxRowCount     (void) const;


                  ToggleButton * getExpandButton   (void) const;

                  ComboBoxEditor * getEditor         (void) const;

                  ComboBoxModel * getModel          (void) const;

                  ComponentGenerator * getCellGenerator  (void) const;

                  bool                &editEditable       (void);
                  bool                 getEditable        (void) const;

                  UInt32              &editMaxRowCount    (void);
                  UInt32               getMaxRowCount     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setExpandButton   (ToggleButton * const value);
            void setEditor         (ComboBoxEditor * const value);
            void setModel          (ComboBoxModel * const value);
            void setCellGenerator  (ComponentGenerator * const value);
            void setEditable       (const bool value);
            void setMaxRowCount    (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //ActionPerformed
    boost::signals2::connection connectActionPerformed(const ActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectActionPerformed(const ActionPerformedEventType::group_type &group,
                                                       const ActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectActionPerformed        (const ActionPerformedEventType::group_type &group);
    void   disconnectAllSlotsActionPerformed(void);
    bool   isEmptyActionPerformed           (void) const;
    UInt32 numSlotsActionPerformed          (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ComboBoxTransitPtr  create          (void);
    static  ComboBox           *createEmpty     (void);

    static  ComboBoxTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ComboBox            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ComboBoxTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    ActionPerformedEventType _ActionPerformedEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecToggleButtonPtr _sfExpandButton;
    SFUnrecComboBoxEditorPtr _sfEditor;
    SFUnrecComboBoxModelPtr _sfModel;
    SFUnrecComponentGeneratorPtr _sfCellGenerator;
    SFUnrecComponentPtr _sfComponentGeneratorSelectedItem;
    SFBool            _sfEditable;
    SFUInt32          _sfMaxRowCount;
    SFUnrecListGeneratedPopupMenuPtr _sfComboListPopupMenu;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ComboBoxBase(void);
    ComboBoxBase(const ComboBoxBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ComboBoxBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ComboBox *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleExpandButton    (void) const;
    EditFieldHandlePtr editHandleExpandButton   (void);
    GetFieldHandlePtr  getHandleEditor          (void) const;
    EditFieldHandlePtr editHandleEditor         (void);
    GetFieldHandlePtr  getHandleModel           (void) const;
    EditFieldHandlePtr editHandleModel          (void);
    GetFieldHandlePtr  getHandleCellGenerator   (void) const;
    EditFieldHandlePtr editHandleCellGenerator  (void);
    GetFieldHandlePtr  getHandleComponentGeneratorSelectedItem (void) const;
    EditFieldHandlePtr editHandleComponentGeneratorSelectedItem(void);
    GetFieldHandlePtr  getHandleEditable        (void) const;
    EditFieldHandlePtr editHandleEditable       (void);
    GetFieldHandlePtr  getHandleMaxRowCount     (void) const;
    EditFieldHandlePtr editHandleMaxRowCount    (void);
    GetFieldHandlePtr  getHandleComboListPopupMenu (void) const;
    EditFieldHandlePtr editHandleComboListPopupMenu(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleActionPerformedSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecComponentPtr *getSFComponentGeneratorSelectedItem (void) const;
                  SFUnrecComponentPtr *editSFComponentGeneratorSelectedItem(void);
            const SFUnrecListGeneratedPopupMenuPtr *getSFComboListPopupMenu (void) const;
                  SFUnrecListGeneratedPopupMenuPtr *editSFComboListPopupMenu(void);


                  Component * getComponentGeneratorSelectedItem(void) const;

                  ListGeneratedPopupMenu * getComboListPopupMenu(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setComponentGeneratorSelectedItem(Component * const value);
            void setComboListPopupMenu(ListGeneratedPopupMenu * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceActionPerformed     (ActionPerformedEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ComboBoxBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ComboBoxBase &source);
};

typedef ComboBoxBase *ComboBoxBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCOMBOBOXBASE_H_ */
