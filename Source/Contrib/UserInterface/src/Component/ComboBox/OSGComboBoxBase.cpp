/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComboBox!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGToggleButton.h"            // ExpandButton Class
#include "OSGComboBoxEditor.h"          // Editor Class
#include "OSGComboBoxModel.h"           // Model Class
#include "OSGComponentGenerator.h"      // CellGenerator Class
#include "OSGComponent.h"               // ComponentGeneratorSelectedItem Class
#include "OSGListGeneratedPopupMenu.h"  // ComboListPopupMenu Class

#include "OSGComboBoxBase.h"
#include "OSGComboBox.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ComboBox
    A UI ComboBox
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ToggleButton *  ComboBoxBase::_sfExpandButton
    
*/

/*! \var ComboBoxEditor * ComboBoxBase::_sfEditor
    
*/

/*! \var ComboBoxModel * ComboBoxBase::_sfModel
    
*/

/*! \var ComponentGenerator * ComboBoxBase::_sfCellGenerator
    
*/

/*! \var Component *     ComboBoxBase::_sfComponentGeneratorSelectedItem
    
*/

/*! \var bool            ComboBoxBase::_sfEditable
    
*/

/*! \var UInt32          ComboBoxBase::_sfMaxRowCount
    
*/

/*! \var ListGeneratedPopupMenu * ComboBoxBase::_sfComboListPopupMenu
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ComboBox *>::_type("ComboBoxPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ComboBox *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ComboBox *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ComboBox *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ComboBoxBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecToggleButtonPtr::Description(
        SFUnrecToggleButtonPtr::getClassType(),
        "ExpandButton",
        "",
        ExpandButtonFieldId, ExpandButtonFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleExpandButton),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleExpandButton));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComboBoxEditorPtr::Description(
        SFUnrecComboBoxEditorPtr::getClassType(),
        "Editor",
        "",
        EditorFieldId, EditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleEditor),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComboBoxModelPtr::Description(
        SFUnrecComboBoxModelPtr::getClassType(),
        "Model",
        "",
        ModelFieldId, ModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleModel),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleModel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentGeneratorPtr::Description(
        SFUnrecComponentGeneratorPtr::getClassType(),
        "CellGenerator",
        "",
        CellGeneratorFieldId, CellGeneratorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleCellGenerator),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleCellGenerator));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "ComponentGeneratorSelectedItem",
        "",
        ComponentGeneratorSelectedItemFieldId, ComponentGeneratorSelectedItemFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleComponentGeneratorSelectedItem),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleComponentGeneratorSelectedItem));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Editable",
        "",
        EditableFieldId, EditableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleEditable),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleEditable));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "MaxRowCount",
        "",
        MaxRowCountFieldId, MaxRowCountFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleMaxRowCount),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleMaxRowCount));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecListGeneratedPopupMenuPtr::Description(
        SFUnrecListGeneratedPopupMenuPtr::getClassType(),
        "ComboListPopupMenu",
        "",
        ComboListPopupMenuFieldId, ComboListPopupMenuFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ComboBox::editHandleComboListPopupMenu),
        static_cast<FieldGetMethodSig >(&ComboBox::getHandleComboListPopupMenu));

    oType.addInitialDesc(pDesc);
}


ComboBoxBase::TypeObject ComboBoxBase::_type(
    ComboBoxBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ComboBoxBase::createEmptyLocal),
    ComboBox::initMethod,
    ComboBox::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ComboBox::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ComboBox\"\n"
    "    parent=\"ComponentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    parentProducer=\"Component\"\n"
    "    >\n"
    "    A UI ComboBox\n"
    "    <Field\n"
    "        name=\"ExpandButton\"\n"
    "        type=\"ToggleButton\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Editor\"\n"
    "        type=\"ComboBoxEditor\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Model\"\n"
    "        type=\"ComboBoxModel\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CellGenerator\"\n"
    "        type=\"ComponentGenerator\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ComponentGeneratorSelectedItem\"\n"
    "        type=\"Component\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Editable\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"MaxRowCount\"\n"
    "        type=\"UInt32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"5\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ComboListPopupMenu\"\n"
    "        type=\"ListGeneratedPopupMenu\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <ProducedEvent\n"
    "        name=\"ActionPerformed\"\n"
    "        detailsType=\"ActionEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI ComboBox\n"
    );

//! ComboBox Produced Events

EventDescription *ComboBoxBase::_eventDesc[] =
{
    new EventDescription("ActionPerformed", 
                          "",
                          ActionPerformedEventId, 
                          FieldTraits<ActionEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComboBoxBase::getHandleActionPerformedSignal))

};

EventProducerType ComboBoxBase::_producerType(
    "ComboBoxProducerType",
    "ComponentProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComboBoxBase::getType(void)
{
    return _type;
}

const FieldContainerType &ComboBoxBase::getType(void) const
{
    return _type;
}

const EventProducerType &ComboBoxBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 ComboBoxBase::getContainerSize(void) const
{
    return sizeof(ComboBox);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ComboBox::_sfExpandButton field.
const SFUnrecToggleButtonPtr *ComboBoxBase::getSFExpandButton(void) const
{
    return &_sfExpandButton;
}

SFUnrecToggleButtonPtr *ComboBoxBase::editSFExpandButton   (void)
{
    editSField(ExpandButtonFieldMask);

    return &_sfExpandButton;
}

//! Get the ComboBox::_sfEditor field.
const SFUnrecComboBoxEditorPtr *ComboBoxBase::getSFEditor(void) const
{
    return &_sfEditor;
}

SFUnrecComboBoxEditorPtr *ComboBoxBase::editSFEditor         (void)
{
    editSField(EditorFieldMask);

    return &_sfEditor;
}

//! Get the ComboBox::_sfModel field.
const SFUnrecComboBoxModelPtr *ComboBoxBase::getSFModel(void) const
{
    return &_sfModel;
}

SFUnrecComboBoxModelPtr *ComboBoxBase::editSFModel          (void)
{
    editSField(ModelFieldMask);

    return &_sfModel;
}

//! Get the ComboBox::_sfCellGenerator field.
const SFUnrecComponentGeneratorPtr *ComboBoxBase::getSFCellGenerator(void) const
{
    return &_sfCellGenerator;
}

SFUnrecComponentGeneratorPtr *ComboBoxBase::editSFCellGenerator  (void)
{
    editSField(CellGeneratorFieldMask);

    return &_sfCellGenerator;
}

//! Get the ComboBox::_sfComponentGeneratorSelectedItem field.
const SFUnrecComponentPtr *ComboBoxBase::getSFComponentGeneratorSelectedItem(void) const
{
    return &_sfComponentGeneratorSelectedItem;
}

SFUnrecComponentPtr *ComboBoxBase::editSFComponentGeneratorSelectedItem(void)
{
    editSField(ComponentGeneratorSelectedItemFieldMask);

    return &_sfComponentGeneratorSelectedItem;
}

SFBool *ComboBoxBase::editSFEditable(void)
{
    editSField(EditableFieldMask);

    return &_sfEditable;
}

const SFBool *ComboBoxBase::getSFEditable(void) const
{
    return &_sfEditable;
}


SFUInt32 *ComboBoxBase::editSFMaxRowCount(void)
{
    editSField(MaxRowCountFieldMask);

    return &_sfMaxRowCount;
}

const SFUInt32 *ComboBoxBase::getSFMaxRowCount(void) const
{
    return &_sfMaxRowCount;
}


//! Get the ComboBox::_sfComboListPopupMenu field.
const SFUnrecListGeneratedPopupMenuPtr *ComboBoxBase::getSFComboListPopupMenu(void) const
{
    return &_sfComboListPopupMenu;
}

SFUnrecListGeneratedPopupMenuPtr *ComboBoxBase::editSFComboListPopupMenu(void)
{
    editSField(ComboListPopupMenuFieldMask);

    return &_sfComboListPopupMenu;
}





/*------------------------------ access -----------------------------------*/

UInt32 ComboBoxBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ExpandButtonFieldMask & whichField))
    {
        returnValue += _sfExpandButton.getBinSize();
    }
    if(FieldBits::NoField != (EditorFieldMask & whichField))
    {
        returnValue += _sfEditor.getBinSize();
    }
    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        returnValue += _sfModel.getBinSize();
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        returnValue += _sfCellGenerator.getBinSize();
    }
    if(FieldBits::NoField != (ComponentGeneratorSelectedItemFieldMask & whichField))
    {
        returnValue += _sfComponentGeneratorSelectedItem.getBinSize();
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        returnValue += _sfEditable.getBinSize();
    }
    if(FieldBits::NoField != (MaxRowCountFieldMask & whichField))
    {
        returnValue += _sfMaxRowCount.getBinSize();
    }
    if(FieldBits::NoField != (ComboListPopupMenuFieldMask & whichField))
    {
        returnValue += _sfComboListPopupMenu.getBinSize();
    }

    return returnValue;
}

void ComboBoxBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ExpandButtonFieldMask & whichField))
    {
        _sfExpandButton.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EditorFieldMask & whichField))
    {
        _sfEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        _sfModel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        _sfCellGenerator.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ComponentGeneratorSelectedItemFieldMask & whichField))
    {
        _sfComponentGeneratorSelectedItem.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        _sfEditable.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxRowCountFieldMask & whichField))
    {
        _sfMaxRowCount.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ComboListPopupMenuFieldMask & whichField))
    {
        _sfComboListPopupMenu.copyToBin(pMem);
    }
}

void ComboBoxBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ExpandButtonFieldMask & whichField))
    {
        _sfExpandButton.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EditorFieldMask & whichField))
    {
        _sfEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        _sfModel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        _sfCellGenerator.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ComponentGeneratorSelectedItemFieldMask & whichField))
    {
        _sfComponentGeneratorSelectedItem.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        _sfEditable.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxRowCountFieldMask & whichField))
    {
        _sfMaxRowCount.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ComboListPopupMenuFieldMask & whichField))
    {
        _sfComboListPopupMenu.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ComboBoxTransitPtr ComboBoxBase::createLocal(BitVector bFlags)
{
    ComboBoxTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ComboBox>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ComboBoxTransitPtr ComboBoxBase::createDependent(BitVector bFlags)
{
    ComboBoxTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ComboBox>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ComboBoxTransitPtr ComboBoxBase::create(void)
{
    ComboBoxTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ComboBox>(tmpPtr);
    }

    return fc;
}

ComboBox *ComboBoxBase::createEmptyLocal(BitVector bFlags)
{
    ComboBox *returnValue;

    newPtr<ComboBox>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ComboBox *ComboBoxBase::createEmpty(void)
{
    ComboBox *returnValue;

    newPtr<ComboBox>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ComboBoxBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ComboBox *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ComboBox *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ComboBoxBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ComboBox *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ComboBox *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ComboBoxBase::shallowCopy(void) const
{
    ComboBox *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ComboBox *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- event producers ----------------------------------*/
void ComboBoxBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case ActionPerformedEventId:
        OSG_ASSERT(dynamic_cast<ActionPerformedEventDetailsType* const>(e));

        _ActionPerformedEvent.set_combiner(ConsumableEventCombiner(e));
        _ActionPerformedEvent(dynamic_cast<ActionPerformedEventDetailsType* const>(e), ActionPerformedEventId);
        break;
    default:
        Inherited::produceEvent(eventId, e);
        break;
    }
}

boost::signals2::connection ComboBoxBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ActionPerformedEventId:
        return _ActionPerformedEvent.connect(listener, at);
        break;
    default:
        return Inherited::connectEvent(eventId, listener, at);
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  ComboBoxBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ActionPerformedEventId:
        return _ActionPerformedEvent.connect(group, listener, at);
        break;
    default:
        return Inherited::connectEvent(eventId, group, listener, at);
        break;
    }

    return boost::signals2::connection();
}
    
void  ComboBoxBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case ActionPerformedEventId:
        _ActionPerformedEvent.disconnect(group);
        break;
    default:
        return Inherited::disconnectEvent(eventId, group);
        break;
    }
}

void  ComboBoxBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case ActionPerformedEventId:
        _ActionPerformedEvent.disconnect_all_slots();
        break;
    default:
        Inherited::disconnectAllSlotsEvent(eventId);
        break;
    }
}

bool  ComboBoxBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ActionPerformedEventId:
        return _ActionPerformedEvent.empty();
        break;
    default:
        return Inherited::isEmptyEvent(eventId);
        break;
    }
}

UInt32  ComboBoxBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ActionPerformedEventId:
        return _ActionPerformedEvent.num_slots();
        break;
    default:
        return Inherited::numSlotsEvent(eventId);
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

ComboBoxBase::ComboBoxBase(void) :
    Inherited(),
    _sfExpandButton           (NULL),
    _sfEditor                 (NULL),
    _sfModel                  (NULL),
    _sfCellGenerator          (NULL),
    _sfComponentGeneratorSelectedItem(NULL),
    _sfEditable               (bool(true)),
    _sfMaxRowCount            (UInt32(5)),
    _sfComboListPopupMenu     (NULL)
{
}

ComboBoxBase::ComboBoxBase(const ComboBoxBase &source) :
    Inherited(source),
    _sfExpandButton           (NULL),
    _sfEditor                 (NULL),
    _sfModel                  (NULL),
    _sfCellGenerator          (NULL),
    _sfComponentGeneratorSelectedItem(NULL),
    _sfEditable               (source._sfEditable               ),
    _sfMaxRowCount            (source._sfMaxRowCount            ),
    _sfComboListPopupMenu     (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ComboBoxBase::~ComboBoxBase(void)
{
}

void ComboBoxBase::onCreate(const ComboBox *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ComboBox *pThis = static_cast<ComboBox *>(this);

        pThis->setExpandButton(source->getExpandButton());

        pThis->setEditor(source->getEditor());

        pThis->setModel(source->getModel());

        pThis->setCellGenerator(source->getCellGenerator());

        pThis->setComponentGeneratorSelectedItem(source->getComponentGeneratorSelectedItem());

        pThis->setComboListPopupMenu(source->getComboListPopupMenu());
    }
}

GetFieldHandlePtr ComboBoxBase::getHandleExpandButton    (void) const
{
    SFUnrecToggleButtonPtr::GetHandlePtr returnValue(
        new  SFUnrecToggleButtonPtr::GetHandle(
             &_sfExpandButton,
             this->getType().getFieldDesc(ExpandButtonFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleExpandButton   (void)
{
    SFUnrecToggleButtonPtr::EditHandlePtr returnValue(
        new  SFUnrecToggleButtonPtr::EditHandle(
             &_sfExpandButton,
             this->getType().getFieldDesc(ExpandButtonFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComboBox::setExpandButton,
                    static_cast<ComboBox *>(this), _1));

    editSField(ExpandButtonFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComboBoxBase::getHandleEditor          (void) const
{
    SFUnrecComboBoxEditorPtr::GetHandlePtr returnValue(
        new  SFUnrecComboBoxEditorPtr::GetHandle(
             &_sfEditor,
             this->getType().getFieldDesc(EditorFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleEditor         (void)
{
    SFUnrecComboBoxEditorPtr::EditHandlePtr returnValue(
        new  SFUnrecComboBoxEditorPtr::EditHandle(
             &_sfEditor,
             this->getType().getFieldDesc(EditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComboBox::setEditor,
                    static_cast<ComboBox *>(this), _1));

    editSField(EditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComboBoxBase::getHandleModel           (void) const
{
    SFUnrecComboBoxModelPtr::GetHandlePtr returnValue(
        new  SFUnrecComboBoxModelPtr::GetHandle(
             &_sfModel,
             this->getType().getFieldDesc(ModelFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleModel          (void)
{
    SFUnrecComboBoxModelPtr::EditHandlePtr returnValue(
        new  SFUnrecComboBoxModelPtr::EditHandle(
             &_sfModel,
             this->getType().getFieldDesc(ModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComboBox::setModel,
                    static_cast<ComboBox *>(this), _1));

    editSField(ModelFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComboBoxBase::getHandleCellGenerator   (void) const
{
    SFUnrecComponentGeneratorPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentGeneratorPtr::GetHandle(
             &_sfCellGenerator,
             this->getType().getFieldDesc(CellGeneratorFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleCellGenerator  (void)
{
    SFUnrecComponentGeneratorPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentGeneratorPtr::EditHandle(
             &_sfCellGenerator,
             this->getType().getFieldDesc(CellGeneratorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComboBox::setCellGenerator,
                    static_cast<ComboBox *>(this), _1));

    editSField(CellGeneratorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComboBoxBase::getHandleComponentGeneratorSelectedItem (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentPtr::GetHandle(
             &_sfComponentGeneratorSelectedItem,
             this->getType().getFieldDesc(ComponentGeneratorSelectedItemFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleComponentGeneratorSelectedItem(void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentPtr::EditHandle(
             &_sfComponentGeneratorSelectedItem,
             this->getType().getFieldDesc(ComponentGeneratorSelectedItemFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComboBox::setComponentGeneratorSelectedItem,
                    static_cast<ComboBox *>(this), _1));

    editSField(ComponentGeneratorSelectedItemFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComboBoxBase::getHandleEditable        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEditable,
             this->getType().getFieldDesc(EditableFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleEditable       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEditable,
             this->getType().getFieldDesc(EditableFieldId),
             this));


    editSField(EditableFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComboBoxBase::getHandleMaxRowCount     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMaxRowCount,
             this->getType().getFieldDesc(MaxRowCountFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleMaxRowCount    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMaxRowCount,
             this->getType().getFieldDesc(MaxRowCountFieldId),
             this));


    editSField(MaxRowCountFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComboBoxBase::getHandleComboListPopupMenu (void) const
{
    SFUnrecListGeneratedPopupMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecListGeneratedPopupMenuPtr::GetHandle(
             &_sfComboListPopupMenu,
             this->getType().getFieldDesc(ComboListPopupMenuFieldId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComboBoxBase::editHandleComboListPopupMenu(void)
{
    SFUnrecListGeneratedPopupMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecListGeneratedPopupMenuPtr::EditHandle(
             &_sfComboListPopupMenu,
             this->getType().getFieldDesc(ComboListPopupMenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ComboBox::setComboListPopupMenu,
                    static_cast<ComboBox *>(this), _1));

    editSField(ComboListPopupMenuFieldMask);

    return returnValue;
}


GetEventHandlePtr ComboBoxBase::getHandleActionPerformedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ActionPerformedEventType>(
             const_cast<ActionPerformedEventType *>(&_ActionPerformedEvent),
             _producerType.getEventDescription(ActionPerformedEventId),
             const_cast<ComboBoxBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ComboBoxBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ComboBox *pThis = static_cast<ComboBox *>(this);

    pThis->execSync(static_cast<ComboBox *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ComboBoxBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ComboBox *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ComboBox *>(pRefAspect),
                  dynamic_cast<const ComboBox *>(this));

    return returnValue;
}
#endif

void ComboBoxBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ComboBox *>(this)->setExpandButton(NULL);

    static_cast<ComboBox *>(this)->setEditor(NULL);

    static_cast<ComboBox *>(this)->setModel(NULL);

    static_cast<ComboBox *>(this)->setCellGenerator(NULL);

    static_cast<ComboBox *>(this)->setComponentGeneratorSelectedItem(NULL);

    static_cast<ComboBox *>(this)->setComboListPopupMenu(NULL);


}


OSG_END_NAMESPACE
