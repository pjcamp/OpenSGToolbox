/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class List!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGListModel.h"               // Model Class
#include "OSGComponentGenerator.h"      // CellGenerator Class
#include "OSGListSelectionModel.h"      // SelectionModel Class

#include "OSGListBase.h"
#include "OSGList.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::List
    A UI List.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          ListBase::_sfOrientation
    
*/

/*! \var bool            ListBase::_sfSelectable
    
*/

/*! \var UInt32          ListBase::_sfCellMajorAxisLength
    
*/

/*! \var ListModel *     ListBase::_sfModel
    
*/

/*! \var ComponentGenerator * ListBase::_sfCellGenerator
    
*/

/*! \var bool            ListBase::_sfAutoScrollToFocused
    
*/

/*! \var ListSelectionModel * ListBase::_sfSelectionModel
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<List *>::_type("ListPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(List *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           List *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           List *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ListBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Orientation",
        "",
        OrientationFieldId, OrientationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&List::editHandleOrientation),
        static_cast<FieldGetMethodSig >(&List::getHandleOrientation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Selectable",
        "",
        SelectableFieldId, SelectableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&List::editHandleSelectable),
        static_cast<FieldGetMethodSig >(&List::getHandleSelectable));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "CellMajorAxisLength",
        "",
        CellMajorAxisLengthFieldId, CellMajorAxisLengthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&List::editHandleCellMajorAxisLength),
        static_cast<FieldGetMethodSig >(&List::getHandleCellMajorAxisLength));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecListModelPtr::Description(
        SFUnrecListModelPtr::getClassType(),
        "Model",
        "",
        ModelFieldId, ModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&List::editHandleModel),
        static_cast<FieldGetMethodSig >(&List::getHandleModel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentGeneratorPtr::Description(
        SFUnrecComponentGeneratorPtr::getClassType(),
        "CellGenerator",
        "",
        CellGeneratorFieldId, CellGeneratorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&List::editHandleCellGenerator),
        static_cast<FieldGetMethodSig >(&List::getHandleCellGenerator));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "AutoScrollToFocused",
        "",
        AutoScrollToFocusedFieldId, AutoScrollToFocusedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&List::editHandleAutoScrollToFocused),
        static_cast<FieldGetMethodSig >(&List::getHandleAutoScrollToFocused));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecListSelectionModelPtr::Description(
        SFUnrecListSelectionModelPtr::getClassType(),
        "SelectionModel",
        "",
        SelectionModelFieldId, SelectionModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&List::editHandleSelectionModel),
        static_cast<FieldGetMethodSig >(&List::getHandleSelectionModel));

    oType.addInitialDesc(pDesc);
}


ListBase::TypeObject ListBase::_type(
    ListBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ListBase::createEmptyLocal),
    List::initMethod,
    List::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&List::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"List\"\n"
    "\tparent=\"ComponentContainer\"\n"
    "\tlibrary=\"ContribUserInterface\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tisNodeCore=\"false\"\n"
    "\tauthors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "\t>\n"
    "\tA UI List.\n"
    "\t<Field\n"
    "\t\tname=\"Orientation\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"List::VERTICAL_ORIENTATION\"\n"
    "\t\taccess=\"public\"\n"
    "\t\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Selectable\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CellMajorAxisLength\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"50\"\n"
    "\t\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Model\"\n"
    "\t\ttype=\"ListModel\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CellGenerator\"\n"
    "\t\ttype=\"ComponentGenerator\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"AutoScrollToFocused\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectionModel\"\n"
    "\t\ttype=\"ListSelectionModel\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI List.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ListBase::getType(void)
{
    return _type;
}

const FieldContainerType &ListBase::getType(void) const
{
    return _type;
}

UInt32 ListBase::getContainerSize(void) const
{
    return sizeof(List);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *ListBase::editSFOrientation(void)
{
    editSField(OrientationFieldMask);

    return &_sfOrientation;
}

const SFUInt32 *ListBase::getSFOrientation(void) const
{
    return &_sfOrientation;
}


SFBool *ListBase::editSFSelectable(void)
{
    editSField(SelectableFieldMask);

    return &_sfSelectable;
}

const SFBool *ListBase::getSFSelectable(void) const
{
    return &_sfSelectable;
}


SFUInt32 *ListBase::editSFCellMajorAxisLength(void)
{
    editSField(CellMajorAxisLengthFieldMask);

    return &_sfCellMajorAxisLength;
}

const SFUInt32 *ListBase::getSFCellMajorAxisLength(void) const
{
    return &_sfCellMajorAxisLength;
}


//! Get the List::_sfModel field.
const SFUnrecListModelPtr *ListBase::getSFModel(void) const
{
    return &_sfModel;
}

SFUnrecListModelPtr *ListBase::editSFModel          (void)
{
    editSField(ModelFieldMask);

    return &_sfModel;
}

//! Get the List::_sfCellGenerator field.
const SFUnrecComponentGeneratorPtr *ListBase::getSFCellGenerator(void) const
{
    return &_sfCellGenerator;
}

SFUnrecComponentGeneratorPtr *ListBase::editSFCellGenerator  (void)
{
    editSField(CellGeneratorFieldMask);

    return &_sfCellGenerator;
}

SFBool *ListBase::editSFAutoScrollToFocused(void)
{
    editSField(AutoScrollToFocusedFieldMask);

    return &_sfAutoScrollToFocused;
}

const SFBool *ListBase::getSFAutoScrollToFocused(void) const
{
    return &_sfAutoScrollToFocused;
}


//! Get the List::_sfSelectionModel field.
const SFUnrecListSelectionModelPtr *ListBase::getSFSelectionModel(void) const
{
    return &_sfSelectionModel;
}

SFUnrecListSelectionModelPtr *ListBase::editSFSelectionModel (void)
{
    editSField(SelectionModelFieldMask);

    return &_sfSelectionModel;
}





/*------------------------------ access -----------------------------------*/

UInt32 ListBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        returnValue += _sfOrientation.getBinSize();
    }
    if(FieldBits::NoField != (SelectableFieldMask & whichField))
    {
        returnValue += _sfSelectable.getBinSize();
    }
    if(FieldBits::NoField != (CellMajorAxisLengthFieldMask & whichField))
    {
        returnValue += _sfCellMajorAxisLength.getBinSize();
    }
    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        returnValue += _sfModel.getBinSize();
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        returnValue += _sfCellGenerator.getBinSize();
    }
    if(FieldBits::NoField != (AutoScrollToFocusedFieldMask & whichField))
    {
        returnValue += _sfAutoScrollToFocused.getBinSize();
    }
    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        returnValue += _sfSelectionModel.getBinSize();
    }

    return returnValue;
}

void ListBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectableFieldMask & whichField))
    {
        _sfSelectable.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CellMajorAxisLengthFieldMask & whichField))
    {
        _sfCellMajorAxisLength.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        _sfModel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        _sfCellGenerator.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoScrollToFocusedFieldMask & whichField))
    {
        _sfAutoScrollToFocused.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyToBin(pMem);
    }
}

void ListBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectableFieldMask & whichField))
    {
        _sfSelectable.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CellMajorAxisLengthFieldMask & whichField))
    {
        _sfCellMajorAxisLength.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        _sfModel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        _sfCellGenerator.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoScrollToFocusedFieldMask & whichField))
    {
        _sfAutoScrollToFocused.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ListTransitPtr ListBase::createLocal(BitVector bFlags)
{
    ListTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<List>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ListTransitPtr ListBase::createDependent(BitVector bFlags)
{
    ListTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<List>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ListTransitPtr ListBase::create(void)
{
    ListTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<List>(tmpPtr);
    }

    return fc;
}

List *ListBase::createEmptyLocal(BitVector bFlags)
{
    List *returnValue;

    newPtr<List>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
List *ListBase::createEmpty(void)
{
    List *returnValue;

    newPtr<List>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ListBase::shallowCopyLocal(
    BitVector bFlags) const
{
    List *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const List *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ListBase::shallowCopyDependent(
    BitVector bFlags) const
{
    List *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const List *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ListBase::shallowCopy(void) const
{
    List *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const List *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ListBase::ListBase(void) :
    Inherited(),
    _sfOrientation            (UInt32(List::VERTICAL_ORIENTATION)),
    _sfSelectable             (bool(true)),
    _sfCellMajorAxisLength    (UInt32(50)),
    _sfModel                  (NULL),
    _sfCellGenerator          (NULL),
    _sfAutoScrollToFocused    (bool(true)),
    _sfSelectionModel         (NULL)
{
}

ListBase::ListBase(const ListBase &source) :
    Inherited(source),
    _sfOrientation            (source._sfOrientation            ),
    _sfSelectable             (source._sfSelectable             ),
    _sfCellMajorAxisLength    (source._sfCellMajorAxisLength    ),
    _sfModel                  (NULL),
    _sfCellGenerator          (NULL),
    _sfAutoScrollToFocused    (source._sfAutoScrollToFocused    ),
    _sfSelectionModel         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ListBase::~ListBase(void)
{
}

void ListBase::onCreate(const List *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        List *pThis = static_cast<List *>(this);

        pThis->setModel(source->getModel());

        pThis->setCellGenerator(source->getCellGenerator());

        pThis->setSelectionModel(source->getSelectionModel());
    }
}

GetFieldHandlePtr ListBase::getHandleOrientation     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfOrientation,
             this->getType().getFieldDesc(OrientationFieldId),
             const_cast<ListBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListBase::editHandleOrientation    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfOrientation,
             this->getType().getFieldDesc(OrientationFieldId),
             this));


    editSField(OrientationFieldMask);

    return returnValue;
}

GetFieldHandlePtr ListBase::getHandleSelectable      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSelectable,
             this->getType().getFieldDesc(SelectableFieldId),
             const_cast<ListBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListBase::editHandleSelectable     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSelectable,
             this->getType().getFieldDesc(SelectableFieldId),
             this));


    editSField(SelectableFieldMask);

    return returnValue;
}

GetFieldHandlePtr ListBase::getHandleCellMajorAxisLength (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfCellMajorAxisLength,
             this->getType().getFieldDesc(CellMajorAxisLengthFieldId),
             const_cast<ListBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListBase::editHandleCellMajorAxisLength(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfCellMajorAxisLength,
             this->getType().getFieldDesc(CellMajorAxisLengthFieldId),
             this));


    editSField(CellMajorAxisLengthFieldMask);

    return returnValue;
}

GetFieldHandlePtr ListBase::getHandleModel           (void) const
{
    SFUnrecListModelPtr::GetHandlePtr returnValue(
        new  SFUnrecListModelPtr::GetHandle(
             &_sfModel,
             this->getType().getFieldDesc(ModelFieldId),
             const_cast<ListBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListBase::editHandleModel          (void)
{
    SFUnrecListModelPtr::EditHandlePtr returnValue(
        new  SFUnrecListModelPtr::EditHandle(
             &_sfModel,
             this->getType().getFieldDesc(ModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&List::setModel,
                    static_cast<List *>(this), _1));

    editSField(ModelFieldMask);

    return returnValue;
}

GetFieldHandlePtr ListBase::getHandleCellGenerator   (void) const
{
    SFUnrecComponentGeneratorPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentGeneratorPtr::GetHandle(
             &_sfCellGenerator,
             this->getType().getFieldDesc(CellGeneratorFieldId),
             const_cast<ListBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListBase::editHandleCellGenerator  (void)
{
    SFUnrecComponentGeneratorPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentGeneratorPtr::EditHandle(
             &_sfCellGenerator,
             this->getType().getFieldDesc(CellGeneratorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&List::setCellGenerator,
                    static_cast<List *>(this), _1));

    editSField(CellGeneratorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ListBase::getHandleAutoScrollToFocused (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAutoScrollToFocused,
             this->getType().getFieldDesc(AutoScrollToFocusedFieldId),
             const_cast<ListBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListBase::editHandleAutoScrollToFocused(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAutoScrollToFocused,
             this->getType().getFieldDesc(AutoScrollToFocusedFieldId),
             this));


    editSField(AutoScrollToFocusedFieldMask);

    return returnValue;
}

GetFieldHandlePtr ListBase::getHandleSelectionModel  (void) const
{
    SFUnrecListSelectionModelPtr::GetHandlePtr returnValue(
        new  SFUnrecListSelectionModelPtr::GetHandle(
             &_sfSelectionModel,
             this->getType().getFieldDesc(SelectionModelFieldId),
             const_cast<ListBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListBase::editHandleSelectionModel (void)
{
    SFUnrecListSelectionModelPtr::EditHandlePtr returnValue(
        new  SFUnrecListSelectionModelPtr::EditHandle(
             &_sfSelectionModel,
             this->getType().getFieldDesc(SelectionModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&List::setSelectionModel,
                    static_cast<List *>(this), _1));

    editSField(SelectionModelFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ListBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    List *pThis = static_cast<List *>(this);

    pThis->execSync(static_cast<List *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ListBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    List *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const List *>(pRefAspect),
                  dynamic_cast<const List *>(this));

    return returnValue;
}
#endif

void ListBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<List *>(this)->setModel(NULL);

    static_cast<List *>(this)->setCellGenerator(NULL);

    static_cast<List *>(this)->setSelectionModel(NULL);


}


OSG_END_NAMESPACE
