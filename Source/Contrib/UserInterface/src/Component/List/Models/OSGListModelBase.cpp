/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ListModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGListModelBase.h"
#include "OSGListModel.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ListModel
    A UI ListModel.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ListModel *>::_type("ListModelPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ListModel *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ListModel *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ListModel *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ListModelBase::classDescInserter(TypeObject &oType)
{
}


ListModelBase::TypeObject ListModelBase::_type(
    ListModelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ListModel::initMethod,
    ListModel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ListModel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ListModel\"\n"
    "\tparent=\"FieldContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI ListModel.\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ListDataContentsChanged\"\n"
    "\t\tdetailsType=\"ListDataEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ListDataIntervalAdded\"\n"
    "\t\tdetailsType=\"ListDataEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ListDataIntervalRemoved\"\n"
    "\t\tdetailsType=\"ListDataEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI ListModel.\n"
    );

//! ListModel Produced Events

EventDescription *ListModelBase::_eventDesc[] =
{
    new EventDescription("ListDataContentsChanged", 
                          "",
                          ListDataContentsChangedEventId, 
                          FieldTraits<ListDataEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ListModelBase::getHandleListDataContentsChangedSignal)),

    new EventDescription("ListDataIntervalAdded", 
                          "",
                          ListDataIntervalAddedEventId, 
                          FieldTraits<ListDataEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ListModelBase::getHandleListDataIntervalAddedSignal)),

    new EventDescription("ListDataIntervalRemoved", 
                          "",
                          ListDataIntervalRemovedEventId, 
                          FieldTraits<ListDataEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ListModelBase::getHandleListDataIntervalRemovedSignal))

};

EventProducerType ListModelBase::_producerType(
    "ListModelProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &ListModelBase::getType(void)
{
    return _type;
}

const FieldContainerType &ListModelBase::getType(void) const
{
    return _type;
}

const EventProducerType &ListModelBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 ListModelBase::getContainerSize(void) const
{
    return sizeof(ListModel);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

UInt32 ListModelBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void ListModelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

}

void ListModelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

}



/*------------------------- event producers ----------------------------------*/
void ListModelBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case ListDataContentsChangedEventId:
        OSG_ASSERT(dynamic_cast<ListDataContentsChangedEventDetailsType* const>(e));

        _ListDataContentsChangedEvent.set_combiner(ConsumableEventCombiner(e));
        _ListDataContentsChangedEvent(dynamic_cast<ListDataContentsChangedEventDetailsType* const>(e), ListDataContentsChangedEventId);
        break;
    case ListDataIntervalAddedEventId:
        OSG_ASSERT(dynamic_cast<ListDataIntervalAddedEventDetailsType* const>(e));

        _ListDataIntervalAddedEvent.set_combiner(ConsumableEventCombiner(e));
        _ListDataIntervalAddedEvent(dynamic_cast<ListDataIntervalAddedEventDetailsType* const>(e), ListDataIntervalAddedEventId);
        break;
    case ListDataIntervalRemovedEventId:
        OSG_ASSERT(dynamic_cast<ListDataIntervalRemovedEventDetailsType* const>(e));

        _ListDataIntervalRemovedEvent.set_combiner(ConsumableEventCombiner(e));
        _ListDataIntervalRemovedEvent(dynamic_cast<ListDataIntervalRemovedEventDetailsType* const>(e), ListDataIntervalRemovedEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection ListModelBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ListDataContentsChangedEventId:
        return _ListDataContentsChangedEvent.connect(listener, at);
        break;
    case ListDataIntervalAddedEventId:
        return _ListDataIntervalAddedEvent.connect(listener, at);
        break;
    case ListDataIntervalRemovedEventId:
        return _ListDataIntervalRemovedEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  ListModelBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ListDataContentsChangedEventId:
        return _ListDataContentsChangedEvent.connect(group, listener, at);
        break;
    case ListDataIntervalAddedEventId:
        return _ListDataIntervalAddedEvent.connect(group, listener, at);
        break;
    case ListDataIntervalRemovedEventId:
        return _ListDataIntervalRemovedEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  ListModelBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case ListDataContentsChangedEventId:
        _ListDataContentsChangedEvent.disconnect(group);
        break;
    case ListDataIntervalAddedEventId:
        _ListDataIntervalAddedEvent.disconnect(group);
        break;
    case ListDataIntervalRemovedEventId:
        _ListDataIntervalRemovedEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  ListModelBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case ListDataContentsChangedEventId:
        _ListDataContentsChangedEvent.disconnect_all_slots();
        break;
    case ListDataIntervalAddedEventId:
        _ListDataIntervalAddedEvent.disconnect_all_slots();
        break;
    case ListDataIntervalRemovedEventId:
        _ListDataIntervalRemovedEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  ListModelBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ListDataContentsChangedEventId:
        return _ListDataContentsChangedEvent.empty();
        break;
    case ListDataIntervalAddedEventId:
        return _ListDataIntervalAddedEvent.empty();
        break;
    case ListDataIntervalRemovedEventId:
        return _ListDataIntervalRemovedEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  ListModelBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ListDataContentsChangedEventId:
        return _ListDataContentsChangedEvent.num_slots();
        break;
    case ListDataIntervalAddedEventId:
        return _ListDataIntervalAddedEvent.num_slots();
        break;
    case ListDataIntervalRemovedEventId:
        return _ListDataIntervalRemovedEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

ListModelBase::ListModelBase(void) :
    Inherited()
{
}

ListModelBase::ListModelBase(const ListModelBase &source) :
    Inherited(source)
{
}


/*-------------------------- destructors ----------------------------------*/

ListModelBase::~ListModelBase(void)
{
}



GetEventHandlePtr ListModelBase::getHandleListDataContentsChangedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ListDataContentsChangedEventType>(
             const_cast<ListDataContentsChangedEventType *>(&_ListDataContentsChangedEvent),
             _producerType.getEventDescription(ListDataContentsChangedEventId),
             const_cast<ListModelBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ListModelBase::getHandleListDataIntervalAddedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ListDataIntervalAddedEventType>(
             const_cast<ListDataIntervalAddedEventType *>(&_ListDataIntervalAddedEvent),
             _producerType.getEventDescription(ListDataIntervalAddedEventId),
             const_cast<ListModelBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ListModelBase::getHandleListDataIntervalRemovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ListDataIntervalRemovedEventType>(
             const_cast<ListDataIntervalRemovedEventType *>(&_ListDataIntervalRemovedEvent),
             _producerType.getEventDescription(ListDataIntervalRemovedEventId),
             const_cast<ListModelBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ListModelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ListModel *pThis = static_cast<ListModel *>(this);

    pThis->execSync(static_cast<ListModel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ListModelBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
