/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Button
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGBUTTONBASE_H_
#define _OSGBUTTONBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponent.h" // Parent

#include "OSGUIFontFields.h"            // Font type
#include "OSGBaseFields.h"              // Text type
#include "OSGBorderFields.h"            // ActiveBorder type
#include "OSGLayerFields.h"             // ActiveBackground type
#include "OSGVecFields.h"               // Alignment type
#include "OSGSysFields.h"               // EnableActionOnMouseDownTime type
#include "OSGUIDrawObjectCanvasFields.h" // DrawObject type

#include "OSGButtonFields.h"

#include "OSGActionEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class Button;

//! \brief Button Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING ButtonBase : public Component
{
  public:

    typedef Component Inherited;
    typedef Component ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Button);
    
    
    typedef ActionEventDetails ActionPerformedEventDetailsType;
    typedef ActionEventDetails MousePressedActionPerformedEventDetailsType;

    typedef boost::signals2::signal<void (ActionEventDetails* const, UInt32), ConsumableEventCombiner> ActionPerformedEventType;
    typedef boost::signals2::signal<void (ActionEventDetails* const, UInt32), ConsumableEventCombiner> MousePressedActionPerformedEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        FontFieldId = Inherited::NextFieldId,
        TextFieldId = FontFieldId + 1,
        ActiveBorderFieldId = TextFieldId + 1,
        ActiveBackgroundFieldId = ActiveBorderFieldId + 1,
        ActiveForegroundFieldId = ActiveBackgroundFieldId + 1,
        ActiveTextColorFieldId = ActiveForegroundFieldId + 1,
        FocusedTextColorFieldId = ActiveTextColorFieldId + 1,
        RolloverTextColorFieldId = FocusedTextColorFieldId + 1,
        DisabledTextColorFieldId = RolloverTextColorFieldId + 1,
        TextColorFieldId = DisabledTextColorFieldId + 1,
        AlignmentFieldId = TextColorFieldId + 1,
        EnableActionOnMouseDownTimeFieldId = AlignmentFieldId + 1,
        ActionOnMouseDownRateFieldId = EnableActionOnMouseDownTimeFieldId + 1,
        ActiveOffsetFieldId = ActionOnMouseDownRateFieldId + 1,
        DrawObjectFieldId = ActiveOffsetFieldId + 1,
        ActiveDrawObjectFieldId = DrawObjectFieldId + 1,
        FocusedDrawObjectFieldId = ActiveDrawObjectFieldId + 1,
        RolloverDrawObjectFieldId = FocusedDrawObjectFieldId + 1,
        DisabledDrawObjectFieldId = RolloverDrawObjectFieldId + 1,
        DrawObjectToTextAlignmentFieldId = DisabledDrawObjectFieldId + 1,
        DrawObjectToTextPaddingFieldId = DrawObjectToTextAlignmentFieldId + 1,
        NextFieldId = DrawObjectToTextPaddingFieldId + 1
    };

    static const OSG::BitVector FontFieldMask =
        (TypeTraits<BitVector>::One << FontFieldId);
    static const OSG::BitVector TextFieldMask =
        (TypeTraits<BitVector>::One << TextFieldId);
    static const OSG::BitVector ActiveBorderFieldMask =
        (TypeTraits<BitVector>::One << ActiveBorderFieldId);
    static const OSG::BitVector ActiveBackgroundFieldMask =
        (TypeTraits<BitVector>::One << ActiveBackgroundFieldId);
    static const OSG::BitVector ActiveForegroundFieldMask =
        (TypeTraits<BitVector>::One << ActiveForegroundFieldId);
    static const OSG::BitVector ActiveTextColorFieldMask =
        (TypeTraits<BitVector>::One << ActiveTextColorFieldId);
    static const OSG::BitVector FocusedTextColorFieldMask =
        (TypeTraits<BitVector>::One << FocusedTextColorFieldId);
    static const OSG::BitVector RolloverTextColorFieldMask =
        (TypeTraits<BitVector>::One << RolloverTextColorFieldId);
    static const OSG::BitVector DisabledTextColorFieldMask =
        (TypeTraits<BitVector>::One << DisabledTextColorFieldId);
    static const OSG::BitVector TextColorFieldMask =
        (TypeTraits<BitVector>::One << TextColorFieldId);
    static const OSG::BitVector AlignmentFieldMask =
        (TypeTraits<BitVector>::One << AlignmentFieldId);
    static const OSG::BitVector EnableActionOnMouseDownTimeFieldMask =
        (TypeTraits<BitVector>::One << EnableActionOnMouseDownTimeFieldId);
    static const OSG::BitVector ActionOnMouseDownRateFieldMask =
        (TypeTraits<BitVector>::One << ActionOnMouseDownRateFieldId);
    static const OSG::BitVector ActiveOffsetFieldMask =
        (TypeTraits<BitVector>::One << ActiveOffsetFieldId);
    static const OSG::BitVector DrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DrawObjectFieldId);
    static const OSG::BitVector ActiveDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << ActiveDrawObjectFieldId);
    static const OSG::BitVector FocusedDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << FocusedDrawObjectFieldId);
    static const OSG::BitVector RolloverDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << RolloverDrawObjectFieldId);
    static const OSG::BitVector DisabledDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DisabledDrawObjectFieldId);
    static const OSG::BitVector DrawObjectToTextAlignmentFieldMask =
        (TypeTraits<BitVector>::One << DrawObjectToTextAlignmentFieldId);
    static const OSG::BitVector DrawObjectToTextPaddingFieldMask =
        (TypeTraits<BitVector>::One << DrawObjectToTextPaddingFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecUIFontPtr  SFFontType;
    typedef SFString          SFTextType;
    typedef SFUnrecBorderPtr  SFActiveBorderType;
    typedef SFUnrecLayerPtr   SFActiveBackgroundType;
    typedef SFUnrecLayerPtr   SFActiveForegroundType;
    typedef SFColor4f         SFActiveTextColorType;
    typedef SFColor4f         SFFocusedTextColorType;
    typedef SFColor4f         SFRolloverTextColorType;
    typedef SFColor4f         SFDisabledTextColorType;
    typedef SFColor4f         SFTextColorType;
    typedef SFVec2f           SFAlignmentType;
    typedef SFBool            SFEnableActionOnMouseDownTimeType;
    typedef SFTime            SFActionOnMouseDownRateType;
    typedef SFVec2f           SFActiveOffsetType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFActiveDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFFocusedDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFRolloverDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDisabledDrawObjectType;
    typedef SFUInt32          SFDrawObjectToTextAlignmentType;
    typedef SFReal32          SFDrawObjectToTextPaddingType;

    enum
    {
        ActionPerformedEventId = Inherited::NextProducedEventId,
        MousePressedActionPerformedEventId = ActionPerformedEventId + 1,
        NextProducedEventId = MousePressedActionPerformedEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecUIFontPtr    *getSFFont           (void) const;
                  SFUnrecUIFontPtr    *editSFFont           (void);

                  SFString            *editSFText           (void);
            const SFString            *getSFText            (void) const;
            const SFUnrecBorderPtr    *getSFActiveBorder   (void) const;
                  SFUnrecBorderPtr    *editSFActiveBorder   (void);
            const SFUnrecLayerPtr     *getSFActiveBackground(void) const;
                  SFUnrecLayerPtr     *editSFActiveBackground(void);
            const SFUnrecLayerPtr     *getSFActiveForeground(void) const;
                  SFUnrecLayerPtr     *editSFActiveForeground(void);

                  SFColor4f           *editSFActiveTextColor(void);
            const SFColor4f           *getSFActiveTextColor (void) const;

                  SFColor4f           *editSFFocusedTextColor(void);
            const SFColor4f           *getSFFocusedTextColor (void) const;

                  SFColor4f           *editSFRolloverTextColor(void);
            const SFColor4f           *getSFRolloverTextColor (void) const;

                  SFColor4f           *editSFDisabledTextColor(void);
            const SFColor4f           *getSFDisabledTextColor (void) const;

                  SFColor4f           *editSFTextColor      (void);
            const SFColor4f           *getSFTextColor       (void) const;

                  SFVec2f             *editSFAlignment      (void);
            const SFVec2f             *getSFAlignment       (void) const;

                  SFBool              *editSFEnableActionOnMouseDownTime(void);
            const SFBool              *getSFEnableActionOnMouseDownTime (void) const;

                  SFTime              *editSFActionOnMouseDownRate(void);
            const SFTime              *getSFActionOnMouseDownRate (void) const;

                  SFVec2f             *editSFActiveOffset   (void);
            const SFVec2f             *getSFActiveOffset    (void) const;
            const SFUnrecUIDrawObjectCanvasPtr *getSFDrawObject     (void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDrawObject     (void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFActiveDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFActiveDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFFocusedDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFFocusedDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFRolloverDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFRolloverDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFDisabledDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDisabledDrawObject(void);

                  SFUInt32            *editSFDrawObjectToTextAlignment(void);
            const SFUInt32            *getSFDrawObjectToTextAlignment (void) const;

                  SFReal32            *editSFDrawObjectToTextPadding(void);
            const SFReal32            *getSFDrawObjectToTextPadding (void) const;


                  UIFont * getFont           (void) const;

                  std::string         &editText           (void);
            const std::string         &getText            (void) const;

                  Border * getActiveBorder   (void) const;

                  Layer * getActiveBackground(void) const;

                  Layer * getActiveForeground(void) const;

                  Color4f             &editActiveTextColor(void);
            const Color4f             &getActiveTextColor (void) const;

                  Color4f             &editFocusedTextColor(void);
            const Color4f             &getFocusedTextColor (void) const;

                  Color4f             &editRolloverTextColor(void);
            const Color4f             &getRolloverTextColor (void) const;

                  Color4f             &editDisabledTextColor(void);
            const Color4f             &getDisabledTextColor (void) const;

                  Color4f             &editTextColor      (void);
            const Color4f             &getTextColor       (void) const;

                  Vec2f               &editAlignment      (void);
            const Vec2f               &getAlignment       (void) const;

                  bool                &editEnableActionOnMouseDownTime(void);
                  bool                 getEnableActionOnMouseDownTime (void) const;

                  Time                &editActionOnMouseDownRate(void);
            const Time                &getActionOnMouseDownRate (void) const;

                  Vec2f               &editActiveOffset   (void);
            const Vec2f               &getActiveOffset    (void) const;

                  UIDrawObjectCanvas * getDrawObject     (void) const;

                  UIDrawObjectCanvas * getActiveDrawObject(void) const;

                  UIDrawObjectCanvas * getFocusedDrawObject(void) const;

                  UIDrawObjectCanvas * getRolloverDrawObject(void) const;

                  UIDrawObjectCanvas * getDisabledDrawObject(void) const;

                  UInt32              &editDrawObjectToTextAlignment(void);
                  UInt32               getDrawObjectToTextAlignment (void) const;

                  Real32              &editDrawObjectToTextPadding(void);
                  Real32               getDrawObjectToTextPadding (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setFont           (UIFont * const value);
            void setText           (const std::string &value);
            void setActiveBorder   (Border * const value);
            void setActiveBackground(Layer * const value);
            void setActiveForeground(Layer * const value);
            void setActiveTextColor(const Color4f &value);
            void setFocusedTextColor(const Color4f &value);
            void setRolloverTextColor(const Color4f &value);
            void setDisabledTextColor(const Color4f &value);
            void setTextColor      (const Color4f &value);
            void setAlignment      (const Vec2f &value);
            void setEnableActionOnMouseDownTime(const bool value);
            void setActionOnMouseDownRate(const Time &value);
            void setActiveOffset   (const Vec2f &value);
            void setDrawObject     (UIDrawObjectCanvas * const value);
            void setActiveDrawObject(UIDrawObjectCanvas * const value);
            void setFocusedDrawObject(UIDrawObjectCanvas * const value);
            void setRolloverDrawObject(UIDrawObjectCanvas * const value);
            void setDisabledDrawObject(UIDrawObjectCanvas * const value);
            void setDrawObjectToTextAlignment(const UInt32 value);
            void setDrawObjectToTextPadding(const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //ActionPerformed
    boost::signals2::connection connectActionPerformed(const ActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectActionPerformed(const ActionPerformedEventType::group_type &group,
                                                       const ActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectActionPerformed        (const ActionPerformedEventType::group_type &group);
    void   disconnectAllSlotsActionPerformed(void);
    bool   isEmptyActionPerformed           (void) const;
    UInt32 numSlotsActionPerformed          (void) const;
    
    //MousePressedActionPerformed
    boost::signals2::connection connectMousePressedActionPerformed(const MousePressedActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMousePressedActionPerformed(const MousePressedActionPerformedEventType::group_type &group,
                                                       const MousePressedActionPerformedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMousePressedActionPerformed(const MousePressedActionPerformedEventType::group_type &group);
    void   disconnectAllSlotsMousePressedActionPerformed(void);
    bool   isEmptyMousePressedActionPerformed(void) const;
    UInt32 numSlotsMousePressedActionPerformed(void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ButtonTransitPtr  create          (void);
    static  Button           *createEmpty     (void);

    static  ButtonTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  Button            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ButtonTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    ActionPerformedEventType _ActionPerformedEvent;
    MousePressedActionPerformedEventType _MousePressedActionPerformedEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecUIFontPtr  _sfFont;
    SFString          _sfText;
    SFUnrecBorderPtr  _sfActiveBorder;
    SFUnrecLayerPtr   _sfActiveBackground;
    SFUnrecLayerPtr   _sfActiveForeground;
    SFColor4f         _sfActiveTextColor;
    SFColor4f         _sfFocusedTextColor;
    SFColor4f         _sfRolloverTextColor;
    SFColor4f         _sfDisabledTextColor;
    SFColor4f         _sfTextColor;
    SFVec2f           _sfAlignment;
    SFBool            _sfEnableActionOnMouseDownTime;
    SFTime            _sfActionOnMouseDownRate;
    SFVec2f           _sfActiveOffset;
    SFUnrecUIDrawObjectCanvasPtr _sfDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfActiveDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfFocusedDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfRolloverDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfDisabledDrawObject;
    SFUInt32          _sfDrawObjectToTextAlignment;
    SFReal32          _sfDrawObjectToTextPadding;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ButtonBase(void);
    ButtonBase(const ButtonBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ButtonBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Button *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleFont            (void) const;
    EditFieldHandlePtr editHandleFont           (void);
    GetFieldHandlePtr  getHandleText            (void) const;
    EditFieldHandlePtr editHandleText           (void);
    GetFieldHandlePtr  getHandleActiveBorder    (void) const;
    EditFieldHandlePtr editHandleActiveBorder   (void);
    GetFieldHandlePtr  getHandleActiveBackground (void) const;
    EditFieldHandlePtr editHandleActiveBackground(void);
    GetFieldHandlePtr  getHandleActiveForeground (void) const;
    EditFieldHandlePtr editHandleActiveForeground(void);
    GetFieldHandlePtr  getHandleActiveTextColor (void) const;
    EditFieldHandlePtr editHandleActiveTextColor(void);
    GetFieldHandlePtr  getHandleFocusedTextColor (void) const;
    EditFieldHandlePtr editHandleFocusedTextColor(void);
    GetFieldHandlePtr  getHandleRolloverTextColor (void) const;
    EditFieldHandlePtr editHandleRolloverTextColor(void);
    GetFieldHandlePtr  getHandleDisabledTextColor (void) const;
    EditFieldHandlePtr editHandleDisabledTextColor(void);
    GetFieldHandlePtr  getHandleTextColor       (void) const;
    EditFieldHandlePtr editHandleTextColor      (void);
    GetFieldHandlePtr  getHandleAlignment       (void) const;
    EditFieldHandlePtr editHandleAlignment      (void);
    GetFieldHandlePtr  getHandleEnableActionOnMouseDownTime (void) const;
    EditFieldHandlePtr editHandleEnableActionOnMouseDownTime(void);
    GetFieldHandlePtr  getHandleActionOnMouseDownRate (void) const;
    EditFieldHandlePtr editHandleActionOnMouseDownRate(void);
    GetFieldHandlePtr  getHandleActiveOffset    (void) const;
    EditFieldHandlePtr editHandleActiveOffset   (void);
    GetFieldHandlePtr  getHandleDrawObject      (void) const;
    EditFieldHandlePtr editHandleDrawObject     (void);
    GetFieldHandlePtr  getHandleActiveDrawObject (void) const;
    EditFieldHandlePtr editHandleActiveDrawObject(void);
    GetFieldHandlePtr  getHandleFocusedDrawObject (void) const;
    EditFieldHandlePtr editHandleFocusedDrawObject(void);
    GetFieldHandlePtr  getHandleRolloverDrawObject (void) const;
    EditFieldHandlePtr editHandleRolloverDrawObject(void);
    GetFieldHandlePtr  getHandleDisabledDrawObject (void) const;
    EditFieldHandlePtr editHandleDisabledDrawObject(void);
    GetFieldHandlePtr  getHandleDrawObjectToTextAlignment (void) const;
    EditFieldHandlePtr editHandleDrawObjectToTextAlignment(void);
    GetFieldHandlePtr  getHandleDrawObjectToTextPadding (void) const;
    EditFieldHandlePtr editHandleDrawObjectToTextPadding(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleActionPerformedSignal(void) const;
    GetEventHandlePtr getHandleMousePressedActionPerformedSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceActionPerformed     (ActionPerformedEventDetailsType* const e);
    void produceMousePressedActionPerformed  (MousePressedActionPerformedEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ButtonBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ButtonBase &source);
};

typedef ButtonBase *ButtonBaseP;

OSG_END_NAMESPACE

#endif /* _OSGBUTTONBASE_H_ */
