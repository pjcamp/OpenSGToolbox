/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Component!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGWindowEventProducer.h"       // Cursor default header

#include "OSGLayoutConstraints.h"       // Constraints Class
#include "OSGBorder.h"                  // Border Class
#include "OSGLayer.h"                   // Background Class
#include "OSGTransferHandler.h"         // TransferHandler Class
#include "OSGFieldContainer.h"          // ParentContainer Class
#include "OSGPopupMenu.h"               // PopupMenu Class

#include "OSGComponentBase.h"
#include "OSGComponent.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Component
    A UI Component Interface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt2f           ComponentBase::_sfPosition
    
*/

/*! \var Pnt4f           ComponentBase::_sfClipBounds
    
*/

/*! \var Vec2f           ComponentBase::_sfMinSize
    
*/

/*! \var Vec2f           ComponentBase::_sfMaxSize
    
*/

/*! \var Vec2f           ComponentBase::_sfPreferredSize
    
*/

/*! \var Vec2f           ComponentBase::_sfSize
    
*/

/*! \var bool            ComponentBase::_sfVisible
    
*/

/*! \var bool            ComponentBase::_sfEnabled
    
*/

/*! \var bool            ComponentBase::_sfFocused
    
*/

/*! \var LayoutConstraints * ComponentBase::_sfConstraints
    
*/

/*! \var Border *        ComponentBase::_sfBorder
    
*/

/*! \var Layer *         ComponentBase::_sfBackground
    
*/

/*! \var Border *        ComponentBase::_sfDisabledBorder
    
*/

/*! \var Layer *         ComponentBase::_sfDisabledBackground
    
*/

/*! \var bool            ComponentBase::_sfDragEnabled
    
*/

/*! \var TransferHandler * ComponentBase::_sfTransferHandler
    
*/

/*! \var Border *        ComponentBase::_sfFocusedBorder
    
*/

/*! \var Layer *         ComponentBase::_sfFocusedBackground
    
*/

/*! \var Border *        ComponentBase::_sfRolloverBorder
    
*/

/*! \var Layer *         ComponentBase::_sfRolloverBackground
    
*/

/*! \var std::string     ComponentBase::_sfToolTipText
    
*/

/*! \var Real32          ComponentBase::_sfOpacity
    
*/

/*! \var FieldContainer * ComponentBase::_sfParentContainer
    The Component Container this Component is contained in.
*/

/*! \var bool            ComponentBase::_sfClipping
    
*/

/*! \var PopupMenu *     ComponentBase::_sfPopupMenu
    
*/

/*! \var Layer *         ComponentBase::_sfFocusedForeground
    
*/

/*! \var Layer *         ComponentBase::_sfRolloverForeground
    
*/

/*! \var Layer *         ComponentBase::_sfDisabledForeground
    
*/

/*! \var Layer *         ComponentBase::_sfForeground
    
*/

/*! \var UInt32          ComponentBase::_sfCursor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Component *>::_type("ComponentPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Component *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Component *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Component *,
                           0);

DataType &FieldTraits< Component *, 1 >::getType(void)
{
    return FieldTraits<Component *, 0>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      Component *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ComponentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Position",
        "",
        PositionFieldId, PositionFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandlePosition),
        static_cast<FieldGetMethodSig >(&Component::getHandlePosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt4f::Description(
        SFPnt4f::getClassType(),
        "ClipBounds",
        "",
        ClipBoundsFieldId, ClipBoundsFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleClipBounds),
        static_cast<FieldGetMethodSig >(&Component::getHandleClipBounds));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "MinSize",
        "",
        MinSizeFieldId, MinSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleMinSize),
        static_cast<FieldGetMethodSig >(&Component::getHandleMinSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "MaxSize",
        "",
        MaxSizeFieldId, MaxSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleMaxSize),
        static_cast<FieldGetMethodSig >(&Component::getHandleMaxSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "PreferredSize",
        "",
        PreferredSizeFieldId, PreferredSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandlePreferredSize),
        static_cast<FieldGetMethodSig >(&Component::getHandlePreferredSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "Size",
        "",
        SizeFieldId, SizeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleSize),
        static_cast<FieldGetMethodSig >(&Component::getHandleSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Visible",
        "",
        VisibleFieldId, VisibleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleVisible),
        static_cast<FieldGetMethodSig >(&Component::getHandleVisible));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Enabled",
        "",
        EnabledFieldId, EnabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleEnabled),
        static_cast<FieldGetMethodSig >(&Component::getHandleEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Focused",
        "",
        FocusedFieldId, FocusedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleFocused),
        static_cast<FieldGetMethodSig >(&Component::getHandleFocused));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildLayoutConstraintsPtr::Description(
        SFUnrecChildLayoutConstraintsPtr::getClassType(),
        "Constraints",
        "",
        ConstraintsFieldId, ConstraintsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleConstraints),
        static_cast<FieldGetMethodSig >(&Component::getHandleConstraints));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "Border",
        "",
        BorderFieldId, BorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "Background",
        "",
        BackgroundFieldId, BackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "DisabledBorder",
        "",
        DisabledBorderFieldId, DisabledBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDisabledBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleDisabledBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "DisabledBackground",
        "",
        DisabledBackgroundFieldId, DisabledBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDisabledBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleDisabledBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "DragEnabled",
        "",
        DragEnabledFieldId, DragEnabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDragEnabled),
        static_cast<FieldGetMethodSig >(&Component::getHandleDragEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTransferHandlerPtr::Description(
        SFUnrecTransferHandlerPtr::getClassType(),
        "TransferHandler",
        "",
        TransferHandlerFieldId, TransferHandlerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleTransferHandler),
        static_cast<FieldGetMethodSig >(&Component::getHandleTransferHandler));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "FocusedBorder",
        "",
        FocusedBorderFieldId, FocusedBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleFocusedBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleFocusedBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "FocusedBackground",
        "",
        FocusedBackgroundFieldId, FocusedBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleFocusedBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleFocusedBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "RolloverBorder",
        "",
        RolloverBorderFieldId, RolloverBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleRolloverBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleRolloverBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "RolloverBackground",
        "",
        RolloverBackgroundFieldId, RolloverBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleRolloverBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleRolloverBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "ToolTipText",
        "",
        ToolTipTextFieldId, ToolTipTextFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleToolTipText),
        static_cast<FieldGetMethodSig >(&Component::getHandleToolTipText));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Opacity",
        "",
        OpacityFieldId, OpacityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleOpacity),
        static_cast<FieldGetMethodSig >(&Component::getHandleOpacity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentContainer",
        "The Component Container this Component is contained in.\n",
        ParentContainerFieldId, ParentContainerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&Component::invalidEditField),
        static_cast     <FieldGetMethodSig >(&Component::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Clipping",
        "",
        ClippingFieldId, ClippingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleClipping),
        static_cast<FieldGetMethodSig >(&Component::getHandleClipping));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPopupMenuPtr::Description(
        SFUnrecPopupMenuPtr::getClassType(),
        "PopupMenu",
        "",
        PopupMenuFieldId, PopupMenuFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandlePopupMenu),
        static_cast<FieldGetMethodSig >(&Component::getHandlePopupMenu));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "FocusedForeground",
        "",
        FocusedForegroundFieldId, FocusedForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleFocusedForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleFocusedForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "RolloverForeground",
        "",
        RolloverForegroundFieldId, RolloverForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleRolloverForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleRolloverForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "DisabledForeground",
        "",
        DisabledForegroundFieldId, DisabledForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDisabledForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleDisabledForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "Foreground",
        "",
        ForegroundFieldId, ForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Cursor",
        "",
        CursorFieldId, CursorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleCursor),
        static_cast<FieldGetMethodSig >(&Component::getHandleCursor));

    oType.addInitialDesc(pDesc);
}


ComponentBase::TypeObject ComponentBase::_type(
    ComponentBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    Component::initMethod,
    Component::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Component::classDescInserter),
    false,
    EnabledFieldMask,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Component\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"true\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    childFields=\"multi\"\n"
    ">\n"
    "A UI Component Interface.\n"
    "\t<Field\n"
    "\t\tname=\"Position\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ClipBounds\"\n"
    "\t\ttype=\"Pnt4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f,0.0f\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MinSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MaxSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"32767,32767\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"PreferredSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1,1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Size\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Visible\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Enabled\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Focused\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Constraints\"\n"
    "\t\ttype=\"LayoutConstraints\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentComponent\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Border\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Background\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DragEnabled\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TransferHandler\"\n"
    "\t\ttype=\"TransferHandler\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ToolTipText\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Opacity\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"ParentContainer\"\n"
    "\t   type=\"FieldContainer\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"none\"\n"
    "       doRefCount=\"false\"\n"
    "       passFieldMask=\"true\"\n"
    "       category=\"parentpointer\"\n"
    "\t   >\n"
    "\t  The Component Container this Component is contained in.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Clipping\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"PopupMenu\"\n"
    "\t\ttype=\"PopupMenu\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "   <Field\n"
    "\t\tname=\"FocusedForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Foreground\"\n"
    "\t\ttype=\"Layer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Cursor\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"WindowEventProducer::CURSOR_POINTER\"\n"
    "\t\tdefaultHeader=\"OSGWindowEventProducer.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseMoved\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseDragged\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseClicked\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseEntered\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseExited\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MousePressed\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseReleased\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseWheelMoved\"\n"
    "\t\tdetailsType=\"MouseWheelEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyPressed\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyReleased\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyTyped\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"FocusGained\"\n"
    "\t\tdetailsType=\"FocusEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"FocusLost\"\n"
    "\t\tdetailsType=\"FocusEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentHidden\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentVisible\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentMoved\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentResized\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentEnabled\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ComponentDisabled\"\n"
    "\t\tdetailsType=\"ComponentEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI Component Interface.\n"
    );

//! Component Produced Events

EventDescription *ComponentBase::_eventDesc[] =
{
    new EventDescription("MouseMoved", 
                          "",
                          MouseMovedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMouseMovedSignal)),

    new EventDescription("MouseDragged", 
                          "",
                          MouseDraggedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMouseDraggedSignal)),

    new EventDescription("MouseClicked", 
                          "",
                          MouseClickedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMouseClickedSignal)),

    new EventDescription("MouseEntered", 
                          "",
                          MouseEnteredEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMouseEnteredSignal)),

    new EventDescription("MouseExited", 
                          "",
                          MouseExitedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMouseExitedSignal)),

    new EventDescription("MousePressed", 
                          "",
                          MousePressedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMousePressedSignal)),

    new EventDescription("MouseReleased", 
                          "",
                          MouseReleasedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMouseReleasedSignal)),

    new EventDescription("MouseWheelMoved", 
                          "",
                          MouseWheelMovedEventId, 
                          FieldTraits<MouseWheelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleMouseWheelMovedSignal)),

    new EventDescription("KeyPressed", 
                          "",
                          KeyPressedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleKeyPressedSignal)),

    new EventDescription("KeyReleased", 
                          "",
                          KeyReleasedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleKeyReleasedSignal)),

    new EventDescription("KeyTyped", 
                          "",
                          KeyTypedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleKeyTypedSignal)),

    new EventDescription("FocusGained", 
                          "",
                          FocusGainedEventId, 
                          FieldTraits<FocusEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleFocusGainedSignal)),

    new EventDescription("FocusLost", 
                          "",
                          FocusLostEventId, 
                          FieldTraits<FocusEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleFocusLostSignal)),

    new EventDescription("ComponentHidden", 
                          "",
                          ComponentHiddenEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleComponentHiddenSignal)),

    new EventDescription("ComponentVisible", 
                          "",
                          ComponentVisibleEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleComponentVisibleSignal)),

    new EventDescription("ComponentMoved", 
                          "",
                          ComponentMovedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleComponentMovedSignal)),

    new EventDescription("ComponentResized", 
                          "",
                          ComponentResizedEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleComponentResizedSignal)),

    new EventDescription("ComponentEnabled", 
                          "",
                          ComponentEnabledEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleComponentEnabledSignal)),

    new EventDescription("ComponentDisabled", 
                          "",
                          ComponentDisabledEventId, 
                          FieldTraits<ComponentEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ComponentBase::getHandleComponentDisabledSignal))

};

EventProducerType ComponentBase::_producerType(
    "ComponentProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComponentBase::getType(void)
{
    return _type;
}

const FieldContainerType &ComponentBase::getType(void) const
{
    return _type;
}

const EventProducerType &ComponentBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 ComponentBase::getContainerSize(void) const
{
    return sizeof(Component);
}

/*------------------------- decorator get ------------------------------*/


SFPnt2f *ComponentBase::editSFPosition(void)
{
    editSField(PositionFieldMask);

    return &_sfPosition;
}

const SFPnt2f *ComponentBase::getSFPosition(void) const
{
    return &_sfPosition;
}


SFPnt4f *ComponentBase::editSFClipBounds(void)
{
    editSField(ClipBoundsFieldMask);

    return &_sfClipBounds;
}

const SFPnt4f *ComponentBase::getSFClipBounds(void) const
{
    return &_sfClipBounds;
}


SFVec2f *ComponentBase::editSFMinSize(void)
{
    editSField(MinSizeFieldMask);

    return &_sfMinSize;
}

const SFVec2f *ComponentBase::getSFMinSize(void) const
{
    return &_sfMinSize;
}


SFVec2f *ComponentBase::editSFMaxSize(void)
{
    editSField(MaxSizeFieldMask);

    return &_sfMaxSize;
}

const SFVec2f *ComponentBase::getSFMaxSize(void) const
{
    return &_sfMaxSize;
}


SFVec2f *ComponentBase::editSFPreferredSize(void)
{
    editSField(PreferredSizeFieldMask);

    return &_sfPreferredSize;
}

const SFVec2f *ComponentBase::getSFPreferredSize(void) const
{
    return &_sfPreferredSize;
}


SFVec2f *ComponentBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFVec2f *ComponentBase::getSFSize(void) const
{
    return &_sfSize;
}


SFBool *ComponentBase::editSFVisible(void)
{
    editSField(VisibleFieldMask);

    return &_sfVisible;
}

const SFBool *ComponentBase::getSFVisible(void) const
{
    return &_sfVisible;
}


SFBool *ComponentBase::editSFEnabled(void)
{
    editSField(EnabledFieldMask);

    return &_sfEnabled;
}

const SFBool *ComponentBase::getSFEnabled(void) const
{
    return &_sfEnabled;
}


SFBool *ComponentBase::editSFFocused(void)
{
    editSField(FocusedFieldMask);

    return &_sfFocused;
}

const SFBool *ComponentBase::getSFFocused(void) const
{
    return &_sfFocused;
}


//! Get the Component::_sfConstraints field.
const SFUnrecChildLayoutConstraintsPtr *ComponentBase::getSFConstraints(void) const
{
    return &_sfConstraints;
}

SFUnrecChildLayoutConstraintsPtr *ComponentBase::editSFConstraints    (void)
{
    editSField(ConstraintsFieldMask);

    return &_sfConstraints;
}

//! Get the Component::_sfBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFBorder(void) const
{
    return &_sfBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFBorder         (void)
{
    editSField(BorderFieldMask);

    return &_sfBorder;
}

//! Get the Component::_sfBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFBackground(void) const
{
    return &_sfBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFBackground     (void)
{
    editSField(BackgroundFieldMask);

    return &_sfBackground;
}

//! Get the Component::_sfDisabledBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFDisabledBorder(void) const
{
    return &_sfDisabledBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFDisabledBorder (void)
{
    editSField(DisabledBorderFieldMask);

    return &_sfDisabledBorder;
}

//! Get the Component::_sfDisabledBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFDisabledBackground(void) const
{
    return &_sfDisabledBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFDisabledBackground(void)
{
    editSField(DisabledBackgroundFieldMask);

    return &_sfDisabledBackground;
}

SFBool *ComponentBase::editSFDragEnabled(void)
{
    editSField(DragEnabledFieldMask);

    return &_sfDragEnabled;
}

const SFBool *ComponentBase::getSFDragEnabled(void) const
{
    return &_sfDragEnabled;
}


//! Get the Component::_sfTransferHandler field.
const SFUnrecTransferHandlerPtr *ComponentBase::getSFTransferHandler(void) const
{
    return &_sfTransferHandler;
}

SFUnrecTransferHandlerPtr *ComponentBase::editSFTransferHandler(void)
{
    editSField(TransferHandlerFieldMask);

    return &_sfTransferHandler;
}

//! Get the Component::_sfFocusedBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFFocusedBorder(void) const
{
    return &_sfFocusedBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFFocusedBorder  (void)
{
    editSField(FocusedBorderFieldMask);

    return &_sfFocusedBorder;
}

//! Get the Component::_sfFocusedBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFFocusedBackground(void) const
{
    return &_sfFocusedBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFFocusedBackground(void)
{
    editSField(FocusedBackgroundFieldMask);

    return &_sfFocusedBackground;
}

//! Get the Component::_sfRolloverBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFRolloverBorder(void) const
{
    return &_sfRolloverBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFRolloverBorder (void)
{
    editSField(RolloverBorderFieldMask);

    return &_sfRolloverBorder;
}

//! Get the Component::_sfRolloverBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFRolloverBackground(void) const
{
    return &_sfRolloverBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFRolloverBackground(void)
{
    editSField(RolloverBackgroundFieldMask);

    return &_sfRolloverBackground;
}

SFString *ComponentBase::editSFToolTipText(void)
{
    editSField(ToolTipTextFieldMask);

    return &_sfToolTipText;
}

const SFString *ComponentBase::getSFToolTipText(void) const
{
    return &_sfToolTipText;
}


SFReal32 *ComponentBase::editSFOpacity(void)
{
    editSField(OpacityFieldMask);

    return &_sfOpacity;
}

const SFReal32 *ComponentBase::getSFOpacity(void) const
{
    return &_sfOpacity;
}



SFBool *ComponentBase::editSFClipping(void)
{
    editSField(ClippingFieldMask);

    return &_sfClipping;
}

const SFBool *ComponentBase::getSFClipping(void) const
{
    return &_sfClipping;
}


//! Get the Component::_sfPopupMenu field.
const SFUnrecPopupMenuPtr *ComponentBase::getSFPopupMenu(void) const
{
    return &_sfPopupMenu;
}

SFUnrecPopupMenuPtr *ComponentBase::editSFPopupMenu      (void)
{
    editSField(PopupMenuFieldMask);

    return &_sfPopupMenu;
}

//! Get the Component::_sfFocusedForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFFocusedForeground(void) const
{
    return &_sfFocusedForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFFocusedForeground(void)
{
    editSField(FocusedForegroundFieldMask);

    return &_sfFocusedForeground;
}

//! Get the Component::_sfRolloverForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFRolloverForeground(void) const
{
    return &_sfRolloverForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFRolloverForeground(void)
{
    editSField(RolloverForegroundFieldMask);

    return &_sfRolloverForeground;
}

//! Get the Component::_sfDisabledForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFDisabledForeground(void) const
{
    return &_sfDisabledForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFDisabledForeground(void)
{
    editSField(DisabledForegroundFieldMask);

    return &_sfDisabledForeground;
}

//! Get the Component::_sfForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFForeground(void) const
{
    return &_sfForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFForeground     (void)
{
    editSField(ForegroundFieldMask);

    return &_sfForeground;
}

SFUInt32 *ComponentBase::editSFCursor(void)
{
    editSField(CursorFieldMask);

    return &_sfCursor;
}

const SFUInt32 *ComponentBase::getSFCursor(void) const
{
    return &_sfCursor;
}






/*------------------------------ access -----------------------------------*/

UInt32 ComponentBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }
    if(FieldBits::NoField != (ClipBoundsFieldMask & whichField))
    {
        returnValue += _sfClipBounds.getBinSize();
    }
    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        returnValue += _sfMinSize.getBinSize();
    }
    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        returnValue += _sfMaxSize.getBinSize();
    }
    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        returnValue += _sfPreferredSize.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        returnValue += _sfVisible.getBinSize();
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }
    if(FieldBits::NoField != (FocusedFieldMask & whichField))
    {
        returnValue += _sfFocused.getBinSize();
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        returnValue += _sfConstraints.getBinSize();
    }
    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        returnValue += _sfBorder.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        returnValue += _sfBackground.getBinSize();
    }
    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        returnValue += _sfDisabledBorder.getBinSize();
    }
    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        returnValue += _sfDisabledBackground.getBinSize();
    }
    if(FieldBits::NoField != (DragEnabledFieldMask & whichField))
    {
        returnValue += _sfDragEnabled.getBinSize();
    }
    if(FieldBits::NoField != (TransferHandlerFieldMask & whichField))
    {
        returnValue += _sfTransferHandler.getBinSize();
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        returnValue += _sfFocusedBorder.getBinSize();
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        returnValue += _sfFocusedBackground.getBinSize();
    }
    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        returnValue += _sfRolloverBorder.getBinSize();
    }
    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        returnValue += _sfRolloverBackground.getBinSize();
    }
    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
    {
        returnValue += _sfToolTipText.getBinSize();
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        returnValue += _sfOpacity.getBinSize();
    }
    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        returnValue += _sfParentContainer.getBinSize();
    }
    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        returnValue += _sfClipping.getBinSize();
    }
    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        returnValue += _sfPopupMenu.getBinSize();
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        returnValue += _sfFocusedForeground.getBinSize();
    }
    if(FieldBits::NoField != (RolloverForegroundFieldMask & whichField))
    {
        returnValue += _sfRolloverForeground.getBinSize();
    }
    if(FieldBits::NoField != (DisabledForegroundFieldMask & whichField))
    {
        returnValue += _sfDisabledForeground.getBinSize();
    }
    if(FieldBits::NoField != (ForegroundFieldMask & whichField))
    {
        returnValue += _sfForeground.getBinSize();
    }
    if(FieldBits::NoField != (CursorFieldMask & whichField))
    {
        returnValue += _sfCursor.getBinSize();
    }

    return returnValue;
}

void ComponentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClipBoundsFieldMask & whichField))
    {
        _sfClipBounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        _sfMinSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        _sfMaxSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        _sfPreferredSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        _sfVisible.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedFieldMask & whichField))
    {
        _sfFocused.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _sfConstraints.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        _sfBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        _sfDisabledBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        _sfDisabledBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DragEnabledFieldMask & whichField))
    {
        _sfDragEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransferHandlerFieldMask & whichField))
    {
        _sfTransferHandler.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        _sfRolloverBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        _sfRolloverBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
    {
        _sfToolTipText.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        _sfParentContainer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        _sfClipping.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        _sfPopupMenu.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        _sfFocusedForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverForegroundFieldMask & whichField))
    {
        _sfRolloverForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledForegroundFieldMask & whichField))
    {
        _sfDisabledForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundFieldMask & whichField))
    {
        _sfForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CursorFieldMask & whichField))
    {
        _sfCursor.copyToBin(pMem);
    }
}

void ComponentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClipBoundsFieldMask & whichField))
    {
        _sfClipBounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        _sfMinSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        _sfMaxSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        _sfPreferredSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        _sfVisible.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedFieldMask & whichField))
    {
        _sfFocused.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _sfConstraints.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        _sfBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        _sfDisabledBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        _sfDisabledBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DragEnabledFieldMask & whichField))
    {
        _sfDragEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransferHandlerFieldMask & whichField))
    {
        _sfTransferHandler.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        _sfRolloverBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        _sfRolloverBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
    {
        _sfToolTipText.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        _sfParentContainer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        _sfClipping.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        _sfPopupMenu.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        _sfFocusedForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverForegroundFieldMask & whichField))
    {
        _sfRolloverForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledForegroundFieldMask & whichField))
    {
        _sfDisabledForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundFieldMask & whichField))
    {
        _sfForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CursorFieldMask & whichField))
    {
        _sfCursor.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void ComponentBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseMovedEventDetailsType* const>(e));

        _MouseMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseMovedEvent(dynamic_cast<MouseMovedEventDetailsType* const>(e), MouseMovedEventId);
        break;
    case MouseDraggedEventId:
        OSG_ASSERT(dynamic_cast<MouseDraggedEventDetailsType* const>(e));

        _MouseDraggedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseDraggedEvent(dynamic_cast<MouseDraggedEventDetailsType* const>(e), MouseDraggedEventId);
        break;
    case MouseClickedEventId:
        OSG_ASSERT(dynamic_cast<MouseClickedEventDetailsType* const>(e));

        _MouseClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseClickedEvent(dynamic_cast<MouseClickedEventDetailsType* const>(e), MouseClickedEventId);
        break;
    case MouseEnteredEventId:
        OSG_ASSERT(dynamic_cast<MouseEnteredEventDetailsType* const>(e));

        _MouseEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseEnteredEvent(dynamic_cast<MouseEnteredEventDetailsType* const>(e), MouseEnteredEventId);
        break;
    case MouseExitedEventId:
        OSG_ASSERT(dynamic_cast<MouseExitedEventDetailsType* const>(e));

        _MouseExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseExitedEvent(dynamic_cast<MouseExitedEventDetailsType* const>(e), MouseExitedEventId);
        break;
    case MousePressedEventId:
        OSG_ASSERT(dynamic_cast<MousePressedEventDetailsType* const>(e));

        _MousePressedEvent.set_combiner(ConsumableEventCombiner(e));
        _MousePressedEvent(dynamic_cast<MousePressedEventDetailsType* const>(e), MousePressedEventId);
        break;
    case MouseReleasedEventId:
        OSG_ASSERT(dynamic_cast<MouseReleasedEventDetailsType* const>(e));

        _MouseReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseReleasedEvent(dynamic_cast<MouseReleasedEventDetailsType* const>(e), MouseReleasedEventId);
        break;
    case MouseWheelMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e));

        _MouseWheelMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseWheelMovedEvent(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e), MouseWheelMovedEventId);
        break;
    case KeyPressedEventId:
        OSG_ASSERT(dynamic_cast<KeyPressedEventDetailsType* const>(e));

        _KeyPressedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyPressedEvent(dynamic_cast<KeyPressedEventDetailsType* const>(e), KeyPressedEventId);
        break;
    case KeyReleasedEventId:
        OSG_ASSERT(dynamic_cast<KeyReleasedEventDetailsType* const>(e));

        _KeyReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyReleasedEvent(dynamic_cast<KeyReleasedEventDetailsType* const>(e), KeyReleasedEventId);
        break;
    case KeyTypedEventId:
        OSG_ASSERT(dynamic_cast<KeyTypedEventDetailsType* const>(e));

        _KeyTypedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyTypedEvent(dynamic_cast<KeyTypedEventDetailsType* const>(e), KeyTypedEventId);
        break;
    case FocusGainedEventId:
        OSG_ASSERT(dynamic_cast<FocusGainedEventDetailsType* const>(e));

        _FocusGainedEvent.set_combiner(ConsumableEventCombiner(e));
        _FocusGainedEvent(dynamic_cast<FocusGainedEventDetailsType* const>(e), FocusGainedEventId);
        break;
    case FocusLostEventId:
        OSG_ASSERT(dynamic_cast<FocusLostEventDetailsType* const>(e));

        _FocusLostEvent.set_combiner(ConsumableEventCombiner(e));
        _FocusLostEvent(dynamic_cast<FocusLostEventDetailsType* const>(e), FocusLostEventId);
        break;
    case ComponentHiddenEventId:
        OSG_ASSERT(dynamic_cast<ComponentHiddenEventDetailsType* const>(e));

        _ComponentHiddenEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentHiddenEvent(dynamic_cast<ComponentHiddenEventDetailsType* const>(e), ComponentHiddenEventId);
        break;
    case ComponentVisibleEventId:
        OSG_ASSERT(dynamic_cast<ComponentVisibleEventDetailsType* const>(e));

        _ComponentVisibleEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentVisibleEvent(dynamic_cast<ComponentVisibleEventDetailsType* const>(e), ComponentVisibleEventId);
        break;
    case ComponentMovedEventId:
        OSG_ASSERT(dynamic_cast<ComponentMovedEventDetailsType* const>(e));

        _ComponentMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentMovedEvent(dynamic_cast<ComponentMovedEventDetailsType* const>(e), ComponentMovedEventId);
        break;
    case ComponentResizedEventId:
        OSG_ASSERT(dynamic_cast<ComponentResizedEventDetailsType* const>(e));

        _ComponentResizedEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentResizedEvent(dynamic_cast<ComponentResizedEventDetailsType* const>(e), ComponentResizedEventId);
        break;
    case ComponentEnabledEventId:
        OSG_ASSERT(dynamic_cast<ComponentEnabledEventDetailsType* const>(e));

        _ComponentEnabledEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentEnabledEvent(dynamic_cast<ComponentEnabledEventDetailsType* const>(e), ComponentEnabledEventId);
        break;
    case ComponentDisabledEventId:
        OSG_ASSERT(dynamic_cast<ComponentDisabledEventDetailsType* const>(e));

        _ComponentDisabledEvent.set_combiner(ConsumableEventCombiner(e));
        _ComponentDisabledEvent(dynamic_cast<ComponentDisabledEventDetailsType* const>(e), ComponentDisabledEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection ComponentBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(listener, at);
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.connect(listener, at);
        break;
    case FocusLostEventId:
        return _FocusLostEvent.connect(listener, at);
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.connect(listener, at);
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.connect(listener, at);
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.connect(listener, at);
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.connect(listener, at);
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.connect(listener, at);
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  ComponentBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(group, listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(group, listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(group, listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(group, listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(group, listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(group, listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(group, listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(group, listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(group, listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(group, listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(group, listener, at);
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.connect(group, listener, at);
        break;
    case FocusLostEventId:
        return _FocusLostEvent.connect(group, listener, at);
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.connect(group, listener, at);
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.connect(group, listener, at);
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.connect(group, listener, at);
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.connect(group, listener, at);
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.connect(group, listener, at);
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  ComponentBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect(group);
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect(group);
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect(group);
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect(group);
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect(group);
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect(group);
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect(group);
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect(group);
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect(group);
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect(group);
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect(group);
        break;
    case FocusGainedEventId:
        _FocusGainedEvent.disconnect(group);
        break;
    case FocusLostEventId:
        _FocusLostEvent.disconnect(group);
        break;
    case ComponentHiddenEventId:
        _ComponentHiddenEvent.disconnect(group);
        break;
    case ComponentVisibleEventId:
        _ComponentVisibleEvent.disconnect(group);
        break;
    case ComponentMovedEventId:
        _ComponentMovedEvent.disconnect(group);
        break;
    case ComponentResizedEventId:
        _ComponentResizedEvent.disconnect(group);
        break;
    case ComponentEnabledEventId:
        _ComponentEnabledEvent.disconnect(group);
        break;
    case ComponentDisabledEventId:
        _ComponentDisabledEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  ComponentBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect_all_slots();
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect_all_slots();
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect_all_slots();
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect_all_slots();
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect_all_slots();
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect_all_slots();
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect_all_slots();
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect_all_slots();
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect_all_slots();
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect_all_slots();
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect_all_slots();
        break;
    case FocusGainedEventId:
        _FocusGainedEvent.disconnect_all_slots();
        break;
    case FocusLostEventId:
        _FocusLostEvent.disconnect_all_slots();
        break;
    case ComponentHiddenEventId:
        _ComponentHiddenEvent.disconnect_all_slots();
        break;
    case ComponentVisibleEventId:
        _ComponentVisibleEvent.disconnect_all_slots();
        break;
    case ComponentMovedEventId:
        _ComponentMovedEvent.disconnect_all_slots();
        break;
    case ComponentResizedEventId:
        _ComponentResizedEvent.disconnect_all_slots();
        break;
    case ComponentEnabledEventId:
        _ComponentEnabledEvent.disconnect_all_slots();
        break;
    case ComponentDisabledEventId:
        _ComponentDisabledEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  ComponentBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.empty();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.empty();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.empty();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.empty();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.empty();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.empty();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.empty();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.empty();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.empty();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.empty();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.empty();
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.empty();
        break;
    case FocusLostEventId:
        return _FocusLostEvent.empty();
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.empty();
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.empty();
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.empty();
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.empty();
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.empty();
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  ComponentBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case MouseMovedEventId:
        return _MouseMovedEvent.num_slots();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.num_slots();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.num_slots();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.num_slots();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.num_slots();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.num_slots();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.num_slots();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.num_slots();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.num_slots();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.num_slots();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.num_slots();
        break;
    case FocusGainedEventId:
        return _FocusGainedEvent.num_slots();
        break;
    case FocusLostEventId:
        return _FocusLostEvent.num_slots();
        break;
    case ComponentHiddenEventId:
        return _ComponentHiddenEvent.num_slots();
        break;
    case ComponentVisibleEventId:
        return _ComponentVisibleEvent.num_slots();
        break;
    case ComponentMovedEventId:
        return _ComponentMovedEvent.num_slots();
        break;
    case ComponentResizedEventId:
        return _ComponentResizedEvent.num_slots();
        break;
    case ComponentEnabledEventId:
        return _ComponentEnabledEvent.num_slots();
        break;
    case ComponentDisabledEventId:
        return _ComponentDisabledEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

ComponentBase::ComponentBase(void) :
    Inherited(),
    _sfPosition               (Pnt2f(0,0)),
    _sfClipBounds             (Pnt4f(0.0f,0.0f,0.0f,0.0f)),
    _sfMinSize                (Vec2f(0,0)),
    _sfMaxSize                (Vec2f(32767,32767)),
    _sfPreferredSize          (Vec2f(1,1)),
    _sfSize                   (),
    _sfVisible                (bool(true)),
    _sfEnabled                (bool(true)),
    _sfFocused                (bool(false)),
    _sfConstraints            (this,
                          ConstraintsFieldId,
                          LayoutConstraints::ParentComponentFieldId),
    _sfBorder                 (NULL),
    _sfBackground             (NULL),
    _sfDisabledBorder         (NULL),
    _sfDisabledBackground     (NULL),
    _sfDragEnabled            (bool(false)),
    _sfTransferHandler        (NULL),
    _sfFocusedBorder          (NULL),
    _sfFocusedBackground      (NULL),
    _sfRolloverBorder         (NULL),
    _sfRolloverBackground     (NULL),
    _sfToolTipText            (),
    _sfOpacity                (Real32(1.0)),
    _sfParentContainer        (NULL),
    _sfClipping               (bool(true)),
    _sfPopupMenu              (NULL),
    _sfFocusedForeground      (NULL),
    _sfRolloverForeground     (NULL),
    _sfDisabledForeground     (NULL),
    _sfForeground             (NULL),
    _sfCursor                 (UInt32(WindowEventProducer::CURSOR_POINTER))
{
}

ComponentBase::ComponentBase(const ComponentBase &source) :
    Inherited(source),
    _sfPosition               (source._sfPosition               ),
    _sfClipBounds             (source._sfClipBounds             ),
    _sfMinSize                (source._sfMinSize                ),
    _sfMaxSize                (source._sfMaxSize                ),
    _sfPreferredSize          (source._sfPreferredSize          ),
    _sfSize                   (source._sfSize                   ),
    _sfVisible                (source._sfVisible                ),
    _sfEnabled                (source._sfEnabled                ),
    _sfFocused                (source._sfFocused                ),
    _sfConstraints            (this,
                          ConstraintsFieldId,
                          LayoutConstraints::ParentComponentFieldId),
    _sfBorder                 (NULL),
    _sfBackground             (NULL),
    _sfDisabledBorder         (NULL),
    _sfDisabledBackground     (NULL),
    _sfDragEnabled            (source._sfDragEnabled            ),
    _sfTransferHandler        (NULL),
    _sfFocusedBorder          (NULL),
    _sfFocusedBackground      (NULL),
    _sfRolloverBorder         (NULL),
    _sfRolloverBackground     (NULL),
    _sfToolTipText            (source._sfToolTipText            ),
    _sfOpacity                (source._sfOpacity                ),
    _sfParentContainer        (NULL),
    _sfClipping               (source._sfClipping               ),
    _sfPopupMenu              (NULL),
    _sfFocusedForeground      (NULL),
    _sfRolloverForeground     (NULL),
    _sfDisabledForeground     (NULL),
    _sfForeground             (NULL),
    _sfCursor                 (source._sfCursor                 )
{
}


/*-------------------------- destructors ----------------------------------*/

ComponentBase::~ComponentBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool ComponentBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentContainer.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentContainer.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentContainerFieldMask);

            _sfParentContainer.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool ComponentBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentContainer.getValue() == pParent)
            {
                editSField(ParentContainerFieldMask);

                _sfParentContainer.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("ComponentBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ComponentBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ConstraintsFieldId)
    {
        LayoutConstraints * pTypedChild =
            dynamic_cast<LayoutConstraints *>(pChild);

        if(pTypedChild != NULL)
        {
            if(pTypedChild == _sfConstraints.getValue())
            {
                editSField(ConstraintsFieldMask);

                _sfConstraints.setValue(NULL);

                return true;
            }

            FWARNING(("ComponentBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ComponentBase::onCreate(const Component *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Component *pThis = static_cast<Component *>(this);

        pThis->setConstraints(source->getConstraints());

        pThis->setBorder(source->getBorder());

        pThis->setBackground(source->getBackground());

        pThis->setDisabledBorder(source->getDisabledBorder());

        pThis->setDisabledBackground(source->getDisabledBackground());

        pThis->setTransferHandler(source->getTransferHandler());

        pThis->setFocusedBorder(source->getFocusedBorder());

        pThis->setFocusedBackground(source->getFocusedBackground());

        pThis->setRolloverBorder(source->getRolloverBorder());

        pThis->setRolloverBackground(source->getRolloverBackground());

        pThis->setPopupMenu(source->getPopupMenu());

        pThis->setFocusedForeground(source->getFocusedForeground());

        pThis->setRolloverForeground(source->getRolloverForeground());

        pThis->setDisabledForeground(source->getDisabledForeground());

        pThis->setForeground(source->getForeground());
    }
}

GetFieldHandlePtr ComponentBase::getHandlePosition        (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandlePosition       (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleClipBounds      (void) const
{
    SFPnt4f::GetHandlePtr returnValue(
        new  SFPnt4f::GetHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleClipBounds     (void)
{
    SFPnt4f::EditHandlePtr returnValue(
        new  SFPnt4f::EditHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             this));


    editSField(ClipBoundsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleMinSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleMinSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             this));


    editSField(MinSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleMaxSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleMaxSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             this));


    editSField(MaxSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandlePreferredSize   (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandlePreferredSize  (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             this));


    editSField(PreferredSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleSize            (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleSize           (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleVisible         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfVisible,
             this->getType().getFieldDesc(VisibleFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleVisible        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfVisible,
             this->getType().getFieldDesc(VisibleFieldId),
             this));


    editSField(VisibleFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleEnabled         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleEnabled        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             this));


    editSField(EnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleFocused         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFocused,
             this->getType().getFieldDesc(FocusedFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleFocused        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFocused,
             this->getType().getFieldDesc(FocusedFieldId),
             this));


    editSField(FocusedFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleConstraints     (void) const
{
    SFUnrecChildLayoutConstraintsPtr::GetHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::GetHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleConstraints    (void)
{
    SFUnrecChildLayoutConstraintsPtr::EditHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::EditHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setConstraints,
                    static_cast<Component *>(this), _1));

    editSField(ConstraintsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleBorder          (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleBorder         (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setBorder,
                    static_cast<Component *>(this), _1));

    editSField(BorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleBackground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleBackground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setBackground,
                    static_cast<Component *>(this), _1));

    editSField(BackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDisabledBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDisabledBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setDisabledBorder,
                    static_cast<Component *>(this), _1));

    editSField(DisabledBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDisabledBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDisabledBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setDisabledBackground,
                    static_cast<Component *>(this), _1));

    editSField(DisabledBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDragEnabled     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDragEnabled    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             this));


    editSField(DragEnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleTransferHandler (void) const
{
    SFUnrecTransferHandlerPtr::GetHandlePtr returnValue(
        new  SFUnrecTransferHandlerPtr::GetHandle(
             &_sfTransferHandler,
             this->getType().getFieldDesc(TransferHandlerFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleTransferHandler(void)
{
    SFUnrecTransferHandlerPtr::EditHandlePtr returnValue(
        new  SFUnrecTransferHandlerPtr::EditHandle(
             &_sfTransferHandler,
             this->getType().getFieldDesc(TransferHandlerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setTransferHandler,
                    static_cast<Component *>(this), _1));

    editSField(TransferHandlerFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleFocusedBorder   (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleFocusedBorder  (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setFocusedBorder,
                    static_cast<Component *>(this), _1));

    editSField(FocusedBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleFocusedBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleFocusedBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setFocusedBackground,
                    static_cast<Component *>(this), _1));

    editSField(FocusedBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleRolloverBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleRolloverBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setRolloverBorder,
                    static_cast<Component *>(this), _1));

    editSField(RolloverBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleRolloverBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleRolloverBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setRolloverBackground,
                    static_cast<Component *>(this), _1));

    editSField(RolloverBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleToolTipText     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfToolTipText,
             this->getType().getFieldDesc(ToolTipTextFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleToolTipText    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfToolTipText,
             this->getType().getFieldDesc(ToolTipTextFieldId),
             this));


    editSField(ToolTipTextFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleParentContainer (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleParentContainer(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleClipping        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleClipping       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             this));


    editSField(ClippingFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandlePopupMenu       (void) const
{
    SFUnrecPopupMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::GetHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandlePopupMenu      (void)
{
    SFUnrecPopupMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::EditHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setPopupMenu,
                    static_cast<Component *>(this), _1));

    editSField(PopupMenuFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleFocusedForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleFocusedForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setFocusedForeground,
                    static_cast<Component *>(this), _1));

    editSField(FocusedForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleRolloverForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleRolloverForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setRolloverForeground,
                    static_cast<Component *>(this), _1));

    editSField(RolloverForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDisabledForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDisabledForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setDisabledForeground,
                    static_cast<Component *>(this), _1));

    editSField(DisabledForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleForeground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleForeground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setForeground,
                    static_cast<Component *>(this), _1));

    editSField(ForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleCursor          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleCursor         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             this));


    editSField(CursorFieldMask);

    return returnValue;
}


GetEventHandlePtr ComponentBase::getHandleMouseMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseMovedEventType>(
             const_cast<MouseMovedEventType *>(&_MouseMovedEvent),
             _producerType.getEventDescription(MouseMovedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleMouseDraggedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseDraggedEventType>(
             const_cast<MouseDraggedEventType *>(&_MouseDraggedEvent),
             _producerType.getEventDescription(MouseDraggedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleMouseClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseClickedEventType>(
             const_cast<MouseClickedEventType *>(&_MouseClickedEvent),
             _producerType.getEventDescription(MouseClickedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleMouseEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseEnteredEventType>(
             const_cast<MouseEnteredEventType *>(&_MouseEnteredEvent),
             _producerType.getEventDescription(MouseEnteredEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleMouseExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseExitedEventType>(
             const_cast<MouseExitedEventType *>(&_MouseExitedEvent),
             _producerType.getEventDescription(MouseExitedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleMousePressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MousePressedEventType>(
             const_cast<MousePressedEventType *>(&_MousePressedEvent),
             _producerType.getEventDescription(MousePressedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleMouseReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseReleasedEventType>(
             const_cast<MouseReleasedEventType *>(&_MouseReleasedEvent),
             _producerType.getEventDescription(MouseReleasedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleMouseWheelMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseWheelMovedEventType>(
             const_cast<MouseWheelMovedEventType *>(&_MouseWheelMovedEvent),
             _producerType.getEventDescription(MouseWheelMovedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleKeyPressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyPressedEventType>(
             const_cast<KeyPressedEventType *>(&_KeyPressedEvent),
             _producerType.getEventDescription(KeyPressedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleKeyReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyReleasedEventType>(
             const_cast<KeyReleasedEventType *>(&_KeyReleasedEvent),
             _producerType.getEventDescription(KeyReleasedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleKeyTypedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyTypedEventType>(
             const_cast<KeyTypedEventType *>(&_KeyTypedEvent),
             _producerType.getEventDescription(KeyTypedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleFocusGainedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<FocusGainedEventType>(
             const_cast<FocusGainedEventType *>(&_FocusGainedEvent),
             _producerType.getEventDescription(FocusGainedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleFocusLostSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<FocusLostEventType>(
             const_cast<FocusLostEventType *>(&_FocusLostEvent),
             _producerType.getEventDescription(FocusLostEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleComponentHiddenSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentHiddenEventType>(
             const_cast<ComponentHiddenEventType *>(&_ComponentHiddenEvent),
             _producerType.getEventDescription(ComponentHiddenEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleComponentVisibleSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentVisibleEventType>(
             const_cast<ComponentVisibleEventType *>(&_ComponentVisibleEvent),
             _producerType.getEventDescription(ComponentVisibleEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleComponentMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentMovedEventType>(
             const_cast<ComponentMovedEventType *>(&_ComponentMovedEvent),
             _producerType.getEventDescription(ComponentMovedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleComponentResizedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentResizedEventType>(
             const_cast<ComponentResizedEventType *>(&_ComponentResizedEvent),
             _producerType.getEventDescription(ComponentResizedEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleComponentEnabledSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentEnabledEventType>(
             const_cast<ComponentEnabledEventType *>(&_ComponentEnabledEvent),
             _producerType.getEventDescription(ComponentEnabledEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ComponentBase::getHandleComponentDisabledSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ComponentDisabledEventType>(
             const_cast<ComponentDisabledEventType *>(&_ComponentDisabledEvent),
             _producerType.getEventDescription(ComponentDisabledEventId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ComponentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Component *pThis = static_cast<Component *>(this);

    pThis->execSync(static_cast<Component *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ComponentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Component *>(this)->setConstraints(NULL);

    static_cast<Component *>(this)->setBorder(NULL);

    static_cast<Component *>(this)->setBackground(NULL);

    static_cast<Component *>(this)->setDisabledBorder(NULL);

    static_cast<Component *>(this)->setDisabledBackground(NULL);

    static_cast<Component *>(this)->setTransferHandler(NULL);

    static_cast<Component *>(this)->setFocusedBorder(NULL);

    static_cast<Component *>(this)->setFocusedBackground(NULL);

    static_cast<Component *>(this)->setRolloverBorder(NULL);

    static_cast<Component *>(this)->setRolloverBackground(NULL);

    static_cast<Component *>(this)->setPopupMenu(NULL);

    static_cast<Component *>(this)->setFocusedForeground(NULL);

    static_cast<Component *>(this)->setRolloverForeground(NULL);

    static_cast<Component *>(this)->setDisabledForeground(NULL);

    static_cast<Component *>(this)->setForeground(NULL);


}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Component::_sfPosition field.

Pnt2f &ComponentBase::editPosition(void)
{
    editSField(PositionFieldMask);

    return _sfPosition.getValue();
}

//! Get the value of the Component::_sfPosition field.
const Pnt2f &ComponentBase::getPosition(void) const
{
    return _sfPosition.getValue();
}


//! Set the value of the Component::_sfPosition field.
void ComponentBase::setPosition(const Pnt2f &value)
{
    editSField(PositionFieldMask);

    _sfPosition.setValue(value);
}
//! Get the value of the Component::_sfClipBounds field.

Pnt4f &ComponentBase::editClipBounds(void)
{
    editSField(ClipBoundsFieldMask);

    return _sfClipBounds.getValue();
}

//! Get the value of the Component::_sfClipBounds field.
const Pnt4f &ComponentBase::getClipBounds(void) const
{
    return _sfClipBounds.getValue();
}


//! Set the value of the Component::_sfClipBounds field.
void ComponentBase::setClipBounds(const Pnt4f &value)
{
    editSField(ClipBoundsFieldMask);

    _sfClipBounds.setValue(value);
}
//! Get the value of the Component::_sfMinSize field.

Vec2f &ComponentBase::editMinSize(void)
{
    editSField(MinSizeFieldMask);

    return _sfMinSize.getValue();
}

//! Get the value of the Component::_sfMinSize field.
const Vec2f &ComponentBase::getMinSize(void) const
{
    return _sfMinSize.getValue();
}


//! Set the value of the Component::_sfMinSize field.
void ComponentBase::setMinSize(const Vec2f &value)
{
    editSField(MinSizeFieldMask);

    _sfMinSize.setValue(value);
}
//! Get the value of the Component::_sfMaxSize field.

Vec2f &ComponentBase::editMaxSize(void)
{
    editSField(MaxSizeFieldMask);

    return _sfMaxSize.getValue();
}

//! Get the value of the Component::_sfMaxSize field.
const Vec2f &ComponentBase::getMaxSize(void) const
{
    return _sfMaxSize.getValue();
}


//! Set the value of the Component::_sfMaxSize field.
void ComponentBase::setMaxSize(const Vec2f &value)
{
    editSField(MaxSizeFieldMask);

    _sfMaxSize.setValue(value);
}
//! Get the value of the Component::_sfPreferredSize field.

Vec2f &ComponentBase::editPreferredSize(void)
{
    editSField(PreferredSizeFieldMask);

    return _sfPreferredSize.getValue();
}

//! Get the value of the Component::_sfPreferredSize field.
const Vec2f &ComponentBase::getPreferredSize(void) const
{
    return _sfPreferredSize.getValue();
}


//! Set the value of the Component::_sfPreferredSize field.
void ComponentBase::setPreferredSize(const Vec2f &value)
{
    editSField(PreferredSizeFieldMask);

    _sfPreferredSize.setValue(value);
}
//! Get the value of the Component::_sfSize field.

Vec2f &ComponentBase::editSize(void)
{
    editSField(SizeFieldMask);

    return _sfSize.getValue();
}

//! Get the value of the Component::_sfSize field.
const Vec2f &ComponentBase::getSize(void) const
{
    return _sfSize.getValue();
}


//! Set the value of the Component::_sfSize field.
void ComponentBase::setSize(const Vec2f &value)
{
    editSField(SizeFieldMask);

    _sfSize.setValue(value);
}
//! Get the value of the Component::_sfVisible field.

bool &ComponentBase::editVisible(void)
{
    editSField(VisibleFieldMask);

    return _sfVisible.getValue();
}

//! Get the value of the Component::_sfVisible field.
      bool  ComponentBase::getVisible(void) const
{
    return _sfVisible.getValue();
}


//! Set the value of the Component::_sfVisible field.
void ComponentBase::setVisible(const bool value)
{
    editSField(VisibleFieldMask);

    _sfVisible.setValue(value);
}
//! Get the value of the Component::_sfEnabled field.

bool &ComponentBase::editEnabled(void)
{
    editSField(EnabledFieldMask);

    return _sfEnabled.getValue();
}

//! Get the value of the Component::_sfEnabled field.
      bool  ComponentBase::getEnabled(void) const
{
    return _sfEnabled.getValue();
}


//! Set the value of the Component::_sfEnabled field.
void ComponentBase::setEnabled(const bool value)
{
    editSField(EnabledFieldMask);

    _sfEnabled.setValue(value);
}
//! Get the value of the Component::_sfFocused field.

bool &ComponentBase::editFocused(void)
{
    editSField(FocusedFieldMask);

    return _sfFocused.getValue();
}

//! Get the value of the Component::_sfFocused field.
      bool  ComponentBase::getFocused(void) const
{
    return _sfFocused.getValue();
}


//! Set the value of the Component::_sfFocused field.
void ComponentBase::setFocused(const bool value)
{
    editSField(FocusedFieldMask);

    _sfFocused.setValue(value);
}

//! Get the value of the Component::_sfConstraints field.
LayoutConstraints * ComponentBase::getConstraints(void) const
{
    return _sfConstraints.getValue();
}

//! Set the value of the Component::_sfConstraints field.
void ComponentBase::setConstraints(LayoutConstraints * const value)
{
    editSField(ConstraintsFieldMask);

    _sfConstraints.setValue(value);
}

//! Get the value of the Component::_sfBorder field.
Border * ComponentBase::getBorder(void) const
{
    return _sfBorder.getValue();
}

//! Set the value of the Component::_sfBorder field.
void ComponentBase::setBorder(Border * const value)
{
    editSField(BorderFieldMask);

    _sfBorder.setValue(value);
}

//! Get the value of the Component::_sfBackground field.
Layer * ComponentBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

//! Set the value of the Component::_sfBackground field.
void ComponentBase::setBackground(Layer * const value)
{
    editSField(BackgroundFieldMask);

    _sfBackground.setValue(value);
}

//! Get the value of the Component::_sfDisabledBorder field.
Border * ComponentBase::getDisabledBorder(void) const
{
    return _sfDisabledBorder.getValue();
}

//! Set the value of the Component::_sfDisabledBorder field.
void ComponentBase::setDisabledBorder(Border * const value)
{
    editSField(DisabledBorderFieldMask);

    _sfDisabledBorder.setValue(value);
}

//! Get the value of the Component::_sfDisabledBackground field.
Layer * ComponentBase::getDisabledBackground(void) const
{
    return _sfDisabledBackground.getValue();
}

//! Set the value of the Component::_sfDisabledBackground field.
void ComponentBase::setDisabledBackground(Layer * const value)
{
    editSField(DisabledBackgroundFieldMask);

    _sfDisabledBackground.setValue(value);
}
//! Get the value of the Component::_sfDragEnabled field.

bool &ComponentBase::editDragEnabled(void)
{
    editSField(DragEnabledFieldMask);

    return _sfDragEnabled.getValue();
}

//! Get the value of the Component::_sfDragEnabled field.
      bool  ComponentBase::getDragEnabled(void) const
{
    return _sfDragEnabled.getValue();
}


//! Set the value of the Component::_sfDragEnabled field.
void ComponentBase::setDragEnabled(const bool value)
{
    editSField(DragEnabledFieldMask);

    _sfDragEnabled.setValue(value);
}

//! Get the value of the Component::_sfTransferHandler field.
TransferHandler * ComponentBase::getTransferHandler(void) const
{
    return _sfTransferHandler.getValue();
}

//! Set the value of the Component::_sfTransferHandler field.
void ComponentBase::setTransferHandler(TransferHandler * const value)
{
    editSField(TransferHandlerFieldMask);

    _sfTransferHandler.setValue(value);
}

//! Get the value of the Component::_sfFocusedBorder field.
Border * ComponentBase::getFocusedBorder(void) const
{
    return _sfFocusedBorder.getValue();
}

//! Set the value of the Component::_sfFocusedBorder field.
void ComponentBase::setFocusedBorder(Border * const value)
{
    editSField(FocusedBorderFieldMask);

    _sfFocusedBorder.setValue(value);
}

//! Get the value of the Component::_sfFocusedBackground field.
Layer * ComponentBase::getFocusedBackground(void) const
{
    return _sfFocusedBackground.getValue();
}

//! Set the value of the Component::_sfFocusedBackground field.
void ComponentBase::setFocusedBackground(Layer * const value)
{
    editSField(FocusedBackgroundFieldMask);

    _sfFocusedBackground.setValue(value);
}

//! Get the value of the Component::_sfRolloverBorder field.
Border * ComponentBase::getRolloverBorder(void) const
{
    return _sfRolloverBorder.getValue();
}

//! Set the value of the Component::_sfRolloverBorder field.
void ComponentBase::setRolloverBorder(Border * const value)
{
    editSField(RolloverBorderFieldMask);

    _sfRolloverBorder.setValue(value);
}

//! Get the value of the Component::_sfRolloverBackground field.
Layer * ComponentBase::getRolloverBackground(void) const
{
    return _sfRolloverBackground.getValue();
}

//! Set the value of the Component::_sfRolloverBackground field.
void ComponentBase::setRolloverBackground(Layer * const value)
{
    editSField(RolloverBackgroundFieldMask);

    _sfRolloverBackground.setValue(value);
}
//! Get the value of the Component::_sfToolTipText field.

std::string &ComponentBase::editToolTipText(void)
{
    editSField(ToolTipTextFieldMask);

    return _sfToolTipText.getValue();
}

//! Get the value of the Component::_sfToolTipText field.
const std::string &ComponentBase::getToolTipText(void) const
{
    return _sfToolTipText.getValue();
}


//! Set the value of the Component::_sfToolTipText field.
void ComponentBase::setToolTipText(const std::string &value)
{
    editSField(ToolTipTextFieldMask);

    _sfToolTipText.setValue(value);
}
//! Get the value of the Component::_sfOpacity field.

Real32 &ComponentBase::editOpacity(void)
{
    editSField(OpacityFieldMask);

    return _sfOpacity.getValue();
}

//! Get the value of the Component::_sfOpacity field.
      Real32  ComponentBase::getOpacity(void) const
{
    return _sfOpacity.getValue();
}


//! Set the value of the Component::_sfOpacity field.
void ComponentBase::setOpacity(const Real32 value)
{
    editSField(OpacityFieldMask);

    _sfOpacity.setValue(value);
}
//! Get the value of the Component::_sfClipping field.

bool &ComponentBase::editClipping(void)
{
    editSField(ClippingFieldMask);

    return _sfClipping.getValue();
}

//! Get the value of the Component::_sfClipping field.
      bool  ComponentBase::getClipping(void) const
{
    return _sfClipping.getValue();
}


//! Set the value of the Component::_sfClipping field.
void ComponentBase::setClipping(const bool value)
{
    editSField(ClippingFieldMask);

    _sfClipping.setValue(value);
}

//! Get the value of the Component::_sfPopupMenu field.
PopupMenu * ComponentBase::getPopupMenu(void) const
{
    return _sfPopupMenu.getValue();
}

//! Set the value of the Component::_sfPopupMenu field.
void ComponentBase::setPopupMenu(PopupMenu * const value)
{
    editSField(PopupMenuFieldMask);

    _sfPopupMenu.setValue(value);
}

//! Get the value of the Component::_sfFocusedForeground field.
Layer * ComponentBase::getFocusedForeground(void) const
{
    return _sfFocusedForeground.getValue();
}

//! Set the value of the Component::_sfFocusedForeground field.
void ComponentBase::setFocusedForeground(Layer * const value)
{
    editSField(FocusedForegroundFieldMask);

    _sfFocusedForeground.setValue(value);
}

//! Get the value of the Component::_sfRolloverForeground field.
Layer * ComponentBase::getRolloverForeground(void) const
{
    return _sfRolloverForeground.getValue();
}

//! Set the value of the Component::_sfRolloverForeground field.
void ComponentBase::setRolloverForeground(Layer * const value)
{
    editSField(RolloverForegroundFieldMask);

    _sfRolloverForeground.setValue(value);
}

//! Get the value of the Component::_sfDisabledForeground field.
Layer * ComponentBase::getDisabledForeground(void) const
{
    return _sfDisabledForeground.getValue();
}

//! Set the value of the Component::_sfDisabledForeground field.
void ComponentBase::setDisabledForeground(Layer * const value)
{
    editSField(DisabledForegroundFieldMask);

    _sfDisabledForeground.setValue(value);
}

//! Get the value of the Component::_sfForeground field.
Layer * ComponentBase::getForeground(void) const
{
    return _sfForeground.getValue();
}

//! Set the value of the Component::_sfForeground field.
void ComponentBase::setForeground(Layer * const value)
{
    editSField(ForegroundFieldMask);

    _sfForeground.setValue(value);
}
//! Get the value of the Component::_sfCursor field.

UInt32 &ComponentBase::editCursor(void)
{
    editSField(CursorFieldMask);

    return _sfCursor.getValue();
}

//! Get the value of the Component::_sfCursor field.
      UInt32  ComponentBase::getCursor(void) const
{
    return _sfCursor.getValue();
}


//! Set the value of the Component::_sfCursor field.
void ComponentBase::setCursor(const UInt32 value)
{
    editSField(CursorFieldMask);

    _sfCursor.setValue(value);
}


OSG_END_NAMESPACE
