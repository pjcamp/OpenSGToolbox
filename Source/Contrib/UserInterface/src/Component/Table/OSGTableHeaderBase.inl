/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableHeader!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TableHeaderBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TableHeaderBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TableHeaderBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the TableHeader::_sfColumnModel field.
inline
TableColumnModel * TableHeaderBase::getColumnModel(void) const
{
    return _sfColumnModel.getValue();
}

//! Set the value of the TableHeader::_sfColumnModel field.
inline
void TableHeaderBase::setColumnModel(TableColumnModel * const value)
{
    editSField(ColumnModelFieldMask);

    _sfColumnModel.setValue(value);
}
//! Get the value of the TableHeader::_sfReorderingAllowed field.

inline
bool &TableHeaderBase::editReorderingAllowed(void)
{
    editSField(ReorderingAllowedFieldMask);

    return _sfReorderingAllowed.getValue();
}

//! Get the value of the TableHeader::_sfReorderingAllowed field.
inline
      bool  TableHeaderBase::getReorderingAllowed(void) const
{
    return _sfReorderingAllowed.getValue();
}

//! Set the value of the TableHeader::_sfReorderingAllowed field.
inline
void TableHeaderBase::setReorderingAllowed(const bool value)
{
    editSField(ReorderingAllowedFieldMask);

    _sfReorderingAllowed.setValue(value);
}
//! Get the value of the TableHeader::_sfResizingAllowed field.

inline
bool &TableHeaderBase::editResizingAllowed(void)
{
    editSField(ResizingAllowedFieldMask);

    return _sfResizingAllowed.getValue();
}

//! Get the value of the TableHeader::_sfResizingAllowed field.
inline
      bool  TableHeaderBase::getResizingAllowed(void) const
{
    return _sfResizingAllowed.getValue();
}

//! Set the value of the TableHeader::_sfResizingAllowed field.
inline
void TableHeaderBase::setResizingAllowed(const bool value)
{
    editSField(ResizingAllowedFieldMask);

    _sfResizingAllowed.setValue(value);
}
//! Get the value of the TableHeader::_sfResizingCursorDriftAllowance field.

inline
UInt32 &TableHeaderBase::editResizingCursorDriftAllowance(void)
{
    editSField(ResizingCursorDriftAllowanceFieldMask);

    return _sfResizingCursorDriftAllowance.getValue();
}

//! Get the value of the TableHeader::_sfResizingCursorDriftAllowance field.
inline
      UInt32  TableHeaderBase::getResizingCursorDriftAllowance(void) const
{
    return _sfResizingCursorDriftAllowance.getValue();
}

//! Set the value of the TableHeader::_sfResizingCursorDriftAllowance field.
inline
void TableHeaderBase::setResizingCursorDriftAllowance(const UInt32 value)
{
    editSField(ResizingCursorDriftAllowanceFieldMask);

    _sfResizingCursorDriftAllowance.setValue(value);
}

//! Get the value of the TableHeader::_sfDefaultMarginDrawObject field.
inline
UIDrawObjectCanvas * TableHeaderBase::getDefaultMarginDrawObject(void) const
{
    return _sfDefaultMarginDrawObject.getValue();
}

//! Set the value of the TableHeader::_sfDefaultMarginDrawObject field.
inline
void TableHeaderBase::setDefaultMarginDrawObject(UIDrawObjectCanvas * const value)
{
    editSField(DefaultMarginDrawObjectFieldMask);

    _sfDefaultMarginDrawObject.setValue(value);
}

//! Get the value of the \a index element the TableHeader::_mfMargins field.
inline
UIDrawObjectCanvas * TableHeaderBase::getMargins(const UInt32 index) const
{
    return _mfMargins[index];
}

//! Get the value of the \a index element the TableHeader::_mfColumnHeaders field.
inline
Component * TableHeaderBase::getColumnHeaders(const UInt32 index) const
{
    return _mfColumnHeaders[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TableHeaderBase::execSync (      TableHeaderBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (TableFieldMask & whichField))
        _sfTable.syncWith(pFrom->_sfTable);

    if(FieldBits::NoField != (ColumnModelFieldMask & whichField))
        _sfColumnModel.syncWith(pFrom->_sfColumnModel);

    if(FieldBits::NoField != (ReorderingAllowedFieldMask & whichField))
        _sfReorderingAllowed.syncWith(pFrom->_sfReorderingAllowed);

    if(FieldBits::NoField != (ResizingAllowedFieldMask & whichField))
        _sfResizingAllowed.syncWith(pFrom->_sfResizingAllowed);

    if(FieldBits::NoField != (ResizingCursorDriftAllowanceFieldMask & whichField))
        _sfResizingCursorDriftAllowance.syncWith(pFrom->_sfResizingCursorDriftAllowance);

    if(FieldBits::NoField != (DefaultMarginDrawObjectFieldMask & whichField))
        _sfDefaultMarginDrawObject.syncWith(pFrom->_sfDefaultMarginDrawObject);

    if(FieldBits::NoField != (MarginsFieldMask & whichField))
        _mfMargins.syncWith(pFrom->_mfMargins,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ColumnHeadersFieldMask & whichField))
        _mfColumnHeaders.syncWith(pFrom->_mfColumnHeaders,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
const Char8 *TableHeaderBase::getClassname(void)
{
    return "TableHeader";
}
OSG_GEN_CONTAINERPTR(TableHeader);

OSG_END_NAMESPACE

