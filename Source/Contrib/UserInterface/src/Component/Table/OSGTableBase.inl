/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Table!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TableBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TableBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TableBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the Table::_sfHeader field.
inline
TableHeader * TableBase::getHeader(void) const
{
    return _sfHeader.getValue();
}

//! Set the value of the Table::_sfHeader field.
inline
void TableBase::setHeader(TableHeader * const value)
{
    editSField(HeaderFieldMask);

    _sfHeader.setValue(value);
}

//! Get the value of the Table::_sfModel field.
inline
TableModel * TableBase::getModel(void) const
{
    return _sfModel.getValue();
}

//! Set the value of the Table::_sfModel field.
inline
void TableBase::setModel(TableModel * const value)
{
    editSField(ModelFieldMask);

    _sfModel.setValue(value);
}

//! Get the value of the Table::_sfColumnModel field.
inline
TableColumnModel * TableBase::getColumnModel(void) const
{
    return _sfColumnModel.getValue();
}

//! Set the value of the Table::_sfColumnModel field.
inline
void TableBase::setColumnModel(TableColumnModel * const value)
{
    editSField(ColumnModelFieldMask);

    _sfColumnModel.setValue(value);
}
//! Get the value of the Table::_sfAutoCreateColumnsFromModel field.

inline
bool &TableBase::editAutoCreateColumnsFromModel(void)
{
    editSField(AutoCreateColumnsFromModelFieldMask);

    return _sfAutoCreateColumnsFromModel.getValue();
}

//! Get the value of the Table::_sfAutoCreateColumnsFromModel field.
inline
      bool  TableBase::getAutoCreateColumnsFromModel(void) const
{
    return _sfAutoCreateColumnsFromModel.getValue();
}

//! Set the value of the Table::_sfAutoCreateColumnsFromModel field.
inline
void TableBase::setAutoCreateColumnsFromModel(const bool value)
{
    editSField(AutoCreateColumnsFromModelFieldMask);

    _sfAutoCreateColumnsFromModel.setValue(value);
}
//! Get the value of the Table::_sfAutoResizeMode field.

inline
UInt32 &TableBase::editAutoResizeMode(void)
{
    editSField(AutoResizeModeFieldMask);

    return _sfAutoResizeMode.getValue();
}

//! Get the value of the Table::_sfAutoResizeMode field.
inline
      UInt32  TableBase::getAutoResizeMode(void) const
{
    return _sfAutoResizeMode.getValue();
}

//! Set the value of the Table::_sfAutoResizeMode field.
inline
void TableBase::setAutoResizeMode(const UInt32 value)
{
    editSField(AutoResizeModeFieldMask);

    _sfAutoResizeMode.setValue(value);
}
//! Get the value of the Table::_sfRowHeight field.

inline
UInt32 &TableBase::editRowHeight(void)
{
    editSField(RowHeightFieldMask);

    return _sfRowHeight.getValue();
}

//! Get the value of the Table::_sfRowHeight field.
inline
      UInt32  TableBase::getRowHeight(void) const
{
    return _sfRowHeight.getValue();
}

//! Set the value of the Table::_sfRowHeight field.
inline
void TableBase::setRowHeight(const UInt32 value)
{
    editSField(RowHeightFieldMask);

    _sfRowHeight.setValue(value);
}
//! Get the value of the Table::_sfRowMargin field.

inline
UInt32 &TableBase::editRowMargin(void)
{
    editSField(RowMarginFieldMask);

    return _sfRowMargin.getValue();
}

//! Get the value of the Table::_sfRowMargin field.
inline
      UInt32  TableBase::getRowMargin(void) const
{
    return _sfRowMargin.getValue();
}

//! Set the value of the Table::_sfRowMargin field.
inline
void TableBase::setRowMargin(const UInt32 value)
{
    editSField(RowMarginFieldMask);

    _sfRowMargin.setValue(value);
}
//! Get the value of the Table::_sfRowSelectionAllowed field.

inline
bool &TableBase::editRowSelectionAllowed(void)
{
    editSField(RowSelectionAllowedFieldMask);

    return _sfRowSelectionAllowed.getValue();
}

//! Get the value of the Table::_sfRowSelectionAllowed field.
inline
      bool  TableBase::getRowSelectionAllowed(void) const
{
    return _sfRowSelectionAllowed.getValue();
}

//! Set the value of the Table::_sfRowSelectionAllowed field.
inline
void TableBase::setRowSelectionAllowed(const bool value)
{
    editSField(RowSelectionAllowedFieldMask);

    _sfRowSelectionAllowed.setValue(value);
}
//! Get the value of the Table::_sfShowHorizontalLines field.

inline
bool &TableBase::editShowHorizontalLines(void)
{
    editSField(ShowHorizontalLinesFieldMask);

    return _sfShowHorizontalLines.getValue();
}

//! Get the value of the Table::_sfShowHorizontalLines field.
inline
      bool  TableBase::getShowHorizontalLines(void) const
{
    return _sfShowHorizontalLines.getValue();
}

//! Set the value of the Table::_sfShowHorizontalLines field.
inline
void TableBase::setShowHorizontalLines(const bool value)
{
    editSField(ShowHorizontalLinesFieldMask);

    _sfShowHorizontalLines.setValue(value);
}
//! Get the value of the Table::_sfShowVerticalLines field.

inline
bool &TableBase::editShowVerticalLines(void)
{
    editSField(ShowVerticalLinesFieldMask);

    return _sfShowVerticalLines.getValue();
}

//! Get the value of the Table::_sfShowVerticalLines field.
inline
      bool  TableBase::getShowVerticalLines(void) const
{
    return _sfShowVerticalLines.getValue();
}

//! Set the value of the Table::_sfShowVerticalLines field.
inline
void TableBase::setShowVerticalLines(const bool value)
{
    editSField(ShowVerticalLinesFieldMask);

    _sfShowVerticalLines.setValue(value);
}
//! Get the value of the Table::_sfGridColor field.

inline
Color4f &TableBase::editGridColor(void)
{
    editSField(GridColorFieldMask);

    return _sfGridColor.getValue();
}

//! Get the value of the Table::_sfGridColor field.
inline
const Color4f &TableBase::getGridColor(void) const
{
    return _sfGridColor.getValue();
}

//! Set the value of the Table::_sfGridColor field.
inline
void TableBase::setGridColor(const Color4f &value)
{
    editSField(GridColorFieldMask);

    _sfGridColor.setValue(value);
}

//! Get the value of the Table::_sfGlobalCellEditor field.
inline
CellEditor * TableBase::getGlobalCellEditor(void) const
{
    return _sfGlobalCellEditor.getValue();
}

//! Set the value of the Table::_sfGlobalCellEditor field.
inline
void TableBase::setGlobalCellEditor(CellEditor * const value)
{
    editSField(GlobalCellEditorFieldMask);

    _sfGlobalCellEditor.setValue(value);
}

//! Get the value of the Table::_sfRowSelectionModel field.
inline
ListSelectionModel * TableBase::getRowSelectionModel(void) const
{
    return _sfRowSelectionModel.getValue();
}

//! Set the value of the Table::_sfRowSelectionModel field.
inline
void TableBase::setRowSelectionModel(ListSelectionModel * const value)
{
    editSField(RowSelectionModelFieldMask);

    _sfRowSelectionModel.setValue(value);
}

//! Get the value of the \a index element the Table::_mfTable field.
inline
Component * TableBase::getTable(const UInt32 index) const
{
    return _mfTable[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TableBase::execSync (      TableBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (HeaderFieldMask & whichField))
        _sfHeader.syncWith(pFrom->_sfHeader);

    if(FieldBits::NoField != (ModelFieldMask & whichField))
        _sfModel.syncWith(pFrom->_sfModel);

    if(FieldBits::NoField != (ColumnModelFieldMask & whichField))
        _sfColumnModel.syncWith(pFrom->_sfColumnModel);

    if(FieldBits::NoField != (TableFieldMask & whichField))
        _mfTable.syncWith(pFrom->_mfTable,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (AutoCreateColumnsFromModelFieldMask & whichField))
        _sfAutoCreateColumnsFromModel.syncWith(pFrom->_sfAutoCreateColumnsFromModel);

    if(FieldBits::NoField != (AutoResizeModeFieldMask & whichField))
        _sfAutoResizeMode.syncWith(pFrom->_sfAutoResizeMode);

    if(FieldBits::NoField != (RowHeightFieldMask & whichField))
        _sfRowHeight.syncWith(pFrom->_sfRowHeight);

    if(FieldBits::NoField != (RowMarginFieldMask & whichField))
        _sfRowMargin.syncWith(pFrom->_sfRowMargin);

    if(FieldBits::NoField != (RowSelectionAllowedFieldMask & whichField))
        _sfRowSelectionAllowed.syncWith(pFrom->_sfRowSelectionAllowed);

    if(FieldBits::NoField != (ShowHorizontalLinesFieldMask & whichField))
        _sfShowHorizontalLines.syncWith(pFrom->_sfShowHorizontalLines);

    if(FieldBits::NoField != (ShowVerticalLinesFieldMask & whichField))
        _sfShowVerticalLines.syncWith(pFrom->_sfShowVerticalLines);

    if(FieldBits::NoField != (GridColorFieldMask & whichField))
        _sfGridColor.syncWith(pFrom->_sfGridColor);

    if(FieldBits::NoField != (GlobalCellEditorFieldMask & whichField))
        _sfGlobalCellEditor.syncWith(pFrom->_sfGlobalCellEditor);

    if(FieldBits::NoField != (RowSelectionModelFieldMask & whichField))
        _sfRowSelectionModel.syncWith(pFrom->_sfRowSelectionModel);
}
#endif


inline
const Char8 *TableBase::getClassname(void)
{
    return "Table";
}
OSG_GEN_CONTAINERPTR(Table);

OSG_END_NAMESPACE

