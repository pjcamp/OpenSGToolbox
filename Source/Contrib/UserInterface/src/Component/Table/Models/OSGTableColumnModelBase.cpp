/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableColumnModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGListSelectionModel.h"      // SelectionModel Class

#include "OSGTableColumnModelBase.h"
#include "OSGTableColumnModel.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TableColumnModel
    A UI TableColumnModel.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ListSelectionModel * TableColumnModelBase::_sfSelectionModel
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TableColumnModel *>::_type("TableColumnModelPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TableColumnModel *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TableColumnModel *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TableColumnModel *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TableColumnModelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecListSelectionModelPtr::Description(
        SFUnrecListSelectionModelPtr::getClassType(),
        "SelectionModel",
        "",
        SelectionModelFieldId, SelectionModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TableColumnModel::editHandleSelectionModel),
        static_cast<FieldGetMethodSig >(&TableColumnModel::getHandleSelectionModel));

    oType.addInitialDesc(pDesc);
}


TableColumnModelBase::TypeObject TableColumnModelBase::_type(
    TableColumnModelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    TableColumnModel::initMethod,
    TableColumnModel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TableColumnModel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TableColumnModel\"\n"
    "\tparent=\"FieldContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI TableColumnModel.\n"
    "\t<Field\n"
    "\t\tname=\"SelectionModel\"\n"
    "\t\ttype=\"ListSelectionModel\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ColumnAdded\"\n"
    "\t\tdetailsType=\"TableColumnModelEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ColumnMoved\"\n"
    "\t\tdetailsType=\"TableColumnModelEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ColumnRemoved\"\n"
    "\t\tdetailsType=\"TableColumnModelEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ColumnMarginChanged\"\n"
    "\t\tdetailsType=\"ChangeEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ColumnSelectionChanged\"\n"
    "\t\tdetailsType=\"ListSelectionEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI TableColumnModel.\n"
    );

//! TableColumnModel Produced Events

EventDescription *TableColumnModelBase::_eventDesc[] =
{
    new EventDescription("ColumnAdded", 
                          "",
                          ColumnAddedEventId, 
                          FieldTraits<TableColumnModelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableColumnModelBase::getHandleColumnAddedSignal)),

    new EventDescription("ColumnMoved", 
                          "",
                          ColumnMovedEventId, 
                          FieldTraits<TableColumnModelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableColumnModelBase::getHandleColumnMovedSignal)),

    new EventDescription("ColumnRemoved", 
                          "",
                          ColumnRemovedEventId, 
                          FieldTraits<TableColumnModelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableColumnModelBase::getHandleColumnRemovedSignal)),

    new EventDescription("ColumnMarginChanged", 
                          "",
                          ColumnMarginChangedEventId, 
                          FieldTraits<ChangeEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableColumnModelBase::getHandleColumnMarginChangedSignal)),

    new EventDescription("ColumnSelectionChanged", 
                          "",
                          ColumnSelectionChangedEventId, 
                          FieldTraits<ListSelectionEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableColumnModelBase::getHandleColumnSelectionChangedSignal))

};

EventProducerType TableColumnModelBase::_producerType(
    "TableColumnModelProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &TableColumnModelBase::getType(void)
{
    return _type;
}

const FieldContainerType &TableColumnModelBase::getType(void) const
{
    return _type;
}

const EventProducerType &TableColumnModelBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 TableColumnModelBase::getContainerSize(void) const
{
    return sizeof(TableColumnModel);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TableColumnModel::_sfSelectionModel field.
const SFUnrecListSelectionModelPtr *TableColumnModelBase::getSFSelectionModel(void) const
{
    return &_sfSelectionModel;
}

SFUnrecListSelectionModelPtr *TableColumnModelBase::editSFSelectionModel (void)
{
    editSField(SelectionModelFieldMask);

    return &_sfSelectionModel;
}





/*------------------------------ access -----------------------------------*/

UInt32 TableColumnModelBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        returnValue += _sfSelectionModel.getBinSize();
    }

    return returnValue;
}

void TableColumnModelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyToBin(pMem);
    }
}

void TableColumnModelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void TableColumnModelBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case ColumnAddedEventId:
        OSG_ASSERT(dynamic_cast<ColumnAddedEventDetailsType* const>(e));

        _ColumnAddedEvent.set_combiner(ConsumableEventCombiner(e));
        _ColumnAddedEvent(dynamic_cast<ColumnAddedEventDetailsType* const>(e), ColumnAddedEventId);
        break;
    case ColumnMovedEventId:
        OSG_ASSERT(dynamic_cast<ColumnMovedEventDetailsType* const>(e));

        _ColumnMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _ColumnMovedEvent(dynamic_cast<ColumnMovedEventDetailsType* const>(e), ColumnMovedEventId);
        break;
    case ColumnRemovedEventId:
        OSG_ASSERT(dynamic_cast<ColumnRemovedEventDetailsType* const>(e));

        _ColumnRemovedEvent.set_combiner(ConsumableEventCombiner(e));
        _ColumnRemovedEvent(dynamic_cast<ColumnRemovedEventDetailsType* const>(e), ColumnRemovedEventId);
        break;
    case ColumnMarginChangedEventId:
        OSG_ASSERT(dynamic_cast<ColumnMarginChangedEventDetailsType* const>(e));

        _ColumnMarginChangedEvent.set_combiner(ConsumableEventCombiner(e));
        _ColumnMarginChangedEvent(dynamic_cast<ColumnMarginChangedEventDetailsType* const>(e), ColumnMarginChangedEventId);
        break;
    case ColumnSelectionChangedEventId:
        OSG_ASSERT(dynamic_cast<ColumnSelectionChangedEventDetailsType* const>(e));

        _ColumnSelectionChangedEvent.set_combiner(ConsumableEventCombiner(e));
        _ColumnSelectionChangedEvent(dynamic_cast<ColumnSelectionChangedEventDetailsType* const>(e), ColumnSelectionChangedEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection TableColumnModelBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ColumnAddedEventId:
        return _ColumnAddedEvent.connect(listener, at);
        break;
    case ColumnMovedEventId:
        return _ColumnMovedEvent.connect(listener, at);
        break;
    case ColumnRemovedEventId:
        return _ColumnRemovedEvent.connect(listener, at);
        break;
    case ColumnMarginChangedEventId:
        return _ColumnMarginChangedEvent.connect(listener, at);
        break;
    case ColumnSelectionChangedEventId:
        return _ColumnSelectionChangedEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  TableColumnModelBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ColumnAddedEventId:
        return _ColumnAddedEvent.connect(group, listener, at);
        break;
    case ColumnMovedEventId:
        return _ColumnMovedEvent.connect(group, listener, at);
        break;
    case ColumnRemovedEventId:
        return _ColumnRemovedEvent.connect(group, listener, at);
        break;
    case ColumnMarginChangedEventId:
        return _ColumnMarginChangedEvent.connect(group, listener, at);
        break;
    case ColumnSelectionChangedEventId:
        return _ColumnSelectionChangedEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  TableColumnModelBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case ColumnAddedEventId:
        _ColumnAddedEvent.disconnect(group);
        break;
    case ColumnMovedEventId:
        _ColumnMovedEvent.disconnect(group);
        break;
    case ColumnRemovedEventId:
        _ColumnRemovedEvent.disconnect(group);
        break;
    case ColumnMarginChangedEventId:
        _ColumnMarginChangedEvent.disconnect(group);
        break;
    case ColumnSelectionChangedEventId:
        _ColumnSelectionChangedEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  TableColumnModelBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case ColumnAddedEventId:
        _ColumnAddedEvent.disconnect_all_slots();
        break;
    case ColumnMovedEventId:
        _ColumnMovedEvent.disconnect_all_slots();
        break;
    case ColumnRemovedEventId:
        _ColumnRemovedEvent.disconnect_all_slots();
        break;
    case ColumnMarginChangedEventId:
        _ColumnMarginChangedEvent.disconnect_all_slots();
        break;
    case ColumnSelectionChangedEventId:
        _ColumnSelectionChangedEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  TableColumnModelBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ColumnAddedEventId:
        return _ColumnAddedEvent.empty();
        break;
    case ColumnMovedEventId:
        return _ColumnMovedEvent.empty();
        break;
    case ColumnRemovedEventId:
        return _ColumnRemovedEvent.empty();
        break;
    case ColumnMarginChangedEventId:
        return _ColumnMarginChangedEvent.empty();
        break;
    case ColumnSelectionChangedEventId:
        return _ColumnSelectionChangedEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  TableColumnModelBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ColumnAddedEventId:
        return _ColumnAddedEvent.num_slots();
        break;
    case ColumnMovedEventId:
        return _ColumnMovedEvent.num_slots();
        break;
    case ColumnRemovedEventId:
        return _ColumnRemovedEvent.num_slots();
        break;
    case ColumnMarginChangedEventId:
        return _ColumnMarginChangedEvent.num_slots();
        break;
    case ColumnSelectionChangedEventId:
        return _ColumnSelectionChangedEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

TableColumnModelBase::TableColumnModelBase(void) :
    Inherited(),
    _sfSelectionModel         (NULL)
{
}

TableColumnModelBase::TableColumnModelBase(const TableColumnModelBase &source) :
    Inherited(source),
    _sfSelectionModel         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

TableColumnModelBase::~TableColumnModelBase(void)
{
}

void TableColumnModelBase::onCreate(const TableColumnModel *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TableColumnModel *pThis = static_cast<TableColumnModel *>(this);

        pThis->setSelectionModel(source->getSelectionModel());
    }
}

GetFieldHandlePtr TableColumnModelBase::getHandleSelectionModel  (void) const
{
    SFUnrecListSelectionModelPtr::GetHandlePtr returnValue(
        new  SFUnrecListSelectionModelPtr::GetHandle(
             &_sfSelectionModel,
             this->getType().getFieldDesc(SelectionModelFieldId),
             const_cast<TableColumnModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TableColumnModelBase::editHandleSelectionModel (void)
{
    SFUnrecListSelectionModelPtr::EditHandlePtr returnValue(
        new  SFUnrecListSelectionModelPtr::EditHandle(
             &_sfSelectionModel,
             this->getType().getFieldDesc(SelectionModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TableColumnModel::setSelectionModel,
                    static_cast<TableColumnModel *>(this), _1));

    editSField(SelectionModelFieldMask);

    return returnValue;
}


GetEventHandlePtr TableColumnModelBase::getHandleColumnAddedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ColumnAddedEventType>(
             const_cast<ColumnAddedEventType *>(&_ColumnAddedEvent),
             _producerType.getEventDescription(ColumnAddedEventId),
             const_cast<TableColumnModelBase *>(this)));

    return returnValue;
}

GetEventHandlePtr TableColumnModelBase::getHandleColumnMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ColumnMovedEventType>(
             const_cast<ColumnMovedEventType *>(&_ColumnMovedEvent),
             _producerType.getEventDescription(ColumnMovedEventId),
             const_cast<TableColumnModelBase *>(this)));

    return returnValue;
}

GetEventHandlePtr TableColumnModelBase::getHandleColumnRemovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ColumnRemovedEventType>(
             const_cast<ColumnRemovedEventType *>(&_ColumnRemovedEvent),
             _producerType.getEventDescription(ColumnRemovedEventId),
             const_cast<TableColumnModelBase *>(this)));

    return returnValue;
}

GetEventHandlePtr TableColumnModelBase::getHandleColumnMarginChangedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ColumnMarginChangedEventType>(
             const_cast<ColumnMarginChangedEventType *>(&_ColumnMarginChangedEvent),
             _producerType.getEventDescription(ColumnMarginChangedEventId),
             const_cast<TableColumnModelBase *>(this)));

    return returnValue;
}

GetEventHandlePtr TableColumnModelBase::getHandleColumnSelectionChangedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ColumnSelectionChangedEventType>(
             const_cast<ColumnSelectionChangedEventType *>(&_ColumnSelectionChangedEvent),
             _producerType.getEventDescription(ColumnSelectionChangedEventId),
             const_cast<TableColumnModelBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TableColumnModelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TableColumnModel *pThis = static_cast<TableColumnModel *>(this);

    pThis->execSync(static_cast<TableColumnModel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void TableColumnModelBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TableColumnModel *>(this)->setSelectionModel(NULL);


}


OSG_END_NAMESPACE
