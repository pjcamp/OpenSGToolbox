/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DefaultTableColumnModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGTableColumn.h"             // InternalColumns Class

#include "OSGDefaultTableColumnModelBase.h"
#include "OSGDefaultTableColumnModel.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DefaultTableColumnModel
    A UI DefaultTableColumnModel.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TableColumn *   DefaultTableColumnModelBase::_mfInternalColumns
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DefaultTableColumnModel *>::_type("DefaultTableColumnModelPtr", "AbstractTableColumnModelPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DefaultTableColumnModel *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DefaultTableColumnModel *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DefaultTableColumnModel *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DefaultTableColumnModelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecTableColumnPtr::Description(
        MFUnrecTableColumnPtr::getClassType(),
        "InternalColumns",
        "",
        InternalColumnsFieldId, InternalColumnsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTableColumnModel::editHandleInternalColumns),
        static_cast<FieldGetMethodSig >(&DefaultTableColumnModel::getHandleInternalColumns));

    oType.addInitialDesc(pDesc);
}


DefaultTableColumnModelBase::TypeObject DefaultTableColumnModelBase::_type(
    DefaultTableColumnModelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&DefaultTableColumnModelBase::createEmptyLocal),
    DefaultTableColumnModel::initMethod,
    DefaultTableColumnModel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DefaultTableColumnModel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DefaultTableColumnModel\"\n"
    "\tparent=\"AbstractTableColumnModel\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI DefaultTableColumnModel.\n"
    "    <Field\n"
    "        name=\"InternalColumns\"\n"
    "        type=\"TableColumn\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "A UI DefaultTableColumnModel.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DefaultTableColumnModelBase::getType(void)
{
    return _type;
}

const FieldContainerType &DefaultTableColumnModelBase::getType(void) const
{
    return _type;
}

UInt32 DefaultTableColumnModelBase::getContainerSize(void) const
{
    return sizeof(DefaultTableColumnModel);
}

/*------------------------- decorator get ------------------------------*/


//! Get the DefaultTableColumnModel::_mfInternalColumns field.
const MFUnrecTableColumnPtr *DefaultTableColumnModelBase::getMFInternalColumns(void) const
{
    return &_mfInternalColumns;
}

MFUnrecTableColumnPtr *DefaultTableColumnModelBase::editMFInternalColumns(void)
{
    editMField(InternalColumnsFieldMask, _mfInternalColumns);

    return &_mfInternalColumns;
}



void DefaultTableColumnModelBase::pushToInternalColumns(TableColumn * const value)
{
    editMField(InternalColumnsFieldMask, _mfInternalColumns);

    _mfInternalColumns.push_back(value);
}

void DefaultTableColumnModelBase::assignInternalColumns(const MFUnrecTableColumnPtr &value)
{
    MFUnrecTableColumnPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecTableColumnPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<DefaultTableColumnModel *>(this)->clearInternalColumns();

    while(elemIt != elemEnd)
    {
        this->pushToInternalColumns(*elemIt);

        ++elemIt;
    }
}

void DefaultTableColumnModelBase::removeFromInternalColumns(UInt32 uiIndex)
{
    if(uiIndex < _mfInternalColumns.size())
    {
        editMField(InternalColumnsFieldMask, _mfInternalColumns);

        _mfInternalColumns.erase(uiIndex);
    }
}

void DefaultTableColumnModelBase::removeObjFromInternalColumns(TableColumn * const value)
{
    Int32 iElemIdx = _mfInternalColumns.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(InternalColumnsFieldMask, _mfInternalColumns);

        _mfInternalColumns.erase(iElemIdx);
    }
}
void DefaultTableColumnModelBase::clearInternalColumns(void)
{
    editMField(InternalColumnsFieldMask, _mfInternalColumns);


    _mfInternalColumns.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 DefaultTableColumnModelBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalColumnsFieldMask & whichField))
    {
        returnValue += _mfInternalColumns.getBinSize();
    }

    return returnValue;
}

void DefaultTableColumnModelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalColumnsFieldMask & whichField))
    {
        _mfInternalColumns.copyToBin(pMem);
    }
}

void DefaultTableColumnModelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalColumnsFieldMask & whichField))
    {
        _mfInternalColumns.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DefaultTableColumnModelTransitPtr DefaultTableColumnModelBase::createLocal(BitVector bFlags)
{
    DefaultTableColumnModelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DefaultTableColumnModel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DefaultTableColumnModelTransitPtr DefaultTableColumnModelBase::createDependent(BitVector bFlags)
{
    DefaultTableColumnModelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DefaultTableColumnModel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DefaultTableColumnModelTransitPtr DefaultTableColumnModelBase::create(void)
{
    DefaultTableColumnModelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DefaultTableColumnModel>(tmpPtr);
    }

    return fc;
}

DefaultTableColumnModel *DefaultTableColumnModelBase::createEmptyLocal(BitVector bFlags)
{
    DefaultTableColumnModel *returnValue;

    newPtr<DefaultTableColumnModel>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DefaultTableColumnModel *DefaultTableColumnModelBase::createEmpty(void)
{
    DefaultTableColumnModel *returnValue;

    newPtr<DefaultTableColumnModel>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DefaultTableColumnModelBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DefaultTableColumnModel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DefaultTableColumnModel *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DefaultTableColumnModelBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DefaultTableColumnModel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DefaultTableColumnModel *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DefaultTableColumnModelBase::shallowCopy(void) const
{
    DefaultTableColumnModel *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DefaultTableColumnModel *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

DefaultTableColumnModelBase::DefaultTableColumnModelBase(void) :
    Inherited(),
    _mfInternalColumns        ()
{
}

DefaultTableColumnModelBase::DefaultTableColumnModelBase(const DefaultTableColumnModelBase &source) :
    Inherited(source),
    _mfInternalColumns        ()
{
}


/*-------------------------- destructors ----------------------------------*/

DefaultTableColumnModelBase::~DefaultTableColumnModelBase(void)
{
}

void DefaultTableColumnModelBase::onCreate(const DefaultTableColumnModel *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DefaultTableColumnModel *pThis = static_cast<DefaultTableColumnModel *>(this);

        MFUnrecTableColumnPtr::const_iterator InternalColumnsIt  =
            source->_mfInternalColumns.begin();
        MFUnrecTableColumnPtr::const_iterator InternalColumnsEnd =
            source->_mfInternalColumns.end  ();

        while(InternalColumnsIt != InternalColumnsEnd)
        {
            pThis->pushToInternalColumns(*InternalColumnsIt);

            ++InternalColumnsIt;
        }
    }
}

GetFieldHandlePtr DefaultTableColumnModelBase::getHandleInternalColumns (void) const
{
    MFUnrecTableColumnPtr::GetHandlePtr returnValue(
        new  MFUnrecTableColumnPtr::GetHandle(
             &_mfInternalColumns,
             this->getType().getFieldDesc(InternalColumnsFieldId),
             const_cast<DefaultTableColumnModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTableColumnModelBase::editHandleInternalColumns(void)
{
    MFUnrecTableColumnPtr::EditHandlePtr returnValue(
        new  MFUnrecTableColumnPtr::EditHandle(
             &_mfInternalColumns,
             this->getType().getFieldDesc(InternalColumnsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&DefaultTableColumnModel::pushToInternalColumns,
                    static_cast<DefaultTableColumnModel *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&DefaultTableColumnModel::removeFromInternalColumns,
                    static_cast<DefaultTableColumnModel *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&DefaultTableColumnModel::removeObjFromInternalColumns,
                    static_cast<DefaultTableColumnModel *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&DefaultTableColumnModel::clearInternalColumns,
                    static_cast<DefaultTableColumnModel *>(this)));

    editMField(InternalColumnsFieldMask, _mfInternalColumns);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void DefaultTableColumnModelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DefaultTableColumnModel *pThis = static_cast<DefaultTableColumnModel *>(this);

    pThis->execSync(static_cast<DefaultTableColumnModel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DefaultTableColumnModelBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DefaultTableColumnModel *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DefaultTableColumnModel *>(pRefAspect),
                  dynamic_cast<const DefaultTableColumnModel *>(this));

    return returnValue;
}
#endif

void DefaultTableColumnModelBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DefaultTableColumnModel *>(this)->clearInternalColumns();


}


OSG_END_NAMESPACE
