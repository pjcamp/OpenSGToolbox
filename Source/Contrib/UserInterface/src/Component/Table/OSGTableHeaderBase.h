/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableHeader
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTABLEHEADERBASE_H_
#define _OSGTABLEHEADERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponentContainer.h" // Parent

#include "OSGFieldContainerFields.h"    // Table type
#include "OSGTableColumnModelFields.h"  // ColumnModel type
#include "OSGSysFields.h"               // ReorderingAllowed type
#include "OSGUIDrawObjectCanvasFields.h" // DefaultMarginDrawObject type
#include "OSGComponentFields.h"         // ColumnHeaders type

#include "OSGTableHeaderFields.h"

OSG_BEGIN_NAMESPACE

class TableHeader;

//! \brief TableHeader Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING TableHeaderBase : public ComponentContainer
{
  public:

    typedef ComponentContainer Inherited;
    typedef ComponentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(TableHeader);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TableFieldId = Inherited::NextFieldId,
        ColumnModelFieldId = TableFieldId + 1,
        ReorderingAllowedFieldId = ColumnModelFieldId + 1,
        ResizingAllowedFieldId = ReorderingAllowedFieldId + 1,
        ResizingCursorDriftAllowanceFieldId = ResizingAllowedFieldId + 1,
        DefaultMarginDrawObjectFieldId = ResizingCursorDriftAllowanceFieldId + 1,
        MarginsFieldId = DefaultMarginDrawObjectFieldId + 1,
        ColumnHeadersFieldId = MarginsFieldId + 1,
        NextFieldId = ColumnHeadersFieldId + 1
    };

    static const OSG::BitVector TableFieldMask =
        (TypeTraits<BitVector>::One << TableFieldId);
    static const OSG::BitVector ColumnModelFieldMask =
        (TypeTraits<BitVector>::One << ColumnModelFieldId);
    static const OSG::BitVector ReorderingAllowedFieldMask =
        (TypeTraits<BitVector>::One << ReorderingAllowedFieldId);
    static const OSG::BitVector ResizingAllowedFieldMask =
        (TypeTraits<BitVector>::One << ResizingAllowedFieldId);
    static const OSG::BitVector ResizingCursorDriftAllowanceFieldMask =
        (TypeTraits<BitVector>::One << ResizingCursorDriftAllowanceFieldId);
    static const OSG::BitVector DefaultMarginDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DefaultMarginDrawObjectFieldId);
    static const OSG::BitVector MarginsFieldMask =
        (TypeTraits<BitVector>::One << MarginsFieldId);
    static const OSG::BitVector ColumnHeadersFieldMask =
        (TypeTraits<BitVector>::One << ColumnHeadersFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFParentFieldContainerPtr SFTableType;
    typedef SFUnrecTableColumnModelPtr SFColumnModelType;
    typedef SFBool            SFReorderingAllowedType;
    typedef SFBool            SFResizingAllowedType;
    typedef SFUInt32          SFResizingCursorDriftAllowanceType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDefaultMarginDrawObjectType;
    typedef MFUnrecUIDrawObjectCanvasPtr MFMarginsType;
    typedef MFUnrecComponentPtr MFColumnHeadersType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecTableColumnModelPtr *getSFColumnModel    (void) const;
                  SFUnrecTableColumnModelPtr *editSFColumnModel    (void);

                  SFBool              *editSFReorderingAllowed(void);
            const SFBool              *getSFReorderingAllowed (void) const;

                  SFBool              *editSFResizingAllowed(void);
            const SFBool              *getSFResizingAllowed (void) const;

                  SFUInt32            *editSFResizingCursorDriftAllowance(void);
            const SFUInt32            *getSFResizingCursorDriftAllowance (void) const;
            const SFUnrecUIDrawObjectCanvasPtr *getSFDefaultMarginDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDefaultMarginDrawObject(void);


                  TableColumnModel * getColumnModel    (void) const;

                  bool                &editReorderingAllowed(void);
                  bool                 getReorderingAllowed (void) const;

                  bool                &editResizingAllowed(void);
                  bool                 getResizingAllowed (void) const;

                  UInt32              &editResizingCursorDriftAllowance(void);
                  UInt32               getResizingCursorDriftAllowance (void) const;

                  UIDrawObjectCanvas * getDefaultMarginDrawObject(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setColumnModel    (TableColumnModel * const value);
            void setReorderingAllowed(const bool value);
            void setResizingAllowed(const bool value);
            void setResizingCursorDriftAllowance(const UInt32 value);
            void setDefaultMarginDrawObject(UIDrawObjectCanvas * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TableHeaderTransitPtr  create          (void);
    static  TableHeader           *createEmpty     (void);

    static  TableHeaderTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  TableHeader            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  TableHeaderTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFParentFieldContainerPtr _sfTable;
    SFUnrecTableColumnModelPtr _sfColumnModel;
    SFBool            _sfReorderingAllowed;
    SFBool            _sfResizingAllowed;
    SFUInt32          _sfResizingCursorDriftAllowance;
    SFUnrecUIDrawObjectCanvasPtr _sfDefaultMarginDrawObject;
    MFUnrecUIDrawObjectCanvasPtr _mfMargins;
    MFUnrecComponentPtr _mfColumnHeaders;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TableHeaderBase(void);
    TableHeaderBase(const TableHeaderBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TableHeaderBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TableHeader *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Parent linking                                               */
    /*! \{                                                                 */

    virtual bool linkParent  (FieldContainer * const pParent,
                              UInt16           const childFieldId,
                              UInt16           const parentFieldId);
    virtual bool unlinkParent(FieldContainer * const pParent,
                              UInt16           const parentFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTable           (void) const;
    EditFieldHandlePtr editHandleTable          (void);
    GetFieldHandlePtr  getHandleColumnModel     (void) const;
    EditFieldHandlePtr editHandleColumnModel    (void);
    GetFieldHandlePtr  getHandleReorderingAllowed (void) const;
    EditFieldHandlePtr editHandleReorderingAllowed(void);
    GetFieldHandlePtr  getHandleResizingAllowed (void) const;
    EditFieldHandlePtr editHandleResizingAllowed(void);
    GetFieldHandlePtr  getHandleResizingCursorDriftAllowance (void) const;
    EditFieldHandlePtr editHandleResizingCursorDriftAllowance(void);
    GetFieldHandlePtr  getHandleDefaultMarginDrawObject (void) const;
    EditFieldHandlePtr editHandleDefaultMarginDrawObject(void);
    GetFieldHandlePtr  getHandleMargins         (void) const;
    EditFieldHandlePtr editHandleMargins        (void);
    GetFieldHandlePtr  getHandleColumnHeaders   (void) const;
    EditFieldHandlePtr editHandleColumnHeaders  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const MFUnrecUIDrawObjectCanvasPtr *getMFMargins         (void) const;
                  MFUnrecUIDrawObjectCanvasPtr *editMFMargins        (void);
            const MFUnrecComponentPtr *getMFColumnHeaders   (void) const;
                  MFUnrecComponentPtr *editMFColumnHeaders  (void);


                  UIDrawObjectCanvas * getMargins        (const UInt32 index) const;

                  Component * getColumnHeaders  (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToMargins             (UIDrawObjectCanvas * const value   );
    void assignMargins             (const MFUnrecUIDrawObjectCanvasPtr &value);
    void removeFromMargins (UInt32                uiIndex );
    void removeObjFromMargins(UIDrawObjectCanvas * const value   );
    void clearMargins               (void                          );

    void pushToColumnHeaders           (Component * const value   );
    void assignColumnHeaders           (const MFUnrecComponentPtr &value);
    void removeFromColumnHeaders (UInt32                uiIndex );
    void removeObjFromColumnHeaders(Component * const value   );
    void clearColumnHeaders            (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TableHeaderBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TableHeaderBase &source);
};

typedef TableHeaderBase *TableHeaderBaseP;

OSG_END_NAMESPACE

#endif /* _OSGTABLEHEADERBASE_H_ */
