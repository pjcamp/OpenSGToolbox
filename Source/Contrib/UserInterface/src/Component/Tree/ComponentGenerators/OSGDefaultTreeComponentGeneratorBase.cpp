/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DefaultTreeComponentGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGUIDrawObjectCanvas.h"      // ExpandedDrawObjectPrototype Class
#include "OSGLabel.h"                   // NodeLabelPrototype Class
#include "OSGPanel.h"                   // NodePanelPrototype Class
#include "OSGLayer.h"                   // SelectedBackground Class
#include "OSGBorder.h"                  // SelectedBorder Class

#include "OSGDefaultTreeComponentGeneratorBase.h"
#include "OSGDefaultTreeComponentGenerator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DefaultTreeComponentGenerator
    A UI Default Tree ComponentGenerator.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UIDrawObjectCanvas * DefaultTreeComponentGeneratorBase::_sfExpandedDrawObjectPrototype
    
*/

/*! \var UIDrawObjectCanvas * DefaultTreeComponentGeneratorBase::_sfNotExpandedDrawObjectPrototype
    
*/

/*! \var UIDrawObjectCanvas * DefaultTreeComponentGeneratorBase::_sfLeafDrawObjectPrototype
    
*/

/*! \var UIDrawObjectCanvas * DefaultTreeComponentGeneratorBase::_sfNonLeafDrawObjectPrototype
    
*/

/*! \var UIDrawObjectCanvas * DefaultTreeComponentGeneratorBase::_sfExpandedNonLeafDrawObjectPrototype
    
*/

/*! \var Label *         DefaultTreeComponentGeneratorBase::_sfNodeLabelPrototype
    
*/

/*! \var Panel *         DefaultTreeComponentGeneratorBase::_sfNodePanelPrototype
    
*/

/*! \var Layer *         DefaultTreeComponentGeneratorBase::_sfSelectedBackground
    
*/

/*! \var Layer *         DefaultTreeComponentGeneratorBase::_sfNonSelectedBackground
    
*/

/*! \var Layer *         DefaultTreeComponentGeneratorBase::_sfSelectedForeground
    
*/

/*! \var Layer *         DefaultTreeComponentGeneratorBase::_sfNonSelectedForeground
    
*/

/*! \var Border *        DefaultTreeComponentGeneratorBase::_sfSelectedBorder
    
*/

/*! \var Color4f         DefaultTreeComponentGeneratorBase::_sfSelectedTextColor
    
*/

/*! \var Color4f         DefaultTreeComponentGeneratorBase::_sfNonSelectedTextColor
    
*/

/*! \var Border *        DefaultTreeComponentGeneratorBase::_sfFocusedBorder
    
*/

/*! \var Color4f         DefaultTreeComponentGeneratorBase::_sfFocusedTextColor
    
*/

/*! \var Layer *         DefaultTreeComponentGeneratorBase::_sfFocusedBackground
    
*/

/*! \var Layer *         DefaultTreeComponentGeneratorBase::_sfFocusedForeground
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DefaultTreeComponentGenerator *>::_type("DefaultTreeComponentGeneratorPtr", "TreeComponentGeneratorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DefaultTreeComponentGenerator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DefaultTreeComponentGenerator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DefaultTreeComponentGenerator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DefaultTreeComponentGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecUIDrawObjectCanvasPtr::Description(
        SFUnrecUIDrawObjectCanvasPtr::getClassType(),
        "ExpandedDrawObjectPrototype",
        "",
        ExpandedDrawObjectPrototypeFieldId, ExpandedDrawObjectPrototypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleExpandedDrawObjectPrototype),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleExpandedDrawObjectPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIDrawObjectCanvasPtr::Description(
        SFUnrecUIDrawObjectCanvasPtr::getClassType(),
        "NotExpandedDrawObjectPrototype",
        "",
        NotExpandedDrawObjectPrototypeFieldId, NotExpandedDrawObjectPrototypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleNotExpandedDrawObjectPrototype),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleNotExpandedDrawObjectPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIDrawObjectCanvasPtr::Description(
        SFUnrecUIDrawObjectCanvasPtr::getClassType(),
        "LeafDrawObjectPrototype",
        "",
        LeafDrawObjectPrototypeFieldId, LeafDrawObjectPrototypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleLeafDrawObjectPrototype),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleLeafDrawObjectPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIDrawObjectCanvasPtr::Description(
        SFUnrecUIDrawObjectCanvasPtr::getClassType(),
        "NonLeafDrawObjectPrototype",
        "",
        NonLeafDrawObjectPrototypeFieldId, NonLeafDrawObjectPrototypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleNonLeafDrawObjectPrototype),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleNonLeafDrawObjectPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIDrawObjectCanvasPtr::Description(
        SFUnrecUIDrawObjectCanvasPtr::getClassType(),
        "ExpandedNonLeafDrawObjectPrototype",
        "",
        ExpandedNonLeafDrawObjectPrototypeFieldId, ExpandedNonLeafDrawObjectPrototypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleExpandedNonLeafDrawObjectPrototype),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleExpandedNonLeafDrawObjectPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLabelPtr::Description(
        SFUnrecLabelPtr::getClassType(),
        "NodeLabelPrototype",
        "",
        NodeLabelPrototypeFieldId, NodeLabelPrototypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleNodeLabelPrototype),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleNodeLabelPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPanelPtr::Description(
        SFUnrecPanelPtr::getClassType(),
        "NodePanelPrototype",
        "",
        NodePanelPrototypeFieldId, NodePanelPrototypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleNodePanelPrototype),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleNodePanelPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "SelectedBackground",
        "",
        SelectedBackgroundFieldId, SelectedBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleSelectedBackground),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleSelectedBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "NonSelectedBackground",
        "",
        NonSelectedBackgroundFieldId, NonSelectedBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleNonSelectedBackground),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleNonSelectedBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "SelectedForeground",
        "",
        SelectedForegroundFieldId, SelectedForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleSelectedForeground),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleSelectedForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "NonSelectedForeground",
        "",
        NonSelectedForegroundFieldId, NonSelectedForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleNonSelectedForeground),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleNonSelectedForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "SelectedBorder",
        "",
        SelectedBorderFieldId, SelectedBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleSelectedBorder),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleSelectedBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "SelectedTextColor",
        "",
        SelectedTextColorFieldId, SelectedTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleSelectedTextColor),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleSelectedTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "NonSelectedTextColor",
        "",
        NonSelectedTextColorFieldId, NonSelectedTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleNonSelectedTextColor),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleNonSelectedTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "FocusedBorder",
        "",
        FocusedBorderFieldId, FocusedBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleFocusedBorder),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleFocusedBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "FocusedTextColor",
        "",
        FocusedTextColorFieldId, FocusedTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleFocusedTextColor),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleFocusedTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "FocusedBackground",
        "",
        FocusedBackgroundFieldId, FocusedBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleFocusedBackground),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleFocusedBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "FocusedForeground",
        "",
        FocusedForegroundFieldId, FocusedForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultTreeComponentGenerator::editHandleFocusedForeground),
        static_cast<FieldGetMethodSig >(&DefaultTreeComponentGenerator::getHandleFocusedForeground));

    oType.addInitialDesc(pDesc);
}


DefaultTreeComponentGeneratorBase::TypeObject DefaultTreeComponentGeneratorBase::_type(
    DefaultTreeComponentGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&DefaultTreeComponentGeneratorBase::createEmptyLocal),
    DefaultTreeComponentGenerator::initMethod,
    DefaultTreeComponentGenerator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DefaultTreeComponentGenerator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DefaultTreeComponentGenerator\"\n"
    "\tparent=\"TreeComponentGenerator\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Default Tree ComponentGenerator.\n"
    "\t<Field\n"
    "\t\tname=\"ExpandedDrawObjectPrototype\"\n"
    "\t\ttype=\"UIDrawObjectCanvas\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NotExpandedDrawObjectPrototype\"\n"
    "\t\ttype=\"UIDrawObjectCanvas\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LeafDrawObjectPrototype\"\n"
    "\t\ttype=\"UIDrawObjectCanvas\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NonLeafDrawObjectPrototype\"\n"
    "\t\ttype=\"UIDrawObjectCanvas\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ExpandedNonLeafDrawObjectPrototype\"\n"
    "\t\ttype=\"UIDrawObjectCanvas\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NodeLabelPrototype\"\n"
    "\t\ttype=\"Label\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NodePanelPrototype\"\n"
    "\t\ttype=\"Panel\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectedBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NonSelectedBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectedForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NonSelectedForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectedBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectedTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NonSelectedTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedBackground\"\n"
    "\t\ttype=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedForeground\"\n"
    "\t\ttype=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Default Tree ComponentGenerator.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DefaultTreeComponentGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &DefaultTreeComponentGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 DefaultTreeComponentGeneratorBase::getContainerSize(void) const
{
    return sizeof(DefaultTreeComponentGenerator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the DefaultTreeComponentGenerator::_sfExpandedDrawObjectPrototype field.
const SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::getSFExpandedDrawObjectPrototype(void) const
{
    return &_sfExpandedDrawObjectPrototype;
}

SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::editSFExpandedDrawObjectPrototype(void)
{
    editSField(ExpandedDrawObjectPrototypeFieldMask);

    return &_sfExpandedDrawObjectPrototype;
}

//! Get the DefaultTreeComponentGenerator::_sfNotExpandedDrawObjectPrototype field.
const SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::getSFNotExpandedDrawObjectPrototype(void) const
{
    return &_sfNotExpandedDrawObjectPrototype;
}

SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::editSFNotExpandedDrawObjectPrototype(void)
{
    editSField(NotExpandedDrawObjectPrototypeFieldMask);

    return &_sfNotExpandedDrawObjectPrototype;
}

//! Get the DefaultTreeComponentGenerator::_sfLeafDrawObjectPrototype field.
const SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::getSFLeafDrawObjectPrototype(void) const
{
    return &_sfLeafDrawObjectPrototype;
}

SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::editSFLeafDrawObjectPrototype(void)
{
    editSField(LeafDrawObjectPrototypeFieldMask);

    return &_sfLeafDrawObjectPrototype;
}

//! Get the DefaultTreeComponentGenerator::_sfNonLeafDrawObjectPrototype field.
const SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::getSFNonLeafDrawObjectPrototype(void) const
{
    return &_sfNonLeafDrawObjectPrototype;
}

SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::editSFNonLeafDrawObjectPrototype(void)
{
    editSField(NonLeafDrawObjectPrototypeFieldMask);

    return &_sfNonLeafDrawObjectPrototype;
}

//! Get the DefaultTreeComponentGenerator::_sfExpandedNonLeafDrawObjectPrototype field.
const SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::getSFExpandedNonLeafDrawObjectPrototype(void) const
{
    return &_sfExpandedNonLeafDrawObjectPrototype;
}

SFUnrecUIDrawObjectCanvasPtr *DefaultTreeComponentGeneratorBase::editSFExpandedNonLeafDrawObjectPrototype(void)
{
    editSField(ExpandedNonLeafDrawObjectPrototypeFieldMask);

    return &_sfExpandedNonLeafDrawObjectPrototype;
}

//! Get the DefaultTreeComponentGenerator::_sfNodeLabelPrototype field.
const SFUnrecLabelPtr *DefaultTreeComponentGeneratorBase::getSFNodeLabelPrototype(void) const
{
    return &_sfNodeLabelPrototype;
}

SFUnrecLabelPtr     *DefaultTreeComponentGeneratorBase::editSFNodeLabelPrototype(void)
{
    editSField(NodeLabelPrototypeFieldMask);

    return &_sfNodeLabelPrototype;
}

//! Get the DefaultTreeComponentGenerator::_sfNodePanelPrototype field.
const SFUnrecPanelPtr *DefaultTreeComponentGeneratorBase::getSFNodePanelPrototype(void) const
{
    return &_sfNodePanelPrototype;
}

SFUnrecPanelPtr     *DefaultTreeComponentGeneratorBase::editSFNodePanelPrototype(void)
{
    editSField(NodePanelPrototypeFieldMask);

    return &_sfNodePanelPrototype;
}

//! Get the DefaultTreeComponentGenerator::_sfSelectedBackground field.
const SFUnrecLayerPtr *DefaultTreeComponentGeneratorBase::getSFSelectedBackground(void) const
{
    return &_sfSelectedBackground;
}

SFUnrecLayerPtr     *DefaultTreeComponentGeneratorBase::editSFSelectedBackground(void)
{
    editSField(SelectedBackgroundFieldMask);

    return &_sfSelectedBackground;
}

//! Get the DefaultTreeComponentGenerator::_sfNonSelectedBackground field.
const SFUnrecLayerPtr *DefaultTreeComponentGeneratorBase::getSFNonSelectedBackground(void) const
{
    return &_sfNonSelectedBackground;
}

SFUnrecLayerPtr     *DefaultTreeComponentGeneratorBase::editSFNonSelectedBackground(void)
{
    editSField(NonSelectedBackgroundFieldMask);

    return &_sfNonSelectedBackground;
}

//! Get the DefaultTreeComponentGenerator::_sfSelectedForeground field.
const SFUnrecLayerPtr *DefaultTreeComponentGeneratorBase::getSFSelectedForeground(void) const
{
    return &_sfSelectedForeground;
}

SFUnrecLayerPtr     *DefaultTreeComponentGeneratorBase::editSFSelectedForeground(void)
{
    editSField(SelectedForegroundFieldMask);

    return &_sfSelectedForeground;
}

//! Get the DefaultTreeComponentGenerator::_sfNonSelectedForeground field.
const SFUnrecLayerPtr *DefaultTreeComponentGeneratorBase::getSFNonSelectedForeground(void) const
{
    return &_sfNonSelectedForeground;
}

SFUnrecLayerPtr     *DefaultTreeComponentGeneratorBase::editSFNonSelectedForeground(void)
{
    editSField(NonSelectedForegroundFieldMask);

    return &_sfNonSelectedForeground;
}

//! Get the DefaultTreeComponentGenerator::_sfSelectedBorder field.
const SFUnrecBorderPtr *DefaultTreeComponentGeneratorBase::getSFSelectedBorder(void) const
{
    return &_sfSelectedBorder;
}

SFUnrecBorderPtr    *DefaultTreeComponentGeneratorBase::editSFSelectedBorder (void)
{
    editSField(SelectedBorderFieldMask);

    return &_sfSelectedBorder;
}

SFColor4f *DefaultTreeComponentGeneratorBase::editSFSelectedTextColor(void)
{
    editSField(SelectedTextColorFieldMask);

    return &_sfSelectedTextColor;
}

const SFColor4f *DefaultTreeComponentGeneratorBase::getSFSelectedTextColor(void) const
{
    return &_sfSelectedTextColor;
}


SFColor4f *DefaultTreeComponentGeneratorBase::editSFNonSelectedTextColor(void)
{
    editSField(NonSelectedTextColorFieldMask);

    return &_sfNonSelectedTextColor;
}

const SFColor4f *DefaultTreeComponentGeneratorBase::getSFNonSelectedTextColor(void) const
{
    return &_sfNonSelectedTextColor;
}


//! Get the DefaultTreeComponentGenerator::_sfFocusedBorder field.
const SFUnrecBorderPtr *DefaultTreeComponentGeneratorBase::getSFFocusedBorder(void) const
{
    return &_sfFocusedBorder;
}

SFUnrecBorderPtr    *DefaultTreeComponentGeneratorBase::editSFFocusedBorder  (void)
{
    editSField(FocusedBorderFieldMask);

    return &_sfFocusedBorder;
}

SFColor4f *DefaultTreeComponentGeneratorBase::editSFFocusedTextColor(void)
{
    editSField(FocusedTextColorFieldMask);

    return &_sfFocusedTextColor;
}

const SFColor4f *DefaultTreeComponentGeneratorBase::getSFFocusedTextColor(void) const
{
    return &_sfFocusedTextColor;
}


//! Get the DefaultTreeComponentGenerator::_sfFocusedBackground field.
const SFUnrecLayerPtr *DefaultTreeComponentGeneratorBase::getSFFocusedBackground(void) const
{
    return &_sfFocusedBackground;
}

SFUnrecLayerPtr     *DefaultTreeComponentGeneratorBase::editSFFocusedBackground(void)
{
    editSField(FocusedBackgroundFieldMask);

    return &_sfFocusedBackground;
}

//! Get the DefaultTreeComponentGenerator::_sfFocusedForeground field.
const SFUnrecLayerPtr *DefaultTreeComponentGeneratorBase::getSFFocusedForeground(void) const
{
    return &_sfFocusedForeground;
}

SFUnrecLayerPtr     *DefaultTreeComponentGeneratorBase::editSFFocusedForeground(void)
{
    editSField(FocusedForegroundFieldMask);

    return &_sfFocusedForeground;
}





/*------------------------------ access -----------------------------------*/

UInt32 DefaultTreeComponentGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ExpandedDrawObjectPrototypeFieldMask & whichField))
    {
        returnValue += _sfExpandedDrawObjectPrototype.getBinSize();
    }
    if(FieldBits::NoField != (NotExpandedDrawObjectPrototypeFieldMask & whichField))
    {
        returnValue += _sfNotExpandedDrawObjectPrototype.getBinSize();
    }
    if(FieldBits::NoField != (LeafDrawObjectPrototypeFieldMask & whichField))
    {
        returnValue += _sfLeafDrawObjectPrototype.getBinSize();
    }
    if(FieldBits::NoField != (NonLeafDrawObjectPrototypeFieldMask & whichField))
    {
        returnValue += _sfNonLeafDrawObjectPrototype.getBinSize();
    }
    if(FieldBits::NoField != (ExpandedNonLeafDrawObjectPrototypeFieldMask & whichField))
    {
        returnValue += _sfExpandedNonLeafDrawObjectPrototype.getBinSize();
    }
    if(FieldBits::NoField != (NodeLabelPrototypeFieldMask & whichField))
    {
        returnValue += _sfNodeLabelPrototype.getBinSize();
    }
    if(FieldBits::NoField != (NodePanelPrototypeFieldMask & whichField))
    {
        returnValue += _sfNodePanelPrototype.getBinSize();
    }
    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        returnValue += _sfSelectedBackground.getBinSize();
    }
    if(FieldBits::NoField != (NonSelectedBackgroundFieldMask & whichField))
    {
        returnValue += _sfNonSelectedBackground.getBinSize();
    }
    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
    {
        returnValue += _sfSelectedForeground.getBinSize();
    }
    if(FieldBits::NoField != (NonSelectedForegroundFieldMask & whichField))
    {
        returnValue += _sfNonSelectedForeground.getBinSize();
    }
    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        returnValue += _sfSelectedBorder.getBinSize();
    }
    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        returnValue += _sfSelectedTextColor.getBinSize();
    }
    if(FieldBits::NoField != (NonSelectedTextColorFieldMask & whichField))
    {
        returnValue += _sfNonSelectedTextColor.getBinSize();
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        returnValue += _sfFocusedBorder.getBinSize();
    }
    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        returnValue += _sfFocusedTextColor.getBinSize();
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        returnValue += _sfFocusedBackground.getBinSize();
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        returnValue += _sfFocusedForeground.getBinSize();
    }

    return returnValue;
}

void DefaultTreeComponentGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ExpandedDrawObjectPrototypeFieldMask & whichField))
    {
        _sfExpandedDrawObjectPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NotExpandedDrawObjectPrototypeFieldMask & whichField))
    {
        _sfNotExpandedDrawObjectPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LeafDrawObjectPrototypeFieldMask & whichField))
    {
        _sfLeafDrawObjectPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NonLeafDrawObjectPrototypeFieldMask & whichField))
    {
        _sfNonLeafDrawObjectPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ExpandedNonLeafDrawObjectPrototypeFieldMask & whichField))
    {
        _sfExpandedNonLeafDrawObjectPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NodeLabelPrototypeFieldMask & whichField))
    {
        _sfNodeLabelPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NodePanelPrototypeFieldMask & whichField))
    {
        _sfNodePanelPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        _sfSelectedBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NonSelectedBackgroundFieldMask & whichField))
    {
        _sfNonSelectedBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
    {
        _sfSelectedForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NonSelectedForegroundFieldMask & whichField))
    {
        _sfNonSelectedForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        _sfSelectedBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        _sfSelectedTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NonSelectedTextColorFieldMask & whichField))
    {
        _sfNonSelectedTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        _sfFocusedForeground.copyToBin(pMem);
    }
}

void DefaultTreeComponentGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ExpandedDrawObjectPrototypeFieldMask & whichField))
    {
        _sfExpandedDrawObjectPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NotExpandedDrawObjectPrototypeFieldMask & whichField))
    {
        _sfNotExpandedDrawObjectPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LeafDrawObjectPrototypeFieldMask & whichField))
    {
        _sfLeafDrawObjectPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NonLeafDrawObjectPrototypeFieldMask & whichField))
    {
        _sfNonLeafDrawObjectPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ExpandedNonLeafDrawObjectPrototypeFieldMask & whichField))
    {
        _sfExpandedNonLeafDrawObjectPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NodeLabelPrototypeFieldMask & whichField))
    {
        _sfNodeLabelPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NodePanelPrototypeFieldMask & whichField))
    {
        _sfNodePanelPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        _sfSelectedBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NonSelectedBackgroundFieldMask & whichField))
    {
        _sfNonSelectedBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
    {
        _sfSelectedForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NonSelectedForegroundFieldMask & whichField))
    {
        _sfNonSelectedForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        _sfSelectedBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        _sfSelectedTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NonSelectedTextColorFieldMask & whichField))
    {
        _sfNonSelectedTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        _sfFocusedForeground.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DefaultTreeComponentGeneratorTransitPtr DefaultTreeComponentGeneratorBase::createLocal(BitVector bFlags)
{
    DefaultTreeComponentGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DefaultTreeComponentGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DefaultTreeComponentGeneratorTransitPtr DefaultTreeComponentGeneratorBase::createDependent(BitVector bFlags)
{
    DefaultTreeComponentGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DefaultTreeComponentGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DefaultTreeComponentGeneratorTransitPtr DefaultTreeComponentGeneratorBase::create(void)
{
    DefaultTreeComponentGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DefaultTreeComponentGenerator>(tmpPtr);
    }

    return fc;
}

DefaultTreeComponentGenerator *DefaultTreeComponentGeneratorBase::createEmptyLocal(BitVector bFlags)
{
    DefaultTreeComponentGenerator *returnValue;

    newPtr<DefaultTreeComponentGenerator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DefaultTreeComponentGenerator *DefaultTreeComponentGeneratorBase::createEmpty(void)
{
    DefaultTreeComponentGenerator *returnValue;

    newPtr<DefaultTreeComponentGenerator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr DefaultTreeComponentGeneratorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DefaultTreeComponentGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DefaultTreeComponentGenerator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DefaultTreeComponentGeneratorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DefaultTreeComponentGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DefaultTreeComponentGenerator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DefaultTreeComponentGeneratorBase::shallowCopy(void) const
{
    DefaultTreeComponentGenerator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DefaultTreeComponentGenerator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

DefaultTreeComponentGeneratorBase::DefaultTreeComponentGeneratorBase(void) :
    Inherited(),
    _sfExpandedDrawObjectPrototype(NULL),
    _sfNotExpandedDrawObjectPrototype(NULL),
    _sfLeafDrawObjectPrototype(NULL),
    _sfNonLeafDrawObjectPrototype(NULL),
    _sfExpandedNonLeafDrawObjectPrototype(NULL),
    _sfNodeLabelPrototype     (NULL),
    _sfNodePanelPrototype     (NULL),
    _sfSelectedBackground     (NULL),
    _sfNonSelectedBackground  (NULL),
    _sfSelectedForeground     (NULL),
    _sfNonSelectedForeground  (NULL),
    _sfSelectedBorder         (NULL),
    _sfSelectedTextColor      (Color4f(0.0,0.0,0.0,1.0)),
    _sfNonSelectedTextColor   (Color4f(0.0,0.0,0.0,1.0)),
    _sfFocusedBorder          (NULL),
    _sfFocusedTextColor       (Color4f(0.0,0.0,0.0,1.0)),
    _sfFocusedBackground      (NULL),
    _sfFocusedForeground      (NULL)
{
}

DefaultTreeComponentGeneratorBase::DefaultTreeComponentGeneratorBase(const DefaultTreeComponentGeneratorBase &source) :
    Inherited(source),
    _sfExpandedDrawObjectPrototype(NULL),
    _sfNotExpandedDrawObjectPrototype(NULL),
    _sfLeafDrawObjectPrototype(NULL),
    _sfNonLeafDrawObjectPrototype(NULL),
    _sfExpandedNonLeafDrawObjectPrototype(NULL),
    _sfNodeLabelPrototype     (NULL),
    _sfNodePanelPrototype     (NULL),
    _sfSelectedBackground     (NULL),
    _sfNonSelectedBackground  (NULL),
    _sfSelectedForeground     (NULL),
    _sfNonSelectedForeground  (NULL),
    _sfSelectedBorder         (NULL),
    _sfSelectedTextColor      (source._sfSelectedTextColor      ),
    _sfNonSelectedTextColor   (source._sfNonSelectedTextColor   ),
    _sfFocusedBorder          (NULL),
    _sfFocusedTextColor       (source._sfFocusedTextColor       ),
    _sfFocusedBackground      (NULL),
    _sfFocusedForeground      (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

DefaultTreeComponentGeneratorBase::~DefaultTreeComponentGeneratorBase(void)
{
}

void DefaultTreeComponentGeneratorBase::onCreate(const DefaultTreeComponentGenerator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DefaultTreeComponentGenerator *pThis = static_cast<DefaultTreeComponentGenerator *>(this);

        pThis->setExpandedDrawObjectPrototype(source->getExpandedDrawObjectPrototype());

        pThis->setNotExpandedDrawObjectPrototype(source->getNotExpandedDrawObjectPrototype());

        pThis->setLeafDrawObjectPrototype(source->getLeafDrawObjectPrototype());

        pThis->setNonLeafDrawObjectPrototype(source->getNonLeafDrawObjectPrototype());

        pThis->setExpandedNonLeafDrawObjectPrototype(source->getExpandedNonLeafDrawObjectPrototype());

        pThis->setNodeLabelPrototype(source->getNodeLabelPrototype());

        pThis->setNodePanelPrototype(source->getNodePanelPrototype());

        pThis->setSelectedBackground(source->getSelectedBackground());

        pThis->setNonSelectedBackground(source->getNonSelectedBackground());

        pThis->setSelectedForeground(source->getSelectedForeground());

        pThis->setNonSelectedForeground(source->getNonSelectedForeground());

        pThis->setSelectedBorder(source->getSelectedBorder());

        pThis->setFocusedBorder(source->getFocusedBorder());

        pThis->setFocusedBackground(source->getFocusedBackground());

        pThis->setFocusedForeground(source->getFocusedForeground());
    }
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleExpandedDrawObjectPrototype (void) const
{
    SFUnrecUIDrawObjectCanvasPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::GetHandle(
             &_sfExpandedDrawObjectPrototype,
             this->getType().getFieldDesc(ExpandedDrawObjectPrototypeFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleExpandedDrawObjectPrototype(void)
{
    SFUnrecUIDrawObjectCanvasPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::EditHandle(
             &_sfExpandedDrawObjectPrototype,
             this->getType().getFieldDesc(ExpandedDrawObjectPrototypeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setExpandedDrawObjectPrototype,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(ExpandedDrawObjectPrototypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleNotExpandedDrawObjectPrototype (void) const
{
    SFUnrecUIDrawObjectCanvasPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::GetHandle(
             &_sfNotExpandedDrawObjectPrototype,
             this->getType().getFieldDesc(NotExpandedDrawObjectPrototypeFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleNotExpandedDrawObjectPrototype(void)
{
    SFUnrecUIDrawObjectCanvasPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::EditHandle(
             &_sfNotExpandedDrawObjectPrototype,
             this->getType().getFieldDesc(NotExpandedDrawObjectPrototypeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setNotExpandedDrawObjectPrototype,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(NotExpandedDrawObjectPrototypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleLeafDrawObjectPrototype (void) const
{
    SFUnrecUIDrawObjectCanvasPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::GetHandle(
             &_sfLeafDrawObjectPrototype,
             this->getType().getFieldDesc(LeafDrawObjectPrototypeFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleLeafDrawObjectPrototype(void)
{
    SFUnrecUIDrawObjectCanvasPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::EditHandle(
             &_sfLeafDrawObjectPrototype,
             this->getType().getFieldDesc(LeafDrawObjectPrototypeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setLeafDrawObjectPrototype,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(LeafDrawObjectPrototypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleNonLeafDrawObjectPrototype (void) const
{
    SFUnrecUIDrawObjectCanvasPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::GetHandle(
             &_sfNonLeafDrawObjectPrototype,
             this->getType().getFieldDesc(NonLeafDrawObjectPrototypeFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleNonLeafDrawObjectPrototype(void)
{
    SFUnrecUIDrawObjectCanvasPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::EditHandle(
             &_sfNonLeafDrawObjectPrototype,
             this->getType().getFieldDesc(NonLeafDrawObjectPrototypeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setNonLeafDrawObjectPrototype,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(NonLeafDrawObjectPrototypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleExpandedNonLeafDrawObjectPrototype (void) const
{
    SFUnrecUIDrawObjectCanvasPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::GetHandle(
             &_sfExpandedNonLeafDrawObjectPrototype,
             this->getType().getFieldDesc(ExpandedNonLeafDrawObjectPrototypeFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleExpandedNonLeafDrawObjectPrototype(void)
{
    SFUnrecUIDrawObjectCanvasPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::EditHandle(
             &_sfExpandedNonLeafDrawObjectPrototype,
             this->getType().getFieldDesc(ExpandedNonLeafDrawObjectPrototypeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setExpandedNonLeafDrawObjectPrototype,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(ExpandedNonLeafDrawObjectPrototypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleNodeLabelPrototype (void) const
{
    SFUnrecLabelPtr::GetHandlePtr returnValue(
        new  SFUnrecLabelPtr::GetHandle(
             &_sfNodeLabelPrototype,
             this->getType().getFieldDesc(NodeLabelPrototypeFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleNodeLabelPrototype(void)
{
    SFUnrecLabelPtr::EditHandlePtr returnValue(
        new  SFUnrecLabelPtr::EditHandle(
             &_sfNodeLabelPrototype,
             this->getType().getFieldDesc(NodeLabelPrototypeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setNodeLabelPrototype,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(NodeLabelPrototypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleNodePanelPrototype (void) const
{
    SFUnrecPanelPtr::GetHandlePtr returnValue(
        new  SFUnrecPanelPtr::GetHandle(
             &_sfNodePanelPrototype,
             this->getType().getFieldDesc(NodePanelPrototypeFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleNodePanelPrototype(void)
{
    SFUnrecPanelPtr::EditHandlePtr returnValue(
        new  SFUnrecPanelPtr::EditHandle(
             &_sfNodePanelPrototype,
             this->getType().getFieldDesc(NodePanelPrototypeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setNodePanelPrototype,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(NodePanelPrototypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleSelectedBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfSelectedBackground,
             this->getType().getFieldDesc(SelectedBackgroundFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleSelectedBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfSelectedBackground,
             this->getType().getFieldDesc(SelectedBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setSelectedBackground,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(SelectedBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleNonSelectedBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfNonSelectedBackground,
             this->getType().getFieldDesc(NonSelectedBackgroundFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleNonSelectedBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfNonSelectedBackground,
             this->getType().getFieldDesc(NonSelectedBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setNonSelectedBackground,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(NonSelectedBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleSelectedForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfSelectedForeground,
             this->getType().getFieldDesc(SelectedForegroundFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleSelectedForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfSelectedForeground,
             this->getType().getFieldDesc(SelectedForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setSelectedForeground,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(SelectedForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleNonSelectedForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfNonSelectedForeground,
             this->getType().getFieldDesc(NonSelectedForegroundFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleNonSelectedForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfNonSelectedForeground,
             this->getType().getFieldDesc(NonSelectedForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setNonSelectedForeground,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(NonSelectedForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleSelectedBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfSelectedBorder,
             this->getType().getFieldDesc(SelectedBorderFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleSelectedBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfSelectedBorder,
             this->getType().getFieldDesc(SelectedBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setSelectedBorder,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(SelectedBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleSelectedTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfSelectedTextColor,
             this->getType().getFieldDesc(SelectedTextColorFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleSelectedTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfSelectedTextColor,
             this->getType().getFieldDesc(SelectedTextColorFieldId),
             this));


    editSField(SelectedTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleNonSelectedTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfNonSelectedTextColor,
             this->getType().getFieldDesc(NonSelectedTextColorFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleNonSelectedTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfNonSelectedTextColor,
             this->getType().getFieldDesc(NonSelectedTextColorFieldId),
             this));


    editSField(NonSelectedTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleFocusedBorder   (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleFocusedBorder  (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setFocusedBorder,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(FocusedBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleFocusedTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfFocusedTextColor,
             this->getType().getFieldDesc(FocusedTextColorFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleFocusedTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfFocusedTextColor,
             this->getType().getFieldDesc(FocusedTextColorFieldId),
             this));


    editSField(FocusedTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleFocusedBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleFocusedBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setFocusedBackground,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(FocusedBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultTreeComponentGeneratorBase::getHandleFocusedForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             const_cast<DefaultTreeComponentGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultTreeComponentGeneratorBase::editHandleFocusedForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultTreeComponentGenerator::setFocusedForeground,
                    static_cast<DefaultTreeComponentGenerator *>(this), _1));

    editSField(FocusedForegroundFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void DefaultTreeComponentGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DefaultTreeComponentGenerator *pThis = static_cast<DefaultTreeComponentGenerator *>(this);

    pThis->execSync(static_cast<DefaultTreeComponentGenerator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DefaultTreeComponentGeneratorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DefaultTreeComponentGenerator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DefaultTreeComponentGenerator *>(pRefAspect),
                  dynamic_cast<const DefaultTreeComponentGenerator *>(this));

    return returnValue;
}
#endif

void DefaultTreeComponentGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DefaultTreeComponentGenerator *>(this)->setExpandedDrawObjectPrototype(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setNotExpandedDrawObjectPrototype(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setLeafDrawObjectPrototype(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setNonLeafDrawObjectPrototype(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setExpandedNonLeafDrawObjectPrototype(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setNodeLabelPrototype(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setNodePanelPrototype(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setSelectedBackground(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setNonSelectedBackground(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setSelectedForeground(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setNonSelectedForeground(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setSelectedBorder(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setFocusedBorder(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setFocusedBackground(NULL);

    static_cast<DefaultTreeComponentGenerator *>(this)->setFocusedForeground(NULL);


}


OSG_END_NAMESPACE
