/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Tree!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TreeBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TreeBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TreeBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the Tree::_sfModel field.
inline
TreeModel * TreeBase::getModel(void) const
{
    return _sfModel.getValue();
}

//! Set the value of the Tree::_sfModel field.
inline
void TreeBase::setModel(TreeModel * const value)
{
    editSField(ModelFieldMask);

    _sfModel.setValue(value);
}
//! Get the value of the Tree::_sfEditable field.

inline
bool &TreeBase::editEditable(void)
{
    editSField(EditableFieldMask);

    return _sfEditable.getValue();
}

//! Get the value of the Tree::_sfEditable field.
inline
      bool  TreeBase::getEditable(void) const
{
    return _sfEditable.getValue();
}

//! Set the value of the Tree::_sfEditable field.
inline
void TreeBase::setEditable(const bool value)
{
    editSField(EditableFieldMask);

    _sfEditable.setValue(value);
}
//! Get the value of the Tree::_sfExpandsSelectedPaths field.

inline
bool &TreeBase::editExpandsSelectedPaths(void)
{
    editSField(ExpandsSelectedPathsFieldMask);

    return _sfExpandsSelectedPaths.getValue();
}

//! Get the value of the Tree::_sfExpandsSelectedPaths field.
inline
      bool  TreeBase::getExpandsSelectedPaths(void) const
{
    return _sfExpandsSelectedPaths.getValue();
}

//! Set the value of the Tree::_sfExpandsSelectedPaths field.
inline
void TreeBase::setExpandsSelectedPaths(const bool value)
{
    editSField(ExpandsSelectedPathsFieldMask);

    _sfExpandsSelectedPaths.setValue(value);
}
//! Get the value of the Tree::_sfInvokesStopCellEditing field.

inline
bool &TreeBase::editInvokesStopCellEditing(void)
{
    editSField(InvokesStopCellEditingFieldMask);

    return _sfInvokesStopCellEditing.getValue();
}

//! Get the value of the Tree::_sfInvokesStopCellEditing field.
inline
      bool  TreeBase::getInvokesStopCellEditing(void) const
{
    return _sfInvokesStopCellEditing.getValue();
}

//! Set the value of the Tree::_sfInvokesStopCellEditing field.
inline
void TreeBase::setInvokesStopCellEditing(const bool value)
{
    editSField(InvokesStopCellEditingFieldMask);

    _sfInvokesStopCellEditing.setValue(value);
}
//! Get the value of the Tree::_sfRowHeight field.

inline
UInt32 &TreeBase::editRowHeight(void)
{
    editSField(RowHeightFieldMask);

    return _sfRowHeight.getValue();
}

//! Get the value of the Tree::_sfRowHeight field.
inline
      UInt32  TreeBase::getRowHeight(void) const
{
    return _sfRowHeight.getValue();
}

//! Set the value of the Tree::_sfRowHeight field.
inline
void TreeBase::setRowHeight(const UInt32 value)
{
    editSField(RowHeightFieldMask);

    _sfRowHeight.setValue(value);
}
//! Get the value of the Tree::_sfScrollsOnExpand field.

inline
bool &TreeBase::editScrollsOnExpand(void)
{
    editSField(ScrollsOnExpandFieldMask);

    return _sfScrollsOnExpand.getValue();
}

//! Get the value of the Tree::_sfScrollsOnExpand field.
inline
      bool  TreeBase::getScrollsOnExpand(void) const
{
    return _sfScrollsOnExpand.getValue();
}

//! Set the value of the Tree::_sfScrollsOnExpand field.
inline
void TreeBase::setScrollsOnExpand(const bool value)
{
    editSField(ScrollsOnExpandFieldMask);

    _sfScrollsOnExpand.setValue(value);
}
//! Get the value of the Tree::_sfShowsRootHandles field.

inline
bool &TreeBase::editShowsRootHandles(void)
{
    editSField(ShowsRootHandlesFieldMask);

    return _sfShowsRootHandles.getValue();
}

//! Get the value of the Tree::_sfShowsRootHandles field.
inline
      bool  TreeBase::getShowsRootHandles(void) const
{
    return _sfShowsRootHandles.getValue();
}

//! Set the value of the Tree::_sfShowsRootHandles field.
inline
void TreeBase::setShowsRootHandles(const bool value)
{
    editSField(ShowsRootHandlesFieldMask);

    _sfShowsRootHandles.setValue(value);
}
//! Get the value of the Tree::_sfToggleClickCount field.

inline
UInt32 &TreeBase::editToggleClickCount(void)
{
    editSField(ToggleClickCountFieldMask);

    return _sfToggleClickCount.getValue();
}

//! Get the value of the Tree::_sfToggleClickCount field.
inline
      UInt32  TreeBase::getToggleClickCount(void) const
{
    return _sfToggleClickCount.getValue();
}

//! Set the value of the Tree::_sfToggleClickCount field.
inline
void TreeBase::setToggleClickCount(const UInt32 value)
{
    editSField(ToggleClickCountFieldMask);

    _sfToggleClickCount.setValue(value);
}
//! Get the value of the Tree::_sfVisibleRowCount field.

inline
UInt32 &TreeBase::editVisibleRowCount(void)
{
    editSField(VisibleRowCountFieldMask);

    return _sfVisibleRowCount.getValue();
}

//! Get the value of the Tree::_sfVisibleRowCount field.
inline
      UInt32  TreeBase::getVisibleRowCount(void) const
{
    return _sfVisibleRowCount.getValue();
}

//! Set the value of the Tree::_sfVisibleRowCount field.
inline
void TreeBase::setVisibleRowCount(const UInt32 value)
{
    editSField(VisibleRowCountFieldMask);

    _sfVisibleRowCount.setValue(value);
}

//! Get the value of the Tree::_sfCellEditor field.
inline
CellEditor * TreeBase::getCellEditor(void) const
{
    return _sfCellEditor.getValue();
}

//! Set the value of the Tree::_sfCellEditor field.
inline
void TreeBase::setCellEditor(CellEditor * const value)
{
    editSField(CellEditorFieldMask);

    _sfCellEditor.setValue(value);
}

//! Get the value of the Tree::_sfCellGenerator field.
inline
ComponentGenerator * TreeBase::getCellGenerator(void) const
{
    return _sfCellGenerator.getValue();
}

//! Set the value of the Tree::_sfCellGenerator field.
inline
void TreeBase::setCellGenerator(ComponentGenerator * const value)
{
    editSField(CellGeneratorFieldMask);

    _sfCellGenerator.setValue(value);
}

//! Get the value of the Tree::_sfModelLayout field.
inline
TreeModelLayout * TreeBase::getModelLayout(void) const
{
    return _sfModelLayout.getValue();
}

//! Set the value of the Tree::_sfModelLayout field.
inline
void TreeBase::setModelLayout(TreeModelLayout * const value)
{
    editSField(ModelLayoutFieldMask);

    _sfModelLayout.setValue(value);
}

//! Get the value of the Tree::_sfSelectionModel field.
inline
TreeSelectionModel * TreeBase::getSelectionModel(void) const
{
    return _sfSelectionModel.getValue();
}

//! Set the value of the Tree::_sfSelectionModel field.
inline
void TreeBase::setSelectionModel(TreeSelectionModel * const value)
{
    editSField(SelectionModelFieldMask);

    _sfSelectionModel.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TreeBase::execSync (      TreeBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ModelFieldMask & whichField))
        _sfModel.syncWith(pFrom->_sfModel);

    if(FieldBits::NoField != (EditableFieldMask & whichField))
        _sfEditable.syncWith(pFrom->_sfEditable);

    if(FieldBits::NoField != (ExpandsSelectedPathsFieldMask & whichField))
        _sfExpandsSelectedPaths.syncWith(pFrom->_sfExpandsSelectedPaths);

    if(FieldBits::NoField != (InvokesStopCellEditingFieldMask & whichField))
        _sfInvokesStopCellEditing.syncWith(pFrom->_sfInvokesStopCellEditing);

    if(FieldBits::NoField != (RowHeightFieldMask & whichField))
        _sfRowHeight.syncWith(pFrom->_sfRowHeight);

    if(FieldBits::NoField != (ScrollsOnExpandFieldMask & whichField))
        _sfScrollsOnExpand.syncWith(pFrom->_sfScrollsOnExpand);

    if(FieldBits::NoField != (ShowsRootHandlesFieldMask & whichField))
        _sfShowsRootHandles.syncWith(pFrom->_sfShowsRootHandles);

    if(FieldBits::NoField != (ToggleClickCountFieldMask & whichField))
        _sfToggleClickCount.syncWith(pFrom->_sfToggleClickCount);

    if(FieldBits::NoField != (VisibleRowCountFieldMask & whichField))
        _sfVisibleRowCount.syncWith(pFrom->_sfVisibleRowCount);

    if(FieldBits::NoField != (CellEditorFieldMask & whichField))
        _sfCellEditor.syncWith(pFrom->_sfCellEditor);

    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
        _sfCellGenerator.syncWith(pFrom->_sfCellGenerator);

    if(FieldBits::NoField != (ModelLayoutFieldMask & whichField))
        _sfModelLayout.syncWith(pFrom->_sfModelLayout);

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
        _sfSelectionModel.syncWith(pFrom->_sfSelectionModel);
}
#endif


inline
const Char8 *TreeBase::getClassname(void)
{
    return "Tree";
}
OSG_GEN_CONTAINERPTR(Tree);

OSG_END_NAMESPACE

