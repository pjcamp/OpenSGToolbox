/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TreeSelectionModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGTreeSelectionEventDetails.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TreeSelectionModelBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TreeSelectionModelBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &TreeSelectionModelBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 TreeSelectionModelBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 TreeSelectionModelBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/



#ifdef OSG_MT_CPTR_ASPECT
inline
void TreeSelectionModelBase::execSync (      TreeSelectionModelBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);
}
#endif


inline
const Char8 *TreeSelectionModelBase::getClassname(void)
{
    return "TreeSelectionModel";
}

inline
boost::signals2::connection TreeSelectionModelBase::attachActivity(UInt32 eventId,
                                                              Activity* TheActivity)
{
    return connectEvent(eventId, boost::bind(&Activity::eventProduced, TheActivity, _1, _2) );
}

inline
UInt32 TreeSelectionModelBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *TreeSelectionModelBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *TreeSelectionModelBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 TreeSelectionModelBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  TreeSelectionModelBase::connectSelectionAdded(const SelectionAddedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SelectionAddedEvent.connect(listener, at);
}

inline
boost::signals2::connection  TreeSelectionModelBase::connectSelectionAdded(const SelectionAddedEventType::group_type &group,
                                                    const SelectionAddedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SelectionAddedEvent.connect(group, listener, at);
}

inline
void  TreeSelectionModelBase::disconnectSelectionAdded(const SelectionAddedEventType::group_type &group)
{
    _SelectionAddedEvent.disconnect(group);
}

inline
void  TreeSelectionModelBase::disconnectAllSlotsSelectionAdded(void)
{
    _SelectionAddedEvent.disconnect_all_slots();
}

inline
bool  TreeSelectionModelBase::isEmptySelectionAdded(void) const
{
    return _SelectionAddedEvent.empty();
}

inline
UInt32  TreeSelectionModelBase::numSlotsSelectionAdded(void) const
{
    return _SelectionAddedEvent.num_slots();
}

inline
void TreeSelectionModelBase::produceSelectionAdded(SelectionAddedEventDetailsType* const e)
{
    produceEvent(SelectionAddedEventId, e);
}

inline
boost::signals2::connection  TreeSelectionModelBase::connectSelectionRemoved(const SelectionRemovedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SelectionRemovedEvent.connect(listener, at);
}

inline
boost::signals2::connection  TreeSelectionModelBase::connectSelectionRemoved(const SelectionRemovedEventType::group_type &group,
                                                    const SelectionRemovedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SelectionRemovedEvent.connect(group, listener, at);
}

inline
void  TreeSelectionModelBase::disconnectSelectionRemoved(const SelectionRemovedEventType::group_type &group)
{
    _SelectionRemovedEvent.disconnect(group);
}

inline
void  TreeSelectionModelBase::disconnectAllSlotsSelectionRemoved(void)
{
    _SelectionRemovedEvent.disconnect_all_slots();
}

inline
bool  TreeSelectionModelBase::isEmptySelectionRemoved(void) const
{
    return _SelectionRemovedEvent.empty();
}

inline
UInt32  TreeSelectionModelBase::numSlotsSelectionRemoved(void) const
{
    return _SelectionRemovedEvent.num_slots();
}

inline
void TreeSelectionModelBase::produceSelectionRemoved(SelectionRemovedEventDetailsType* const e)
{
    produceEvent(SelectionRemovedEventId, e);
}

OSG_GEN_CONTAINERPTR(TreeSelectionModel);

OSG_END_NAMESPACE

