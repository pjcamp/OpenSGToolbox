/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TreeSelectionEventDetails!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"





#include "OSGTreeSelectionEventDetailsBase.h"
#include "OSGTreeSelectionEventDetails.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TreeSelectionEventDetails
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Int32           TreeSelectionEventDetailsBase::_sfNewLeadSelectionPath
    
*/

/*! \var Int32           TreeSelectionEventDetailsBase::_sfOldLeadSelectionPath
    
*/

/*! \var Vec2s           TreeSelectionEventDetailsBase::_mfElementsChanged
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TreeSelectionEventDetails *>::_type("TreeSelectionEventDetailsPtr", "EventDetailsPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TreeSelectionEventDetails *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TreeSelectionEventDetails *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TreeSelectionEventDetails *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TreeSelectionEventDetailsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "NewLeadSelectionPath",
        "",
        NewLeadSelectionPathFieldId, NewLeadSelectionPathFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TreeSelectionEventDetails::editHandleNewLeadSelectionPath),
        static_cast<FieldGetMethodSig >(&TreeSelectionEventDetails::getHandleNewLeadSelectionPath));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "OldLeadSelectionPath",
        "",
        OldLeadSelectionPathFieldId, OldLeadSelectionPathFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TreeSelectionEventDetails::editHandleOldLeadSelectionPath),
        static_cast<FieldGetMethodSig >(&TreeSelectionEventDetails::getHandleOldLeadSelectionPath));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2s::Description(
        MFVec2s::getClassType(),
        "ElementsChanged",
        "",
        ElementsChangedFieldId, ElementsChangedFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TreeSelectionEventDetails::editHandleElementsChanged),
        static_cast<FieldGetMethodSig >(&TreeSelectionEventDetails::getHandleElementsChanged));

    oType.addInitialDesc(pDesc);
}


TreeSelectionEventDetailsBase::TypeObject TreeSelectionEventDetailsBase::_type(
    TreeSelectionEventDetailsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&TreeSelectionEventDetailsBase::createEmptyLocal),
    TreeSelectionEventDetails::initMethod,
    TreeSelectionEventDetails::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TreeSelectionEventDetails::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TreeSelectionEventDetails\"\n"
    "\tparent=\"EventDetails\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"NewLeadSelectionPath\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"-1\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"OldLeadSelectionPath\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"-1\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ElementsChanged\"\n"
    "\t\ttype=\"Vec2s\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TreeSelectionEventDetailsBase::getType(void)
{
    return _type;
}

const FieldContainerType &TreeSelectionEventDetailsBase::getType(void) const
{
    return _type;
}

UInt32 TreeSelectionEventDetailsBase::getContainerSize(void) const
{
    return sizeof(TreeSelectionEventDetails);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *TreeSelectionEventDetailsBase::editSFNewLeadSelectionPath(void)
{
    editSField(NewLeadSelectionPathFieldMask);

    return &_sfNewLeadSelectionPath;
}

const SFInt32 *TreeSelectionEventDetailsBase::getSFNewLeadSelectionPath(void) const
{
    return &_sfNewLeadSelectionPath;
}


SFInt32 *TreeSelectionEventDetailsBase::editSFOldLeadSelectionPath(void)
{
    editSField(OldLeadSelectionPathFieldMask);

    return &_sfOldLeadSelectionPath;
}

const SFInt32 *TreeSelectionEventDetailsBase::getSFOldLeadSelectionPath(void) const
{
    return &_sfOldLeadSelectionPath;
}


MFVec2s *TreeSelectionEventDetailsBase::editMFElementsChanged(void)
{
    editMField(ElementsChangedFieldMask, _mfElementsChanged);

    return &_mfElementsChanged;
}

const MFVec2s *TreeSelectionEventDetailsBase::getMFElementsChanged(void) const
{
    return &_mfElementsChanged;
}






/*------------------------------ access -----------------------------------*/

UInt32 TreeSelectionEventDetailsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (NewLeadSelectionPathFieldMask & whichField))
    {
        returnValue += _sfNewLeadSelectionPath.getBinSize();
    }
    if(FieldBits::NoField != (OldLeadSelectionPathFieldMask & whichField))
    {
        returnValue += _sfOldLeadSelectionPath.getBinSize();
    }
    if(FieldBits::NoField != (ElementsChangedFieldMask & whichField))
    {
        returnValue += _mfElementsChanged.getBinSize();
    }

    return returnValue;
}

void TreeSelectionEventDetailsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (NewLeadSelectionPathFieldMask & whichField))
    {
        _sfNewLeadSelectionPath.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OldLeadSelectionPathFieldMask & whichField))
    {
        _sfOldLeadSelectionPath.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ElementsChangedFieldMask & whichField))
    {
        _mfElementsChanged.copyToBin(pMem);
    }
}

void TreeSelectionEventDetailsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (NewLeadSelectionPathFieldMask & whichField))
    {
        _sfNewLeadSelectionPath.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OldLeadSelectionPathFieldMask & whichField))
    {
        _sfOldLeadSelectionPath.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ElementsChangedFieldMask & whichField))
    {
        _mfElementsChanged.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TreeSelectionEventDetailsTransitPtr TreeSelectionEventDetailsBase::createLocal(BitVector bFlags)
{
    TreeSelectionEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TreeSelectionEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TreeSelectionEventDetailsTransitPtr TreeSelectionEventDetailsBase::createDependent(BitVector bFlags)
{
    TreeSelectionEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TreeSelectionEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TreeSelectionEventDetailsTransitPtr TreeSelectionEventDetailsBase::create(void)
{
    TreeSelectionEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TreeSelectionEventDetails>(tmpPtr);
    }

    return fc;
}

TreeSelectionEventDetails *TreeSelectionEventDetailsBase::createEmptyLocal(BitVector bFlags)
{
    TreeSelectionEventDetails *returnValue;

    newPtr<TreeSelectionEventDetails>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TreeSelectionEventDetails *TreeSelectionEventDetailsBase::createEmpty(void)
{
    TreeSelectionEventDetails *returnValue;

    newPtr<TreeSelectionEventDetails>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TreeSelectionEventDetailsBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TreeSelectionEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TreeSelectionEventDetails *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TreeSelectionEventDetailsBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TreeSelectionEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TreeSelectionEventDetails *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TreeSelectionEventDetailsBase::shallowCopy(void) const
{
    TreeSelectionEventDetails *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TreeSelectionEventDetails *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TreeSelectionEventDetailsBase::TreeSelectionEventDetailsBase(void) :
    Inherited(),
    _sfNewLeadSelectionPath   (Int32(-1)),
    _sfOldLeadSelectionPath   (Int32(-1)),
    _mfElementsChanged        ()
{
}

TreeSelectionEventDetailsBase::TreeSelectionEventDetailsBase(const TreeSelectionEventDetailsBase &source) :
    Inherited(source),
    _sfNewLeadSelectionPath   (source._sfNewLeadSelectionPath   ),
    _sfOldLeadSelectionPath   (source._sfOldLeadSelectionPath   ),
    _mfElementsChanged        (source._mfElementsChanged        )
{
}


/*-------------------------- destructors ----------------------------------*/

TreeSelectionEventDetailsBase::~TreeSelectionEventDetailsBase(void)
{
}


GetFieldHandlePtr TreeSelectionEventDetailsBase::getHandleNewLeadSelectionPath (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfNewLeadSelectionPath,
             this->getType().getFieldDesc(NewLeadSelectionPathFieldId),
             const_cast<TreeSelectionEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TreeSelectionEventDetailsBase::editHandleNewLeadSelectionPath(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfNewLeadSelectionPath,
             this->getType().getFieldDesc(NewLeadSelectionPathFieldId),
             this));


    editSField(NewLeadSelectionPathFieldMask);

    return returnValue;
}

GetFieldHandlePtr TreeSelectionEventDetailsBase::getHandleOldLeadSelectionPath (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfOldLeadSelectionPath,
             this->getType().getFieldDesc(OldLeadSelectionPathFieldId),
             const_cast<TreeSelectionEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TreeSelectionEventDetailsBase::editHandleOldLeadSelectionPath(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfOldLeadSelectionPath,
             this->getType().getFieldDesc(OldLeadSelectionPathFieldId),
             this));


    editSField(OldLeadSelectionPathFieldMask);

    return returnValue;
}

GetFieldHandlePtr TreeSelectionEventDetailsBase::getHandleElementsChanged (void) const
{
    MFVec2s::GetHandlePtr returnValue(
        new  MFVec2s::GetHandle(
             &_mfElementsChanged,
             this->getType().getFieldDesc(ElementsChangedFieldId),
             const_cast<TreeSelectionEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TreeSelectionEventDetailsBase::editHandleElementsChanged(void)
{
    MFVec2s::EditHandlePtr returnValue(
        new  MFVec2s::EditHandle(
             &_mfElementsChanged,
             this->getType().getFieldDesc(ElementsChangedFieldId),
             this));


    editMField(ElementsChangedFieldMask, _mfElementsChanged);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TreeSelectionEventDetailsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TreeSelectionEventDetails *pThis = static_cast<TreeSelectionEventDetails *>(this);

    pThis->execSync(static_cast<TreeSelectionEventDetails *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TreeSelectionEventDetailsBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TreeSelectionEventDetails *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TreeSelectionEventDetails *>(pRefAspect),
                  dynamic_cast<const TreeSelectionEventDetails *>(this));

    return returnValue;
}
#endif

void TreeSelectionEventDetailsBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfElementsChanged.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
