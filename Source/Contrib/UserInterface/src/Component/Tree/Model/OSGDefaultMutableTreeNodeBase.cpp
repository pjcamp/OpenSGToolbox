/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DefaultMutableTreeNode!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGMutableTreeNode.h"         // ChildrenInternal Class

#include "OSGDefaultMutableTreeNodeBase.h"
#include "OSGDefaultMutableTreeNode.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DefaultMutableTreeNode
    A UI Default Mutable Tree Node.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            DefaultMutableTreeNodeBase::_sfAllowsChildrenInternal
    
*/

/*! \var MutableTreeNode * DefaultMutableTreeNodeBase::_mfChildrenInternal
    
*/

/*! \var MutableTreeNode * DefaultMutableTreeNodeBase::_sfParentInternal
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DefaultMutableTreeNode *>::_type("DefaultMutableTreeNodePtr", "MutableTreeNodePtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DefaultMutableTreeNode *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DefaultMutableTreeNode *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DefaultMutableTreeNode *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DefaultMutableTreeNodeBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "AllowsChildrenInternal",
        "",
        AllowsChildrenInternalFieldId, AllowsChildrenInternalFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultMutableTreeNode::editHandleAllowsChildrenInternal),
        static_cast<FieldGetMethodSig >(&DefaultMutableTreeNode::getHandleAllowsChildrenInternal));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecMutableTreeNodePtr::Description(
        MFUnrecMutableTreeNodePtr::getClassType(),
        "ChildrenInternal",
        "",
        ChildrenInternalFieldId, ChildrenInternalFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultMutableTreeNode::editHandleChildrenInternal),
        static_cast<FieldGetMethodSig >(&DefaultMutableTreeNode::getHandleChildrenInternal));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakMutableTreeNodePtr::Description(
        SFWeakMutableTreeNodePtr::getClassType(),
        "ParentInternal",
        "",
        ParentInternalFieldId, ParentInternalFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DefaultMutableTreeNode::editHandleParentInternal),
        static_cast<FieldGetMethodSig >(&DefaultMutableTreeNode::getHandleParentInternal));

    oType.addInitialDesc(pDesc);
}


DefaultMutableTreeNodeBase::TypeObject DefaultMutableTreeNodeBase::_type(
    DefaultMutableTreeNodeBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&DefaultMutableTreeNodeBase::createEmptyLocal),
    DefaultMutableTreeNode::initMethod,
    DefaultMutableTreeNode::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DefaultMutableTreeNode::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DefaultMutableTreeNode\"\n"
    "\tparent=\"MutableTreeNode\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Default Mutable Tree Node.\n"
    "\t<Field\n"
    "\t\tname=\"AllowsChildrenInternal\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ChildrenInternal\"\n"
    "\t\ttype=\"MutableTreeNode\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ParentInternal\"\n"
    "\t\ttype=\"MutableTreeNode\"\n"
    "        category=\"weakpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Default Mutable Tree Node.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DefaultMutableTreeNodeBase::getType(void)
{
    return _type;
}

const FieldContainerType &DefaultMutableTreeNodeBase::getType(void) const
{
    return _type;
}

UInt32 DefaultMutableTreeNodeBase::getContainerSize(void) const
{
    return sizeof(DefaultMutableTreeNode);
}

/*------------------------- decorator get ------------------------------*/


SFBool *DefaultMutableTreeNodeBase::editSFAllowsChildrenInternal(void)
{
    editSField(AllowsChildrenInternalFieldMask);

    return &_sfAllowsChildrenInternal;
}

const SFBool *DefaultMutableTreeNodeBase::getSFAllowsChildrenInternal(void) const
{
    return &_sfAllowsChildrenInternal;
}


//! Get the DefaultMutableTreeNode::_mfChildrenInternal field.
const MFUnrecMutableTreeNodePtr *DefaultMutableTreeNodeBase::getMFChildrenInternal(void) const
{
    return &_mfChildrenInternal;
}

MFUnrecMutableTreeNodePtr *DefaultMutableTreeNodeBase::editMFChildrenInternal(void)
{
    editMField(ChildrenInternalFieldMask, _mfChildrenInternal);

    return &_mfChildrenInternal;
}

//! Get the DefaultMutableTreeNode::_sfParentInternal field.
const SFWeakMutableTreeNodePtr *DefaultMutableTreeNodeBase::getSFParentInternal(void) const
{
    return &_sfParentInternal;
}

SFWeakMutableTreeNodePtr *DefaultMutableTreeNodeBase::editSFParentInternal (void)
{
    editSField(ParentInternalFieldMask);

    return &_sfParentInternal;
}



void DefaultMutableTreeNodeBase::pushToChildrenInternal(MutableTreeNode * const value)
{
    editMField(ChildrenInternalFieldMask, _mfChildrenInternal);

    _mfChildrenInternal.push_back(value);
}

void DefaultMutableTreeNodeBase::assignChildrenInternal(const MFUnrecMutableTreeNodePtr &value)
{
    MFUnrecMutableTreeNodePtr::const_iterator elemIt  =
        value.begin();
    MFUnrecMutableTreeNodePtr::const_iterator elemEnd =
        value.end  ();

    static_cast<DefaultMutableTreeNode *>(this)->clearChildrenInternal();

    while(elemIt != elemEnd)
    {
        this->pushToChildrenInternal(*elemIt);

        ++elemIt;
    }
}

void DefaultMutableTreeNodeBase::removeFromChildrenInternal(UInt32 uiIndex)
{
    if(uiIndex < _mfChildrenInternal.size())
    {
        editMField(ChildrenInternalFieldMask, _mfChildrenInternal);

        _mfChildrenInternal.erase(uiIndex);
    }
}

void DefaultMutableTreeNodeBase::removeObjFromChildrenInternal(MutableTreeNode * const value)
{
    Int32 iElemIdx = _mfChildrenInternal.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ChildrenInternalFieldMask, _mfChildrenInternal);

        _mfChildrenInternal.erase(iElemIdx);
    }
}
void DefaultMutableTreeNodeBase::clearChildrenInternal(void)
{
    editMField(ChildrenInternalFieldMask, _mfChildrenInternal);


    _mfChildrenInternal.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 DefaultMutableTreeNodeBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AllowsChildrenInternalFieldMask & whichField))
    {
        returnValue += _sfAllowsChildrenInternal.getBinSize();
    }
    if(FieldBits::NoField != (ChildrenInternalFieldMask & whichField))
    {
        returnValue += _mfChildrenInternal.getBinSize();
    }
    if(FieldBits::NoField != (ParentInternalFieldMask & whichField))
    {
        returnValue += _sfParentInternal.getBinSize();
    }

    return returnValue;
}

void DefaultMutableTreeNodeBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AllowsChildrenInternalFieldMask & whichField))
    {
        _sfAllowsChildrenInternal.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ChildrenInternalFieldMask & whichField))
    {
        _mfChildrenInternal.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentInternalFieldMask & whichField))
    {
        _sfParentInternal.copyToBin(pMem);
    }
}

void DefaultMutableTreeNodeBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AllowsChildrenInternalFieldMask & whichField))
    {
        _sfAllowsChildrenInternal.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ChildrenInternalFieldMask & whichField))
    {
        _mfChildrenInternal.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentInternalFieldMask & whichField))
    {
        _sfParentInternal.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DefaultMutableTreeNodeTransitPtr DefaultMutableTreeNodeBase::createLocal(BitVector bFlags)
{
    DefaultMutableTreeNodeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DefaultMutableTreeNode>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DefaultMutableTreeNodeTransitPtr DefaultMutableTreeNodeBase::createDependent(BitVector bFlags)
{
    DefaultMutableTreeNodeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DefaultMutableTreeNode>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DefaultMutableTreeNodeTransitPtr DefaultMutableTreeNodeBase::create(void)
{
    DefaultMutableTreeNodeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DefaultMutableTreeNode>(tmpPtr);
    }

    return fc;
}

DefaultMutableTreeNode *DefaultMutableTreeNodeBase::createEmptyLocal(BitVector bFlags)
{
    DefaultMutableTreeNode *returnValue;

    newPtr<DefaultMutableTreeNode>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DefaultMutableTreeNode *DefaultMutableTreeNodeBase::createEmpty(void)
{
    DefaultMutableTreeNode *returnValue;

    newPtr<DefaultMutableTreeNode>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DefaultMutableTreeNodeBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DefaultMutableTreeNode *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DefaultMutableTreeNode *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DefaultMutableTreeNodeBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DefaultMutableTreeNode *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DefaultMutableTreeNode *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DefaultMutableTreeNodeBase::shallowCopy(void) const
{
    DefaultMutableTreeNode *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DefaultMutableTreeNode *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

DefaultMutableTreeNodeBase::DefaultMutableTreeNodeBase(void) :
    Inherited(),
    _sfAllowsChildrenInternal (bool(true)),
    _mfChildrenInternal       (),
    _sfParentInternal         (NULL)
{
}

DefaultMutableTreeNodeBase::DefaultMutableTreeNodeBase(const DefaultMutableTreeNodeBase &source) :
    Inherited(source),
    _sfAllowsChildrenInternal (source._sfAllowsChildrenInternal ),
    _mfChildrenInternal       (),
    _sfParentInternal         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

DefaultMutableTreeNodeBase::~DefaultMutableTreeNodeBase(void)
{
}

void DefaultMutableTreeNodeBase::onCreate(const DefaultMutableTreeNode *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DefaultMutableTreeNode *pThis = static_cast<DefaultMutableTreeNode *>(this);

        MFUnrecMutableTreeNodePtr::const_iterator ChildrenInternalIt  =
            source->_mfChildrenInternal.begin();
        MFUnrecMutableTreeNodePtr::const_iterator ChildrenInternalEnd =
            source->_mfChildrenInternal.end  ();

        while(ChildrenInternalIt != ChildrenInternalEnd)
        {
            pThis->pushToChildrenInternal(*ChildrenInternalIt);

            ++ChildrenInternalIt;
        }

        pThis->setParentInternal(source->getParentInternal());
    }
}

GetFieldHandlePtr DefaultMutableTreeNodeBase::getHandleAllowsChildrenInternal (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAllowsChildrenInternal,
             this->getType().getFieldDesc(AllowsChildrenInternalFieldId),
             const_cast<DefaultMutableTreeNodeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultMutableTreeNodeBase::editHandleAllowsChildrenInternal(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAllowsChildrenInternal,
             this->getType().getFieldDesc(AllowsChildrenInternalFieldId),
             this));


    editSField(AllowsChildrenInternalFieldMask);

    return returnValue;
}

GetFieldHandlePtr DefaultMutableTreeNodeBase::getHandleChildrenInternal (void) const
{
    MFUnrecMutableTreeNodePtr::GetHandlePtr returnValue(
        new  MFUnrecMutableTreeNodePtr::GetHandle(
             &_mfChildrenInternal,
             this->getType().getFieldDesc(ChildrenInternalFieldId),
             const_cast<DefaultMutableTreeNodeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultMutableTreeNodeBase::editHandleChildrenInternal(void)
{
    MFUnrecMutableTreeNodePtr::EditHandlePtr returnValue(
        new  MFUnrecMutableTreeNodePtr::EditHandle(
             &_mfChildrenInternal,
             this->getType().getFieldDesc(ChildrenInternalFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&DefaultMutableTreeNode::pushToChildrenInternal,
                    static_cast<DefaultMutableTreeNode *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&DefaultMutableTreeNode::removeFromChildrenInternal,
                    static_cast<DefaultMutableTreeNode *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&DefaultMutableTreeNode::removeObjFromChildrenInternal,
                    static_cast<DefaultMutableTreeNode *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&DefaultMutableTreeNode::clearChildrenInternal,
                    static_cast<DefaultMutableTreeNode *>(this)));

    editMField(ChildrenInternalFieldMask, _mfChildrenInternal);

    return returnValue;
}

GetFieldHandlePtr DefaultMutableTreeNodeBase::getHandleParentInternal  (void) const
{
    SFWeakMutableTreeNodePtr::GetHandlePtr returnValue(
        new  SFWeakMutableTreeNodePtr::GetHandle(
             &_sfParentInternal,
             this->getType().getFieldDesc(ParentInternalFieldId),
             const_cast<DefaultMutableTreeNodeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DefaultMutableTreeNodeBase::editHandleParentInternal (void)
{
    SFWeakMutableTreeNodePtr::EditHandlePtr returnValue(
        new  SFWeakMutableTreeNodePtr::EditHandle(
             &_sfParentInternal,
             this->getType().getFieldDesc(ParentInternalFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DefaultMutableTreeNode::setParentInternal,
                    static_cast<DefaultMutableTreeNode *>(this), _1));

    editSField(ParentInternalFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void DefaultMutableTreeNodeBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DefaultMutableTreeNode *pThis = static_cast<DefaultMutableTreeNode *>(this);

    pThis->execSync(static_cast<DefaultMutableTreeNode *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DefaultMutableTreeNodeBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DefaultMutableTreeNode *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DefaultMutableTreeNode *>(pRefAspect),
                  dynamic_cast<const DefaultMutableTreeNode *>(this));

    return returnValue;
}
#endif

void DefaultMutableTreeNodeBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DefaultMutableTreeNode *>(this)->clearChildrenInternal();

    static_cast<DefaultMutableTreeNode *>(this)->setParentInternal(NULL);


}


OSG_END_NAMESPACE
