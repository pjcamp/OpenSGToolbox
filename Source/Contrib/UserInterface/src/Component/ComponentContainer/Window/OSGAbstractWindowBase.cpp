/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AbstractWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // ParentDrawingSurface Class
#include "OSGUIDrawObjectCanvas.h"      // DesktopIcon Class

#include "OSGAbstractWindowBase.h"
#include "OSGAbstractWindow.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AbstractWindow
    A UI Abstract Window.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * AbstractWindowBase::_sfParentDrawingSurface
    The DrawingSurface this Window is contained in.
*/

/*! \var bool            AbstractWindowBase::_sfClosable
    
*/

/*! \var bool            AbstractWindowBase::_sfIconable
    
*/

/*! \var bool            AbstractWindowBase::_sfMaximizable
    
*/

/*! \var bool            AbstractWindowBase::_sfIsClosed
    
*/

/*! \var bool            AbstractWindowBase::_sfIsIcon
    
*/

/*! \var bool            AbstractWindowBase::_sfIsMaximized
    
*/

/*! \var bool            AbstractWindowBase::_sfResizable
    
*/

/*! \var bool            AbstractWindowBase::_sfIsSelected
    
*/

/*! \var std::string     AbstractWindowBase::_sfTitle
    
*/

/*! \var UIDrawObjectCanvas * AbstractWindowBase::_sfDesktopIcon
    
*/

/*! \var bool            AbstractWindowBase::_sfModal
    
*/

/*! \var bool            AbstractWindowBase::_sfAllwaysOnTop
    
*/

/*! \var bool            AbstractWindowBase::_sfDrawTitlebar
    
*/

/*! \var bool            AbstractWindowBase::_sfDrawDecorations
    
*/

/*! \var bool            AbstractWindowBase::_sfLockInput
    
*/

/*! \var Vec2f           AbstractWindowBase::_sfAlignmentInDrawingSurface
    
*/

/*! \var Vec2f           AbstractWindowBase::_sfScalingInDrawingSurface
    
*/

/*! \var UInt32          AbstractWindowBase::_sfResizeModifyCursorWidth
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AbstractWindow *>::_type("AbstractWindowPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AbstractWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AbstractWindow *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AbstractWindow *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AbstractWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentDrawingSurface",
        "The DrawingSurface this Window is contained in.\n",
        ParentDrawingSurfaceFieldId, ParentDrawingSurfaceFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&AbstractWindow::invalidEditField),
        static_cast     <FieldGetMethodSig >(&AbstractWindow::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Closable",
        "",
        ClosableFieldId, ClosableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleClosable),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleClosable));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Iconable",
        "",
        IconableFieldId, IconableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleIconable),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleIconable));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Maximizable",
        "",
        MaximizableFieldId, MaximizableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleMaximizable),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleMaximizable));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "IsClosed",
        "",
        IsClosedFieldId, IsClosedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleIsClosed),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleIsClosed));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "IsIcon",
        "",
        IsIconFieldId, IsIconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleIsIcon),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleIsIcon));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "IsMaximized",
        "",
        IsMaximizedFieldId, IsMaximizedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleIsMaximized),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleIsMaximized));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Resizable",
        "",
        ResizableFieldId, ResizableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleResizable),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleResizable));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "IsSelected",
        "",
        IsSelectedFieldId, IsSelectedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleIsSelected),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleIsSelected));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "Title",
        "",
        TitleFieldId, TitleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleTitle),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleTitle));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIDrawObjectCanvasPtr::Description(
        SFUnrecUIDrawObjectCanvasPtr::getClassType(),
        "DesktopIcon",
        "",
        DesktopIconFieldId, DesktopIconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleDesktopIcon),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleDesktopIcon));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Modal",
        "",
        ModalFieldId, ModalFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleModal),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleModal));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "AllwaysOnTop",
        "",
        AllwaysOnTopFieldId, AllwaysOnTopFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleAllwaysOnTop),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleAllwaysOnTop));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "DrawTitlebar",
        "",
        DrawTitlebarFieldId, DrawTitlebarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleDrawTitlebar),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleDrawTitlebar));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "DrawDecorations",
        "",
        DrawDecorationsFieldId, DrawDecorationsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleDrawDecorations),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleDrawDecorations));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "LockInput",
        "",
        LockInputFieldId, LockInputFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleLockInput),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleLockInput));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "AlignmentInDrawingSurface",
        "",
        AlignmentInDrawingSurfaceFieldId, AlignmentInDrawingSurfaceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleAlignmentInDrawingSurface),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleAlignmentInDrawingSurface));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "ScalingInDrawingSurface",
        "",
        ScalingInDrawingSurfaceFieldId, ScalingInDrawingSurfaceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleScalingInDrawingSurface),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleScalingInDrawingSurface));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "ResizeModifyCursorWidth",
        "",
        ResizeModifyCursorWidthFieldId, ResizeModifyCursorWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractWindow::editHandleResizeModifyCursorWidth),
        static_cast<FieldGetMethodSig >(&AbstractWindow::getHandleResizeModifyCursorWidth));

    oType.addInitialDesc(pDesc);
}


AbstractWindowBase::TypeObject AbstractWindowBase::_type(
    AbstractWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    AbstractWindow::initMethod,
    AbstractWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AbstractWindow::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"AbstractWindow\"\n"
    "    parent=\"ComponentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    parentProducer=\"Component\"\n"
    "    >\n"
    "    A UI Abstract Window.\n"
    "\t<Field\n"
    "\t   name=\"ParentDrawingSurface\"\n"
    "\t   type=\"FieldContainer\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"internal\"\n"
    "\t   access=\"none\"\n"
    "       doRefCount=\"false\"\n"
    "       passFieldMask=\"true\"\n"
    "       category=\"parentpointer\"\n"
    "\t   >\n"
    "\t  The DrawingSurface this Window is contained in.\n"
    "\t</Field>\n"
    "    <Field\n"
    "        name=\"Closable\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Iconable\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Maximizable\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"IsClosed\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"IsIcon\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"IsMaximized\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Resizable\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"IsSelected\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Title\"\n"
    "        type=\"std::string\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DesktopIcon\"\n"
    "        type=\"UIDrawObjectCanvas\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Modal\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"AllwaysOnTop\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DrawTitlebar\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DrawDecorations\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"LockInput\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"AlignmentInDrawingSurface\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"-1.0,-1.0\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ScalingInDrawingSurface\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"-1.0,-1.0\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ResizeModifyCursorWidth\"\n"
    "        type=\"UInt32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"3\"\n"
    "        >\n"
    "    </Field>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowOpened\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowClosing\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowClosed\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowIconified\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowDeiconified\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowActivated\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowDeactivated\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowEntered\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowExited\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI Abstract Window.\n"
    );

//! AbstractWindow Produced Events

EventDescription *AbstractWindowBase::_eventDesc[] =
{
    new EventDescription("WindowOpened", 
                          "",
                          WindowOpenedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowOpenedSignal)),

    new EventDescription("WindowClosing", 
                          "",
                          WindowClosingEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowClosingSignal)),

    new EventDescription("WindowClosed", 
                          "",
                          WindowClosedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowClosedSignal)),

    new EventDescription("WindowIconified", 
                          "",
                          WindowIconifiedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowIconifiedSignal)),

    new EventDescription("WindowDeiconified", 
                          "",
                          WindowDeiconifiedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowDeiconifiedSignal)),

    new EventDescription("WindowActivated", 
                          "",
                          WindowActivatedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowActivatedSignal)),

    new EventDescription("WindowDeactivated", 
                          "",
                          WindowDeactivatedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowDeactivatedSignal)),

    new EventDescription("WindowEntered", 
                          "",
                          WindowEnteredEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowEnteredSignal)),

    new EventDescription("WindowExited", 
                          "",
                          WindowExitedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&AbstractWindowBase::getHandleWindowExitedSignal))

};

EventProducerType AbstractWindowBase::_producerType(
    "AbstractWindowProducerType",
    "ComponentProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &AbstractWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &AbstractWindowBase::getType(void) const
{
    return _type;
}

const EventProducerType &AbstractWindowBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 AbstractWindowBase::getContainerSize(void) const
{
    return sizeof(AbstractWindow);
}

/*------------------------- decorator get ------------------------------*/



SFBool *AbstractWindowBase::editSFClosable(void)
{
    editSField(ClosableFieldMask);

    return &_sfClosable;
}

const SFBool *AbstractWindowBase::getSFClosable(void) const
{
    return &_sfClosable;
}


SFBool *AbstractWindowBase::editSFIconable(void)
{
    editSField(IconableFieldMask);

    return &_sfIconable;
}

const SFBool *AbstractWindowBase::getSFIconable(void) const
{
    return &_sfIconable;
}


SFBool *AbstractWindowBase::editSFMaximizable(void)
{
    editSField(MaximizableFieldMask);

    return &_sfMaximizable;
}

const SFBool *AbstractWindowBase::getSFMaximizable(void) const
{
    return &_sfMaximizable;
}


SFBool *AbstractWindowBase::editSFIsClosed(void)
{
    editSField(IsClosedFieldMask);

    return &_sfIsClosed;
}

const SFBool *AbstractWindowBase::getSFIsClosed(void) const
{
    return &_sfIsClosed;
}


SFBool *AbstractWindowBase::editSFIsIcon(void)
{
    editSField(IsIconFieldMask);

    return &_sfIsIcon;
}

const SFBool *AbstractWindowBase::getSFIsIcon(void) const
{
    return &_sfIsIcon;
}


SFBool *AbstractWindowBase::editSFIsMaximized(void)
{
    editSField(IsMaximizedFieldMask);

    return &_sfIsMaximized;
}

const SFBool *AbstractWindowBase::getSFIsMaximized(void) const
{
    return &_sfIsMaximized;
}


SFBool *AbstractWindowBase::editSFResizable(void)
{
    editSField(ResizableFieldMask);

    return &_sfResizable;
}

const SFBool *AbstractWindowBase::getSFResizable(void) const
{
    return &_sfResizable;
}


SFBool *AbstractWindowBase::editSFIsSelected(void)
{
    editSField(IsSelectedFieldMask);

    return &_sfIsSelected;
}

const SFBool *AbstractWindowBase::getSFIsSelected(void) const
{
    return &_sfIsSelected;
}


SFString *AbstractWindowBase::editSFTitle(void)
{
    editSField(TitleFieldMask);

    return &_sfTitle;
}

const SFString *AbstractWindowBase::getSFTitle(void) const
{
    return &_sfTitle;
}


//! Get the AbstractWindow::_sfDesktopIcon field.
const SFUnrecUIDrawObjectCanvasPtr *AbstractWindowBase::getSFDesktopIcon(void) const
{
    return &_sfDesktopIcon;
}

SFUnrecUIDrawObjectCanvasPtr *AbstractWindowBase::editSFDesktopIcon    (void)
{
    editSField(DesktopIconFieldMask);

    return &_sfDesktopIcon;
}

SFBool *AbstractWindowBase::editSFModal(void)
{
    editSField(ModalFieldMask);

    return &_sfModal;
}

const SFBool *AbstractWindowBase::getSFModal(void) const
{
    return &_sfModal;
}


SFBool *AbstractWindowBase::editSFAllwaysOnTop(void)
{
    editSField(AllwaysOnTopFieldMask);

    return &_sfAllwaysOnTop;
}

const SFBool *AbstractWindowBase::getSFAllwaysOnTop(void) const
{
    return &_sfAllwaysOnTop;
}


SFBool *AbstractWindowBase::editSFDrawTitlebar(void)
{
    editSField(DrawTitlebarFieldMask);

    return &_sfDrawTitlebar;
}

const SFBool *AbstractWindowBase::getSFDrawTitlebar(void) const
{
    return &_sfDrawTitlebar;
}


SFBool *AbstractWindowBase::editSFDrawDecorations(void)
{
    editSField(DrawDecorationsFieldMask);

    return &_sfDrawDecorations;
}

const SFBool *AbstractWindowBase::getSFDrawDecorations(void) const
{
    return &_sfDrawDecorations;
}


SFBool *AbstractWindowBase::editSFLockInput(void)
{
    editSField(LockInputFieldMask);

    return &_sfLockInput;
}

const SFBool *AbstractWindowBase::getSFLockInput(void) const
{
    return &_sfLockInput;
}


SFVec2f *AbstractWindowBase::editSFAlignmentInDrawingSurface(void)
{
    editSField(AlignmentInDrawingSurfaceFieldMask);

    return &_sfAlignmentInDrawingSurface;
}

const SFVec2f *AbstractWindowBase::getSFAlignmentInDrawingSurface(void) const
{
    return &_sfAlignmentInDrawingSurface;
}


SFVec2f *AbstractWindowBase::editSFScalingInDrawingSurface(void)
{
    editSField(ScalingInDrawingSurfaceFieldMask);

    return &_sfScalingInDrawingSurface;
}

const SFVec2f *AbstractWindowBase::getSFScalingInDrawingSurface(void) const
{
    return &_sfScalingInDrawingSurface;
}


SFUInt32 *AbstractWindowBase::editSFResizeModifyCursorWidth(void)
{
    editSField(ResizeModifyCursorWidthFieldMask);

    return &_sfResizeModifyCursorWidth;
}

const SFUInt32 *AbstractWindowBase::getSFResizeModifyCursorWidth(void) const
{
    return &_sfResizeModifyCursorWidth;
}






/*------------------------------ access -----------------------------------*/

UInt32 AbstractWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentDrawingSurfaceFieldMask & whichField))
    {
        returnValue += _sfParentDrawingSurface.getBinSize();
    }
    if(FieldBits::NoField != (ClosableFieldMask & whichField))
    {
        returnValue += _sfClosable.getBinSize();
    }
    if(FieldBits::NoField != (IconableFieldMask & whichField))
    {
        returnValue += _sfIconable.getBinSize();
    }
    if(FieldBits::NoField != (MaximizableFieldMask & whichField))
    {
        returnValue += _sfMaximizable.getBinSize();
    }
    if(FieldBits::NoField != (IsClosedFieldMask & whichField))
    {
        returnValue += _sfIsClosed.getBinSize();
    }
    if(FieldBits::NoField != (IsIconFieldMask & whichField))
    {
        returnValue += _sfIsIcon.getBinSize();
    }
    if(FieldBits::NoField != (IsMaximizedFieldMask & whichField))
    {
        returnValue += _sfIsMaximized.getBinSize();
    }
    if(FieldBits::NoField != (ResizableFieldMask & whichField))
    {
        returnValue += _sfResizable.getBinSize();
    }
    if(FieldBits::NoField != (IsSelectedFieldMask & whichField))
    {
        returnValue += _sfIsSelected.getBinSize();
    }
    if(FieldBits::NoField != (TitleFieldMask & whichField))
    {
        returnValue += _sfTitle.getBinSize();
    }
    if(FieldBits::NoField != (DesktopIconFieldMask & whichField))
    {
        returnValue += _sfDesktopIcon.getBinSize();
    }
    if(FieldBits::NoField != (ModalFieldMask & whichField))
    {
        returnValue += _sfModal.getBinSize();
    }
    if(FieldBits::NoField != (AllwaysOnTopFieldMask & whichField))
    {
        returnValue += _sfAllwaysOnTop.getBinSize();
    }
    if(FieldBits::NoField != (DrawTitlebarFieldMask & whichField))
    {
        returnValue += _sfDrawTitlebar.getBinSize();
    }
    if(FieldBits::NoField != (DrawDecorationsFieldMask & whichField))
    {
        returnValue += _sfDrawDecorations.getBinSize();
    }
    if(FieldBits::NoField != (LockInputFieldMask & whichField))
    {
        returnValue += _sfLockInput.getBinSize();
    }
    if(FieldBits::NoField != (AlignmentInDrawingSurfaceFieldMask & whichField))
    {
        returnValue += _sfAlignmentInDrawingSurface.getBinSize();
    }
    if(FieldBits::NoField != (ScalingInDrawingSurfaceFieldMask & whichField))
    {
        returnValue += _sfScalingInDrawingSurface.getBinSize();
    }
    if(FieldBits::NoField != (ResizeModifyCursorWidthFieldMask & whichField))
    {
        returnValue += _sfResizeModifyCursorWidth.getBinSize();
    }

    return returnValue;
}

void AbstractWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentDrawingSurfaceFieldMask & whichField))
    {
        _sfParentDrawingSurface.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClosableFieldMask & whichField))
    {
        _sfClosable.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IconableFieldMask & whichField))
    {
        _sfIconable.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaximizableFieldMask & whichField))
    {
        _sfMaximizable.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IsClosedFieldMask & whichField))
    {
        _sfIsClosed.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IsIconFieldMask & whichField))
    {
        _sfIsIcon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IsMaximizedFieldMask & whichField))
    {
        _sfIsMaximized.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResizableFieldMask & whichField))
    {
        _sfResizable.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IsSelectedFieldMask & whichField))
    {
        _sfIsSelected.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TitleFieldMask & whichField))
    {
        _sfTitle.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DesktopIconFieldMask & whichField))
    {
        _sfDesktopIcon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ModalFieldMask & whichField))
    {
        _sfModal.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AllwaysOnTopFieldMask & whichField))
    {
        _sfAllwaysOnTop.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawTitlebarFieldMask & whichField))
    {
        _sfDrawTitlebar.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawDecorationsFieldMask & whichField))
    {
        _sfDrawDecorations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LockInputFieldMask & whichField))
    {
        _sfLockInput.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlignmentInDrawingSurfaceFieldMask & whichField))
    {
        _sfAlignmentInDrawingSurface.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalingInDrawingSurfaceFieldMask & whichField))
    {
        _sfScalingInDrawingSurface.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResizeModifyCursorWidthFieldMask & whichField))
    {
        _sfResizeModifyCursorWidth.copyToBin(pMem);
    }
}

void AbstractWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentDrawingSurfaceFieldMask & whichField))
    {
        _sfParentDrawingSurface.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClosableFieldMask & whichField))
    {
        _sfClosable.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IconableFieldMask & whichField))
    {
        _sfIconable.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaximizableFieldMask & whichField))
    {
        _sfMaximizable.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IsClosedFieldMask & whichField))
    {
        _sfIsClosed.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IsIconFieldMask & whichField))
    {
        _sfIsIcon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IsMaximizedFieldMask & whichField))
    {
        _sfIsMaximized.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResizableFieldMask & whichField))
    {
        _sfResizable.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IsSelectedFieldMask & whichField))
    {
        _sfIsSelected.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TitleFieldMask & whichField))
    {
        _sfTitle.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DesktopIconFieldMask & whichField))
    {
        _sfDesktopIcon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ModalFieldMask & whichField))
    {
        _sfModal.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AllwaysOnTopFieldMask & whichField))
    {
        _sfAllwaysOnTop.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawTitlebarFieldMask & whichField))
    {
        _sfDrawTitlebar.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawDecorationsFieldMask & whichField))
    {
        _sfDrawDecorations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LockInputFieldMask & whichField))
    {
        _sfLockInput.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlignmentInDrawingSurfaceFieldMask & whichField))
    {
        _sfAlignmentInDrawingSurface.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalingInDrawingSurfaceFieldMask & whichField))
    {
        _sfScalingInDrawingSurface.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResizeModifyCursorWidthFieldMask & whichField))
    {
        _sfResizeModifyCursorWidth.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void AbstractWindowBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        OSG_ASSERT(dynamic_cast<WindowOpenedEventDetailsType* const>(e));

        _WindowOpenedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowOpenedEvent(dynamic_cast<WindowOpenedEventDetailsType* const>(e), WindowOpenedEventId);
        break;
    case WindowClosingEventId:
        OSG_ASSERT(dynamic_cast<WindowClosingEventDetailsType* const>(e));

        _WindowClosingEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowClosingEvent(dynamic_cast<WindowClosingEventDetailsType* const>(e), WindowClosingEventId);
        break;
    case WindowClosedEventId:
        OSG_ASSERT(dynamic_cast<WindowClosedEventDetailsType* const>(e));

        _WindowClosedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowClosedEvent(dynamic_cast<WindowClosedEventDetailsType* const>(e), WindowClosedEventId);
        break;
    case WindowIconifiedEventId:
        OSG_ASSERT(dynamic_cast<WindowIconifiedEventDetailsType* const>(e));

        _WindowIconifiedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowIconifiedEvent(dynamic_cast<WindowIconifiedEventDetailsType* const>(e), WindowIconifiedEventId);
        break;
    case WindowDeiconifiedEventId:
        OSG_ASSERT(dynamic_cast<WindowDeiconifiedEventDetailsType* const>(e));

        _WindowDeiconifiedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowDeiconifiedEvent(dynamic_cast<WindowDeiconifiedEventDetailsType* const>(e), WindowDeiconifiedEventId);
        break;
    case WindowActivatedEventId:
        OSG_ASSERT(dynamic_cast<WindowActivatedEventDetailsType* const>(e));

        _WindowActivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowActivatedEvent(dynamic_cast<WindowActivatedEventDetailsType* const>(e), WindowActivatedEventId);
        break;
    case WindowDeactivatedEventId:
        OSG_ASSERT(dynamic_cast<WindowDeactivatedEventDetailsType* const>(e));

        _WindowDeactivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowDeactivatedEvent(dynamic_cast<WindowDeactivatedEventDetailsType* const>(e), WindowDeactivatedEventId);
        break;
    case WindowEnteredEventId:
        OSG_ASSERT(dynamic_cast<WindowEnteredEventDetailsType* const>(e));

        _WindowEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowEnteredEvent(dynamic_cast<WindowEnteredEventDetailsType* const>(e), WindowEnteredEventId);
        break;
    case WindowExitedEventId:
        OSG_ASSERT(dynamic_cast<WindowExitedEventDetailsType* const>(e));

        _WindowExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowExitedEvent(dynamic_cast<WindowExitedEventDetailsType* const>(e), WindowExitedEventId);
        break;
    default:
        Inherited::produceEvent(eventId, e);
        break;
    }
}

boost::signals2::connection AbstractWindowBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.connect(listener, at);
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.connect(listener, at);
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.connect(listener, at);
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.connect(listener, at);
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.connect(listener, at);
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.connect(listener, at);
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.connect(listener, at);
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.connect(listener, at);
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.connect(listener, at);
        break;
    default:
        return Inherited::connectEvent(eventId, listener, at);
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  AbstractWindowBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.connect(group, listener, at);
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.connect(group, listener, at);
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.connect(group, listener, at);
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.connect(group, listener, at);
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.connect(group, listener, at);
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.connect(group, listener, at);
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.connect(group, listener, at);
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.connect(group, listener, at);
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.connect(group, listener, at);
        break;
    default:
        return Inherited::connectEvent(eventId, group, listener, at);
        break;
    }

    return boost::signals2::connection();
}
    
void  AbstractWindowBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        _WindowOpenedEvent.disconnect(group);
        break;
    case WindowClosingEventId:
        _WindowClosingEvent.disconnect(group);
        break;
    case WindowClosedEventId:
        _WindowClosedEvent.disconnect(group);
        break;
    case WindowIconifiedEventId:
        _WindowIconifiedEvent.disconnect(group);
        break;
    case WindowDeiconifiedEventId:
        _WindowDeiconifiedEvent.disconnect(group);
        break;
    case WindowActivatedEventId:
        _WindowActivatedEvent.disconnect(group);
        break;
    case WindowDeactivatedEventId:
        _WindowDeactivatedEvent.disconnect(group);
        break;
    case WindowEnteredEventId:
        _WindowEnteredEvent.disconnect(group);
        break;
    case WindowExitedEventId:
        _WindowExitedEvent.disconnect(group);
        break;
    default:
        return Inherited::disconnectEvent(eventId, group);
        break;
    }
}

void  AbstractWindowBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        _WindowOpenedEvent.disconnect_all_slots();
        break;
    case WindowClosingEventId:
        _WindowClosingEvent.disconnect_all_slots();
        break;
    case WindowClosedEventId:
        _WindowClosedEvent.disconnect_all_slots();
        break;
    case WindowIconifiedEventId:
        _WindowIconifiedEvent.disconnect_all_slots();
        break;
    case WindowDeiconifiedEventId:
        _WindowDeiconifiedEvent.disconnect_all_slots();
        break;
    case WindowActivatedEventId:
        _WindowActivatedEvent.disconnect_all_slots();
        break;
    case WindowDeactivatedEventId:
        _WindowDeactivatedEvent.disconnect_all_slots();
        break;
    case WindowEnteredEventId:
        _WindowEnteredEvent.disconnect_all_slots();
        break;
    case WindowExitedEventId:
        _WindowExitedEvent.disconnect_all_slots();
        break;
    default:
        Inherited::disconnectAllSlotsEvent(eventId);
        break;
    }
}

bool  AbstractWindowBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.empty();
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.empty();
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.empty();
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.empty();
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.empty();
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.empty();
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.empty();
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.empty();
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.empty();
        break;
    default:
        return Inherited::isEmptyEvent(eventId);
        break;
    }
}

UInt32  AbstractWindowBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case WindowOpenedEventId:
        return _WindowOpenedEvent.num_slots();
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.num_slots();
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.num_slots();
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.num_slots();
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.num_slots();
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.num_slots();
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.num_slots();
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.num_slots();
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.num_slots();
        break;
    default:
        return Inherited::numSlotsEvent(eventId);
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

AbstractWindowBase::AbstractWindowBase(void) :
    Inherited(),
    _sfParentDrawingSurface   (NULL),
    _sfClosable               (bool(true)),
    _sfIconable               (bool(true)),
    _sfMaximizable            (bool(true)),
    _sfIsClosed               (bool(true)),
    _sfIsIcon                 (bool(false)),
    _sfIsMaximized            (bool(false)),
    _sfResizable              (bool(true)),
    _sfIsSelected             (bool(false)),
    _sfTitle                  (),
    _sfDesktopIcon            (NULL),
    _sfModal                  (bool(false)),
    _sfAllwaysOnTop           (bool(false)),
    _sfDrawTitlebar           (bool(false)),
    _sfDrawDecorations        (bool(true)),
    _sfLockInput              (bool(false)),
    _sfAlignmentInDrawingSurface(Vec2f(-1.0,-1.0)),
    _sfScalingInDrawingSurface(Vec2f(-1.0,-1.0)),
    _sfResizeModifyCursorWidth(UInt32(3))
{
}

AbstractWindowBase::AbstractWindowBase(const AbstractWindowBase &source) :
    Inherited(source),
    _sfParentDrawingSurface   (NULL),
    _sfClosable               (source._sfClosable               ),
    _sfIconable               (source._sfIconable               ),
    _sfMaximizable            (source._sfMaximizable            ),
    _sfIsClosed               (source._sfIsClosed               ),
    _sfIsIcon                 (source._sfIsIcon                 ),
    _sfIsMaximized            (source._sfIsMaximized            ),
    _sfResizable              (source._sfResizable              ),
    _sfIsSelected             (source._sfIsSelected             ),
    _sfTitle                  (source._sfTitle                  ),
    _sfDesktopIcon            (NULL),
    _sfModal                  (source._sfModal                  ),
    _sfAllwaysOnTop           (source._sfAllwaysOnTop           ),
    _sfDrawTitlebar           (source._sfDrawTitlebar           ),
    _sfDrawDecorations        (source._sfDrawDecorations        ),
    _sfLockInput              (source._sfLockInput              ),
    _sfAlignmentInDrawingSurface(source._sfAlignmentInDrawingSurface),
    _sfScalingInDrawingSurface(source._sfScalingInDrawingSurface),
    _sfResizeModifyCursorWidth(source._sfResizeModifyCursorWidth)
{
}


/*-------------------------- destructors ----------------------------------*/

AbstractWindowBase::~AbstractWindowBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool AbstractWindowBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentDrawingSurfaceFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentDrawingSurface.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentDrawingSurface.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentDrawingSurfaceFieldMask);

            _sfParentDrawingSurface.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool AbstractWindowBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentDrawingSurfaceFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentDrawingSurface.getValue() == pParent)
            {
                editSField(ParentDrawingSurfaceFieldMask);

                _sfParentDrawingSurface.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("AbstractWindowBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


void AbstractWindowBase::onCreate(const AbstractWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AbstractWindow *pThis = static_cast<AbstractWindow *>(this);

        pThis->setDesktopIcon(source->getDesktopIcon());
    }
}

GetFieldHandlePtr AbstractWindowBase::getHandleParentDrawingSurface (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleParentDrawingSurface(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleClosable        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClosable,
             this->getType().getFieldDesc(ClosableFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleClosable       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClosable,
             this->getType().getFieldDesc(ClosableFieldId),
             this));


    editSField(ClosableFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleIconable        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIconable,
             this->getType().getFieldDesc(IconableFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleIconable       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIconable,
             this->getType().getFieldDesc(IconableFieldId),
             this));


    editSField(IconableFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleMaximizable     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfMaximizable,
             this->getType().getFieldDesc(MaximizableFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleMaximizable    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfMaximizable,
             this->getType().getFieldDesc(MaximizableFieldId),
             this));


    editSField(MaximizableFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleIsClosed        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIsClosed,
             this->getType().getFieldDesc(IsClosedFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleIsClosed       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIsClosed,
             this->getType().getFieldDesc(IsClosedFieldId),
             this));


    editSField(IsClosedFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleIsIcon          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIsIcon,
             this->getType().getFieldDesc(IsIconFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleIsIcon         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIsIcon,
             this->getType().getFieldDesc(IsIconFieldId),
             this));


    editSField(IsIconFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleIsMaximized     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIsMaximized,
             this->getType().getFieldDesc(IsMaximizedFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleIsMaximized    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIsMaximized,
             this->getType().getFieldDesc(IsMaximizedFieldId),
             this));


    editSField(IsMaximizedFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleResizable       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfResizable,
             this->getType().getFieldDesc(ResizableFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleResizable      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfResizable,
             this->getType().getFieldDesc(ResizableFieldId),
             this));


    editSField(ResizableFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleIsSelected      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIsSelected,
             this->getType().getFieldDesc(IsSelectedFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleIsSelected     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIsSelected,
             this->getType().getFieldDesc(IsSelectedFieldId),
             this));


    editSField(IsSelectedFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleTitle           (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfTitle,
             this->getType().getFieldDesc(TitleFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleTitle          (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfTitle,
             this->getType().getFieldDesc(TitleFieldId),
             this));


    editSField(TitleFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleDesktopIcon     (void) const
{
    SFUnrecUIDrawObjectCanvasPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::GetHandle(
             &_sfDesktopIcon,
             this->getType().getFieldDesc(DesktopIconFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleDesktopIcon    (void)
{
    SFUnrecUIDrawObjectCanvasPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::EditHandle(
             &_sfDesktopIcon,
             this->getType().getFieldDesc(DesktopIconFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&AbstractWindow::setDesktopIcon,
                    static_cast<AbstractWindow *>(this), _1));

    editSField(DesktopIconFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleModal           (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfModal,
             this->getType().getFieldDesc(ModalFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleModal          (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfModal,
             this->getType().getFieldDesc(ModalFieldId),
             this));


    editSField(ModalFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleAllwaysOnTop    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAllwaysOnTop,
             this->getType().getFieldDesc(AllwaysOnTopFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleAllwaysOnTop   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAllwaysOnTop,
             this->getType().getFieldDesc(AllwaysOnTopFieldId),
             this));


    editSField(AllwaysOnTopFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleDrawTitlebar    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDrawTitlebar,
             this->getType().getFieldDesc(DrawTitlebarFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleDrawTitlebar   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDrawTitlebar,
             this->getType().getFieldDesc(DrawTitlebarFieldId),
             this));


    editSField(DrawTitlebarFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleDrawDecorations (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDrawDecorations,
             this->getType().getFieldDesc(DrawDecorationsFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleDrawDecorations(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDrawDecorations,
             this->getType().getFieldDesc(DrawDecorationsFieldId),
             this));


    editSField(DrawDecorationsFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleLockInput       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLockInput,
             this->getType().getFieldDesc(LockInputFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleLockInput      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLockInput,
             this->getType().getFieldDesc(LockInputFieldId),
             this));


    editSField(LockInputFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleAlignmentInDrawingSurface (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfAlignmentInDrawingSurface,
             this->getType().getFieldDesc(AlignmentInDrawingSurfaceFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleAlignmentInDrawingSurface(void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfAlignmentInDrawingSurface,
             this->getType().getFieldDesc(AlignmentInDrawingSurfaceFieldId),
             this));


    editSField(AlignmentInDrawingSurfaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleScalingInDrawingSurface (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfScalingInDrawingSurface,
             this->getType().getFieldDesc(ScalingInDrawingSurfaceFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleScalingInDrawingSurface(void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfScalingInDrawingSurface,
             this->getType().getFieldDesc(ScalingInDrawingSurfaceFieldId),
             this));


    editSField(ScalingInDrawingSurfaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr AbstractWindowBase::getHandleResizeModifyCursorWidth (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfResizeModifyCursorWidth,
             this->getType().getFieldDesc(ResizeModifyCursorWidthFieldId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractWindowBase::editHandleResizeModifyCursorWidth(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfResizeModifyCursorWidth,
             this->getType().getFieldDesc(ResizeModifyCursorWidthFieldId),
             this));


    editSField(ResizeModifyCursorWidthFieldMask);

    return returnValue;
}


GetEventHandlePtr AbstractWindowBase::getHandleWindowOpenedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowOpenedEventType>(
             const_cast<WindowOpenedEventType *>(&_WindowOpenedEvent),
             _producerType.getEventDescription(WindowOpenedEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowClosingSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowClosingEventType>(
             const_cast<WindowClosingEventType *>(&_WindowClosingEvent),
             _producerType.getEventDescription(WindowClosingEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowClosedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowClosedEventType>(
             const_cast<WindowClosedEventType *>(&_WindowClosedEvent),
             _producerType.getEventDescription(WindowClosedEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowIconifiedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowIconifiedEventType>(
             const_cast<WindowIconifiedEventType *>(&_WindowIconifiedEvent),
             _producerType.getEventDescription(WindowIconifiedEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowDeiconifiedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowDeiconifiedEventType>(
             const_cast<WindowDeiconifiedEventType *>(&_WindowDeiconifiedEvent),
             _producerType.getEventDescription(WindowDeiconifiedEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowActivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowActivatedEventType>(
             const_cast<WindowActivatedEventType *>(&_WindowActivatedEvent),
             _producerType.getEventDescription(WindowActivatedEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowDeactivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowDeactivatedEventType>(
             const_cast<WindowDeactivatedEventType *>(&_WindowDeactivatedEvent),
             _producerType.getEventDescription(WindowDeactivatedEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowEnteredEventType>(
             const_cast<WindowEnteredEventType *>(&_WindowEnteredEvent),
             _producerType.getEventDescription(WindowEnteredEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr AbstractWindowBase::getHandleWindowExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowExitedEventType>(
             const_cast<WindowExitedEventType *>(&_WindowExitedEvent),
             _producerType.getEventDescription(WindowExitedEventId),
             const_cast<AbstractWindowBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AbstractWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AbstractWindow *pThis = static_cast<AbstractWindow *>(this);

    pThis->execSync(static_cast<AbstractWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void AbstractWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AbstractWindow *>(this)->setDesktopIcon(NULL);


}


OSG_END_NAMESPACE
