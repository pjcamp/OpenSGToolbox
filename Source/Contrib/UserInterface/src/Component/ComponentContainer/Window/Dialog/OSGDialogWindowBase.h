/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Mark Stenerson             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DialogWindow
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDIALOGWINDOWBASE_H_
#define _OSGDIALOGWINDOWBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGInternalWindow.h" // Parent

#include "OSGTextureObjChunkFields.h"   // ErrorIcon type
#include "OSGSysFields.h"               // ShowCancel type
#include "OSGBaseFields.h"              // InputValues type

#include "OSGDialogWindowFields.h"

#include "OSGDialogWindowEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class DialogWindow;

//! \brief DialogWindow Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING DialogWindowBase : public InternalWindow
{
  public:

    typedef InternalWindow Inherited;
    typedef InternalWindow ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(DialogWindow);
    
    
    typedef DialogWindowEventDetails DialogWindowClosingEventDetailsType;
    typedef DialogWindowEventDetails DialogWindowClosedEventDetailsType;

    typedef boost::signals2::signal<void (DialogWindowEventDetails* const, UInt32), ConsumableEventCombiner> DialogWindowClosingEventType;
    typedef boost::signals2::signal<void (DialogWindowEventDetails* const, UInt32), ConsumableEventCombiner> DialogWindowClosedEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ErrorIconFieldId = Inherited::NextFieldId,
        QuestionIconFieldId = ErrorIconFieldId + 1,
        DefaultIconFieldId = QuestionIconFieldId + 1,
        ShowCancelFieldId = DefaultIconFieldId + 1,
        InputValuesFieldId = ShowCancelFieldId + 1,
        NextFieldId = InputValuesFieldId + 1
    };

    static const OSG::BitVector ErrorIconFieldMask =
        (TypeTraits<BitVector>::One << ErrorIconFieldId);
    static const OSG::BitVector QuestionIconFieldMask =
        (TypeTraits<BitVector>::One << QuestionIconFieldId);
    static const OSG::BitVector DefaultIconFieldMask =
        (TypeTraits<BitVector>::One << DefaultIconFieldId);
    static const OSG::BitVector ShowCancelFieldMask =
        (TypeTraits<BitVector>::One << ShowCancelFieldId);
    static const OSG::BitVector InputValuesFieldMask =
        (TypeTraits<BitVector>::One << InputValuesFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecTextureObjChunkPtr SFErrorIconType;
    typedef SFUnrecTextureObjChunkPtr SFQuestionIconType;
    typedef SFUnrecTextureObjChunkPtr SFDefaultIconType;
    typedef SFBool            SFShowCancelType;
    typedef SFString          SFInputValuesType;

    enum
    {
        DialogWindowClosingEventId = Inherited::NextProducedEventId,
        DialogWindowClosedEventId = DialogWindowClosingEventId + 1,
        NextProducedEventId = DialogWindowClosedEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecTextureObjChunkPtr *getSFErrorIcon      (void) const;
                  SFUnrecTextureObjChunkPtr *editSFErrorIcon      (void);
            const SFUnrecTextureObjChunkPtr *getSFQuestionIcon   (void) const;
                  SFUnrecTextureObjChunkPtr *editSFQuestionIcon   (void);
            const SFUnrecTextureObjChunkPtr *getSFDefaultIcon    (void) const;
                  SFUnrecTextureObjChunkPtr *editSFDefaultIcon    (void);

                  SFBool              *editSFShowCancel     (void);
            const SFBool              *getSFShowCancel      (void) const;

                  SFString            *editSFInputValues    (void);
            const SFString            *getSFInputValues     (void) const;


                  TextureObjChunk * getErrorIcon      (void) const;

                  TextureObjChunk * getQuestionIcon   (void) const;

                  TextureObjChunk * getDefaultIcon    (void) const;

                  bool                &editShowCancel     (void);
                  bool                 getShowCancel      (void) const;

                  std::string         &editInputValues    (void);
            const std::string         &getInputValues     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setErrorIcon      (TextureObjChunk * const value);
            void setQuestionIcon   (TextureObjChunk * const value);
            void setDefaultIcon    (TextureObjChunk * const value);
            void setShowCancel     (const bool value);
            void setInputValues    (const std::string &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //DialogWindowClosing
    boost::signals2::connection connectDialogWindowClosing(const DialogWindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectDialogWindowClosing(const DialogWindowClosingEventType::group_type &group,
                                                       const DialogWindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectDialogWindowClosing    (const DialogWindowClosingEventType::group_type &group);
    void   disconnectAllSlotsDialogWindowClosing(void);
    bool   isEmptyDialogWindowClosing       (void) const;
    UInt32 numSlotsDialogWindowClosing      (void) const;
    
    //DialogWindowClosed
    boost::signals2::connection connectDialogWindowClosed(const DialogWindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectDialogWindowClosed(const DialogWindowClosedEventType::group_type &group,
                                                       const DialogWindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectDialogWindowClosed     (const DialogWindowClosedEventType::group_type &group);
    void   disconnectAllSlotsDialogWindowClosed(void);
    bool   isEmptyDialogWindowClosed        (void) const;
    UInt32 numSlotsDialogWindowClosed       (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DialogWindowTransitPtr  create          (void);
    static  DialogWindow           *createEmpty     (void);

    static  DialogWindowTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  DialogWindow            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  DialogWindowTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    DialogWindowClosingEventType _DialogWindowClosingEvent;
    DialogWindowClosedEventType _DialogWindowClosedEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecTextureObjChunkPtr _sfErrorIcon;
    SFUnrecTextureObjChunkPtr _sfQuestionIcon;
    SFUnrecTextureObjChunkPtr _sfDefaultIcon;
    SFBool            _sfShowCancel;
    SFString          _sfInputValues;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DialogWindowBase(void);
    DialogWindowBase(const DialogWindowBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DialogWindowBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const DialogWindow *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleErrorIcon       (void) const;
    EditFieldHandlePtr editHandleErrorIcon      (void);
    GetFieldHandlePtr  getHandleQuestionIcon    (void) const;
    EditFieldHandlePtr editHandleQuestionIcon   (void);
    GetFieldHandlePtr  getHandleDefaultIcon     (void) const;
    EditFieldHandlePtr editHandleDefaultIcon    (void);
    GetFieldHandlePtr  getHandleShowCancel      (void) const;
    EditFieldHandlePtr editHandleShowCancel     (void);
    GetFieldHandlePtr  getHandleInputValues     (void) const;
    EditFieldHandlePtr editHandleInputValues    (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleDialogWindowClosingSignal(void) const;
    GetEventHandlePtr getHandleDialogWindowClosedSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceDialogWindowClosing  (DialogWindowClosingEventDetailsType* const e);
    void produceDialogWindowClosed  (DialogWindowClosedEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      DialogWindowBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DialogWindowBase &source);
};

typedef DialogWindowBase *DialogWindowBaseP;

OSG_END_NAMESPACE

#endif /* _OSGDIALOGWINDOWBASE_H_ */
