/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Menu!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGPopupMenu.h"               // InternalPopupMenu Class
#include "OSGUIDrawObjectCanvas.h"      // ExpandDrawObject Class
#include "OSGMenuItem.h"                // MenuItems Class

#include "OSGMenuBase.h"
#include "OSGMenu.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Menu
    A UI Menu.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var PopupMenu *     MenuBase::_sfInternalPopupMenu
    
*/

/*! \var Real32          MenuBase::_sfSubMenuDelay
    
*/

/*! \var bool            MenuBase::_sfTopLevelMenu
    
*/

/*! \var UIDrawObjectCanvas * MenuBase::_sfExpandDrawObject
    
*/

/*! \var MenuItem *      MenuBase::_mfMenuItems
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Menu *>::_type("MenuPtr", "MenuItemPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Menu *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Menu *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Menu *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MenuBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecPopupMenuPtr::Description(
        SFUnrecPopupMenuPtr::getClassType(),
        "InternalPopupMenu",
        "",
        InternalPopupMenuFieldId, InternalPopupMenuFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Menu::editHandleInternalPopupMenu),
        static_cast<FieldGetMethodSig >(&Menu::getHandleInternalPopupMenu));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "SubMenuDelay",
        "",
        SubMenuDelayFieldId, SubMenuDelayFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Menu::editHandleSubMenuDelay),
        static_cast<FieldGetMethodSig >(&Menu::getHandleSubMenuDelay));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "TopLevelMenu",
        "",
        TopLevelMenuFieldId, TopLevelMenuFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Menu::editHandleTopLevelMenu),
        static_cast<FieldGetMethodSig >(&Menu::getHandleTopLevelMenu));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIDrawObjectCanvasPtr::Description(
        SFUnrecUIDrawObjectCanvasPtr::getClassType(),
        "ExpandDrawObject",
        "",
        ExpandDrawObjectFieldId, ExpandDrawObjectFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Menu::editHandleExpandDrawObject),
        static_cast<FieldGetMethodSig >(&Menu::getHandleExpandDrawObject));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildMenuItemPtr::Description(
        MFUnrecChildMenuItemPtr::getClassType(),
        "MenuItems",
        "",
        MenuItemsFieldId, MenuItemsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&Menu::editHandleMenuItems),
        static_cast<FieldGetMethodSig >(&Menu::getHandleMenuItems));

    oType.addInitialDesc(pDesc);
}


MenuBase::TypeObject MenuBase::_type(
    MenuBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MenuBase::createEmptyLocal),
    Menu::initMethod,
    Menu::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Menu::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Menu\"\n"
    "\tparent=\"MenuItem\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Menu.\n"
    "\t<Field\n"
    "\t\tname=\"InternalPopupMenu\"\n"
    "\t\ttype=\"PopupMenu\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SubMenuDelay\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TopLevelMenu\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ExpandDrawObject\"\n"
    "\t\ttype=\"UIDrawObjectCanvas\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MenuItems\"\n"
    "\t\ttype=\"MenuItem\"\n"
    "\t\tcardinality=\"multi\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentMenu\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Menu.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MenuBase::getType(void)
{
    return _type;
}

const FieldContainerType &MenuBase::getType(void) const
{
    return _type;
}

UInt32 MenuBase::getContainerSize(void) const
{
    return sizeof(Menu);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Menu::_sfInternalPopupMenu field.
const SFUnrecPopupMenuPtr *MenuBase::getSFInternalPopupMenu(void) const
{
    return &_sfInternalPopupMenu;
}

SFUnrecPopupMenuPtr *MenuBase::editSFInternalPopupMenu(void)
{
    editSField(InternalPopupMenuFieldMask);

    return &_sfInternalPopupMenu;
}

SFReal32 *MenuBase::editSFSubMenuDelay(void)
{
    editSField(SubMenuDelayFieldMask);

    return &_sfSubMenuDelay;
}

const SFReal32 *MenuBase::getSFSubMenuDelay(void) const
{
    return &_sfSubMenuDelay;
}


SFBool *MenuBase::editSFTopLevelMenu(void)
{
    editSField(TopLevelMenuFieldMask);

    return &_sfTopLevelMenu;
}

const SFBool *MenuBase::getSFTopLevelMenu(void) const
{
    return &_sfTopLevelMenu;
}


//! Get the Menu::_sfExpandDrawObject field.
const SFUnrecUIDrawObjectCanvasPtr *MenuBase::getSFExpandDrawObject(void) const
{
    return &_sfExpandDrawObject;
}

SFUnrecUIDrawObjectCanvasPtr *MenuBase::editSFExpandDrawObject(void)
{
    editSField(ExpandDrawObjectFieldMask);

    return &_sfExpandDrawObject;
}

//! Get the Menu::_mfMenuItems field.
const MFUnrecChildMenuItemPtr *MenuBase::getMFMenuItems(void) const
{
    return &_mfMenuItems;
}



void MenuBase::pushToMenuItems(MenuItem * const value)
{
    if(value == NULL)
        return;

    editMField(MenuItemsFieldMask, _mfMenuItems);

    _mfMenuItems.push_back(value);
}

void MenuBase::assignMenuItems(const MFUnrecChildMenuItemPtr &value)
{
    MFUnrecChildMenuItemPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildMenuItemPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Menu *>(this)->clearMenuItems();

    while(elemIt != elemEnd)
    {
        this->pushToMenuItems(*elemIt);

        ++elemIt;
    }
}

void MenuBase::insertIntoMenuItems(UInt32               uiIndex,
                                                   MenuItem * const value   )
{
    if(value == NULL)
        return;

    editMField(MenuItemsFieldMask, _mfMenuItems);

    MFUnrecChildMenuItemPtr::iterator fieldIt = _mfMenuItems.begin_nc();

    fieldIt += uiIndex;

    _mfMenuItems.insert(fieldIt, value);
}

void MenuBase::replaceInMenuItems(UInt32               uiIndex,
                                                       MenuItem * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfMenuItems.size())
        return;

    editMField(MenuItemsFieldMask, _mfMenuItems);

    _mfMenuItems.replace(uiIndex, value);
}

void MenuBase::replaceObjInMenuItems(MenuItem * const pOldElem,
                                                        MenuItem * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfMenuItems.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(MenuItemsFieldMask, _mfMenuItems);

        _mfMenuItems.replace(elemIdx, pNewElem);
    }
}

void MenuBase::removeFromMenuItems(UInt32 uiIndex)
{
    if(uiIndex < _mfMenuItems.size())
    {
        editMField(MenuItemsFieldMask, _mfMenuItems);

        _mfMenuItems.erase(uiIndex);
    }
}

void MenuBase::removeObjFromMenuItems(MenuItem * const value)
{
    Int32 iElemIdx = _mfMenuItems.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(MenuItemsFieldMask, _mfMenuItems);

        _mfMenuItems.erase(iElemIdx);
    }
}
void MenuBase::clearMenuItems(void)
{
    editMField(MenuItemsFieldMask, _mfMenuItems);


    _mfMenuItems.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 MenuBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalPopupMenuFieldMask & whichField))
    {
        returnValue += _sfInternalPopupMenu.getBinSize();
    }
    if(FieldBits::NoField != (SubMenuDelayFieldMask & whichField))
    {
        returnValue += _sfSubMenuDelay.getBinSize();
    }
    if(FieldBits::NoField != (TopLevelMenuFieldMask & whichField))
    {
        returnValue += _sfTopLevelMenu.getBinSize();
    }
    if(FieldBits::NoField != (ExpandDrawObjectFieldMask & whichField))
    {
        returnValue += _sfExpandDrawObject.getBinSize();
    }
    if(FieldBits::NoField != (MenuItemsFieldMask & whichField))
    {
        returnValue += _mfMenuItems.getBinSize();
    }

    return returnValue;
}

void MenuBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalPopupMenuFieldMask & whichField))
    {
        _sfInternalPopupMenu.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SubMenuDelayFieldMask & whichField))
    {
        _sfSubMenuDelay.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopLevelMenuFieldMask & whichField))
    {
        _sfTopLevelMenu.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ExpandDrawObjectFieldMask & whichField))
    {
        _sfExpandDrawObject.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MenuItemsFieldMask & whichField))
    {
        _mfMenuItems.copyToBin(pMem);
    }
}

void MenuBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalPopupMenuFieldMask & whichField))
    {
        _sfInternalPopupMenu.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SubMenuDelayFieldMask & whichField))
    {
        _sfSubMenuDelay.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopLevelMenuFieldMask & whichField))
    {
        _sfTopLevelMenu.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ExpandDrawObjectFieldMask & whichField))
    {
        _sfExpandDrawObject.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MenuItemsFieldMask & whichField))
    {
        _mfMenuItems.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MenuTransitPtr MenuBase::createLocal(BitVector bFlags)
{
    MenuTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Menu>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MenuTransitPtr MenuBase::createDependent(BitVector bFlags)
{
    MenuTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Menu>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MenuTransitPtr MenuBase::create(void)
{
    MenuTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Menu>(tmpPtr);
    }

    return fc;
}

Menu *MenuBase::createEmptyLocal(BitVector bFlags)
{
    Menu *returnValue;

    newPtr<Menu>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Menu *MenuBase::createEmpty(void)
{
    Menu *returnValue;

    newPtr<Menu>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MenuBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Menu *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Menu *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MenuBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Menu *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Menu *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MenuBase::shallowCopy(void) const
{
    Menu *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Menu *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

MenuBase::MenuBase(void) :
    Inherited(),
    _sfInternalPopupMenu      (NULL),
    _sfSubMenuDelay           (Real32(0.5)),
    _sfTopLevelMenu           (bool(false)),
    _sfExpandDrawObject       (NULL),
    _mfMenuItems              (this,
                          MenuItemsFieldId,
                          MenuItem::ParentMenuFieldId)
{
}

MenuBase::MenuBase(const MenuBase &source) :
    Inherited(source),
    _sfInternalPopupMenu      (NULL),
    _sfSubMenuDelay           (source._sfSubMenuDelay           ),
    _sfTopLevelMenu           (source._sfTopLevelMenu           ),
    _sfExpandDrawObject       (NULL),
    _mfMenuItems              (this,
                          MenuItemsFieldId,
                          MenuItem::ParentMenuFieldId)
{
}


/*-------------------------- destructors ----------------------------------*/

MenuBase::~MenuBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool MenuBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == MenuItemsFieldId)
    {
        MenuItem * pTypedChild =
            dynamic_cast<MenuItem *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfMenuItems.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(MenuItemsFieldMask, _mfMenuItems);

                _mfMenuItems.erase(iChildIdx);

                return true;
            }

            FWARNING(("MenuBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void MenuBase::onCreate(const Menu *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Menu *pThis = static_cast<Menu *>(this);

        pThis->setInternalPopupMenu(source->getInternalPopupMenu());

        pThis->setExpandDrawObject(source->getExpandDrawObject());

        MFUnrecChildMenuItemPtr::const_iterator MenuItemsIt  =
            source->_mfMenuItems.begin();
        MFUnrecChildMenuItemPtr::const_iterator MenuItemsEnd =
            source->_mfMenuItems.end  ();

        while(MenuItemsIt != MenuItemsEnd)
        {
            pThis->pushToMenuItems(*MenuItemsIt);

            ++MenuItemsIt;
        }
    }
}

GetFieldHandlePtr MenuBase::getHandleInternalPopupMenu (void) const
{
    SFUnrecPopupMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::GetHandle(
             &_sfInternalPopupMenu,
             this->getType().getFieldDesc(InternalPopupMenuFieldId),
             const_cast<MenuBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuBase::editHandleInternalPopupMenu(void)
{
    SFUnrecPopupMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::EditHandle(
             &_sfInternalPopupMenu,
             this->getType().getFieldDesc(InternalPopupMenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Menu::setInternalPopupMenu,
                    static_cast<Menu *>(this), _1));

    editSField(InternalPopupMenuFieldMask);

    return returnValue;
}

GetFieldHandlePtr MenuBase::getHandleSubMenuDelay    (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSubMenuDelay,
             this->getType().getFieldDesc(SubMenuDelayFieldId),
             const_cast<MenuBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuBase::editHandleSubMenuDelay   (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSubMenuDelay,
             this->getType().getFieldDesc(SubMenuDelayFieldId),
             this));


    editSField(SubMenuDelayFieldMask);

    return returnValue;
}

GetFieldHandlePtr MenuBase::getHandleTopLevelMenu    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfTopLevelMenu,
             this->getType().getFieldDesc(TopLevelMenuFieldId),
             const_cast<MenuBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuBase::editHandleTopLevelMenu   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfTopLevelMenu,
             this->getType().getFieldDesc(TopLevelMenuFieldId),
             this));


    editSField(TopLevelMenuFieldMask);

    return returnValue;
}

GetFieldHandlePtr MenuBase::getHandleExpandDrawObject (void) const
{
    SFUnrecUIDrawObjectCanvasPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::GetHandle(
             &_sfExpandDrawObject,
             this->getType().getFieldDesc(ExpandDrawObjectFieldId),
             const_cast<MenuBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuBase::editHandleExpandDrawObject(void)
{
    SFUnrecUIDrawObjectCanvasPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawObjectCanvasPtr::EditHandle(
             &_sfExpandDrawObject,
             this->getType().getFieldDesc(ExpandDrawObjectFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Menu::setExpandDrawObject,
                    static_cast<Menu *>(this), _1));

    editSField(ExpandDrawObjectFieldMask);

    return returnValue;
}

GetFieldHandlePtr MenuBase::getHandleMenuItems       (void) const
{
    MFUnrecChildMenuItemPtr::GetHandlePtr returnValue(
        new  MFUnrecChildMenuItemPtr::GetHandle(
             &_mfMenuItems,
             this->getType().getFieldDesc(MenuItemsFieldId),
             const_cast<MenuBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuBase::editHandleMenuItems      (void)
{
    MFUnrecChildMenuItemPtr::EditHandlePtr returnValue(
        new  MFUnrecChildMenuItemPtr::EditHandle(
             &_mfMenuItems,
             this->getType().getFieldDesc(MenuItemsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Menu::pushToMenuItems,
                    static_cast<Menu *>(this), _1));
    returnValue->setInsertMethod(
        boost::bind(&Menu::insertIntoMenuItems,
                    static_cast<Menu *>(this), _1, _2));
    returnValue->setReplaceMethod(
        boost::bind(&Menu::replaceInMenuItems,
                    static_cast<Menu *>(this), _1, _2));
    returnValue->setReplaceObjMethod(
        boost::bind(&Menu::replaceObjInMenuItems,
                    static_cast<Menu *>(this), _1, _2));
    returnValue->setRemoveMethod(
        boost::bind(&Menu::removeFromMenuItems,
                    static_cast<Menu *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Menu::removeObjFromMenuItems,
                    static_cast<Menu *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Menu::clearMenuItems,
                    static_cast<Menu *>(this)));

    editMField(MenuItemsFieldMask, _mfMenuItems);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void MenuBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Menu *pThis = static_cast<Menu *>(this);

    pThis->execSync(static_cast<Menu *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MenuBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Menu *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Menu *>(pRefAspect),
                  dynamic_cast<const Menu *>(this));

    return returnValue;
}
#endif

void MenuBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Menu *>(this)->setInternalPopupMenu(NULL);

    static_cast<Menu *>(this)->setExpandDrawObject(NULL);

    static_cast<Menu *>(this)->clearMenuItems();


}


OSG_END_NAMESPACE
