/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIDrawingSurface!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &UIDrawingSurfaceBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 UIDrawingSurfaceBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 UIDrawingSurfaceBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the UIDrawingSurface::_sfFocusedWindow field.
inline
InternalWindow * UIDrawingSurfaceBase::getFocusedWindow(void) const
{
    return _sfFocusedWindow.getValue();
}

//! Set the value of the UIDrawingSurface::_sfFocusedWindow field.
inline
void UIDrawingSurfaceBase::setFocusedWindow(InternalWindow * const value)
{
    editSField(FocusedWindowFieldMask);

    _sfFocusedWindow.setValue(value);
}

//! Get the value of the UIDrawingSurface::_sfEventProducer field.
inline
WindowEventProducer * UIDrawingSurfaceBase::getEventProducer(void) const
{
    return _sfEventProducer.getValue();
}

//! Set the value of the UIDrawingSurface::_sfEventProducer field.
inline
void UIDrawingSurfaceBase::setEventProducer(WindowEventProducer * const value)
{
    editSField(EventProducerFieldMask);

    _sfEventProducer.setValue(value);
}

//! Get the value of the UIDrawingSurface::_sfGraphics field.
inline
Graphics * UIDrawingSurfaceBase::getGraphics(void) const
{
    return _sfGraphics.getValue();
}

//! Set the value of the UIDrawingSurface::_sfGraphics field.
inline
void UIDrawingSurfaceBase::setGraphics(Graphics * const value)
{
    editSField(GraphicsFieldMask);

    _sfGraphics.setValue(value);
}

//! Get the value of the UIDrawingSurface::_sfMouseTransformFunctor field.
inline
UIDrawingSurfaceMouseTransformFunctor * UIDrawingSurfaceBase::getMouseTransformFunctor(void) const
{
    return _sfMouseTransformFunctor.getValue();
}

//! Set the value of the UIDrawingSurface::_sfMouseTransformFunctor field.
inline
void UIDrawingSurfaceBase::setMouseTransformFunctor(UIDrawingSurfaceMouseTransformFunctor * const value)
{
    editSField(MouseTransformFunctorFieldMask);

    _sfMouseTransformFunctor.setValue(value);
}
//! Get the value of the UIDrawingSurface::_sfSize field.

inline
Vec2f &UIDrawingSurfaceBase::editSize(void)
{
    editSField(SizeFieldMask);

    return _sfSize.getValue();
}

//! Get the value of the UIDrawingSurface::_sfSize field.
inline
const Vec2f &UIDrawingSurfaceBase::getSize(void) const
{
    return _sfSize.getValue();
}

//! Set the value of the UIDrawingSurface::_sfSize field.
inline
void UIDrawingSurfaceBase::setSize(const Vec2f &value)
{
    editSField(SizeFieldMask);

    _sfSize.setValue(value);
}
//! Get the value of the UIDrawingSurface::_sfActive field.

inline
bool &UIDrawingSurfaceBase::editActive(void)
{
    editSField(ActiveFieldMask);

    return _sfActive.getValue();
}

//! Get the value of the UIDrawingSurface::_sfActive field.
inline
      bool  UIDrawingSurfaceBase::getActive(void) const
{
    return _sfActive.getValue();
}

//! Set the value of the UIDrawingSurface::_sfActive field.
inline
void UIDrawingSurfaceBase::setActive(const bool value)
{
    editSField(ActiveFieldMask);

    _sfActive.setValue(value);
}
//! Get the value of the UIDrawingSurface::_sfCursors field.

inline
FieldContainerMap &UIDrawingSurfaceBase::editCursors(void)
{
    editSField(CursorsFieldMask);

    return _sfCursors.getValue();
}

//! Get the value of the UIDrawingSurface::_sfCursors field.
inline
const FieldContainerMap &UIDrawingSurfaceBase::getCursors(void) const
{
    return _sfCursors.getValue();
}

//! Set the value of the UIDrawingSurface::_sfCursors field.
inline
void UIDrawingSurfaceBase::setCursors(const FieldContainerMap &value)
{
    editSField(CursorsFieldMask);

    _sfCursors.setValue(value);
}
//! Get the value of the UIDrawingSurface::_sfCursorPosition field.

inline
Pnt2f &UIDrawingSurfaceBase::editCursorPosition(void)
{
    editSField(CursorPositionFieldMask);

    return _sfCursorPosition.getValue();
}

//! Get the value of the UIDrawingSurface::_sfCursorPosition field.
inline
const Pnt2f &UIDrawingSurfaceBase::getCursorPosition(void) const
{
    return _sfCursorPosition.getValue();
}

//! Set the value of the UIDrawingSurface::_sfCursorPosition field.
inline
void UIDrawingSurfaceBase::setCursorPosition(const Pnt2f &value)
{
    editSField(CursorPositionFieldMask);

    _sfCursorPosition.setValue(value);
}

//! Get the value of the \a index element the UIDrawingSurface::_mfInternalWindows field.
inline
InternalWindow * UIDrawingSurfaceBase::getInternalWindows(const UInt32 index) const
{
    return _mfInternalWindows[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void UIDrawingSurfaceBase::execSync (      UIDrawingSurfaceBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
        _mfInternalWindows.syncWith(pFrom->_mfInternalWindows,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
        _sfFocusedWindow.syncWith(pFrom->_sfFocusedWindow);

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
        _sfEventProducer.syncWith(pFrom->_sfEventProducer);

    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
        _sfGraphics.syncWith(pFrom->_sfGraphics);

    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
        _sfMouseTransformFunctor.syncWith(pFrom->_sfMouseTransformFunctor);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pFrom->_sfSize);

    if(FieldBits::NoField != (ActiveFieldMask & whichField))
        _sfActive.syncWith(pFrom->_sfActive);

    if(FieldBits::NoField != (CursorsFieldMask & whichField))
        _sfCursors.syncWith(pFrom->_sfCursors);

    if(FieldBits::NoField != (CursorPositionFieldMask & whichField))
        _sfCursorPosition.syncWith(pFrom->_sfCursorPosition);
}
#endif


inline
const Char8 *UIDrawingSurfaceBase::getClassname(void)
{
    return "UIDrawingSurface";
}
OSG_GEN_CONTAINERPTR(UIDrawingSurface);

OSG_END_NAMESPACE

