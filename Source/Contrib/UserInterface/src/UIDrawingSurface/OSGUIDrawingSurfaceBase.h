/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIDrawingSurface
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGUIDRAWINGSURFACEBASE_H_
#define _OSGUIDRAWINGSURFACEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent

#include "OSGInternalWindowFields.h"    // InternalWindows type
#include "OSGWindowEventProducerFields.h" // EventProducer type
#include "OSGGraphicsFields.h"          // Graphics type
#include "OSGUIDrawingSurfaceMouseTransformFunctorFields.h" // MouseTransformFunctor type
#include "OSGVecFields.h"               // Size type
#include "OSGSysFields.h"               // Active type
#include "OSGFieldContainerMapFields.h" // Cursors type

#include "OSGUIDrawingSurfaceFields.h"

OSG_BEGIN_NAMESPACE

class UIDrawingSurface;

//! \brief UIDrawingSurface Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING UIDrawingSurfaceBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(UIDrawingSurface);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        InternalWindowsFieldId = Inherited::NextFieldId,
        FocusedWindowFieldId = InternalWindowsFieldId + 1,
        EventProducerFieldId = FocusedWindowFieldId + 1,
        GraphicsFieldId = EventProducerFieldId + 1,
        MouseTransformFunctorFieldId = GraphicsFieldId + 1,
        SizeFieldId = MouseTransformFunctorFieldId + 1,
        ActiveFieldId = SizeFieldId + 1,
        CursorsFieldId = ActiveFieldId + 1,
        CursorPositionFieldId = CursorsFieldId + 1,
        NextFieldId = CursorPositionFieldId + 1
    };

    static const OSG::BitVector InternalWindowsFieldMask =
        (TypeTraits<BitVector>::One << InternalWindowsFieldId);
    static const OSG::BitVector FocusedWindowFieldMask =
        (TypeTraits<BitVector>::One << FocusedWindowFieldId);
    static const OSG::BitVector EventProducerFieldMask =
        (TypeTraits<BitVector>::One << EventProducerFieldId);
    static const OSG::BitVector GraphicsFieldMask =
        (TypeTraits<BitVector>::One << GraphicsFieldId);
    static const OSG::BitVector MouseTransformFunctorFieldMask =
        (TypeTraits<BitVector>::One << MouseTransformFunctorFieldId);
    static const OSG::BitVector SizeFieldMask =
        (TypeTraits<BitVector>::One << SizeFieldId);
    static const OSG::BitVector ActiveFieldMask =
        (TypeTraits<BitVector>::One << ActiveFieldId);
    static const OSG::BitVector CursorsFieldMask =
        (TypeTraits<BitVector>::One << CursorsFieldId);
    static const OSG::BitVector CursorPositionFieldMask =
        (TypeTraits<BitVector>::One << CursorPositionFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFUnrecChildInternalWindowPtr MFInternalWindowsType;
    typedef SFWeakInternalWindowPtr SFFocusedWindowType;
    typedef SFWeakWindowEventProducerPtr SFEventProducerType;
    typedef SFUnrecGraphicsPtr SFGraphicsType;
    typedef SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr SFMouseTransformFunctorType;
    typedef SFVec2f           SFSizeType;
    typedef SFBool            SFActiveType;
    typedef SFFieldContainerMap SFCursorsType;
    typedef SFPnt2f           SFCursorPositionType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const MFUnrecChildInternalWindowPtr *getMFInternalWindows(void) const;
            const SFWeakInternalWindowPtr *getSFFocusedWindow  (void) const;
                  SFWeakInternalWindowPtr *editSFFocusedWindow  (void);
            const SFWeakWindowEventProducerPtr *getSFEventProducer  (void) const;
                  SFWeakWindowEventProducerPtr *editSFEventProducer  (void);
            const SFUnrecGraphicsPtr  *getSFGraphics       (void) const;
                  SFUnrecGraphicsPtr  *editSFGraphics       (void);
            const SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr *getSFMouseTransformFunctor(void) const;
                  SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr *editSFMouseTransformFunctor(void);

                  SFVec2f             *editSFSize           (void);
            const SFVec2f             *getSFSize            (void) const;

                  SFBool              *editSFActive         (void);
            const SFBool              *getSFActive          (void) const;

                  SFFieldContainerMap *editSFCursors        (void);
            const SFFieldContainerMap *getSFCursors         (void) const;


                  InternalWindow * getInternalWindows(const UInt32 index) const;

                  InternalWindow * getFocusedWindow  (void) const;

                  WindowEventProducer * getEventProducer  (void) const;

                  Graphics * getGraphics       (void) const;

                  UIDrawingSurfaceMouseTransformFunctor * getMouseTransformFunctor(void) const;

                  Vec2f               &editSize           (void);
            const Vec2f               &getSize            (void) const;

                  bool                &editActive         (void);
                  bool                 getActive          (void) const;

                  FieldContainerMap   &editCursors        (void);
            const FieldContainerMap   &getCursors         (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setFocusedWindow  (InternalWindow * const value);
            void setEventProducer  (WindowEventProducer * const value);
            void setGraphics       (Graphics * const value);
            void setMouseTransformFunctor(UIDrawingSurfaceMouseTransformFunctor * const value);
            void setSize           (const Vec2f &value);
            void setActive         (const bool value);
            void setCursors        (const FieldContainerMap &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToInternalWindows           (InternalWindow * const value   );
    void assignInternalWindows          (const MFUnrecChildInternalWindowPtr &value);
    void clearInternalWindows            (void                         );
    void insertIntoInternalWindows      (UInt32               uiIndex,
                                             InternalWindow * const value   );
    void replaceInInternalWindows  (      UInt32         uiIndex,
                                             InternalWindow * const value   );
    void replaceObjInInternalWindows (InternalWindow * const pOldElem,
                                             InternalWindow * const pNewElem);
    void removeFromInternalWindows (UInt32               uiIndex );
    void removeObjFromInternalWindows(InternalWindow * const value   );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  UIDrawingSurfaceTransitPtr  create          (void);
    static  UIDrawingSurface           *createEmpty     (void);

    static  UIDrawingSurfaceTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  UIDrawingSurface            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  UIDrawingSurfaceTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFUnrecChildInternalWindowPtr _mfInternalWindows;
    SFWeakInternalWindowPtr _sfFocusedWindow;
    SFWeakWindowEventProducerPtr _sfEventProducer;
    SFUnrecGraphicsPtr _sfGraphics;
    SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr _sfMouseTransformFunctor;
    SFVec2f           _sfSize;
    SFBool            _sfActive;
    SFFieldContainerMap _sfCursors;
    SFPnt2f           _sfCursorPosition;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    UIDrawingSurfaceBase(void);
    UIDrawingSurfaceBase(const UIDrawingSurfaceBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~UIDrawingSurfaceBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const UIDrawingSurface *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleInternalWindows (void) const;
    EditFieldHandlePtr editHandleInternalWindows(void);
    GetFieldHandlePtr  getHandleFocusedWindow   (void) const;
    EditFieldHandlePtr editHandleFocusedWindow  (void);
    GetFieldHandlePtr  getHandleEventProducer   (void) const;
    EditFieldHandlePtr editHandleEventProducer  (void);
    GetFieldHandlePtr  getHandleGraphics        (void) const;
    EditFieldHandlePtr editHandleGraphics       (void);
    GetFieldHandlePtr  getHandleMouseTransformFunctor (void) const;
    EditFieldHandlePtr editHandleMouseTransformFunctor(void);
    GetFieldHandlePtr  getHandleSize            (void) const;
    EditFieldHandlePtr editHandleSize           (void);
    GetFieldHandlePtr  getHandleActive          (void) const;
    EditFieldHandlePtr editHandleActive         (void);
    GetFieldHandlePtr  getHandleCursors         (void) const;
    EditFieldHandlePtr editHandleCursors        (void);
    GetFieldHandlePtr  getHandleCursorPosition  (void) const;
    EditFieldHandlePtr editHandleCursorPosition (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFPnt2f             *editSFCursorPosition (void);
            const SFPnt2f             *getSFCursorPosition  (void) const;


                  Pnt2f               &editCursorPosition (void);
            const Pnt2f               &getCursorPosition  (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setCursorPosition (const Pnt2f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      UIDrawingSurfaceBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const UIDrawingSurfaceBase &source);
};

typedef UIDrawingSurfaceBase *UIDrawingSurfaceBaseP;

OSG_END_NAMESPACE

#endif /* _OSGUIDRAWINGSURFACEBASE_H_ */
