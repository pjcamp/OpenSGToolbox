/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Sound!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SoundBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SoundBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &SoundBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 SoundBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 SoundBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Sound::_sfPosition field.

inline
Pnt3f &SoundBase::editPosition(void)
{
    editSField(PositionFieldMask);

    return _sfPosition.getValue();
}

//! Get the value of the Sound::_sfPosition field.
inline
const Pnt3f &SoundBase::getPosition(void) const
{
    return _sfPosition.getValue();
}

//! Set the value of the Sound::_sfPosition field.
inline
void SoundBase::setPosition(const Pnt3f &value)
{
    editSField(PositionFieldMask);

    _sfPosition.setValue(value);
}
//! Get the value of the Sound::_sfVelocity field.

inline
Vec3f &SoundBase::editVelocity(void)
{
    editSField(VelocityFieldMask);

    return _sfVelocity.getValue();
}

//! Get the value of the Sound::_sfVelocity field.
inline
const Vec3f &SoundBase::getVelocity(void) const
{
    return _sfVelocity.getValue();
}

//! Set the value of the Sound::_sfVelocity field.
inline
void SoundBase::setVelocity(const Vec3f &value)
{
    editSField(VelocityFieldMask);

    _sfVelocity.setValue(value);
}
//! Get the value of the Sound::_sfVolume field.

inline
Real32 &SoundBase::editVolume(void)
{
    editSField(VolumeFieldMask);

    return _sfVolume.getValue();
}

//! Get the value of the Sound::_sfVolume field.
inline
      Real32  SoundBase::getVolume(void) const
{
    return _sfVolume.getValue();
}

//! Set the value of the Sound::_sfVolume field.
inline
void SoundBase::setVolume(const Real32 value)
{
    editSField(VolumeFieldMask);

    _sfVolume.setValue(value);
}
//! Get the value of the Sound::_sfPan field.

inline
Real32 &SoundBase::editPan(void)
{
    editSField(PanFieldMask);

    return _sfPan.getValue();
}

//! Get the value of the Sound::_sfPan field.
inline
      Real32  SoundBase::getPan(void) const
{
    return _sfPan.getValue();
}

//! Set the value of the Sound::_sfPan field.
inline
void SoundBase::setPan(const Real32 value)
{
    editSField(PanFieldMask);

    _sfPan.setValue(value);
}
//! Get the value of the Sound::_sfFrequency field.

inline
Real32 &SoundBase::editFrequency(void)
{
    editSField(FrequencyFieldMask);

    return _sfFrequency.getValue();
}

//! Get the value of the Sound::_sfFrequency field.
inline
      Real32  SoundBase::getFrequency(void) const
{
    return _sfFrequency.getValue();
}

//! Set the value of the Sound::_sfFrequency field.
inline
void SoundBase::setFrequency(const Real32 value)
{
    editSField(FrequencyFieldMask);

    _sfFrequency.setValue(value);
}
//! Get the value of the Sound::_sfLooping field.

inline
Int32 &SoundBase::editLooping(void)
{
    editSField(LoopingFieldMask);

    return _sfLooping.getValue();
}

//! Get the value of the Sound::_sfLooping field.
inline
      Int32  SoundBase::getLooping(void) const
{
    return _sfLooping.getValue();
}

//! Set the value of the Sound::_sfLooping field.
inline
void SoundBase::setLooping(const Int32 value)
{
    editSField(LoopingFieldMask);

    _sfLooping.setValue(value);
}
//! Get the value of the Sound::_sfStreaming field.

inline
bool &SoundBase::editStreaming(void)
{
    editSField(StreamingFieldMask);

    return _sfStreaming.getValue();
}

//! Get the value of the Sound::_sfStreaming field.
inline
      bool  SoundBase::getStreaming(void) const
{
    return _sfStreaming.getValue();
}

//! Set the value of the Sound::_sfStreaming field.
inline
void SoundBase::setStreaming(const bool value)
{
    editSField(StreamingFieldMask);

    _sfStreaming.setValue(value);
}
//! Get the value of the Sound::_sfFile field.

inline
BoostPath &SoundBase::editFile(void)
{
    editSField(FileFieldMask);

    return _sfFile.getValue();
}

//! Get the value of the Sound::_sfFile field.
inline
const BoostPath &SoundBase::getFile(void) const
{
    return _sfFile.getValue();
}

//! Set the value of the Sound::_sfFile field.
inline
void SoundBase::setFile(const BoostPath &value)
{
    editSField(FileFieldMask);

    _sfFile.setValue(value);
}
//! Get the value of the Sound::_sfEnable3D field.

inline
bool &SoundBase::editEnable3D(void)
{
    editSField(Enable3DFieldMask);

    return _sfEnable3D.getValue();
}

//! Get the value of the Sound::_sfEnable3D field.
inline
      bool  SoundBase::getEnable3D(void) const
{
    return _sfEnable3D.getValue();
}

//! Set the value of the Sound::_sfEnable3D field.
inline
void SoundBase::setEnable3D(const bool value)
{
    editSField(Enable3DFieldMask);

    _sfEnable3D.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SoundBase::execSync (      SoundBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pFrom->_sfPosition);

    if(FieldBits::NoField != (VelocityFieldMask & whichField))
        _sfVelocity.syncWith(pFrom->_sfVelocity);

    if(FieldBits::NoField != (VolumeFieldMask & whichField))
        _sfVolume.syncWith(pFrom->_sfVolume);

    if(FieldBits::NoField != (PanFieldMask & whichField))
        _sfPan.syncWith(pFrom->_sfPan);

    if(FieldBits::NoField != (FrequencyFieldMask & whichField))
        _sfFrequency.syncWith(pFrom->_sfFrequency);

    if(FieldBits::NoField != (LoopingFieldMask & whichField))
        _sfLooping.syncWith(pFrom->_sfLooping);

    if(FieldBits::NoField != (StreamingFieldMask & whichField))
        _sfStreaming.syncWith(pFrom->_sfStreaming);

    if(FieldBits::NoField != (FileFieldMask & whichField))
        _sfFile.syncWith(pFrom->_sfFile);

    if(FieldBits::NoField != (Enable3DFieldMask & whichField))
        _sfEnable3D.syncWith(pFrom->_sfEnable3D);
}
#endif


inline
const Char8 *SoundBase::getClassname(void)
{
    return "Sound";
}

inline
boost::signals2::connection SoundBase::attachActivity(UInt32 eventId,
                                                              Activity* TheActivity)
{
    return connectEvent(eventId, boost::bind(&Activity::eventProduced, TheActivity, _1, _2) );
}

inline
UInt32 SoundBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *SoundBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *SoundBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 SoundBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  SoundBase::connectSoundPlayed(const SoundPlayedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SoundPlayedEvent.connect(listener, at);
}

inline
boost::signals2::connection  SoundBase::connectSoundPlayed(const SoundPlayedEventType::group_type &group,
                                                    const SoundPlayedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SoundPlayedEvent.connect(group, listener, at);
}

inline
void  SoundBase::disconnectSoundPlayed(const SoundPlayedEventType::group_type &group)
{
    _SoundPlayedEvent.disconnect(group);
}

inline
void  SoundBase::disconnectAllSlotsSoundPlayed(void)
{
    _SoundPlayedEvent.disconnect_all_slots();
}

inline
bool  SoundBase::isEmptySoundPlayed(void) const
{
    return _SoundPlayedEvent.empty();
}

inline
UInt32  SoundBase::numSlotsSoundPlayed(void) const
{
    return _SoundPlayedEvent.num_slots();
}

inline
void SoundBase::produceSoundPlayed(SoundPlayedEventDetailsType* const e)
{
    produceEvent(SoundPlayedEventId, e);
}

inline
boost::signals2::connection  SoundBase::connectSoundStopped(const SoundStoppedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SoundStoppedEvent.connect(listener, at);
}

inline
boost::signals2::connection  SoundBase::connectSoundStopped(const SoundStoppedEventType::group_type &group,
                                                    const SoundStoppedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SoundStoppedEvent.connect(group, listener, at);
}

inline
void  SoundBase::disconnectSoundStopped(const SoundStoppedEventType::group_type &group)
{
    _SoundStoppedEvent.disconnect(group);
}

inline
void  SoundBase::disconnectAllSlotsSoundStopped(void)
{
    _SoundStoppedEvent.disconnect_all_slots();
}

inline
bool  SoundBase::isEmptySoundStopped(void) const
{
    return _SoundStoppedEvent.empty();
}

inline
UInt32  SoundBase::numSlotsSoundStopped(void) const
{
    return _SoundStoppedEvent.num_slots();
}

inline
void SoundBase::produceSoundStopped(SoundStoppedEventDetailsType* const e)
{
    produceEvent(SoundStoppedEventId, e);
}

inline
boost::signals2::connection  SoundBase::connectSoundPaused(const SoundPausedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SoundPausedEvent.connect(listener, at);
}

inline
boost::signals2::connection  SoundBase::connectSoundPaused(const SoundPausedEventType::group_type &group,
                                                    const SoundPausedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SoundPausedEvent.connect(group, listener, at);
}

inline
void  SoundBase::disconnectSoundPaused(const SoundPausedEventType::group_type &group)
{
    _SoundPausedEvent.disconnect(group);
}

inline
void  SoundBase::disconnectAllSlotsSoundPaused(void)
{
    _SoundPausedEvent.disconnect_all_slots();
}

inline
bool  SoundBase::isEmptySoundPaused(void) const
{
    return _SoundPausedEvent.empty();
}

inline
UInt32  SoundBase::numSlotsSoundPaused(void) const
{
    return _SoundPausedEvent.num_slots();
}

inline
void SoundBase::produceSoundPaused(SoundPausedEventDetailsType* const e)
{
    produceEvent(SoundPausedEventId, e);
}

inline
boost::signals2::connection  SoundBase::connectSoundUnpaused(const SoundUnpausedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SoundUnpausedEvent.connect(listener, at);
}

inline
boost::signals2::connection  SoundBase::connectSoundUnpaused(const SoundUnpausedEventType::group_type &group,
                                                    const SoundUnpausedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SoundUnpausedEvent.connect(group, listener, at);
}

inline
void  SoundBase::disconnectSoundUnpaused(const SoundUnpausedEventType::group_type &group)
{
    _SoundUnpausedEvent.disconnect(group);
}

inline
void  SoundBase::disconnectAllSlotsSoundUnpaused(void)
{
    _SoundUnpausedEvent.disconnect_all_slots();
}

inline
bool  SoundBase::isEmptySoundUnpaused(void) const
{
    return _SoundUnpausedEvent.empty();
}

inline
UInt32  SoundBase::numSlotsSoundUnpaused(void) const
{
    return _SoundUnpausedEvent.num_slots();
}

inline
void SoundBase::produceSoundUnpaused(SoundUnpausedEventDetailsType* const e)
{
    produceEvent(SoundUnpausedEventId, e);
}

inline
boost::signals2::connection  SoundBase::connectSoundLooped(const SoundLoopedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SoundLoopedEvent.connect(listener, at);
}

inline
boost::signals2::connection  SoundBase::connectSoundLooped(const SoundLoopedEventType::group_type &group,
                                                    const SoundLoopedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SoundLoopedEvent.connect(group, listener, at);
}

inline
void  SoundBase::disconnectSoundLooped(const SoundLoopedEventType::group_type &group)
{
    _SoundLoopedEvent.disconnect(group);
}

inline
void  SoundBase::disconnectAllSlotsSoundLooped(void)
{
    _SoundLoopedEvent.disconnect_all_slots();
}

inline
bool  SoundBase::isEmptySoundLooped(void) const
{
    return _SoundLoopedEvent.empty();
}

inline
UInt32  SoundBase::numSlotsSoundLooped(void) const
{
    return _SoundLoopedEvent.num_slots();
}

inline
void SoundBase::produceSoundLooped(SoundLoopedEventDetailsType* const e)
{
    produceEvent(SoundLoopedEventId, e);
}

inline
boost::signals2::connection  SoundBase::connectSoundEnded(const SoundEndedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SoundEndedEvent.connect(listener, at);
}

inline
boost::signals2::connection  SoundBase::connectSoundEnded(const SoundEndedEventType::group_type &group,
                                                    const SoundEndedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SoundEndedEvent.connect(group, listener, at);
}

inline
void  SoundBase::disconnectSoundEnded(const SoundEndedEventType::group_type &group)
{
    _SoundEndedEvent.disconnect(group);
}

inline
void  SoundBase::disconnectAllSlotsSoundEnded(void)
{
    _SoundEndedEvent.disconnect_all_slots();
}

inline
bool  SoundBase::isEmptySoundEnded(void) const
{
    return _SoundEndedEvent.empty();
}

inline
UInt32  SoundBase::numSlotsSoundEnded(void) const
{
    return _SoundEndedEvent.num_slots();
}

inline
void SoundBase::produceSoundEnded(SoundEndedEventDetailsType* const e)
{
    produceEvent(SoundEndedEventId, e);
}

OSG_GEN_CONTAINERPTR(Sound);

OSG_END_NAMESPACE

