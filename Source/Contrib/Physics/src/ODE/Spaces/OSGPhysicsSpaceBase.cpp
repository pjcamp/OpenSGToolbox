/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsSpace!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGCollisionEventDetails.h"


#include "OSGFieldContainer.h"          // ParentHandler Class
#include "OSGCollisionContactParameters.h" // DefaultCollisionParameters Class

#include "OSGPhysicsSpace.h"
#include "OSGPhysicsSpaceBase.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsSpace
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            PhysicsSpaceBase::_sfCleanup
    
*/

/*! \var Int32           PhysicsSpaceBase::_sfSublevel
    
*/

/*! \var FieldContainer * PhysicsSpaceBase::_sfParentHandler
    
*/

/*! \var CollisionContactParameters * PhysicsSpaceBase::_sfDefaultCollisionParameters
    
*/

/*! \var UInt64          PhysicsSpaceBase::_mfCategory1
    
*/

/*! \var UInt64          PhysicsSpaceBase::_mfCategory2
    
*/

/*! \var CollisionContactParameters * PhysicsSpaceBase::_mfCategoryCollisionParameters
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsSpace *>::_type("PhysicsSpacePtr", "PhysicsGeomPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsSpace *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsSpace *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsSpace *,
                           0);

DataType &FieldTraits< PhysicsSpace *, 1 >::getType(void)
{
    return FieldTraits<PhysicsSpace *, 0>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      PhysicsSpace *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsSpaceBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "cleanup",
        "",
        CleanupFieldId, CleanupFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsSpace::editHandleCleanup),
        static_cast<FieldGetMethodSig >(&PhysicsSpace::getHandleCleanup));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "sublevel",
        "",
        SublevelFieldId, SublevelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsSpace::editHandleSublevel),
        static_cast<FieldGetMethodSig >(&PhysicsSpace::getHandleSublevel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentHandler",
        "",
        ParentHandlerFieldId, ParentHandlerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&PhysicsSpace::invalidEditField),
        static_cast     <FieldGetMethodSig >(&PhysicsSpace::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCollisionContactParametersPtr::Description(
        SFUnrecCollisionContactParametersPtr::getClassType(),
        "defaultCollisionParameters",
        "",
        DefaultCollisionParametersFieldId, DefaultCollisionParametersFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsSpace::editHandleDefaultCollisionParameters),
        static_cast<FieldGetMethodSig >(&PhysicsSpace::getHandleDefaultCollisionParameters));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt64::Description(
        MFUInt64::getClassType(),
        "category1",
        "",
        Category1FieldId, Category1FieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsSpace::editHandleCategory1),
        static_cast<FieldGetMethodSig >(&PhysicsSpace::getHandleCategory1));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt64::Description(
        MFUInt64::getClassType(),
        "category2",
        "",
        Category2FieldId, Category2FieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsSpace::editHandleCategory2),
        static_cast<FieldGetMethodSig >(&PhysicsSpace::getHandleCategory2));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecCollisionContactParametersPtr::Description(
        MFUnrecCollisionContactParametersPtr::getClassType(),
        "categoryCollisionParameters",
        "",
        CategoryCollisionParametersFieldId, CategoryCollisionParametersFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsSpace::editHandleCategoryCollisionParameters),
        static_cast<FieldGetMethodSig >(&PhysicsSpace::getHandleCategoryCollisionParameters));

    oType.addInitialDesc(pDesc);
}


PhysicsSpaceBase::TypeObject PhysicsSpaceBase::_type(
    PhysicsSpaceBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsSpaceBase::createEmptyLocal),
    PhysicsSpace::initMethod,
    PhysicsSpace::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsSpace::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsSpace\"\n"
    "\tparent=\"PhysicsGeom\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"multi\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"cleanup\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sublevel\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ParentHandler\"\n"
    "\t\ttype=\"FieldContainer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t    access=\"none\"\n"
    "        doRefCount=\"false\"\n"
    "        passFieldMask=\"true\"\n"
    "        category=\"parentpointer\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"defaultCollisionParameters\"\n"
    "\t\ttype=\"CollisionContactParameters\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"category1\"\n"
    "\t\ttype=\"UInt64\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"category2\"\n"
    "\t\ttype=\"UInt64\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"categoryCollisionParameters\"\n"
    "\t\ttype=\"CollisionContactParameters\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"Collision\"\n"
    "\t\tdetailsType=\"CollisionEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    ""
    );

//! PhysicsSpace Produced Events

EventDescription *PhysicsSpaceBase::_eventDesc[] =
{
    new EventDescription("Collision", 
                          "",
                          CollisionEventId, 
                          FieldTraits<CollisionEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&PhysicsSpaceBase::getHandleCollisionSignal))

};

EventProducerType PhysicsSpaceBase::_producerType(
    "PhysicsSpaceProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsSpaceBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsSpaceBase::getType(void) const
{
    return _type;
}

const EventProducerType &PhysicsSpaceBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 PhysicsSpaceBase::getContainerSize(void) const
{
    return sizeof(PhysicsSpace);
}

/*------------------------- decorator get ------------------------------*/


SFBool *PhysicsSpaceBase::editSFCleanup(void)
{
    editSField(CleanupFieldMask);

    return &_sfCleanup;
}

const SFBool *PhysicsSpaceBase::getSFCleanup(void) const
{
    return &_sfCleanup;
}


SFInt32 *PhysicsSpaceBase::editSFSublevel(void)
{
    editSField(SublevelFieldMask);

    return &_sfSublevel;
}

const SFInt32 *PhysicsSpaceBase::getSFSublevel(void) const
{
    return &_sfSublevel;
}



//! Get the PhysicsSpace::_sfDefaultCollisionParameters field.
const SFUnrecCollisionContactParametersPtr *PhysicsSpaceBase::getSFDefaultCollisionParameters(void) const
{
    return &_sfDefaultCollisionParameters;
}

SFUnrecCollisionContactParametersPtr *PhysicsSpaceBase::editSFDefaultCollisionParameters(void)
{
    editSField(DefaultCollisionParametersFieldMask);

    return &_sfDefaultCollisionParameters;
}

MFUInt64 *PhysicsSpaceBase::editMFCategory1(void)
{
    editMField(Category1FieldMask, _mfCategory1);

    return &_mfCategory1;
}

const MFUInt64 *PhysicsSpaceBase::getMFCategory1(void) const
{
    return &_mfCategory1;
}


MFUInt64 *PhysicsSpaceBase::editMFCategory2(void)
{
    editMField(Category2FieldMask, _mfCategory2);

    return &_mfCategory2;
}

const MFUInt64 *PhysicsSpaceBase::getMFCategory2(void) const
{
    return &_mfCategory2;
}


//! Get the PhysicsSpace::_mfCategoryCollisionParameters field.
const MFUnrecCollisionContactParametersPtr *PhysicsSpaceBase::getMFCategoryCollisionParameters(void) const
{
    return &_mfCategoryCollisionParameters;
}

MFUnrecCollisionContactParametersPtr *PhysicsSpaceBase::editMFCategoryCollisionParameters(void)
{
    editMField(CategoryCollisionParametersFieldMask, _mfCategoryCollisionParameters);

    return &_mfCategoryCollisionParameters;
}



void PhysicsSpaceBase::pushToCategoryCollisionParameters(CollisionContactParameters * const value)
{
    editMField(CategoryCollisionParametersFieldMask, _mfCategoryCollisionParameters);

    _mfCategoryCollisionParameters.push_back(value);
}

void PhysicsSpaceBase::assignCategoryCollisionParameters(const MFUnrecCollisionContactParametersPtr &value)
{
    MFUnrecCollisionContactParametersPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecCollisionContactParametersPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<PhysicsSpace *>(this)->clearCategoryCollisionParameters();

    while(elemIt != elemEnd)
    {
        this->pushToCategoryCollisionParameters(*elemIt);

        ++elemIt;
    }
}

void PhysicsSpaceBase::removeFromCategoryCollisionParameters(UInt32 uiIndex)
{
    if(uiIndex < _mfCategoryCollisionParameters.size())
    {
        editMField(CategoryCollisionParametersFieldMask, _mfCategoryCollisionParameters);

        _mfCategoryCollisionParameters.erase(uiIndex);
    }
}

void PhysicsSpaceBase::removeObjFromCategoryCollisionParameters(CollisionContactParameters * const value)
{
    Int32 iElemIdx = _mfCategoryCollisionParameters.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(CategoryCollisionParametersFieldMask, _mfCategoryCollisionParameters);

        _mfCategoryCollisionParameters.erase(iElemIdx);
    }
}
void PhysicsSpaceBase::clearCategoryCollisionParameters(void)
{
    editMField(CategoryCollisionParametersFieldMask, _mfCategoryCollisionParameters);


    _mfCategoryCollisionParameters.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 PhysicsSpaceBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CleanupFieldMask & whichField))
    {
        returnValue += _sfCleanup.getBinSize();
    }
    if(FieldBits::NoField != (SublevelFieldMask & whichField))
    {
        returnValue += _sfSublevel.getBinSize();
    }
    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        returnValue += _sfParentHandler.getBinSize();
    }
    if(FieldBits::NoField != (DefaultCollisionParametersFieldMask & whichField))
    {
        returnValue += _sfDefaultCollisionParameters.getBinSize();
    }
    if(FieldBits::NoField != (Category1FieldMask & whichField))
    {
        returnValue += _mfCategory1.getBinSize();
    }
    if(FieldBits::NoField != (Category2FieldMask & whichField))
    {
        returnValue += _mfCategory2.getBinSize();
    }
    if(FieldBits::NoField != (CategoryCollisionParametersFieldMask & whichField))
    {
        returnValue += _mfCategoryCollisionParameters.getBinSize();
    }

    return returnValue;
}

void PhysicsSpaceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CleanupFieldMask & whichField))
    {
        _sfCleanup.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SublevelFieldMask & whichField))
    {
        _sfSublevel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        _sfParentHandler.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DefaultCollisionParametersFieldMask & whichField))
    {
        _sfDefaultCollisionParameters.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Category1FieldMask & whichField))
    {
        _mfCategory1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Category2FieldMask & whichField))
    {
        _mfCategory2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CategoryCollisionParametersFieldMask & whichField))
    {
        _mfCategoryCollisionParameters.copyToBin(pMem);
    }
}

void PhysicsSpaceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CleanupFieldMask & whichField))
    {
        _sfCleanup.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SublevelFieldMask & whichField))
    {
        _sfSublevel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        _sfParentHandler.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DefaultCollisionParametersFieldMask & whichField))
    {
        _sfDefaultCollisionParameters.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Category1FieldMask & whichField))
    {
        _mfCategory1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Category2FieldMask & whichField))
    {
        _mfCategory2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CategoryCollisionParametersFieldMask & whichField))
    {
        _mfCategoryCollisionParameters.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsSpaceTransitPtr PhysicsSpaceBase::createLocal(BitVector bFlags)
{
    PhysicsSpaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsSpace>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsSpaceTransitPtr PhysicsSpaceBase::createDependent(BitVector bFlags)
{
    PhysicsSpaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsSpace>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsSpaceTransitPtr PhysicsSpaceBase::create(void)
{
    PhysicsSpaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsSpace>(tmpPtr);
    }

    return fc;
}

PhysicsSpace *PhysicsSpaceBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsSpace *returnValue;

    newPtr<PhysicsSpace>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsSpace *PhysicsSpaceBase::createEmpty(void)
{
    PhysicsSpace *returnValue;

    newPtr<PhysicsSpace>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr PhysicsSpaceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsSpace *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsSpace *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsSpaceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsSpace *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsSpace *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsSpaceBase::shallowCopy(void) const
{
    PhysicsSpace *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsSpace *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- event producers ----------------------------------*/
void PhysicsSpaceBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case CollisionEventId:
        OSG_ASSERT(dynamic_cast<CollisionEventDetailsType* const>(e));

        _CollisionEvent.set_combiner(ConsumableEventCombiner(e));
        _CollisionEvent(dynamic_cast<CollisionEventDetailsType* const>(e), CollisionEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection PhysicsSpaceBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case CollisionEventId:
        return _CollisionEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  PhysicsSpaceBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case CollisionEventId:
        return _CollisionEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  PhysicsSpaceBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case CollisionEventId:
        _CollisionEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  PhysicsSpaceBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case CollisionEventId:
        _CollisionEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  PhysicsSpaceBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case CollisionEventId:
        return _CollisionEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  PhysicsSpaceBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case CollisionEventId:
        return _CollisionEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

PhysicsSpaceBase::PhysicsSpaceBase(void) :
    Inherited(),
    _sfCleanup                (),
    _sfSublevel               (),
    _sfParentHandler          (NULL),
    _sfDefaultCollisionParameters(NULL),
    _mfCategory1              (),
    _mfCategory2              (),
    _mfCategoryCollisionParameters()
{
}

PhysicsSpaceBase::PhysicsSpaceBase(const PhysicsSpaceBase &source) :
    Inherited(source),
    _sfCleanup                (source._sfCleanup                ),
    _sfSublevel               (source._sfSublevel               ),
    _sfParentHandler          (NULL),
    _sfDefaultCollisionParameters(NULL),
    _mfCategory1              (source._mfCategory1              ),
    _mfCategory2              (source._mfCategory2              ),
    _mfCategoryCollisionParameters()
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsSpaceBase::~PhysicsSpaceBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool PhysicsSpaceBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentHandlerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentHandler.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentHandler.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentHandlerFieldMask);

            _sfParentHandler.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool PhysicsSpaceBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentHandlerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentHandler.getValue() == pParent)
            {
                editSField(ParentHandlerFieldMask);

                _sfParentHandler.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("PhysicsSpaceBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


void PhysicsSpaceBase::onCreate(const PhysicsSpace *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PhysicsSpace *pThis = static_cast<PhysicsSpace *>(this);

        pThis->setDefaultCollisionParameters(source->getDefaultCollisionParameters());

        MFUnrecCollisionContactParametersPtr::const_iterator CategoryCollisionParametersIt  =
            source->_mfCategoryCollisionParameters.begin();
        MFUnrecCollisionContactParametersPtr::const_iterator CategoryCollisionParametersEnd =
            source->_mfCategoryCollisionParameters.end  ();

        while(CategoryCollisionParametersIt != CategoryCollisionParametersEnd)
        {
            pThis->pushToCategoryCollisionParameters(*CategoryCollisionParametersIt);

            ++CategoryCollisionParametersIt;
        }
    }
}

GetFieldHandlePtr PhysicsSpaceBase::getHandleCleanup         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCleanup,
             this->getType().getFieldDesc(CleanupFieldId),
             const_cast<PhysicsSpaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsSpaceBase::editHandleCleanup        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCleanup,
             this->getType().getFieldDesc(CleanupFieldId),
             this));


    editSField(CleanupFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsSpaceBase::getHandleSublevel        (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfSublevel,
             this->getType().getFieldDesc(SublevelFieldId),
             const_cast<PhysicsSpaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsSpaceBase::editHandleSublevel       (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfSublevel,
             this->getType().getFieldDesc(SublevelFieldId),
             this));


    editSField(SublevelFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsSpaceBase::getHandleParentHandler   (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr PhysicsSpaceBase::editHandleParentHandler  (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr PhysicsSpaceBase::getHandleDefaultCollisionParameters (void) const
{
    SFUnrecCollisionContactParametersPtr::GetHandlePtr returnValue(
        new  SFUnrecCollisionContactParametersPtr::GetHandle(
             &_sfDefaultCollisionParameters,
             this->getType().getFieldDesc(DefaultCollisionParametersFieldId),
             const_cast<PhysicsSpaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsSpaceBase::editHandleDefaultCollisionParameters(void)
{
    SFUnrecCollisionContactParametersPtr::EditHandlePtr returnValue(
        new  SFUnrecCollisionContactParametersPtr::EditHandle(
             &_sfDefaultCollisionParameters,
             this->getType().getFieldDesc(DefaultCollisionParametersFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsSpace::setDefaultCollisionParameters,
                    static_cast<PhysicsSpace *>(this), _1));

    editSField(DefaultCollisionParametersFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsSpaceBase::getHandleCategory1       (void) const
{
    MFUInt64::GetHandlePtr returnValue(
        new  MFUInt64::GetHandle(
             &_mfCategory1,
             this->getType().getFieldDesc(Category1FieldId),
             const_cast<PhysicsSpaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsSpaceBase::editHandleCategory1      (void)
{
    MFUInt64::EditHandlePtr returnValue(
        new  MFUInt64::EditHandle(
             &_mfCategory1,
             this->getType().getFieldDesc(Category1FieldId),
             this));


    editMField(Category1FieldMask, _mfCategory1);

    return returnValue;
}

GetFieldHandlePtr PhysicsSpaceBase::getHandleCategory2       (void) const
{
    MFUInt64::GetHandlePtr returnValue(
        new  MFUInt64::GetHandle(
             &_mfCategory2,
             this->getType().getFieldDesc(Category2FieldId),
             const_cast<PhysicsSpaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsSpaceBase::editHandleCategory2      (void)
{
    MFUInt64::EditHandlePtr returnValue(
        new  MFUInt64::EditHandle(
             &_mfCategory2,
             this->getType().getFieldDesc(Category2FieldId),
             this));


    editMField(Category2FieldMask, _mfCategory2);

    return returnValue;
}

GetFieldHandlePtr PhysicsSpaceBase::getHandleCategoryCollisionParameters (void) const
{
    MFUnrecCollisionContactParametersPtr::GetHandlePtr returnValue(
        new  MFUnrecCollisionContactParametersPtr::GetHandle(
             &_mfCategoryCollisionParameters,
             this->getType().getFieldDesc(CategoryCollisionParametersFieldId),
             const_cast<PhysicsSpaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsSpaceBase::editHandleCategoryCollisionParameters(void)
{
    MFUnrecCollisionContactParametersPtr::EditHandlePtr returnValue(
        new  MFUnrecCollisionContactParametersPtr::EditHandle(
             &_mfCategoryCollisionParameters,
             this->getType().getFieldDesc(CategoryCollisionParametersFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&PhysicsSpace::pushToCategoryCollisionParameters,
                    static_cast<PhysicsSpace *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&PhysicsSpace::removeFromCategoryCollisionParameters,
                    static_cast<PhysicsSpace *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&PhysicsSpace::removeObjFromCategoryCollisionParameters,
                    static_cast<PhysicsSpace *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&PhysicsSpace::clearCategoryCollisionParameters,
                    static_cast<PhysicsSpace *>(this)));

    editMField(CategoryCollisionParametersFieldMask, _mfCategoryCollisionParameters);

    return returnValue;
}


GetEventHandlePtr PhysicsSpaceBase::getHandleCollisionSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<CollisionEventType>(
             const_cast<CollisionEventType *>(&_CollisionEvent),
             _producerType.getEventDescription(CollisionEventId),
             const_cast<PhysicsSpaceBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void PhysicsSpaceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsSpace *pThis = static_cast<PhysicsSpace *>(this);

    pThis->execSync(static_cast<PhysicsSpace *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsSpaceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsSpace *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsSpace *>(pRefAspect),
                  dynamic_cast<const PhysicsSpace *>(this));

    return returnValue;
}
#endif

void PhysicsSpaceBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PhysicsSpace *>(this)->setDefaultCollisionParameters(NULL);

    static_cast<PhysicsSpace *>(this)->clearCategoryCollisionParameters();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfCategory1.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCategory2.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
