/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsSpace!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PhysicsSpaceBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 PhysicsSpaceBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &PhysicsSpaceBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 PhysicsSpaceBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 PhysicsSpaceBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the PhysicsSpace::_sfCleanup field.

inline
bool &PhysicsSpaceBase::editCleanup(void)
{
    editSField(CleanupFieldMask);

    return _sfCleanup.getValue();
}

//! Get the value of the PhysicsSpace::_sfCleanup field.
inline
      bool  PhysicsSpaceBase::getCleanup(void) const
{
    return _sfCleanup.getValue();
}

//! Set the value of the PhysicsSpace::_sfCleanup field.
inline
void PhysicsSpaceBase::setCleanup(const bool value)
{
    editSField(CleanupFieldMask);

    _sfCleanup.setValue(value);
}
//! Get the value of the PhysicsSpace::_sfSublevel field.

inline
Int32 &PhysicsSpaceBase::editSublevel(void)
{
    editSField(SublevelFieldMask);

    return _sfSublevel.getValue();
}

//! Get the value of the PhysicsSpace::_sfSublevel field.
inline
      Int32  PhysicsSpaceBase::getSublevel(void) const
{
    return _sfSublevel.getValue();
}

//! Set the value of the PhysicsSpace::_sfSublevel field.
inline
void PhysicsSpaceBase::setSublevel(const Int32 value)
{
    editSField(SublevelFieldMask);

    _sfSublevel.setValue(value);
}

//! Get the value of the PhysicsSpace::_sfDefaultCollisionParameters field.
inline
CollisionContactParameters * PhysicsSpaceBase::getDefaultCollisionParameters(void) const
{
    return _sfDefaultCollisionParameters.getValue();
}

//! Set the value of the PhysicsSpace::_sfDefaultCollisionParameters field.
inline
void PhysicsSpaceBase::setDefaultCollisionParameters(CollisionContactParameters * const value)
{
    editSField(DefaultCollisionParametersFieldMask);

    _sfDefaultCollisionParameters.setValue(value);
}

//! Get the value of the \a index element the PhysicsSpace::_mfCategory1 field.
inline
      UInt64  PhysicsSpaceBase::getCategory1(const UInt32 index) const
{
    return _mfCategory1[index];
}

inline
UInt64 &PhysicsSpaceBase::editCategory1(const UInt32 index)
{
    editMField(Category1FieldMask, _mfCategory1);

    return _mfCategory1[index];
}


//! Get the value of the \a index element the PhysicsSpace::_mfCategory2 field.
inline
      UInt64  PhysicsSpaceBase::getCategory2(const UInt32 index) const
{
    return _mfCategory2[index];
}

inline
UInt64 &PhysicsSpaceBase::editCategory2(const UInt32 index)
{
    editMField(Category2FieldMask, _mfCategory2);

    return _mfCategory2[index];
}


//! Get the value of the \a index element the PhysicsSpace::_mfCategoryCollisionParameters field.
inline
CollisionContactParameters * PhysicsSpaceBase::getCategoryCollisionParameters(const UInt32 index) const
{
    return _mfCategoryCollisionParameters[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void PhysicsSpaceBase::execSync (      PhysicsSpaceBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (CleanupFieldMask & whichField))
        _sfCleanup.syncWith(pFrom->_sfCleanup);

    if(FieldBits::NoField != (SublevelFieldMask & whichField))
        _sfSublevel.syncWith(pFrom->_sfSublevel);

    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
        _sfParentHandler.syncWith(pFrom->_sfParentHandler);

    if(FieldBits::NoField != (DefaultCollisionParametersFieldMask & whichField))
        _sfDefaultCollisionParameters.syncWith(pFrom->_sfDefaultCollisionParameters);

    if(FieldBits::NoField != (Category1FieldMask & whichField))
        _mfCategory1.syncWith(pFrom->_mfCategory1,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (Category2FieldMask & whichField))
        _mfCategory2.syncWith(pFrom->_mfCategory2,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CategoryCollisionParametersFieldMask & whichField))
        _mfCategoryCollisionParameters.syncWith(pFrom->_mfCategoryCollisionParameters,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
const Char8 *PhysicsSpaceBase::getClassname(void)
{
    return "PhysicsSpace";
}

inline
boost::signals2::connection PhysicsSpaceBase::attachActivity(UInt32 eventId,
                                                              Activity* TheActivity)
{
    return connectEvent(eventId, boost::bind(&Activity::eventProduced, TheActivity, _1, _2) );
}

inline
UInt32 PhysicsSpaceBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *PhysicsSpaceBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *PhysicsSpaceBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 PhysicsSpaceBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  PhysicsSpaceBase::connectCollision(const CollisionEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _CollisionEvent.connect(listener, at);
}

inline
boost::signals2::connection  PhysicsSpaceBase::connectCollision(const CollisionEventType::group_type &group,
                                                    const CollisionEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _CollisionEvent.connect(group, listener, at);
}

inline
void  PhysicsSpaceBase::disconnectCollision(const CollisionEventType::group_type &group)
{
    _CollisionEvent.disconnect(group);
}

inline
void  PhysicsSpaceBase::disconnectAllSlotsCollision(void)
{
    _CollisionEvent.disconnect_all_slots();
}

inline
bool  PhysicsSpaceBase::isEmptyCollision(void) const
{
    return _CollisionEvent.empty();
}

inline
UInt32  PhysicsSpaceBase::numSlotsCollision(void) const
{
    return _CollisionEvent.num_slots();
}

inline
void PhysicsSpaceBase::produceCollision(CollisionEventDetailsType* const e)
{
    produceEvent(CollisionEventId, e);
}

OSG_GEN_CONTAINERPTR(PhysicsSpace);

OSG_END_NAMESPACE

