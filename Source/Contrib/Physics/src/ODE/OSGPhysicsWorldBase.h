/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsWorld
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPHYSICSWORLDBASE_H_
#define _OSGPHYSICSWORLDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribPhysicsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachment.h" // Parent

#include "OSGSysFields.h"               // Erp type
#include "OSGVecFields.h"               // Gravity type
#include "OSGFieldContainerFields.h"    // ParentHandler type

#include "OSGPhysicsWorldFields.h"

OSG_BEGIN_NAMESPACE

class PhysicsWorld;

//! \brief PhysicsWorld Base Class.

class OSG_CONTRIBPHYSICS_DLLMAPPING PhysicsWorldBase : public Attachment
{
  public:

    typedef Attachment Inherited;
    typedef Attachment ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(PhysicsWorld);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ErpFieldId = Inherited::NextFieldId,
        GravityFieldId = ErpFieldId + 1,
        CfmFieldId = GravityFieldId + 1,
        AutoDisableFlagFieldId = CfmFieldId + 1,
        AutoDisableLinearThresholdFieldId = AutoDisableFlagFieldId + 1,
        AutoDisableAngularThresholdFieldId = AutoDisableLinearThresholdFieldId + 1,
        AutoDisableStepsFieldId = AutoDisableAngularThresholdFieldId + 1,
        AutoDisableTimeFieldId = AutoDisableStepsFieldId + 1,
        WorldQuickStepNumIterationsFieldId = AutoDisableTimeFieldId + 1,
        WorldContactMaxCorrectingVelFieldId = WorldQuickStepNumIterationsFieldId + 1,
        WorldContactSurfaceLayerFieldId = WorldContactMaxCorrectingVelFieldId + 1,
        ParentHandlerFieldId = WorldContactSurfaceLayerFieldId + 1,
        NextFieldId = ParentHandlerFieldId + 1
    };

    static const OSG::BitVector ErpFieldMask =
        (TypeTraits<BitVector>::One << ErpFieldId);
    static const OSG::BitVector GravityFieldMask =
        (TypeTraits<BitVector>::One << GravityFieldId);
    static const OSG::BitVector CfmFieldMask =
        (TypeTraits<BitVector>::One << CfmFieldId);
    static const OSG::BitVector AutoDisableFlagFieldMask =
        (TypeTraits<BitVector>::One << AutoDisableFlagFieldId);
    static const OSG::BitVector AutoDisableLinearThresholdFieldMask =
        (TypeTraits<BitVector>::One << AutoDisableLinearThresholdFieldId);
    static const OSG::BitVector AutoDisableAngularThresholdFieldMask =
        (TypeTraits<BitVector>::One << AutoDisableAngularThresholdFieldId);
    static const OSG::BitVector AutoDisableStepsFieldMask =
        (TypeTraits<BitVector>::One << AutoDisableStepsFieldId);
    static const OSG::BitVector AutoDisableTimeFieldMask =
        (TypeTraits<BitVector>::One << AutoDisableTimeFieldId);
    static const OSG::BitVector WorldQuickStepNumIterationsFieldMask =
        (TypeTraits<BitVector>::One << WorldQuickStepNumIterationsFieldId);
    static const OSG::BitVector WorldContactMaxCorrectingVelFieldMask =
        (TypeTraits<BitVector>::One << WorldContactMaxCorrectingVelFieldId);
    static const OSG::BitVector WorldContactSurfaceLayerFieldMask =
        (TypeTraits<BitVector>::One << WorldContactSurfaceLayerFieldId);
    static const OSG::BitVector ParentHandlerFieldMask =
        (TypeTraits<BitVector>::One << ParentHandlerFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFReal32          SFErpType;
    typedef SFVec3f           SFGravityType;
    typedef SFReal32          SFCfmType;
    typedef SFInt32           SFAutoDisableFlagType;
    typedef SFReal32          SFAutoDisableLinearThresholdType;
    typedef SFReal32          SFAutoDisableAngularThresholdType;
    typedef SFInt32           SFAutoDisableStepsType;
    typedef SFReal32          SFAutoDisableTimeType;
    typedef SFInt32           SFWorldQuickStepNumIterationsType;
    typedef SFReal32          SFWorldContactMaxCorrectingVelType;
    typedef SFReal32          SFWorldContactSurfaceLayerType;
    typedef SFParentFieldContainerPtr SFParentHandlerType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFReal32            *editSFErp            (void);
            const SFReal32            *getSFErp             (void) const;

                  SFVec3f             *editSFGravity        (void);
            const SFVec3f             *getSFGravity         (void) const;

                  SFReal32            *editSFCfm            (void);
            const SFReal32            *getSFCfm             (void) const;

                  SFInt32             *editSFAutoDisableFlag(void);
            const SFInt32             *getSFAutoDisableFlag (void) const;

                  SFReal32            *editSFAutoDisableLinearThreshold(void);
            const SFReal32            *getSFAutoDisableLinearThreshold (void) const;

                  SFReal32            *editSFAutoDisableAngularThreshold(void);
            const SFReal32            *getSFAutoDisableAngularThreshold (void) const;

                  SFInt32             *editSFAutoDisableSteps(void);
            const SFInt32             *getSFAutoDisableSteps (void) const;

                  SFReal32            *editSFAutoDisableTime(void);
            const SFReal32            *getSFAutoDisableTime (void) const;

                  SFInt32             *editSFWorldQuickStepNumIterations(void);
            const SFInt32             *getSFWorldQuickStepNumIterations (void) const;

                  SFReal32            *editSFWorldContactMaxCorrectingVel(void);
            const SFReal32            *getSFWorldContactMaxCorrectingVel (void) const;

                  SFReal32            *editSFWorldContactSurfaceLayer(void);
            const SFReal32            *getSFWorldContactSurfaceLayer (void) const;


                  Real32              &editErp            (void);
                  Real32               getErp             (void) const;

                  Vec3f               &editGravity        (void);
            const Vec3f               &getGravity         (void) const;

                  Real32              &editCfm            (void);
                  Real32               getCfm             (void) const;

                  Int32               &editAutoDisableFlag(void);
                  Int32                getAutoDisableFlag (void) const;

                  Real32              &editAutoDisableLinearThreshold(void);
                  Real32               getAutoDisableLinearThreshold (void) const;

                  Real32              &editAutoDisableAngularThreshold(void);
                  Real32               getAutoDisableAngularThreshold (void) const;

                  Int32               &editAutoDisableSteps(void);
                  Int32                getAutoDisableSteps (void) const;

                  Real32              &editAutoDisableTime(void);
                  Real32               getAutoDisableTime (void) const;

                  Int32               &editWorldQuickStepNumIterations(void);
                  Int32                getWorldQuickStepNumIterations (void) const;

                  Real32              &editWorldContactMaxCorrectingVel(void);
                  Real32               getWorldContactMaxCorrectingVel (void) const;

                  Real32              &editWorldContactSurfaceLayer(void);
                  Real32               getWorldContactSurfaceLayer (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setErp            (const Real32 value);
            void setGravity        (const Vec3f &value);
            void setCfm            (const Real32 value);
            void setAutoDisableFlag(const Int32 value);
            void setAutoDisableLinearThreshold(const Real32 value);
            void setAutoDisableAngularThreshold(const Real32 value);
            void setAutoDisableSteps(const Int32 value);
            void setAutoDisableTime(const Real32 value);
            void setWorldQuickStepNumIterations(const Int32 value);
            void setWorldContactMaxCorrectingVel(const Real32 value);
            void setWorldContactSurfaceLayer(const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  PhysicsWorldTransitPtr  create          (void);
    static  PhysicsWorld           *createEmpty     (void);

    static  PhysicsWorldTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  PhysicsWorld            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  PhysicsWorldTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32          _sfErp;
    SFVec3f           _sfGravity;
    SFReal32          _sfCfm;
    SFInt32           _sfAutoDisableFlag;
    SFReal32          _sfAutoDisableLinearThreshold;
    SFReal32          _sfAutoDisableAngularThreshold;
    SFInt32           _sfAutoDisableSteps;
    SFReal32          _sfAutoDisableTime;
    SFInt32           _sfWorldQuickStepNumIterations;
    SFReal32          _sfWorldContactMaxCorrectingVel;
    SFReal32          _sfWorldContactSurfaceLayer;
    SFParentFieldContainerPtr _sfParentHandler;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    PhysicsWorldBase(void);
    PhysicsWorldBase(const PhysicsWorldBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~PhysicsWorldBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Parent linking                                               */
    /*! \{                                                                 */

    virtual bool linkParent  (FieldContainer * const pParent,
                              UInt16           const childFieldId,
                              UInt16           const parentFieldId);
    virtual bool unlinkParent(FieldContainer * const pParent,
                              UInt16           const parentFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleErp             (void) const;
    EditFieldHandlePtr editHandleErp            (void);
    GetFieldHandlePtr  getHandleGravity         (void) const;
    EditFieldHandlePtr editHandleGravity        (void);
    GetFieldHandlePtr  getHandleCfm             (void) const;
    EditFieldHandlePtr editHandleCfm            (void);
    GetFieldHandlePtr  getHandleAutoDisableFlag (void) const;
    EditFieldHandlePtr editHandleAutoDisableFlag(void);
    GetFieldHandlePtr  getHandleAutoDisableLinearThreshold (void) const;
    EditFieldHandlePtr editHandleAutoDisableLinearThreshold(void);
    GetFieldHandlePtr  getHandleAutoDisableAngularThreshold (void) const;
    EditFieldHandlePtr editHandleAutoDisableAngularThreshold(void);
    GetFieldHandlePtr  getHandleAutoDisableSteps (void) const;
    EditFieldHandlePtr editHandleAutoDisableSteps(void);
    GetFieldHandlePtr  getHandleAutoDisableTime (void) const;
    EditFieldHandlePtr editHandleAutoDisableTime(void);
    GetFieldHandlePtr  getHandleWorldQuickStepNumIterations (void) const;
    EditFieldHandlePtr editHandleWorldQuickStepNumIterations(void);
    GetFieldHandlePtr  getHandleWorldContactMaxCorrectingVel (void) const;
    EditFieldHandlePtr editHandleWorldContactMaxCorrectingVel(void);
    GetFieldHandlePtr  getHandleWorldContactSurfaceLayer (void) const;
    EditFieldHandlePtr editHandleWorldContactSurfaceLayer(void);
    GetFieldHandlePtr  getHandleParentHandler   (void) const;
    EditFieldHandlePtr editHandleParentHandler  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      PhysicsWorldBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const PhysicsWorldBase &source);
};

typedef PhysicsWorldBase *PhysicsWorldBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPHYSICSWORLDBASE_H_ */
