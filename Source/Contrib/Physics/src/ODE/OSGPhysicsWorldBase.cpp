/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsWorld!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGFieldContainer.h"          // ParentHandler Class

#include "OSGPhysicsWorldBase.h"
#include "OSGPhysicsWorld.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsWorld
    The PhysicsWorld contains all global dWorld attributes from ODE.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          PhysicsWorldBase::_sfErp
    the global ERP value, that controls how much error correction is performed in each time step. Typical values are in the range 0.1--0.8. The default is 0.2.
*/

/*! \var Vec3f           PhysicsWorldBase::_sfGravity
    the world's global gravity vector. The units are m/s/s, so Earth's gravity vector would be (0,0,-9.81), assuming that +z is up. The default is no gravity, i.e. (0,0,0).
*/

/*! \var Real32          PhysicsWorldBase::_sfCfm
    the global CFM (constraint force mixing) value. Typical values are in the range 10-9 -- 1. The default is 10-5 if single precision is being used, or 10-10 if double precision is being used.
*/

/*! \var Int32           PhysicsWorldBase::_sfAutoDisableFlag
    Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableFlag = disabled
*/

/*! \var Real32          PhysicsWorldBase::_sfAutoDisableLinearThreshold
    Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableLinearThreshold = 0.01
*/

/*! \var Real32          PhysicsWorldBase::_sfAutoDisableAngularThreshold
    Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableAngularThreshold = 0.01
*/

/*! \var Int32           PhysicsWorldBase::_sfAutoDisableSteps
    Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableSteps = 10
*/

/*! \var Real32          PhysicsWorldBase::_sfAutoDisableTime
    Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableTime = 0
*/

/*! \var Int32           PhysicsWorldBase::_sfWorldQuickStepNumIterations
    Set and get the number of iterations that the QuickStep method performs per step. More iterations will give a more accurate solution, but will take longer to compute. The default is 20 iterations.
*/

/*! \var Real32          PhysicsWorldBase::_sfWorldContactMaxCorrectingVel
    maximum correcting velocity that contacts are allowed to generate. The default value is infinity (i.e. no limit). Reducing this value can help prevent "popping" of deeply embedded objects.
*/

/*! \var Real32          PhysicsWorldBase::_sfWorldContactSurfaceLayer
    the depth of the surface layer around all geometry objects. Contacts are allowed to sink into the surface layer up to the given depth before coming to rest. The default value is zero. Increasing this to some small value (e.g. 0.001) can help prevent jittering problems due to contacts being repeatedly made and broken.
*/

/*! \var FieldContainer * PhysicsWorldBase::_sfParentHandler
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsWorld *>::_type("PhysicsWorldPtr", "AttachmentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsWorld *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsWorld *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsWorld *,
                           0);

DataType &FieldTraits< PhysicsWorld *, 1 >::getType(void)
{
    return FieldTraits<PhysicsWorld *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      PhysicsWorld *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsWorldBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "erp",
        "the global ERP value, that controls how much error correction is performed in each time step. Typical values are in the range 0.1--0.8. The default is 0.2.\n",
        ErpFieldId, ErpFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleErp),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleErp));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "gravity",
        "the world's global gravity vector. The units are m/s/s, so Earth's gravity vector would be (0,0,-9.81), assuming that +z is up. The default is no gravity, i.e. (0,0,0).\n",
        GravityFieldId, GravityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleGravity),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleGravity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "cfm",
        "the global CFM (constraint force mixing) value. Typical values are in the range 10-9 -- 1. The default is 10-5 if single precision is being used, or 10-10 if double precision is being used.\n",
        CfmFieldId, CfmFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleCfm),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleCfm));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "autoDisableFlag",
        "Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableFlag = disabled\n",
        AutoDisableFlagFieldId, AutoDisableFlagFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleAutoDisableFlag),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleAutoDisableFlag));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "autoDisableLinearThreshold",
        "Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableLinearThreshold = 0.01\n",
        AutoDisableLinearThresholdFieldId, AutoDisableLinearThresholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleAutoDisableLinearThreshold),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleAutoDisableLinearThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "autoDisableAngularThreshold",
        "Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableAngularThreshold = 0.01\n",
        AutoDisableAngularThresholdFieldId, AutoDisableAngularThresholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleAutoDisableAngularThreshold),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleAutoDisableAngularThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "autoDisableSteps",
        "Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableSteps = 10\n",
        AutoDisableStepsFieldId, AutoDisableStepsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleAutoDisableSteps),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleAutoDisableSteps));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "autoDisableTime",
        "Set and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableTime = 0\n",
        AutoDisableTimeFieldId, AutoDisableTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleAutoDisableTime),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleAutoDisableTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "worldQuickStepNumIterations",
        "Set and get the number of iterations that the QuickStep method performs per step. More iterations will give a more accurate solution, but will take longer to compute. The default is 20 iterations.\n",
        WorldQuickStepNumIterationsFieldId, WorldQuickStepNumIterationsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleWorldQuickStepNumIterations),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleWorldQuickStepNumIterations));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "worldContactMaxCorrectingVel",
        "maximum correcting velocity that contacts are allowed to generate. The default value is infinity (i.e. no limit). Reducing this value can help prevent \"popping\" of deeply embedded objects.\n",
        WorldContactMaxCorrectingVelFieldId, WorldContactMaxCorrectingVelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleWorldContactMaxCorrectingVel),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleWorldContactMaxCorrectingVel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "worldContactSurfaceLayer",
        "the depth of the surface layer around all geometry objects. Contacts are allowed to sink into the surface layer up to the given depth before coming to rest. The default value is zero. Increasing this to some small value (e.g. 0.001) can help prevent jittering problems due to contacts being repeatedly made and broken.\n",
        WorldContactSurfaceLayerFieldId, WorldContactSurfaceLayerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsWorld::editHandleWorldContactSurfaceLayer),
        static_cast<FieldGetMethodSig >(&PhysicsWorld::getHandleWorldContactSurfaceLayer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentHandler",
        "",
        ParentHandlerFieldId, ParentHandlerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&PhysicsWorld::invalidEditField),
        static_cast     <FieldGetMethodSig >(&PhysicsWorld::invalidGetField));

    oType.addInitialDesc(pDesc);
}


PhysicsWorldBase::TypeObject PhysicsWorldBase::_type(
    PhysicsWorldBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsWorld",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsWorldBase::createEmptyLocal),
    PhysicsWorld::initMethod,
    PhysicsWorld::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsWorld::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsWorld\"\n"
    "\tparent=\"Attachment\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"single\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "The PhysicsWorld contains all global dWorld attributes from ODE.\n"
    "\t<Field\n"
    "\t\tname=\"erp\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.2\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tthe global ERP value, that controls how much error correction is performed in each time step. Typical values are in the range 0.1--0.8. The default is 0.2.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"gravity\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tthe world's global gravity vector. The units are m/s/s, so Earth's gravity vector would be (0,0,-9.81), assuming that +z is up. The default is no gravity, i.e. (0,0,0).\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"cfm\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tthe global CFM (constraint force mixing) value. Typical values are in the range 10-9 -- 1. The default is 10-5 if single precision is being used, or 10-10 if double precision is being used.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableFlag\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSet and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableFlag = disabled\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableLinearThreshold\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.01\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSet and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableLinearThreshold = 0.01\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableAngularThreshold\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.01\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSet and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableAngularThreshold = 0.01\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableSteps\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"10\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSet and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableSteps = 10\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableTime\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSet and get the default auto-disable parameters for newly created bodies. See section 6.5 of ODE userguide for a description of the auto-disable feature. The default parameter AutoDisableTime = 0\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"worldQuickStepNumIterations\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"20\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSet and get the number of iterations that the QuickStep method performs per step. More iterations will give a more accurate solution, but will take longer to compute. The default is 20 iterations.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"worldContactMaxCorrectingVel\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tmaximum correcting velocity that contacts are allowed to generate. The default value is infinity (i.e. no limit). Reducing this value can help prevent \"popping\" of deeply embedded objects.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"worldContactSurfaceLayer\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tthe depth of the surface layer around all geometry objects. Contacts are allowed to sink into the surface layer up to the given depth before coming to rest. The default value is zero. Increasing this to some small value (e.g. 0.001) can help prevent jittering problems due to contacts being repeatedly made and broken.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"ParentHandler\"\n"
    "\t   type=\"FieldContainer\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   access=\"none\"\n"
    "       doRefCount=\"false\"\n"
    "       passFieldMask=\"true\"\n"
    "       category=\"parentpointer\"\n"
    "\t   >\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The PhysicsWorld contains all global dWorld attributes from ODE.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsWorldBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsWorldBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsWorldBase::getContainerSize(void) const
{
    return sizeof(PhysicsWorld);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *PhysicsWorldBase::editSFErp(void)
{
    editSField(ErpFieldMask);

    return &_sfErp;
}

const SFReal32 *PhysicsWorldBase::getSFErp(void) const
{
    return &_sfErp;
}


SFVec3f *PhysicsWorldBase::editSFGravity(void)
{
    editSField(GravityFieldMask);

    return &_sfGravity;
}

const SFVec3f *PhysicsWorldBase::getSFGravity(void) const
{
    return &_sfGravity;
}


SFReal32 *PhysicsWorldBase::editSFCfm(void)
{
    editSField(CfmFieldMask);

    return &_sfCfm;
}

const SFReal32 *PhysicsWorldBase::getSFCfm(void) const
{
    return &_sfCfm;
}


SFInt32 *PhysicsWorldBase::editSFAutoDisableFlag(void)
{
    editSField(AutoDisableFlagFieldMask);

    return &_sfAutoDisableFlag;
}

const SFInt32 *PhysicsWorldBase::getSFAutoDisableFlag(void) const
{
    return &_sfAutoDisableFlag;
}


SFReal32 *PhysicsWorldBase::editSFAutoDisableLinearThreshold(void)
{
    editSField(AutoDisableLinearThresholdFieldMask);

    return &_sfAutoDisableLinearThreshold;
}

const SFReal32 *PhysicsWorldBase::getSFAutoDisableLinearThreshold(void) const
{
    return &_sfAutoDisableLinearThreshold;
}


SFReal32 *PhysicsWorldBase::editSFAutoDisableAngularThreshold(void)
{
    editSField(AutoDisableAngularThresholdFieldMask);

    return &_sfAutoDisableAngularThreshold;
}

const SFReal32 *PhysicsWorldBase::getSFAutoDisableAngularThreshold(void) const
{
    return &_sfAutoDisableAngularThreshold;
}


SFInt32 *PhysicsWorldBase::editSFAutoDisableSteps(void)
{
    editSField(AutoDisableStepsFieldMask);

    return &_sfAutoDisableSteps;
}

const SFInt32 *PhysicsWorldBase::getSFAutoDisableSteps(void) const
{
    return &_sfAutoDisableSteps;
}


SFReal32 *PhysicsWorldBase::editSFAutoDisableTime(void)
{
    editSField(AutoDisableTimeFieldMask);

    return &_sfAutoDisableTime;
}

const SFReal32 *PhysicsWorldBase::getSFAutoDisableTime(void) const
{
    return &_sfAutoDisableTime;
}


SFInt32 *PhysicsWorldBase::editSFWorldQuickStepNumIterations(void)
{
    editSField(WorldQuickStepNumIterationsFieldMask);

    return &_sfWorldQuickStepNumIterations;
}

const SFInt32 *PhysicsWorldBase::getSFWorldQuickStepNumIterations(void) const
{
    return &_sfWorldQuickStepNumIterations;
}


SFReal32 *PhysicsWorldBase::editSFWorldContactMaxCorrectingVel(void)
{
    editSField(WorldContactMaxCorrectingVelFieldMask);

    return &_sfWorldContactMaxCorrectingVel;
}

const SFReal32 *PhysicsWorldBase::getSFWorldContactMaxCorrectingVel(void) const
{
    return &_sfWorldContactMaxCorrectingVel;
}


SFReal32 *PhysicsWorldBase::editSFWorldContactSurfaceLayer(void)
{
    editSField(WorldContactSurfaceLayerFieldMask);

    return &_sfWorldContactSurfaceLayer;
}

const SFReal32 *PhysicsWorldBase::getSFWorldContactSurfaceLayer(void) const
{
    return &_sfWorldContactSurfaceLayer;
}







/*------------------------------ access -----------------------------------*/

UInt32 PhysicsWorldBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ErpFieldMask & whichField))
    {
        returnValue += _sfErp.getBinSize();
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        returnValue += _sfGravity.getBinSize();
    }
    if(FieldBits::NoField != (CfmFieldMask & whichField))
    {
        returnValue += _sfCfm.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        returnValue += _sfAutoDisableFlag.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        returnValue += _sfAutoDisableLinearThreshold.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        returnValue += _sfAutoDisableAngularThreshold.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        returnValue += _sfAutoDisableSteps.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        returnValue += _sfAutoDisableTime.getBinSize();
    }
    if(FieldBits::NoField != (WorldQuickStepNumIterationsFieldMask & whichField))
    {
        returnValue += _sfWorldQuickStepNumIterations.getBinSize();
    }
    if(FieldBits::NoField != (WorldContactMaxCorrectingVelFieldMask & whichField))
    {
        returnValue += _sfWorldContactMaxCorrectingVel.getBinSize();
    }
    if(FieldBits::NoField != (WorldContactSurfaceLayerFieldMask & whichField))
    {
        returnValue += _sfWorldContactSurfaceLayer.getBinSize();
    }
    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        returnValue += _sfParentHandler.getBinSize();
    }

    return returnValue;
}

void PhysicsWorldBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ErpFieldMask & whichField))
    {
        _sfErp.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        _sfGravity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CfmFieldMask & whichField))
    {
        _sfCfm.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        _sfAutoDisableFlag.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        _sfAutoDisableLinearThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        _sfAutoDisableAngularThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        _sfAutoDisableSteps.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        _sfAutoDisableTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WorldQuickStepNumIterationsFieldMask & whichField))
    {
        _sfWorldQuickStepNumIterations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WorldContactMaxCorrectingVelFieldMask & whichField))
    {
        _sfWorldContactMaxCorrectingVel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WorldContactSurfaceLayerFieldMask & whichField))
    {
        _sfWorldContactSurfaceLayer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        _sfParentHandler.copyToBin(pMem);
    }
}

void PhysicsWorldBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ErpFieldMask & whichField))
    {
        _sfErp.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        _sfGravity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CfmFieldMask & whichField))
    {
        _sfCfm.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        _sfAutoDisableFlag.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        _sfAutoDisableLinearThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        _sfAutoDisableAngularThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        _sfAutoDisableSteps.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        _sfAutoDisableTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WorldQuickStepNumIterationsFieldMask & whichField))
    {
        _sfWorldQuickStepNumIterations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WorldContactMaxCorrectingVelFieldMask & whichField))
    {
        _sfWorldContactMaxCorrectingVel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WorldContactSurfaceLayerFieldMask & whichField))
    {
        _sfWorldContactSurfaceLayer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        _sfParentHandler.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsWorldTransitPtr PhysicsWorldBase::createLocal(BitVector bFlags)
{
    PhysicsWorldTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsWorld>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsWorldTransitPtr PhysicsWorldBase::createDependent(BitVector bFlags)
{
    PhysicsWorldTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsWorld>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsWorldTransitPtr PhysicsWorldBase::create(void)
{
    PhysicsWorldTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsWorld>(tmpPtr);
    }

    return fc;
}

PhysicsWorld *PhysicsWorldBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsWorld *returnValue;

    newPtr<PhysicsWorld>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsWorld *PhysicsWorldBase::createEmpty(void)
{
    PhysicsWorld *returnValue;

    newPtr<PhysicsWorld>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr PhysicsWorldBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsWorld *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsWorld *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsWorldBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsWorld *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsWorld *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsWorldBase::shallowCopy(void) const
{
    PhysicsWorld *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsWorld *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PhysicsWorldBase::PhysicsWorldBase(void) :
    Inherited(),
    _sfErp                    (Real32(0.2)),
    _sfGravity                (),
    _sfCfm                    (),
    _sfAutoDisableFlag        (),
    _sfAutoDisableLinearThreshold(Real32(0.01)),
    _sfAutoDisableAngularThreshold(Real32(0.01)),
    _sfAutoDisableSteps       (Int32(10)),
    _sfAutoDisableTime        (Real32(0)),
    _sfWorldQuickStepNumIterations(Int32(20)),
    _sfWorldContactMaxCorrectingVel(),
    _sfWorldContactSurfaceLayer(Real32(0)),
    _sfParentHandler          (NULL)
{
}

PhysicsWorldBase::PhysicsWorldBase(const PhysicsWorldBase &source) :
    Inherited(source),
    _sfErp                    (source._sfErp                    ),
    _sfGravity                (source._sfGravity                ),
    _sfCfm                    (source._sfCfm                    ),
    _sfAutoDisableFlag        (source._sfAutoDisableFlag        ),
    _sfAutoDisableLinearThreshold(source._sfAutoDisableLinearThreshold),
    _sfAutoDisableAngularThreshold(source._sfAutoDisableAngularThreshold),
    _sfAutoDisableSteps       (source._sfAutoDisableSteps       ),
    _sfAutoDisableTime        (source._sfAutoDisableTime        ),
    _sfWorldQuickStepNumIterations(source._sfWorldQuickStepNumIterations),
    _sfWorldContactMaxCorrectingVel(source._sfWorldContactMaxCorrectingVel),
    _sfWorldContactSurfaceLayer(source._sfWorldContactSurfaceLayer),
    _sfParentHandler          (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsWorldBase::~PhysicsWorldBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool PhysicsWorldBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentHandlerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentHandler.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentHandler.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentHandlerFieldMask);

            _sfParentHandler.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool PhysicsWorldBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentHandlerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentHandler.getValue() == pParent)
            {
                editSField(ParentHandlerFieldMask);

                _sfParentHandler.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("PhysicsWorldBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr PhysicsWorldBase::getHandleErp             (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfErp,
             this->getType().getFieldDesc(ErpFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleErp            (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfErp,
             this->getType().getFieldDesc(ErpFieldId),
             this));


    editSField(ErpFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleGravity         (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfGravity,
             this->getType().getFieldDesc(GravityFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleGravity        (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfGravity,
             this->getType().getFieldDesc(GravityFieldId),
             this));


    editSField(GravityFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleCfm             (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCfm,
             this->getType().getFieldDesc(CfmFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleCfm            (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCfm,
             this->getType().getFieldDesc(CfmFieldId),
             this));


    editSField(CfmFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleAutoDisableFlag (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfAutoDisableFlag,
             this->getType().getFieldDesc(AutoDisableFlagFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleAutoDisableFlag(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfAutoDisableFlag,
             this->getType().getFieldDesc(AutoDisableFlagFieldId),
             this));


    editSField(AutoDisableFlagFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleAutoDisableLinearThreshold (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAutoDisableLinearThreshold,
             this->getType().getFieldDesc(AutoDisableLinearThresholdFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleAutoDisableLinearThreshold(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAutoDisableLinearThreshold,
             this->getType().getFieldDesc(AutoDisableLinearThresholdFieldId),
             this));


    editSField(AutoDisableLinearThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleAutoDisableAngularThreshold (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAutoDisableAngularThreshold,
             this->getType().getFieldDesc(AutoDisableAngularThresholdFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleAutoDisableAngularThreshold(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAutoDisableAngularThreshold,
             this->getType().getFieldDesc(AutoDisableAngularThresholdFieldId),
             this));


    editSField(AutoDisableAngularThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleAutoDisableSteps (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfAutoDisableSteps,
             this->getType().getFieldDesc(AutoDisableStepsFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleAutoDisableSteps(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfAutoDisableSteps,
             this->getType().getFieldDesc(AutoDisableStepsFieldId),
             this));


    editSField(AutoDisableStepsFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleAutoDisableTime (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAutoDisableTime,
             this->getType().getFieldDesc(AutoDisableTimeFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleAutoDisableTime(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAutoDisableTime,
             this->getType().getFieldDesc(AutoDisableTimeFieldId),
             this));


    editSField(AutoDisableTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleWorldQuickStepNumIterations (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWorldQuickStepNumIterations,
             this->getType().getFieldDesc(WorldQuickStepNumIterationsFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleWorldQuickStepNumIterations(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWorldQuickStepNumIterations,
             this->getType().getFieldDesc(WorldQuickStepNumIterationsFieldId),
             this));


    editSField(WorldQuickStepNumIterationsFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleWorldContactMaxCorrectingVel (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfWorldContactMaxCorrectingVel,
             this->getType().getFieldDesc(WorldContactMaxCorrectingVelFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleWorldContactMaxCorrectingVel(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfWorldContactMaxCorrectingVel,
             this->getType().getFieldDesc(WorldContactMaxCorrectingVelFieldId),
             this));


    editSField(WorldContactMaxCorrectingVelFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleWorldContactSurfaceLayer (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfWorldContactSurfaceLayer,
             this->getType().getFieldDesc(WorldContactSurfaceLayerFieldId),
             const_cast<PhysicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleWorldContactSurfaceLayer(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfWorldContactSurfaceLayer,
             this->getType().getFieldDesc(WorldContactSurfaceLayerFieldId),
             this));


    editSField(WorldContactSurfaceLayerFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsWorldBase::getHandleParentHandler   (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr PhysicsWorldBase::editHandleParentHandler  (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PhysicsWorldBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsWorld *pThis = static_cast<PhysicsWorld *>(this);

    pThis->execSync(static_cast<PhysicsWorld *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsWorldBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsWorld *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsWorld *>(pRefAspect),
                  dynamic_cast<const PhysicsWorld *>(this));

    return returnValue;
}
#endif

void PhysicsWorldBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
