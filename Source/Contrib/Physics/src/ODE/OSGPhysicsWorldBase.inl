/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsWorld!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PhysicsWorldBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 PhysicsWorldBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 PhysicsWorldBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the PhysicsWorld::_sfErp field.

inline
Real32 &PhysicsWorldBase::editErp(void)
{
    editSField(ErpFieldMask);

    return _sfErp.getValue();
}

//! Get the value of the PhysicsWorld::_sfErp field.
inline
      Real32  PhysicsWorldBase::getErp(void) const
{
    return _sfErp.getValue();
}

//! Set the value of the PhysicsWorld::_sfErp field.
inline
void PhysicsWorldBase::setErp(const Real32 value)
{
    editSField(ErpFieldMask);

    _sfErp.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfGravity field.

inline
Vec3f &PhysicsWorldBase::editGravity(void)
{
    editSField(GravityFieldMask);

    return _sfGravity.getValue();
}

//! Get the value of the PhysicsWorld::_sfGravity field.
inline
const Vec3f &PhysicsWorldBase::getGravity(void) const
{
    return _sfGravity.getValue();
}

//! Set the value of the PhysicsWorld::_sfGravity field.
inline
void PhysicsWorldBase::setGravity(const Vec3f &value)
{
    editSField(GravityFieldMask);

    _sfGravity.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfCfm field.

inline
Real32 &PhysicsWorldBase::editCfm(void)
{
    editSField(CfmFieldMask);

    return _sfCfm.getValue();
}

//! Get the value of the PhysicsWorld::_sfCfm field.
inline
      Real32  PhysicsWorldBase::getCfm(void) const
{
    return _sfCfm.getValue();
}

//! Set the value of the PhysicsWorld::_sfCfm field.
inline
void PhysicsWorldBase::setCfm(const Real32 value)
{
    editSField(CfmFieldMask);

    _sfCfm.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfAutoDisableFlag field.

inline
Int32 &PhysicsWorldBase::editAutoDisableFlag(void)
{
    editSField(AutoDisableFlagFieldMask);

    return _sfAutoDisableFlag.getValue();
}

//! Get the value of the PhysicsWorld::_sfAutoDisableFlag field.
inline
      Int32  PhysicsWorldBase::getAutoDisableFlag(void) const
{
    return _sfAutoDisableFlag.getValue();
}

//! Set the value of the PhysicsWorld::_sfAutoDisableFlag field.
inline
void PhysicsWorldBase::setAutoDisableFlag(const Int32 value)
{
    editSField(AutoDisableFlagFieldMask);

    _sfAutoDisableFlag.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfAutoDisableLinearThreshold field.

inline
Real32 &PhysicsWorldBase::editAutoDisableLinearThreshold(void)
{
    editSField(AutoDisableLinearThresholdFieldMask);

    return _sfAutoDisableLinearThreshold.getValue();
}

//! Get the value of the PhysicsWorld::_sfAutoDisableLinearThreshold field.
inline
      Real32  PhysicsWorldBase::getAutoDisableLinearThreshold(void) const
{
    return _sfAutoDisableLinearThreshold.getValue();
}

//! Set the value of the PhysicsWorld::_sfAutoDisableLinearThreshold field.
inline
void PhysicsWorldBase::setAutoDisableLinearThreshold(const Real32 value)
{
    editSField(AutoDisableLinearThresholdFieldMask);

    _sfAutoDisableLinearThreshold.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfAutoDisableAngularThreshold field.

inline
Real32 &PhysicsWorldBase::editAutoDisableAngularThreshold(void)
{
    editSField(AutoDisableAngularThresholdFieldMask);

    return _sfAutoDisableAngularThreshold.getValue();
}

//! Get the value of the PhysicsWorld::_sfAutoDisableAngularThreshold field.
inline
      Real32  PhysicsWorldBase::getAutoDisableAngularThreshold(void) const
{
    return _sfAutoDisableAngularThreshold.getValue();
}

//! Set the value of the PhysicsWorld::_sfAutoDisableAngularThreshold field.
inline
void PhysicsWorldBase::setAutoDisableAngularThreshold(const Real32 value)
{
    editSField(AutoDisableAngularThresholdFieldMask);

    _sfAutoDisableAngularThreshold.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfAutoDisableSteps field.

inline
Int32 &PhysicsWorldBase::editAutoDisableSteps(void)
{
    editSField(AutoDisableStepsFieldMask);

    return _sfAutoDisableSteps.getValue();
}

//! Get the value of the PhysicsWorld::_sfAutoDisableSteps field.
inline
      Int32  PhysicsWorldBase::getAutoDisableSteps(void) const
{
    return _sfAutoDisableSteps.getValue();
}

//! Set the value of the PhysicsWorld::_sfAutoDisableSteps field.
inline
void PhysicsWorldBase::setAutoDisableSteps(const Int32 value)
{
    editSField(AutoDisableStepsFieldMask);

    _sfAutoDisableSteps.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfAutoDisableTime field.

inline
Real32 &PhysicsWorldBase::editAutoDisableTime(void)
{
    editSField(AutoDisableTimeFieldMask);

    return _sfAutoDisableTime.getValue();
}

//! Get the value of the PhysicsWorld::_sfAutoDisableTime field.
inline
      Real32  PhysicsWorldBase::getAutoDisableTime(void) const
{
    return _sfAutoDisableTime.getValue();
}

//! Set the value of the PhysicsWorld::_sfAutoDisableTime field.
inline
void PhysicsWorldBase::setAutoDisableTime(const Real32 value)
{
    editSField(AutoDisableTimeFieldMask);

    _sfAutoDisableTime.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfWorldQuickStepNumIterations field.

inline
Int32 &PhysicsWorldBase::editWorldQuickStepNumIterations(void)
{
    editSField(WorldQuickStepNumIterationsFieldMask);

    return _sfWorldQuickStepNumIterations.getValue();
}

//! Get the value of the PhysicsWorld::_sfWorldQuickStepNumIterations field.
inline
      Int32  PhysicsWorldBase::getWorldQuickStepNumIterations(void) const
{
    return _sfWorldQuickStepNumIterations.getValue();
}

//! Set the value of the PhysicsWorld::_sfWorldQuickStepNumIterations field.
inline
void PhysicsWorldBase::setWorldQuickStepNumIterations(const Int32 value)
{
    editSField(WorldQuickStepNumIterationsFieldMask);

    _sfWorldQuickStepNumIterations.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfWorldContactMaxCorrectingVel field.

inline
Real32 &PhysicsWorldBase::editWorldContactMaxCorrectingVel(void)
{
    editSField(WorldContactMaxCorrectingVelFieldMask);

    return _sfWorldContactMaxCorrectingVel.getValue();
}

//! Get the value of the PhysicsWorld::_sfWorldContactMaxCorrectingVel field.
inline
      Real32  PhysicsWorldBase::getWorldContactMaxCorrectingVel(void) const
{
    return _sfWorldContactMaxCorrectingVel.getValue();
}

//! Set the value of the PhysicsWorld::_sfWorldContactMaxCorrectingVel field.
inline
void PhysicsWorldBase::setWorldContactMaxCorrectingVel(const Real32 value)
{
    editSField(WorldContactMaxCorrectingVelFieldMask);

    _sfWorldContactMaxCorrectingVel.setValue(value);
}
//! Get the value of the PhysicsWorld::_sfWorldContactSurfaceLayer field.

inline
Real32 &PhysicsWorldBase::editWorldContactSurfaceLayer(void)
{
    editSField(WorldContactSurfaceLayerFieldMask);

    return _sfWorldContactSurfaceLayer.getValue();
}

//! Get the value of the PhysicsWorld::_sfWorldContactSurfaceLayer field.
inline
      Real32  PhysicsWorldBase::getWorldContactSurfaceLayer(void) const
{
    return _sfWorldContactSurfaceLayer.getValue();
}

//! Set the value of the PhysicsWorld::_sfWorldContactSurfaceLayer field.
inline
void PhysicsWorldBase::setWorldContactSurfaceLayer(const Real32 value)
{
    editSField(WorldContactSurfaceLayerFieldMask);

    _sfWorldContactSurfaceLayer.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void PhysicsWorldBase::execSync (      PhysicsWorldBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ErpFieldMask & whichField))
        _sfErp.syncWith(pFrom->_sfErp);

    if(FieldBits::NoField != (GravityFieldMask & whichField))
        _sfGravity.syncWith(pFrom->_sfGravity);

    if(FieldBits::NoField != (CfmFieldMask & whichField))
        _sfCfm.syncWith(pFrom->_sfCfm);

    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
        _sfAutoDisableFlag.syncWith(pFrom->_sfAutoDisableFlag);

    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
        _sfAutoDisableLinearThreshold.syncWith(pFrom->_sfAutoDisableLinearThreshold);

    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
        _sfAutoDisableAngularThreshold.syncWith(pFrom->_sfAutoDisableAngularThreshold);

    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
        _sfAutoDisableSteps.syncWith(pFrom->_sfAutoDisableSteps);

    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
        _sfAutoDisableTime.syncWith(pFrom->_sfAutoDisableTime);

    if(FieldBits::NoField != (WorldQuickStepNumIterationsFieldMask & whichField))
        _sfWorldQuickStepNumIterations.syncWith(pFrom->_sfWorldQuickStepNumIterations);

    if(FieldBits::NoField != (WorldContactMaxCorrectingVelFieldMask & whichField))
        _sfWorldContactMaxCorrectingVel.syncWith(pFrom->_sfWorldContactMaxCorrectingVel);

    if(FieldBits::NoField != (WorldContactSurfaceLayerFieldMask & whichField))
        _sfWorldContactSurfaceLayer.syncWith(pFrom->_sfWorldContactSurfaceLayer);

    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
        _sfParentHandler.syncWith(pFrom->_sfParentHandler);
}
#endif


inline
const Char8 *PhysicsWorldBase::getClassname(void)
{
    return "PhysicsWorld";
}
OSG_GEN_CONTAINERPTR(PhysicsWorld);

OSG_END_NAMESPACE

