/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CollisionEventDetails
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOLLISIONEVENTDETAILSBASE_H_
#define _OSGCOLLISIONEVENTDETAILSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribPhysicsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGEventDetails.h" // Parent

#include "OSGVecFields.h"               // Position type
#include "OSGPhysicsGeomFields.h"       // Object1Geom type
#include "OSGSysFields.h"               // Object1CategoryBits type

#include "OSGCollisionEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class CollisionEventDetails;

//! \brief CollisionEventDetails Base Class.

class OSG_CONTRIBPHYSICS_DLLMAPPING CollisionEventDetailsBase : public EventDetails
{
  public:

    typedef EventDetails Inherited;
    typedef EventDetails ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(CollisionEventDetails);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        PositionFieldId = Inherited::NextFieldId,
        NormalFieldId = PositionFieldId + 1,
        Object1GeomFieldId = NormalFieldId + 1,
        Object2GeomFieldId = Object1GeomFieldId + 1,
        Object1CategoryBitsFieldId = Object2GeomFieldId + 1,
        Object1CollideBitsFieldId = Object1CategoryBitsFieldId + 1,
        Object2CategoryBitsFieldId = Object1CollideBitsFieldId + 1,
        Object2CollideBitsFieldId = Object2CategoryBitsFieldId + 1,
        Object1VelocityFieldId = Object2CollideBitsFieldId + 1,
        Object2VelocityFieldId = Object1VelocityFieldId + 1,
        ProjectedNormalSpeedFieldId = Object2VelocityFieldId + 1,
        NextFieldId = ProjectedNormalSpeedFieldId + 1
    };

    static const OSG::BitVector PositionFieldMask =
        (TypeTraits<BitVector>::One << PositionFieldId);
    static const OSG::BitVector NormalFieldMask =
        (TypeTraits<BitVector>::One << NormalFieldId);
    static const OSG::BitVector Object1GeomFieldMask =
        (TypeTraits<BitVector>::One << Object1GeomFieldId);
    static const OSG::BitVector Object2GeomFieldMask =
        (TypeTraits<BitVector>::One << Object2GeomFieldId);
    static const OSG::BitVector Object1CategoryBitsFieldMask =
        (TypeTraits<BitVector>::One << Object1CategoryBitsFieldId);
    static const OSG::BitVector Object1CollideBitsFieldMask =
        (TypeTraits<BitVector>::One << Object1CollideBitsFieldId);
    static const OSG::BitVector Object2CategoryBitsFieldMask =
        (TypeTraits<BitVector>::One << Object2CategoryBitsFieldId);
    static const OSG::BitVector Object2CollideBitsFieldMask =
        (TypeTraits<BitVector>::One << Object2CollideBitsFieldId);
    static const OSG::BitVector Object1VelocityFieldMask =
        (TypeTraits<BitVector>::One << Object1VelocityFieldId);
    static const OSG::BitVector Object2VelocityFieldMask =
        (TypeTraits<BitVector>::One << Object2VelocityFieldId);
    static const OSG::BitVector ProjectedNormalSpeedFieldMask =
        (TypeTraits<BitVector>::One << ProjectedNormalSpeedFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFPnt3f           SFPositionType;
    typedef SFVec3f           SFNormalType;
    typedef SFUnrecPhysicsGeomPtr SFObject1GeomType;
    typedef SFUnrecPhysicsGeomPtr SFObject2GeomType;
    typedef SFUInt64          SFObject1CategoryBitsType;
    typedef SFUInt64          SFObject1CollideBitsType;
    typedef SFUInt64          SFObject2CategoryBitsType;
    typedef SFUInt64          SFObject2CollideBitsType;
    typedef SFVec3f           SFObject1VelocityType;
    typedef SFVec3f           SFObject2VelocityType;
    typedef SFReal32          SFProjectedNormalSpeedType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


            const SFPnt3f             *getSFPosition        (void) const;

            const SFVec3f             *getSFNormal          (void) const;
            const SFUnrecPhysicsGeomPtr *getSFObject1Geom    (void) const;
            const SFUnrecPhysicsGeomPtr *getSFObject2Geom    (void) const;

                  SFUInt64            *editSFObject1CategoryBits(void);
            const SFUInt64            *getSFObject1CategoryBits (void) const;

                  SFUInt64            *editSFObject1CollideBits(void);
            const SFUInt64            *getSFObject1CollideBits (void) const;

                  SFUInt64            *editSFObject2CategoryBits(void);
            const SFUInt64            *getSFObject2CategoryBits (void) const;

                  SFUInt64            *editSFObject2CollideBits(void);
            const SFUInt64            *getSFObject2CollideBits (void) const;

            const SFVec3f             *getSFObject1Velocity (void) const;

            const SFVec3f             *getSFObject2Velocity (void) const;

            const SFReal32            *getSFProjectedNormalSpeed (void) const;


            const Pnt3f               &getPosition        (void) const;

            const Vec3f               &getNormal          (void) const;

                  PhysicsGeom * getObject1Geom    (void) const;

                  PhysicsGeom * getObject2Geom    (void) const;

                  UInt64              &editObject1CategoryBits(void);
                  UInt64               getObject1CategoryBits (void) const;

                  UInt64              &editObject1CollideBits(void);
                  UInt64               getObject1CollideBits (void) const;

                  UInt64              &editObject2CategoryBits(void);
                  UInt64               getObject2CategoryBits (void) const;

                  UInt64              &editObject2CollideBits(void);
                  UInt64               getObject2CollideBits (void) const;

            const Vec3f               &getObject1Velocity (void) const;

            const Vec3f               &getObject2Velocity (void) const;

                  Real32               getProjectedNormalSpeed (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setObject1CategoryBits(const UInt64 value);
            void setObject1CollideBits(const UInt64 value);
            void setObject2CategoryBits(const UInt64 value);
            void setObject2CollideBits(const UInt64 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  CollisionEventDetailsTransitPtr  create          (void);
    static  CollisionEventDetails           *createEmpty     (void);

    static  CollisionEventDetailsTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  CollisionEventDetails            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  CollisionEventDetailsTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPnt3f           _sfPosition;
    SFVec3f           _sfNormal;
    SFUnrecPhysicsGeomPtr _sfObject1Geom;
    SFUnrecPhysicsGeomPtr _sfObject2Geom;
    SFUInt64          _sfObject1CategoryBits;
    SFUInt64          _sfObject1CollideBits;
    SFUInt64          _sfObject2CategoryBits;
    SFUInt64          _sfObject2CollideBits;
    SFVec3f           _sfObject1Velocity;
    SFVec3f           _sfObject2Velocity;
    SFReal32          _sfProjectedNormalSpeed;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    CollisionEventDetailsBase(void);
    CollisionEventDetailsBase(const CollisionEventDetailsBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~CollisionEventDetailsBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const CollisionEventDetails *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandlePosition        (void) const;
    EditFieldHandlePtr editHandlePosition       (void);
    GetFieldHandlePtr  getHandleNormal          (void) const;
    EditFieldHandlePtr editHandleNormal         (void);
    GetFieldHandlePtr  getHandleObject1Geom     (void) const;
    EditFieldHandlePtr editHandleObject1Geom    (void);
    GetFieldHandlePtr  getHandleObject2Geom     (void) const;
    EditFieldHandlePtr editHandleObject2Geom    (void);
    GetFieldHandlePtr  getHandleObject1CategoryBits (void) const;
    EditFieldHandlePtr editHandleObject1CategoryBits(void);
    GetFieldHandlePtr  getHandleObject1CollideBits (void) const;
    EditFieldHandlePtr editHandleObject1CollideBits(void);
    GetFieldHandlePtr  getHandleObject2CategoryBits (void) const;
    EditFieldHandlePtr editHandleObject2CategoryBits(void);
    GetFieldHandlePtr  getHandleObject2CollideBits (void) const;
    EditFieldHandlePtr editHandleObject2CollideBits(void);
    GetFieldHandlePtr  getHandleObject1Velocity (void) const;
    EditFieldHandlePtr editHandleObject1Velocity(void);
    GetFieldHandlePtr  getHandleObject2Velocity (void) const;
    EditFieldHandlePtr editHandleObject2Velocity(void);
    GetFieldHandlePtr  getHandleProjectedNormalSpeed (void) const;
    EditFieldHandlePtr editHandleProjectedNormalSpeed(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFPnt3f             *editSFPosition       (void);

                  SFVec3f             *editSFNormal         (void);
                  SFUnrecPhysicsGeomPtr *editSFObject1Geom    (void);
                  SFUnrecPhysicsGeomPtr *editSFObject2Geom    (void);

                  SFVec3f             *editSFObject1Velocity(void);

                  SFVec3f             *editSFObject2Velocity(void);

                  SFReal32            *editSFProjectedNormalSpeed(void);


                  Pnt3f               &editPosition       (void);

                  Vec3f               &editNormal         (void);



                  Vec3f               &editObject1Velocity(void);

                  Vec3f               &editObject2Velocity(void);

                  Real32              &editProjectedNormalSpeed(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setPosition       (const Pnt3f &value);
            void setNormal         (const Vec3f &value);
            void setObject1Geom    (PhysicsGeom * const value);
            void setObject2Geom    (PhysicsGeom * const value);
            void setObject1Velocity(const Vec3f &value);
            void setObject2Velocity(const Vec3f &value);
            void setProjectedNormalSpeed(const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      CollisionEventDetailsBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const CollisionEventDetailsBase &source);
};

typedef CollisionEventDetailsBase *CollisionEventDetailsBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCOLLISIONEVENTDETAILSBASE_H_ */
