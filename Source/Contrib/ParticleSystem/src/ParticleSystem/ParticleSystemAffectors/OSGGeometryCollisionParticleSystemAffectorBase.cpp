/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeometryCollisionParticleSystemAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "OSGParticleGeometryCollisionEventDetails.h"


#include "OSGParticleAffector.h"        // CollisionAffectors Class
#include "OSGNode.h"                    // CollisionNode Class

#include "OSGGeometryCollisionParticleSystemAffectorBase.h"
#include "OSGGeometryCollisionParticleSystemAffector.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GeometryCollisionParticleSystemAffector
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ParticleAffector * GeometryCollisionParticleSystemAffectorBase::_mfCollisionAffectors
    
*/

/*! \var Node *          GeometryCollisionParticleSystemAffectorBase::_sfCollisionNode
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GeometryCollisionParticleSystemAffector *>::_type("GeometryCollisionParticleSystemAffectorPtr", "ParticleSystemAffectorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GeometryCollisionParticleSystemAffector *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GeometryCollisionParticleSystemAffector *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GeometryCollisionParticleSystemAffector *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GeometryCollisionParticleSystemAffectorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecParticleAffectorPtr::Description(
        MFUnrecParticleAffectorPtr::getClassType(),
        "CollisionAffectors",
        "",
        CollisionAffectorsFieldId, CollisionAffectorsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeometryCollisionParticleSystemAffector::editHandleCollisionAffectors),
        static_cast<FieldGetMethodSig >(&GeometryCollisionParticleSystemAffector::getHandleCollisionAffectors));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "CollisionNode",
        "",
        CollisionNodeFieldId, CollisionNodeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeometryCollisionParticleSystemAffector::editHandleCollisionNode),
        static_cast<FieldGetMethodSig >(&GeometryCollisionParticleSystemAffector::getHandleCollisionNode));

    oType.addInitialDesc(pDesc);
}


GeometryCollisionParticleSystemAffectorBase::TypeObject GeometryCollisionParticleSystemAffectorBase::_type(
    GeometryCollisionParticleSystemAffectorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&GeometryCollisionParticleSystemAffectorBase::createEmptyLocal),
    GeometryCollisionParticleSystemAffector::initMethod,
    GeometryCollisionParticleSystemAffector::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&GeometryCollisionParticleSystemAffector::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GeometryCollisionParticleSystemAffector\"\n"
    "\tparent=\"ParticleSystemAffector\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"CollisionAffectors\"\n"
    "\t\ttype=\"ParticleAffector\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CollisionNode\"\n"
    "\t\ttype=\"Node\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ParticleCollision\"\n"
    "\t\tdetailsType=\"ParticleGeometryCollisionEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    ""
    );

//! GeometryCollisionParticleSystemAffector Produced Events

EventDescription *GeometryCollisionParticleSystemAffectorBase::_eventDesc[] =
{
    new EventDescription("ParticleCollision", 
                          "",
                          ParticleCollisionEventId, 
                          FieldTraits<ParticleGeometryCollisionEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&GeometryCollisionParticleSystemAffectorBase::getHandleParticleCollisionSignal))

};

EventProducerType GeometryCollisionParticleSystemAffectorBase::_producerType(
    "GeometryCollisionParticleSystemAffectorProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeometryCollisionParticleSystemAffectorBase::getType(void)
{
    return _type;
}

const FieldContainerType &GeometryCollisionParticleSystemAffectorBase::getType(void) const
{
    return _type;
}

const EventProducerType &GeometryCollisionParticleSystemAffectorBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 GeometryCollisionParticleSystemAffectorBase::getContainerSize(void) const
{
    return sizeof(GeometryCollisionParticleSystemAffector);
}

/*------------------------- decorator get ------------------------------*/


//! Get the GeometryCollisionParticleSystemAffector::_mfCollisionAffectors field.
const MFUnrecParticleAffectorPtr *GeometryCollisionParticleSystemAffectorBase::getMFCollisionAffectors(void) const
{
    return &_mfCollisionAffectors;
}

MFUnrecParticleAffectorPtr *GeometryCollisionParticleSystemAffectorBase::editMFCollisionAffectors(void)
{
    editMField(CollisionAffectorsFieldMask, _mfCollisionAffectors);

    return &_mfCollisionAffectors;
}

//! Get the GeometryCollisionParticleSystemAffector::_sfCollisionNode field.
const SFUnrecNodePtr *GeometryCollisionParticleSystemAffectorBase::getSFCollisionNode(void) const
{
    return &_sfCollisionNode;
}

SFUnrecNodePtr      *GeometryCollisionParticleSystemAffectorBase::editSFCollisionNode  (void)
{
    editSField(CollisionNodeFieldMask);

    return &_sfCollisionNode;
}



void GeometryCollisionParticleSystemAffectorBase::pushToCollisionAffectors(ParticleAffector * const value)
{
    editMField(CollisionAffectorsFieldMask, _mfCollisionAffectors);

    _mfCollisionAffectors.push_back(value);
}

void GeometryCollisionParticleSystemAffectorBase::assignCollisionAffectors(const MFUnrecParticleAffectorPtr &value)
{
    MFUnrecParticleAffectorPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecParticleAffectorPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<GeometryCollisionParticleSystemAffector *>(this)->clearCollisionAffectors();

    while(elemIt != elemEnd)
    {
        this->pushToCollisionAffectors(*elemIt);

        ++elemIt;
    }
}

void GeometryCollisionParticleSystemAffectorBase::removeFromCollisionAffectors(UInt32 uiIndex)
{
    if(uiIndex < _mfCollisionAffectors.size())
    {
        editMField(CollisionAffectorsFieldMask, _mfCollisionAffectors);

        _mfCollisionAffectors.erase(uiIndex);
    }
}

void GeometryCollisionParticleSystemAffectorBase::removeObjFromCollisionAffectors(ParticleAffector * const value)
{
    Int32 iElemIdx = _mfCollisionAffectors.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(CollisionAffectorsFieldMask, _mfCollisionAffectors);

        _mfCollisionAffectors.erase(iElemIdx);
    }
}
void GeometryCollisionParticleSystemAffectorBase::clearCollisionAffectors(void)
{
    editMField(CollisionAffectorsFieldMask, _mfCollisionAffectors);


    _mfCollisionAffectors.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 GeometryCollisionParticleSystemAffectorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CollisionAffectorsFieldMask & whichField))
    {
        returnValue += _mfCollisionAffectors.getBinSize();
    }
    if(FieldBits::NoField != (CollisionNodeFieldMask & whichField))
    {
        returnValue += _sfCollisionNode.getBinSize();
    }

    return returnValue;
}

void GeometryCollisionParticleSystemAffectorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CollisionAffectorsFieldMask & whichField))
    {
        _mfCollisionAffectors.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CollisionNodeFieldMask & whichField))
    {
        _sfCollisionNode.copyToBin(pMem);
    }
}

void GeometryCollisionParticleSystemAffectorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CollisionAffectorsFieldMask & whichField))
    {
        _mfCollisionAffectors.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CollisionNodeFieldMask & whichField))
    {
        _sfCollisionNode.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GeometryCollisionParticleSystemAffectorTransitPtr GeometryCollisionParticleSystemAffectorBase::createLocal(BitVector bFlags)
{
    GeometryCollisionParticleSystemAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GeometryCollisionParticleSystemAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GeometryCollisionParticleSystemAffectorTransitPtr GeometryCollisionParticleSystemAffectorBase::createDependent(BitVector bFlags)
{
    GeometryCollisionParticleSystemAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GeometryCollisionParticleSystemAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GeometryCollisionParticleSystemAffectorTransitPtr GeometryCollisionParticleSystemAffectorBase::create(void)
{
    GeometryCollisionParticleSystemAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GeometryCollisionParticleSystemAffector>(tmpPtr);
    }

    return fc;
}

GeometryCollisionParticleSystemAffector *GeometryCollisionParticleSystemAffectorBase::createEmptyLocal(BitVector bFlags)
{
    GeometryCollisionParticleSystemAffector *returnValue;

    newPtr<GeometryCollisionParticleSystemAffector>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GeometryCollisionParticleSystemAffector *GeometryCollisionParticleSystemAffectorBase::createEmpty(void)
{
    GeometryCollisionParticleSystemAffector *returnValue;

    newPtr<GeometryCollisionParticleSystemAffector>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GeometryCollisionParticleSystemAffectorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GeometryCollisionParticleSystemAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeometryCollisionParticleSystemAffector *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeometryCollisionParticleSystemAffectorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GeometryCollisionParticleSystemAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeometryCollisionParticleSystemAffector *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeometryCollisionParticleSystemAffectorBase::shallowCopy(void) const
{
    GeometryCollisionParticleSystemAffector *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GeometryCollisionParticleSystemAffector *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- event producers ----------------------------------*/
void GeometryCollisionParticleSystemAffectorBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case ParticleCollisionEventId:
        OSG_ASSERT(dynamic_cast<ParticleCollisionEventDetailsType* const>(e));

        _ParticleCollisionEvent.set_combiner(ConsumableEventCombiner(e));
        _ParticleCollisionEvent(dynamic_cast<ParticleCollisionEventDetailsType* const>(e), ParticleCollisionEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection GeometryCollisionParticleSystemAffectorBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ParticleCollisionEventId:
        return _ParticleCollisionEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  GeometryCollisionParticleSystemAffectorBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ParticleCollisionEventId:
        return _ParticleCollisionEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  GeometryCollisionParticleSystemAffectorBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case ParticleCollisionEventId:
        _ParticleCollisionEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  GeometryCollisionParticleSystemAffectorBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case ParticleCollisionEventId:
        _ParticleCollisionEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  GeometryCollisionParticleSystemAffectorBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ParticleCollisionEventId:
        return _ParticleCollisionEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  GeometryCollisionParticleSystemAffectorBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ParticleCollisionEventId:
        return _ParticleCollisionEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

GeometryCollisionParticleSystemAffectorBase::GeometryCollisionParticleSystemAffectorBase(void) :
    Inherited(),
    _mfCollisionAffectors     (),
    _sfCollisionNode          (NULL)
{
}

GeometryCollisionParticleSystemAffectorBase::GeometryCollisionParticleSystemAffectorBase(const GeometryCollisionParticleSystemAffectorBase &source) :
    Inherited(source),
    _mfCollisionAffectors     (),
    _sfCollisionNode          (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

GeometryCollisionParticleSystemAffectorBase::~GeometryCollisionParticleSystemAffectorBase(void)
{
}

void GeometryCollisionParticleSystemAffectorBase::onCreate(const GeometryCollisionParticleSystemAffector *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        GeometryCollisionParticleSystemAffector *pThis = static_cast<GeometryCollisionParticleSystemAffector *>(this);

        MFUnrecParticleAffectorPtr::const_iterator CollisionAffectorsIt  =
            source->_mfCollisionAffectors.begin();
        MFUnrecParticleAffectorPtr::const_iterator CollisionAffectorsEnd =
            source->_mfCollisionAffectors.end  ();

        while(CollisionAffectorsIt != CollisionAffectorsEnd)
        {
            pThis->pushToCollisionAffectors(*CollisionAffectorsIt);

            ++CollisionAffectorsIt;
        }

        pThis->setCollisionNode(source->getCollisionNode());
    }
}

GetFieldHandlePtr GeometryCollisionParticleSystemAffectorBase::getHandleCollisionAffectors (void) const
{
    MFUnrecParticleAffectorPtr::GetHandlePtr returnValue(
        new  MFUnrecParticleAffectorPtr::GetHandle(
             &_mfCollisionAffectors,
             this->getType().getFieldDesc(CollisionAffectorsFieldId),
             const_cast<GeometryCollisionParticleSystemAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeometryCollisionParticleSystemAffectorBase::editHandleCollisionAffectors(void)
{
    MFUnrecParticleAffectorPtr::EditHandlePtr returnValue(
        new  MFUnrecParticleAffectorPtr::EditHandle(
             &_mfCollisionAffectors,
             this->getType().getFieldDesc(CollisionAffectorsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&GeometryCollisionParticleSystemAffector::pushToCollisionAffectors,
                    static_cast<GeometryCollisionParticleSystemAffector *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&GeometryCollisionParticleSystemAffector::removeFromCollisionAffectors,
                    static_cast<GeometryCollisionParticleSystemAffector *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&GeometryCollisionParticleSystemAffector::removeObjFromCollisionAffectors,
                    static_cast<GeometryCollisionParticleSystemAffector *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&GeometryCollisionParticleSystemAffector::clearCollisionAffectors,
                    static_cast<GeometryCollisionParticleSystemAffector *>(this)));

    editMField(CollisionAffectorsFieldMask, _mfCollisionAffectors);

    return returnValue;
}

GetFieldHandlePtr GeometryCollisionParticleSystemAffectorBase::getHandleCollisionNode   (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfCollisionNode,
             this->getType().getFieldDesc(CollisionNodeFieldId),
             const_cast<GeometryCollisionParticleSystemAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeometryCollisionParticleSystemAffectorBase::editHandleCollisionNode  (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfCollisionNode,
             this->getType().getFieldDesc(CollisionNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&GeometryCollisionParticleSystemAffector::setCollisionNode,
                    static_cast<GeometryCollisionParticleSystemAffector *>(this), _1));

    editSField(CollisionNodeFieldMask);

    return returnValue;
}


GetEventHandlePtr GeometryCollisionParticleSystemAffectorBase::getHandleParticleCollisionSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ParticleCollisionEventType>(
             const_cast<ParticleCollisionEventType *>(&_ParticleCollisionEvent),
             _producerType.getEventDescription(ParticleCollisionEventId),
             const_cast<GeometryCollisionParticleSystemAffectorBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GeometryCollisionParticleSystemAffectorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GeometryCollisionParticleSystemAffector *pThis = static_cast<GeometryCollisionParticleSystemAffector *>(this);

    pThis->execSync(static_cast<GeometryCollisionParticleSystemAffector *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GeometryCollisionParticleSystemAffectorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GeometryCollisionParticleSystemAffector *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GeometryCollisionParticleSystemAffector *>(pRefAspect),
                  dynamic_cast<const GeometryCollisionParticleSystemAffector *>(this));

    return returnValue;
}
#endif

void GeometryCollisionParticleSystemAffectorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<GeometryCollisionParticleSystemAffector *>(this)->clearCollisionAffectors();

    static_cast<GeometryCollisionParticleSystemAffector *>(this)->setCollisionNode(NULL);


}


OSG_END_NAMESPACE
