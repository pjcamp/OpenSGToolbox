/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleGeometryCollisionEventDetails
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPARTICLEGEOMETRYCOLLISIONEVENTDETAILSBASE_H_
#define _OSGPARTICLEGEOMETRYCOLLISIONEVENTDETAILSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribParticleSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGEventDetails.h" // Parent

#include "OSGSysFields.h"               // HitT type
#include "OSGNodeFields.h"              // HitNode type
#include "OSGVecFields.h"               // HitNormal type
#include "OSGParticleSystemFields.h"    // System type

#include "OSGParticleGeometryCollisionEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class ParticleGeometryCollisionEventDetails;

//! \brief ParticleGeometryCollisionEventDetails Base Class.

class OSG_CONTRIBPARTICLESYSTEM_DLLMAPPING ParticleGeometryCollisionEventDetailsBase : public EventDetails
{
  public:

    typedef EventDetails Inherited;
    typedef EventDetails ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ParticleGeometryCollisionEventDetails);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        HitTFieldId = Inherited::NextFieldId,
        HitNodeFieldId = HitTFieldId + 1,
        HitPolygonIndexFieldId = HitNodeFieldId + 1,
        HitNormalFieldId = HitPolygonIndexFieldId + 1,
        HitPointFieldId = HitNormalFieldId + 1,
        SystemFieldId = HitPointFieldId + 1,
        ParticleIndexFieldId = SystemFieldId + 1,
        NextFieldId = ParticleIndexFieldId + 1
    };

    static const OSG::BitVector HitTFieldMask =
        (TypeTraits<BitVector>::One << HitTFieldId);
    static const OSG::BitVector HitNodeFieldMask =
        (TypeTraits<BitVector>::One << HitNodeFieldId);
    static const OSG::BitVector HitPolygonIndexFieldMask =
        (TypeTraits<BitVector>::One << HitPolygonIndexFieldId);
    static const OSG::BitVector HitNormalFieldMask =
        (TypeTraits<BitVector>::One << HitNormalFieldId);
    static const OSG::BitVector HitPointFieldMask =
        (TypeTraits<BitVector>::One << HitPointFieldId);
    static const OSG::BitVector SystemFieldMask =
        (TypeTraits<BitVector>::One << SystemFieldId);
    static const OSG::BitVector ParticleIndexFieldMask =
        (TypeTraits<BitVector>::One << ParticleIndexFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFReal32          SFHitTType;
    typedef SFUnrecNodePtr    SFHitNodeType;
    typedef SFInt32           SFHitPolygonIndexType;
    typedef SFVec3f           SFHitNormalType;
    typedef SFPnt3f           SFHitPointType;
    typedef SFUnrecParticleSystemPtr SFSystemType;
    typedef SFUInt32          SFParticleIndexType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


            const SFReal32            *getSFHitT            (void) const;
            const SFUnrecNodePtr      *getSFHitNode        (void) const;

            const SFInt32             *getSFHitPolygonIndex (void) const;

            const SFVec3f             *getSFHitNormal       (void) const;

            const SFPnt3f             *getSFHitPoint        (void) const;
            const SFUnrecParticleSystemPtr *getSFSystem         (void) const;

            const SFUInt32            *getSFParticleIndex   (void) const;


                  Real32               getHitT            (void) const;

                  Node * getHitNode        (void) const;

                  Int32                getHitPolygonIndex (void) const;

            const Vec3f               &getHitNormal       (void) const;

            const Pnt3f               &getHitPoint        (void) const;

                  ParticleSystem * getSystem         (void) const;

                  UInt32               getParticleIndex   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ParticleGeometryCollisionEventDetailsTransitPtr  create          (void);
    static  ParticleGeometryCollisionEventDetails           *createEmpty     (void);

    static  ParticleGeometryCollisionEventDetailsTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ParticleGeometryCollisionEventDetails            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ParticleGeometryCollisionEventDetailsTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32          _sfHitT;
    SFUnrecNodePtr    _sfHitNode;
    SFInt32           _sfHitPolygonIndex;
    SFVec3f           _sfHitNormal;
    SFPnt3f           _sfHitPoint;
    SFUnrecParticleSystemPtr _sfSystem;
    SFUInt32          _sfParticleIndex;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ParticleGeometryCollisionEventDetailsBase(void);
    ParticleGeometryCollisionEventDetailsBase(const ParticleGeometryCollisionEventDetailsBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ParticleGeometryCollisionEventDetailsBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ParticleGeometryCollisionEventDetails *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleHitT            (void) const;
    EditFieldHandlePtr editHandleHitT           (void);
    GetFieldHandlePtr  getHandleHitNode         (void) const;
    EditFieldHandlePtr editHandleHitNode        (void);
    GetFieldHandlePtr  getHandleHitPolygonIndex (void) const;
    EditFieldHandlePtr editHandleHitPolygonIndex(void);
    GetFieldHandlePtr  getHandleHitNormal       (void) const;
    EditFieldHandlePtr editHandleHitNormal      (void);
    GetFieldHandlePtr  getHandleHitPoint        (void) const;
    EditFieldHandlePtr editHandleHitPoint       (void);
    GetFieldHandlePtr  getHandleSystem          (void) const;
    EditFieldHandlePtr editHandleSystem         (void);
    GetFieldHandlePtr  getHandleParticleIndex   (void) const;
    EditFieldHandlePtr editHandleParticleIndex  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFReal32            *editSFHitT           (void);
                  SFUnrecNodePtr      *editSFHitNode        (void);

                  SFInt32             *editSFHitPolygonIndex(void);

                  SFVec3f             *editSFHitNormal      (void);

                  SFPnt3f             *editSFHitPoint       (void);
                  SFUnrecParticleSystemPtr *editSFSystem         (void);

                  SFUInt32            *editSFParticleIndex  (void);


                  Real32              &editHitT           (void);


                  Int32               &editHitPolygonIndex(void);

                  Vec3f               &editHitNormal      (void);

                  Pnt3f               &editHitPoint       (void);


                  UInt32              &editParticleIndex  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setHitT           (const Real32 value);
            void setHitNode        (Node * const value);
            void setHitPolygonIndex(const Int32 value);
            void setHitNormal      (const Vec3f &value);
            void setHitPoint       (const Pnt3f &value);
            void setSystem         (ParticleSystem * const value);
            void setParticleIndex  (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ParticleGeometryCollisionEventDetailsBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ParticleGeometryCollisionEventDetailsBase &source);
};

typedef ParticleGeometryCollisionEventDetailsBase *ParticleGeometryCollisionEventDetailsBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPARTICLEGEOMETRYCOLLISIONEVENTDETAILSBASE_H_ */
