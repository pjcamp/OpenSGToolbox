/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleSystem
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPARTICLESYSTEMBASE_H_
#define _OSGPARTICLESYSTEMBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribParticleSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent

#include "OSGNodeFields.h"              // Beacon type
#include "OSGVecFields.h"               // InternalPositions type
#include "OSGBaseFields.h"              // InternalColors type
#include "OSGStringToUInt32MapFields.h" // InternalAttributes type
#include "OSGSysFields.h"               // InternalIDs type
#include "OSGParticleGeneratorFields.h" // Generators type
#include "OSGParticleAffectorFields.h"  // Affectors type
#include "OSGParticleSystemAffectorFields.h" // SystemAffectors type

#include "OSGParticleSystemFields.h"

//Event Producer Headers
#include "OSGActivity.h"
#include "OSGConsumableEventCombiner.h"

#include "OSGParticleSystemEventDetailsFields.h"
#include "OSGParticleEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class ParticleSystem;

//! \brief ParticleSystem Base Class.

class OSG_CONTRIBPARTICLESYSTEM_DLLMAPPING ParticleSystemBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ParticleSystem);
    
    
    typedef ParticleSystemEventDetails SystemUpdatedEventDetailsType;
    typedef ParticleSystemEventDetails VolumeChangedEventDetailsType;
    typedef ParticleEventDetails ParticleGeneratedEventDetailsType;
    typedef ParticleEventDetails ParticleKilledEventDetailsType;
    typedef ParticleEventDetails ParticleStolenEventDetailsType;

    typedef boost::signals2::signal<void (EventDetails* const            , UInt32)> BaseEventType;
    typedef boost::signals2::signal<void (ParticleSystemEventDetails* const, UInt32), ConsumableEventCombiner> SystemUpdatedEventType;
    typedef boost::signals2::signal<void (ParticleSystemEventDetails* const, UInt32), ConsumableEventCombiner> VolumeChangedEventType;
    typedef boost::signals2::signal<void (ParticleEventDetails* const, UInt32), ConsumableEventCombiner> ParticleGeneratedEventType;
    typedef boost::signals2::signal<void (ParticleEventDetails* const, UInt32), ConsumableEventCombiner> ParticleKilledEventType;
    typedef boost::signals2::signal<void (ParticleEventDetails* const, UInt32), ConsumableEventCombiner> ParticleStolenEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        BeaconFieldId = Inherited::NextFieldId,
        InternalPositionsFieldId = BeaconFieldId + 1,
        InternalSecPositionsFieldId = InternalPositionsFieldId + 1,
        InternalNormalsFieldId = InternalSecPositionsFieldId + 1,
        InternalColorsFieldId = InternalNormalsFieldId + 1,
        InternalSizesFieldId = InternalColorsFieldId + 1,
        InternalLifespansFieldId = InternalSizesFieldId + 1,
        InternalAgesFieldId = InternalLifespansFieldId + 1,
        InternalVelocitiesFieldId = InternalAgesFieldId + 1,
        InternalSecVelocitiesFieldId = InternalVelocitiesFieldId + 1,
        InternalAccelerationsFieldId = InternalSecVelocitiesFieldId + 1,
        InternalAttributesFieldId = InternalAccelerationsFieldId + 1,
        InternalIDsFieldId = InternalAttributesFieldId + 1,
        MaxParticlesFieldId = InternalIDsFieldId + 1,
        DynamicFieldId = MaxParticlesFieldId + 1,
        UpdateSecAttribsFieldId = DynamicFieldId + 1,
        LastElapsedTimeFieldId = UpdateSecAttribsFieldId + 1,
        GeneratorsFieldId = LastElapsedTimeFieldId + 1,
        AffectorsFieldId = GeneratorsFieldId + 1,
        SystemAffectorsFieldId = AffectorsFieldId + 1,
        VolumeFieldId = SystemAffectorsFieldId + 1,
        MaxParticleSizeFieldId = VolumeFieldId + 1,
        NextFieldId = MaxParticleSizeFieldId + 1
    };

    static const OSG::BitVector BeaconFieldMask =
        (TypeTraits<BitVector>::One << BeaconFieldId);
    static const OSG::BitVector InternalPositionsFieldMask =
        (TypeTraits<BitVector>::One << InternalPositionsFieldId);
    static const OSG::BitVector InternalSecPositionsFieldMask =
        (TypeTraits<BitVector>::One << InternalSecPositionsFieldId);
    static const OSG::BitVector InternalNormalsFieldMask =
        (TypeTraits<BitVector>::One << InternalNormalsFieldId);
    static const OSG::BitVector InternalColorsFieldMask =
        (TypeTraits<BitVector>::One << InternalColorsFieldId);
    static const OSG::BitVector InternalSizesFieldMask =
        (TypeTraits<BitVector>::One << InternalSizesFieldId);
    static const OSG::BitVector InternalLifespansFieldMask =
        (TypeTraits<BitVector>::One << InternalLifespansFieldId);
    static const OSG::BitVector InternalAgesFieldMask =
        (TypeTraits<BitVector>::One << InternalAgesFieldId);
    static const OSG::BitVector InternalVelocitiesFieldMask =
        (TypeTraits<BitVector>::One << InternalVelocitiesFieldId);
    static const OSG::BitVector InternalSecVelocitiesFieldMask =
        (TypeTraits<BitVector>::One << InternalSecVelocitiesFieldId);
    static const OSG::BitVector InternalAccelerationsFieldMask =
        (TypeTraits<BitVector>::One << InternalAccelerationsFieldId);
    static const OSG::BitVector InternalAttributesFieldMask =
        (TypeTraits<BitVector>::One << InternalAttributesFieldId);
    static const OSG::BitVector InternalIDsFieldMask =
        (TypeTraits<BitVector>::One << InternalIDsFieldId);
    static const OSG::BitVector MaxParticlesFieldMask =
        (TypeTraits<BitVector>::One << MaxParticlesFieldId);
    static const OSG::BitVector DynamicFieldMask =
        (TypeTraits<BitVector>::One << DynamicFieldId);
    static const OSG::BitVector UpdateSecAttribsFieldMask =
        (TypeTraits<BitVector>::One << UpdateSecAttribsFieldId);
    static const OSG::BitVector LastElapsedTimeFieldMask =
        (TypeTraits<BitVector>::One << LastElapsedTimeFieldId);
    static const OSG::BitVector GeneratorsFieldMask =
        (TypeTraits<BitVector>::One << GeneratorsFieldId);
    static const OSG::BitVector AffectorsFieldMask =
        (TypeTraits<BitVector>::One << AffectorsFieldId);
    static const OSG::BitVector SystemAffectorsFieldMask =
        (TypeTraits<BitVector>::One << SystemAffectorsFieldId);
    static const OSG::BitVector VolumeFieldMask =
        (TypeTraits<BitVector>::One << VolumeFieldId);
    static const OSG::BitVector MaxParticleSizeFieldMask =
        (TypeTraits<BitVector>::One << MaxParticleSizeFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFWeakNodePtr     SFBeaconType;
    typedef MFPnt3f           MFInternalPositionsType;
    typedef MFPnt3f           MFInternalSecPositionsType;
    typedef MFVec3f           MFInternalNormalsType;
    typedef MFColor4f         MFInternalColorsType;
    typedef MFVec3f           MFInternalSizesType;
    typedef MFTime            MFInternalLifespansType;
    typedef MFTime            MFInternalAgesType;
    typedef MFVec3f           MFInternalVelocitiesType;
    typedef MFVec3f           MFInternalSecVelocitiesType;
    typedef MFVec3f           MFInternalAccelerationsType;
    typedef MFStringToUInt32Map MFInternalAttributesType;
    typedef MFUInt32          MFInternalIDsType;
    typedef SFUInt32          SFMaxParticlesType;
    typedef SFBool            SFDynamicType;
    typedef SFBool            SFUpdateSecAttribsType;
    typedef SFTime            SFLastElapsedTimeType;
    typedef MFUnrecParticleGeneratorPtr MFGeneratorsType;
    typedef MFUnrecParticleAffectorPtr MFAffectorsType;
    typedef MFUnrecParticleSystemAffectorPtr MFSystemAffectorsType;
    typedef SFBoxVolume       SFVolumeType;
    typedef SFVec3f           SFMaxParticleSizeType;

    enum
    {
        SystemUpdatedEventId = 1,
        VolumeChangedEventId = SystemUpdatedEventId + 1,
        ParticleGeneratedEventId = VolumeChangedEventId + 1,
        ParticleKilledEventId = ParticleGeneratedEventId + 1,
        ParticleStolenEventId = ParticleKilledEventId + 1,
        NextProducedEventId = ParticleStolenEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFWeakNodePtr       *getSFBeacon         (void) const;
                  SFWeakNodePtr       *editSFBeacon         (void);

                  SFUInt32            *editSFMaxParticles   (void);
            const SFUInt32            *getSFMaxParticles    (void) const;

                  SFBool              *editSFDynamic        (void);
            const SFBool              *getSFDynamic         (void) const;

                  SFBool              *editSFUpdateSecAttribs(void);
            const SFBool              *getSFUpdateSecAttribs (void) const;

                  SFTime              *editSFLastElapsedTime(void);
            const SFTime              *getSFLastElapsedTime (void) const;
            const MFUnrecParticleGeneratorPtr *getMFGenerators     (void) const;
                  MFUnrecParticleGeneratorPtr *editMFGenerators     (void);
            const MFUnrecParticleAffectorPtr *getMFAffectors      (void) const;
                  MFUnrecParticleAffectorPtr *editMFAffectors      (void);
            const MFUnrecParticleSystemAffectorPtr *getMFSystemAffectors(void) const;
                  MFUnrecParticleSystemAffectorPtr *editMFSystemAffectors(void);

            const SFBoxVolume         *getSFVolume          (void) const;

            const SFVec3f             *getSFMaxParticleSize (void) const;


                  Node * getBeacon         (void) const;

                  UInt32              &editMaxParticles   (void);
                  UInt32               getMaxParticles    (void) const;

                  bool                &editDynamic        (void);
                  bool                 getDynamic         (void) const;

                  bool                &editUpdateSecAttribs(void);
                  bool                 getUpdateSecAttribs (void) const;

                  Time                &editLastElapsedTime(void);
            const Time                &getLastElapsedTime (void) const;

                  ParticleGenerator * getGenerators     (const UInt32 index) const;

                  ParticleAffector * getAffectors      (const UInt32 index) const;

                  ParticleSystemAffector * getSystemAffectors(const UInt32 index) const;

            const BoxVolume           &getVolume          (void) const;

            const Vec3f               &getMaxParticleSize (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setBeacon         (Node * const value);
            void setMaxParticles   (const UInt32 value);
            void setDynamic        (const bool value);
            void setUpdateSecAttribs(const bool value);
            void setLastElapsedTime(const Time &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToGenerators           (ParticleGenerator * const value   );
    void assignGenerators          (const MFUnrecParticleGeneratorPtr &value);
    void removeFromGenerators (UInt32               uiIndex );
    void removeObjFromGenerators(ParticleGenerator * const value   );
    void clearGenerators            (void                         );

    void pushToAffectors           (ParticleAffector * const value   );
    void assignAffectors          (const MFUnrecParticleAffectorPtr &value);
    void removeFromAffectors (UInt32               uiIndex );
    void removeObjFromAffectors(ParticleAffector * const value   );
    void clearAffectors             (void                         );

    void pushToSystemAffectors           (ParticleSystemAffector * const value   );
    void assignSystemAffectors          (const MFUnrecParticleSystemAffectorPtr &value);
    void removeFromSystemAffectors (UInt32               uiIndex );
    void removeObjFromSystemAffectors(ParticleSystemAffector * const value   );
    void clearSystemAffectors            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    virtual boost::signals2::connection attachActivity(UInt32 eventId,
                                                       Activity* TheActivity);
                                                         
    virtual UInt32                   getNumProducedEvents       (void                                ) const;
    virtual const EventDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    virtual const EventDescription *getProducedEventDescription(UInt32 ProducedEventId              ) const;
    virtual UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;
    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //SystemUpdated
    boost::signals2::connection connectSystemUpdated  (const SystemUpdatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSystemUpdated  (const SystemUpdatedEventType::group_type &group,
                                                       const SystemUpdatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSystemUpdated          (const SystemUpdatedEventType::group_type &group);
    void   disconnectAllSlotsSystemUpdated  (void);
    bool   isEmptySystemUpdated             (void) const;
    UInt32 numSlotsSystemUpdated            (void) const;
    
    //VolumeChanged
    boost::signals2::connection connectVolumeChanged  (const VolumeChangedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectVolumeChanged  (const VolumeChangedEventType::group_type &group,
                                                       const VolumeChangedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectVolumeChanged          (const VolumeChangedEventType::group_type &group);
    void   disconnectAllSlotsVolumeChanged  (void);
    bool   isEmptyVolumeChanged             (void) const;
    UInt32 numSlotsVolumeChanged            (void) const;
    
    //ParticleGenerated
    boost::signals2::connection connectParticleGenerated(const ParticleGeneratedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectParticleGenerated(const ParticleGeneratedEventType::group_type &group,
                                                       const ParticleGeneratedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectParticleGenerated      (const ParticleGeneratedEventType::group_type &group);
    void   disconnectAllSlotsParticleGenerated(void);
    bool   isEmptyParticleGenerated         (void) const;
    UInt32 numSlotsParticleGenerated        (void) const;
    
    //ParticleKilled
    boost::signals2::connection connectParticleKilled (const ParticleKilledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectParticleKilled (const ParticleKilledEventType::group_type &group,
                                                       const ParticleKilledEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectParticleKilled         (const ParticleKilledEventType::group_type &group);
    void   disconnectAllSlotsParticleKilled (void);
    bool   isEmptyParticleKilled            (void) const;
    UInt32 numSlotsParticleKilled           (void) const;
    
    //ParticleStolen
    boost::signals2::connection connectParticleStolen (const ParticleStolenEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectParticleStolen (const ParticleStolenEventType::group_type &group,
                                                       const ParticleStolenEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectParticleStolen         (const ParticleStolenEventType::group_type &group);
    void   disconnectAllSlotsParticleStolen (void);
    bool   isEmptyParticleStolen            (void) const;
    UInt32 numSlotsParticleStolen           (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ParticleSystemTransitPtr  create          (void);
    static  ParticleSystem           *createEmpty     (void);

    static  ParticleSystemTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ParticleSystem            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ParticleSystemTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    SystemUpdatedEventType _SystemUpdatedEvent;
    VolumeChangedEventType _VolumeChangedEvent;
    ParticleGeneratedEventType _ParticleGeneratedEvent;
    ParticleKilledEventType _ParticleKilledEvent;
    ParticleStolenEventType _ParticleStolenEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFWeakNodePtr     _sfBeacon;
    MFPnt3f           _mfInternalPositions;
    MFPnt3f           _mfInternalSecPositions;
    MFVec3f           _mfInternalNormals;
    MFColor4f         _mfInternalColors;
    MFVec3f           _mfInternalSizes;
    MFTime            _mfInternalLifespans;
    MFTime            _mfInternalAges;
    MFVec3f           _mfInternalVelocities;
    MFVec3f           _mfInternalSecVelocities;
    MFVec3f           _mfInternalAccelerations;
    MFStringToUInt32Map _mfInternalAttributes;
    MFUInt32          _mfInternalIDs;
    SFUInt32          _sfMaxParticles;
    SFBool            _sfDynamic;
    SFBool            _sfUpdateSecAttribs;
    SFTime            _sfLastElapsedTime;
    MFUnrecParticleGeneratorPtr _mfGenerators;
    MFUnrecParticleAffectorPtr _mfAffectors;
    MFUnrecParticleSystemAffectorPtr _mfSystemAffectors;
    SFBoxVolume       _sfVolume;
    SFVec3f           _sfMaxParticleSize;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ParticleSystemBase(void);
    ParticleSystemBase(const ParticleSystemBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ParticleSystemBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ParticleSystem *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleBeacon          (void) const;
    EditFieldHandlePtr editHandleBeacon         (void);
    GetFieldHandlePtr  getHandleInternalPositions (void) const;
    EditFieldHandlePtr editHandleInternalPositions(void);
    GetFieldHandlePtr  getHandleInternalSecPositions (void) const;
    EditFieldHandlePtr editHandleInternalSecPositions(void);
    GetFieldHandlePtr  getHandleInternalNormals (void) const;
    EditFieldHandlePtr editHandleInternalNormals(void);
    GetFieldHandlePtr  getHandleInternalColors  (void) const;
    EditFieldHandlePtr editHandleInternalColors (void);
    GetFieldHandlePtr  getHandleInternalSizes   (void) const;
    EditFieldHandlePtr editHandleInternalSizes  (void);
    GetFieldHandlePtr  getHandleInternalLifespans (void) const;
    EditFieldHandlePtr editHandleInternalLifespans(void);
    GetFieldHandlePtr  getHandleInternalAges    (void) const;
    EditFieldHandlePtr editHandleInternalAges   (void);
    GetFieldHandlePtr  getHandleInternalVelocities (void) const;
    EditFieldHandlePtr editHandleInternalVelocities(void);
    GetFieldHandlePtr  getHandleInternalSecVelocities (void) const;
    EditFieldHandlePtr editHandleInternalSecVelocities(void);
    GetFieldHandlePtr  getHandleInternalAccelerations (void) const;
    EditFieldHandlePtr editHandleInternalAccelerations(void);
    GetFieldHandlePtr  getHandleInternalAttributes (void) const;
    EditFieldHandlePtr editHandleInternalAttributes(void);
    GetFieldHandlePtr  getHandleInternalIDs     (void) const;
    EditFieldHandlePtr editHandleInternalIDs    (void);
    GetFieldHandlePtr  getHandleMaxParticles    (void) const;
    EditFieldHandlePtr editHandleMaxParticles   (void);
    GetFieldHandlePtr  getHandleDynamic         (void) const;
    EditFieldHandlePtr editHandleDynamic        (void);
    GetFieldHandlePtr  getHandleUpdateSecAttribs (void) const;
    EditFieldHandlePtr editHandleUpdateSecAttribs(void);
    GetFieldHandlePtr  getHandleLastElapsedTime (void) const;
    EditFieldHandlePtr editHandleLastElapsedTime(void);
    GetFieldHandlePtr  getHandleGenerators      (void) const;
    EditFieldHandlePtr editHandleGenerators     (void);
    GetFieldHandlePtr  getHandleAffectors       (void) const;
    EditFieldHandlePtr editHandleAffectors      (void);
    GetFieldHandlePtr  getHandleSystemAffectors (void) const;
    EditFieldHandlePtr editHandleSystemAffectors(void);
    GetFieldHandlePtr  getHandleVolume          (void) const;
    EditFieldHandlePtr editHandleVolume         (void);
    GetFieldHandlePtr  getHandleMaxParticleSize (void) const;
    EditFieldHandlePtr editHandleMaxParticleSize(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleSystemUpdatedSignal(void) const;
    GetEventHandlePtr getHandleVolumeChangedSignal(void) const;
    GetEventHandlePtr getHandleParticleGeneratedSignal(void) const;
    GetEventHandlePtr getHandleParticleKilledSignal(void) const;
    GetEventHandlePtr getHandleParticleStolenSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFPnt3f             *editMFInternalPositions(void);
            const MFPnt3f             *getMFInternalPositions (void) const;

                  MFPnt3f             *editMFInternalSecPositions(void);
            const MFPnt3f             *getMFInternalSecPositions (void) const;

                  MFVec3f             *editMFInternalNormals(void);
            const MFVec3f             *getMFInternalNormals (void) const;

                  MFColor4f           *editMFInternalColors (void);
            const MFColor4f           *getMFInternalColors  (void) const;

                  MFVec3f             *editMFInternalSizes  (void);
            const MFVec3f             *getMFInternalSizes   (void) const;

                  MFTime              *editMFInternalLifespans(void);
            const MFTime              *getMFInternalLifespans (void) const;

                  MFTime              *editMFInternalAges   (void);
            const MFTime              *getMFInternalAges    (void) const;

                  MFVec3f             *editMFInternalVelocities(void);
            const MFVec3f             *getMFInternalVelocities (void) const;

                  MFVec3f             *editMFInternalSecVelocities(void);
            const MFVec3f             *getMFInternalSecVelocities (void) const;

                  MFVec3f             *editMFInternalAccelerations(void);
            const MFVec3f             *getMFInternalAccelerations (void) const;

                  MFStringToUInt32Map *editMFInternalAttributes(void);
            const MFStringToUInt32Map *getMFInternalAttributes (void) const;

                  MFUInt32            *editMFInternalIDs    (void);
            const MFUInt32            *getMFInternalIDs     (void) const;

                  SFBoxVolume         *editSFVolume         (void);

                  SFVec3f             *editSFMaxParticleSize(void);


                  Pnt3f               &editInternalPositions(const UInt32 index);
            const Pnt3f               &getInternalPositions (const UInt32 index) const;

                  Pnt3f               &editInternalSecPositions(const UInt32 index);
            const Pnt3f               &getInternalSecPositions (const UInt32 index) const;

                  Vec3f               &editInternalNormals(const UInt32 index);
            const Vec3f               &getInternalNormals (const UInt32 index) const;

                  Color4f             &editInternalColors (const UInt32 index);
            const Color4f             &getInternalColors  (const UInt32 index) const;

                  Vec3f               &editInternalSizes  (const UInt32 index);
            const Vec3f               &getInternalSizes   (const UInt32 index) const;

                  Time                &editInternalLifespans(const UInt32 index);
            const Time                &getInternalLifespans (const UInt32 index) const;

                  Time                &editInternalAges   (const UInt32 index);
            const Time                &getInternalAges    (const UInt32 index) const;

                  Vec3f               &editInternalVelocities(const UInt32 index);
            const Vec3f               &getInternalVelocities (const UInt32 index) const;

                  Vec3f               &editInternalSecVelocities(const UInt32 index);
            const Vec3f               &getInternalSecVelocities (const UInt32 index) const;

                  Vec3f               &editInternalAccelerations(const UInt32 index);
            const Vec3f               &getInternalAccelerations (const UInt32 index) const;

                  StringToUInt32Map   &editInternalAttributes(const UInt32 index);
            const StringToUInt32Map   &getInternalAttributes (const UInt32 index) const;

                  UInt32              &editInternalIDs    (const UInt32 index);
                  UInt32               getInternalIDs     (const UInt32 index) const;

                  BoxVolume           &editVolume         (void);

                  Vec3f               &editMaxParticleSize(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setVolume         (const BoxVolume &value);
            void setMaxParticleSize(const Vec3f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceSystemUpdated       (SystemUpdatedEventDetailsType* const e);
    void produceVolumeChanged       (VolumeChangedEventDetailsType* const e);
    void produceParticleGenerated   (ParticleGeneratedEventDetailsType* const e);
    void produceParticleKilled      (ParticleKilledEventDetailsType* const e);
    void produceParticleStolen      (ParticleStolenEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ParticleSystemBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ParticleSystemBase &source);
};

typedef ParticleSystemBase *ParticleSystemBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPARTICLESYSTEMBASE_H_ */
