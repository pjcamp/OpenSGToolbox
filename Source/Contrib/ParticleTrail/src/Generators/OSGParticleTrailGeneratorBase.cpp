/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleTrailGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGParticleSystem.h"          // SystemToTrail Class

#include "OSGParticleTrailGeneratorBase.h"
#include "OSGParticleTrailGenerator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ParticleTrailGenerator
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ParticleSystem * ParticleTrailGeneratorBase::_sfSystemToTrail
    ParticleSystem that will be used to generate the trail.
*/

/*! \var Real32          ParticleTrailGeneratorBase::_sfTrailLength
    This value determines the length the particle trails have. Determined by
    the LengthMethod field (based on time -or- the number of points in the trail)
    NOTE: If NUM_POINTS is selected as the method for determining trail length,
    then the value of TrailLength will be rounded down to determine the number 
    of points to include in the trail.
*/

/*! \var UInt32          ParticleTrailGeneratorBase::_sfTrailLengthMethod
    Method to use to determine the length of the trail.
    TIME - Trail points from the last n seconds used, where n is the value 
    of the TrailLength field
    NUM_POINTS - The last n trail points are used in the trail, where n is 
    the value of the TrailLength field, rounded down.
*/

/*! \var Real64          ParticleTrailGeneratorBase::_sfTrailResolution
    This value determines the spacing between subsequent trail points.  The 
    method (time or distance) used for spacing is determined by the 
    TrailResolutionMethod field.
*/

/*! \var UInt32          ParticleTrailGeneratorBase::_sfTrailResolutionMethod
    The method used to calculated the spacing between trail points
    TIME_SPACING - trail points spacing determined by time since last trail point
    DISTANCE_SPACING - trail point spacing determined by distance from last trail point
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ParticleTrailGenerator *>::_type("ParticleTrailGeneratorPtr", "NodePtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ParticleTrailGenerator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ParticleTrailGenerator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ParticleTrailGenerator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ParticleTrailGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecParticleSystemPtr::Description(
        SFUnrecParticleSystemPtr::getClassType(),
        "SystemToTrail",
        "ParticleSystem that will be used to generate the trail.\n",
        SystemToTrailFieldId, SystemToTrailFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleTrailGenerator::editHandleSystemToTrail),
        static_cast<FieldGetMethodSig >(&ParticleTrailGenerator::getHandleSystemToTrail));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "TrailLength",
        "This value determines the length the particle trails have. Determined by\n"
        "the LengthMethod field (based on time -or- the number of points in the trail)\n"
        "NOTE: If NUM_POINTS is selected as the method for determining trail length,\n"
        "then the value of TrailLength will be rounded down to determine the number \n"
        "of points to include in the trail.\n",
        TrailLengthFieldId, TrailLengthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleTrailGenerator::editHandleTrailLength),
        static_cast<FieldGetMethodSig >(&ParticleTrailGenerator::getHandleTrailLength));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "TrailLengthMethod",
        "Method to use to determine the length of the trail.\n"
        "TIME - Trail points from the last n seconds used, where n is the value \n"
        "of the TrailLength field\n"
        "NUM_POINTS - The last n trail points are used in the trail, where n is \n"
        "the value of the TrailLength field, rounded down.\n",
        TrailLengthMethodFieldId, TrailLengthMethodFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleTrailGenerator::editHandleTrailLengthMethod),
        static_cast<FieldGetMethodSig >(&ParticleTrailGenerator::getHandleTrailLengthMethod));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal64::Description(
        SFReal64::getClassType(),
        "TrailResolution",
        "This value determines the spacing between subsequent trail points.  The \n"
        "method (time or distance) used for spacing is determined by the \n"
        "TrailResolutionMethod field.\n",
        TrailResolutionFieldId, TrailResolutionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleTrailGenerator::editHandleTrailResolution),
        static_cast<FieldGetMethodSig >(&ParticleTrailGenerator::getHandleTrailResolution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "TrailResolutionMethod",
        "The method used to calculated the spacing between trail points\n"
        "TIME_SPACING - trail points spacing determined by time since last trail point\n"
        "DISTANCE_SPACING - trail point spacing determined by distance from last trail point\n",
        TrailResolutionMethodFieldId, TrailResolutionMethodFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleTrailGenerator::editHandleTrailResolutionMethod),
        static_cast<FieldGetMethodSig >(&ParticleTrailGenerator::getHandleTrailResolutionMethod));

    oType.addInitialDesc(pDesc);
}


ParticleTrailGeneratorBase::TypeObject ParticleTrailGeneratorBase::_type(
    ParticleTrailGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ParticleTrailGenerator::initMethod,
    ParticleTrailGenerator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ParticleTrailGenerator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ParticleTrailGenerator\"\n"
    "\tparent=\"Node\"\n"
    "    library=\"ContribParticleTrail\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"SystemToTrail\"\n"
    "\t\ttype=\"ParticleSystem\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tParticleSystem that will be used to generate the trail.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TrailLength\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"3.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThis value determines the length the particle trails have. Determined by\n"
    "\tthe LengthMethod field (based on time -or- the number of points in the trail)\n"
    "\tNOTE: If NUM_POINTS is selected as the method for determining trail length,\n"
    "\tthen the value of TrailLength will be rounded down to determine the number \n"
    "\tof points to include in the trail.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TrailLengthMethod\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"ParticleTrailGenerator::TIME\"\n"
    "\t>\n"
    "\tMethod to use to determine the length of the trail.\n"
    "\tTIME - Trail points from the last n seconds used, where n is the value \n"
    "\t\tof the TrailLength field\n"
    "\tNUM_POINTS - The last n trail points are used in the trail, where n is \n"
    "\t\tthe value of the TrailLength field, rounded down.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TrailResolution\"\n"
    "\t\ttype=\"Real64\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"3.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThis value determines the spacing between subsequent trail points.  The \n"
    "\tmethod (time or distance) used for spacing is determined by the \n"
    "\tTrailResolutionMethod field.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TrailResolutionMethod\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"ParticleTrailGenerator::TIME_SPACING\"\n"
    "\t>\n"
    "\tThe method used to calculated the spacing between trail points\n"
    "\tTIME_SPACING - trail points spacing determined by time since last trail point\n"
    "\tDISTANCE_SPACING - trail point spacing determined by distance from last trail point\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleTrailGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ParticleTrailGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 ParticleTrailGeneratorBase::getContainerSize(void) const
{
    return sizeof(ParticleTrailGenerator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ParticleTrailGenerator::_sfSystemToTrail field.
const SFUnrecParticleSystemPtr *ParticleTrailGeneratorBase::getSFSystemToTrail(void) const
{
    return &_sfSystemToTrail;
}

SFUnrecParticleSystemPtr *ParticleTrailGeneratorBase::editSFSystemToTrail  (void)
{
    editSField(SystemToTrailFieldMask);

    return &_sfSystemToTrail;
}

SFReal32 *ParticleTrailGeneratorBase::editSFTrailLength(void)
{
    editSField(TrailLengthFieldMask);

    return &_sfTrailLength;
}

const SFReal32 *ParticleTrailGeneratorBase::getSFTrailLength(void) const
{
    return &_sfTrailLength;
}


SFUInt32 *ParticleTrailGeneratorBase::editSFTrailLengthMethod(void)
{
    editSField(TrailLengthMethodFieldMask);

    return &_sfTrailLengthMethod;
}

const SFUInt32 *ParticleTrailGeneratorBase::getSFTrailLengthMethod(void) const
{
    return &_sfTrailLengthMethod;
}


SFReal64 *ParticleTrailGeneratorBase::editSFTrailResolution(void)
{
    editSField(TrailResolutionFieldMask);

    return &_sfTrailResolution;
}

const SFReal64 *ParticleTrailGeneratorBase::getSFTrailResolution(void) const
{
    return &_sfTrailResolution;
}


SFUInt32 *ParticleTrailGeneratorBase::editSFTrailResolutionMethod(void)
{
    editSField(TrailResolutionMethodFieldMask);

    return &_sfTrailResolutionMethod;
}

const SFUInt32 *ParticleTrailGeneratorBase::getSFTrailResolutionMethod(void) const
{
    return &_sfTrailResolutionMethod;
}






/*------------------------------ access -----------------------------------*/

UInt32 ParticleTrailGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SystemToTrailFieldMask & whichField))
    {
        returnValue += _sfSystemToTrail.getBinSize();
    }
    if(FieldBits::NoField != (TrailLengthFieldMask & whichField))
    {
        returnValue += _sfTrailLength.getBinSize();
    }
    if(FieldBits::NoField != (TrailLengthMethodFieldMask & whichField))
    {
        returnValue += _sfTrailLengthMethod.getBinSize();
    }
    if(FieldBits::NoField != (TrailResolutionFieldMask & whichField))
    {
        returnValue += _sfTrailResolution.getBinSize();
    }
    if(FieldBits::NoField != (TrailResolutionMethodFieldMask & whichField))
    {
        returnValue += _sfTrailResolutionMethod.getBinSize();
    }

    return returnValue;
}

void ParticleTrailGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SystemToTrailFieldMask & whichField))
    {
        _sfSystemToTrail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TrailLengthFieldMask & whichField))
    {
        _sfTrailLength.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TrailLengthMethodFieldMask & whichField))
    {
        _sfTrailLengthMethod.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TrailResolutionFieldMask & whichField))
    {
        _sfTrailResolution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TrailResolutionMethodFieldMask & whichField))
    {
        _sfTrailResolutionMethod.copyToBin(pMem);
    }
}

void ParticleTrailGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SystemToTrailFieldMask & whichField))
    {
        _sfSystemToTrail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TrailLengthFieldMask & whichField))
    {
        _sfTrailLength.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TrailLengthMethodFieldMask & whichField))
    {
        _sfTrailLengthMethod.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TrailResolutionFieldMask & whichField))
    {
        _sfTrailResolution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TrailResolutionMethodFieldMask & whichField))
    {
        _sfTrailResolutionMethod.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

ParticleTrailGeneratorBase::ParticleTrailGeneratorBase(void) :
    Inherited(),
    _sfSystemToTrail          (NULL),
    _sfTrailLength            (Real32(3.0f)),
    _sfTrailLengthMethod      (UInt32(ParticleTrailGenerator::TIME)),
    _sfTrailResolution        (Real64(3.0f)),
    _sfTrailResolutionMethod  (UInt32(ParticleTrailGenerator::TIME_SPACING))
{
}

ParticleTrailGeneratorBase::ParticleTrailGeneratorBase(const ParticleTrailGeneratorBase &source) :
    Inherited(source),
    _sfSystemToTrail          (NULL),
    _sfTrailLength            (source._sfTrailLength            ),
    _sfTrailLengthMethod      (source._sfTrailLengthMethod      ),
    _sfTrailResolution        (source._sfTrailResolution        ),
    _sfTrailResolutionMethod  (source._sfTrailResolutionMethod  )
{
}


/*-------------------------- destructors ----------------------------------*/

ParticleTrailGeneratorBase::~ParticleTrailGeneratorBase(void)
{
}

void ParticleTrailGeneratorBase::onCreate(const ParticleTrailGenerator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ParticleTrailGenerator *pThis = static_cast<ParticleTrailGenerator *>(this);

        pThis->setSystemToTrail(source->getSystemToTrail());
    }
}

GetFieldHandlePtr ParticleTrailGeneratorBase::getHandleSystemToTrail   (void) const
{
    SFUnrecParticleSystemPtr::GetHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::GetHandle(
             &_sfSystemToTrail,
             this->getType().getFieldDesc(SystemToTrailFieldId),
             const_cast<ParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleTrailGeneratorBase::editHandleSystemToTrail  (void)
{
    SFUnrecParticleSystemPtr::EditHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::EditHandle(
             &_sfSystemToTrail,
             this->getType().getFieldDesc(SystemToTrailFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleTrailGenerator::setSystemToTrail,
                    static_cast<ParticleTrailGenerator *>(this), _1));

    editSField(SystemToTrailFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleTrailGeneratorBase::getHandleTrailLength     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTrailLength,
             this->getType().getFieldDesc(TrailLengthFieldId),
             const_cast<ParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleTrailGeneratorBase::editHandleTrailLength    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTrailLength,
             this->getType().getFieldDesc(TrailLengthFieldId),
             this));


    editSField(TrailLengthFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleTrailGeneratorBase::getHandleTrailLengthMethod (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfTrailLengthMethod,
             this->getType().getFieldDesc(TrailLengthMethodFieldId),
             const_cast<ParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleTrailGeneratorBase::editHandleTrailLengthMethod(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfTrailLengthMethod,
             this->getType().getFieldDesc(TrailLengthMethodFieldId),
             this));


    editSField(TrailLengthMethodFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleTrailGeneratorBase::getHandleTrailResolution (void) const
{
    SFReal64::GetHandlePtr returnValue(
        new  SFReal64::GetHandle(
             &_sfTrailResolution,
             this->getType().getFieldDesc(TrailResolutionFieldId),
             const_cast<ParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleTrailGeneratorBase::editHandleTrailResolution(void)
{
    SFReal64::EditHandlePtr returnValue(
        new  SFReal64::EditHandle(
             &_sfTrailResolution,
             this->getType().getFieldDesc(TrailResolutionFieldId),
             this));


    editSField(TrailResolutionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleTrailGeneratorBase::getHandleTrailResolutionMethod (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfTrailResolutionMethod,
             this->getType().getFieldDesc(TrailResolutionMethodFieldId),
             const_cast<ParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleTrailGeneratorBase::editHandleTrailResolutionMethod(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfTrailResolutionMethod,
             this->getType().getFieldDesc(TrailResolutionMethodFieldId),
             this));


    editSField(TrailResolutionMethodFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ParticleTrailGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ParticleTrailGenerator *pThis = static_cast<ParticleTrailGenerator *>(this);

    pThis->execSync(static_cast<ParticleTrailGenerator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ParticleTrailGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ParticleTrailGenerator *>(this)->setSystemToTrail(NULL);


}


OSG_END_NAMESPACE
