/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextEditor!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGAdvancedTextDomArea.h"     // AdvancedTextDomAreas Class
#include "OSGTextDomArea.h"             // FocusedDomArea Class

#include "OSGTextEditorBase.h"
#include "OSGTextEditor.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextEditor
    A TextDom Editor

    This class is a component container that contains multiple AdvancedtextDomAreas
    It provides additional features :

    opening multiple files in multiple tabs
    splitpanel view
    displaying a copy clipboard
    search and replace window
    goto line window
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var AdvancedTextDomArea * TextEditorBase::_mfAdvancedTextDomAreas
    
*/

/*! \var bool            TextEditorBase::_sfClipboardVisible
    
*/

/*! \var bool            TextEditorBase::_sfIsSplit
    
*/

/*! \var TextDomArea *   TextEditorBase::_sfFocusedDomArea
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextEditor *>::_type("TextEditorPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextEditor *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextEditor *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextEditor *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextEditorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecAdvancedTextDomAreaPtr::Description(
        MFUnrecAdvancedTextDomAreaPtr::getClassType(),
        "AdvancedTextDomAreas",
        "",
        AdvancedTextDomAreasFieldId, AdvancedTextDomAreasFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextEditor::editHandleAdvancedTextDomAreas),
        static_cast<FieldGetMethodSig >(&TextEditor::getHandleAdvancedTextDomAreas));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ClipboardVisible",
        "",
        ClipboardVisibleFieldId, ClipboardVisibleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextEditor::editHandleClipboardVisible),
        static_cast<FieldGetMethodSig >(&TextEditor::getHandleClipboardVisible));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "isSplit",
        "",
        IsSplitFieldId, IsSplitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextEditor::editHandleIsSplit),
        static_cast<FieldGetMethodSig >(&TextEditor::getHandleIsSplit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextDomAreaPtr::Description(
        SFUnrecTextDomAreaPtr::getClassType(),
        "FocusedDomArea",
        "",
        FocusedDomAreaFieldId, FocusedDomAreaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextEditor::editHandleFocusedDomArea),
        static_cast<FieldGetMethodSig >(&TextEditor::getHandleFocusedDomArea));

    oType.addInitialDesc(pDesc);
}


TextEditorBase::TypeObject TextEditorBase::_type(
    TextEditorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&TextEditorBase::createEmptyLocal),
    TextEditor::initMethod,
    TextEditor::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TextEditor::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextEditor\"\n"
    "\tparent=\"ComponentContainer\"\n"
    "\tlibrary=\"ContribTextDom\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "\tparentProducer=\"Component\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "A TextDom Editor\n"
    "\n"
    "This class is a component container that contains multiple AdvancedtextDomAreas\n"
    "It provides additional features :\n"
    "\n"
    "opening multiple files in multiple tabs\n"
    "splitpanel view\n"
    "displaying a copy clipboard\n"
    "search and replace window\n"
    "goto line window\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"AdvancedTextDomAreas\"\n"
    "\t\ttype=\"AdvancedTextDomArea\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"ClipboardVisible\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"isSplit\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t\n"
    "\t<Field\n"
    "        name=\"FocusedDomArea\"\n"
    "        type=\"TextDomArea\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "</FieldContainer>\n",
    "A TextDom Editor\n"
    "\n"
    "This class is a component container that contains multiple AdvancedtextDomAreas\n"
    "It provides additional features :\n"
    "\n"
    "opening multiple files in multiple tabs\n"
    "splitpanel view\n"
    "displaying a copy clipboard\n"
    "search and replace window\n"
    "goto line window\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextEditorBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextEditorBase::getType(void) const
{
    return _type;
}

UInt32 TextEditorBase::getContainerSize(void) const
{
    return sizeof(TextEditor);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextEditor::_mfAdvancedTextDomAreas field.
const MFUnrecAdvancedTextDomAreaPtr *TextEditorBase::getMFAdvancedTextDomAreas(void) const
{
    return &_mfAdvancedTextDomAreas;
}

MFUnrecAdvancedTextDomAreaPtr *TextEditorBase::editMFAdvancedTextDomAreas(void)
{
    editMField(AdvancedTextDomAreasFieldMask, _mfAdvancedTextDomAreas);

    return &_mfAdvancedTextDomAreas;
}

SFBool *TextEditorBase::editSFClipboardVisible(void)
{
    editSField(ClipboardVisibleFieldMask);

    return &_sfClipboardVisible;
}

const SFBool *TextEditorBase::getSFClipboardVisible(void) const
{
    return &_sfClipboardVisible;
}


SFBool *TextEditorBase::editSFIsSplit(void)
{
    editSField(IsSplitFieldMask);

    return &_sfIsSplit;
}

const SFBool *TextEditorBase::getSFIsSplit(void) const
{
    return &_sfIsSplit;
}


//! Get the TextEditor::_sfFocusedDomArea field.
const SFUnrecTextDomAreaPtr *TextEditorBase::getSFFocusedDomArea(void) const
{
    return &_sfFocusedDomArea;
}

SFUnrecTextDomAreaPtr *TextEditorBase::editSFFocusedDomArea (void)
{
    editSField(FocusedDomAreaFieldMask);

    return &_sfFocusedDomArea;
}



void TextEditorBase::pushToAdvancedTextDomAreas(AdvancedTextDomArea * const value)
{
    editMField(AdvancedTextDomAreasFieldMask, _mfAdvancedTextDomAreas);

    _mfAdvancedTextDomAreas.push_back(value);
}

void TextEditorBase::assignAdvancedTextDomAreas(const MFUnrecAdvancedTextDomAreaPtr &value)
{
    MFUnrecAdvancedTextDomAreaPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecAdvancedTextDomAreaPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<TextEditor *>(this)->clearAdvancedTextDomAreas();

    while(elemIt != elemEnd)
    {
        this->pushToAdvancedTextDomAreas(*elemIt);

        ++elemIt;
    }
}

void TextEditorBase::removeFromAdvancedTextDomAreas(UInt32 uiIndex)
{
    if(uiIndex < _mfAdvancedTextDomAreas.size())
    {
        editMField(AdvancedTextDomAreasFieldMask, _mfAdvancedTextDomAreas);

        _mfAdvancedTextDomAreas.erase(uiIndex);
    }
}

void TextEditorBase::removeObjFromAdvancedTextDomAreas(AdvancedTextDomArea * const value)
{
    Int32 iElemIdx = _mfAdvancedTextDomAreas.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(AdvancedTextDomAreasFieldMask, _mfAdvancedTextDomAreas);

        _mfAdvancedTextDomAreas.erase(iElemIdx);
    }
}
void TextEditorBase::clearAdvancedTextDomAreas(void)
{
    editMField(AdvancedTextDomAreasFieldMask, _mfAdvancedTextDomAreas);


    _mfAdvancedTextDomAreas.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 TextEditorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AdvancedTextDomAreasFieldMask & whichField))
    {
        returnValue += _mfAdvancedTextDomAreas.getBinSize();
    }
    if(FieldBits::NoField != (ClipboardVisibleFieldMask & whichField))
    {
        returnValue += _sfClipboardVisible.getBinSize();
    }
    if(FieldBits::NoField != (IsSplitFieldMask & whichField))
    {
        returnValue += _sfIsSplit.getBinSize();
    }
    if(FieldBits::NoField != (FocusedDomAreaFieldMask & whichField))
    {
        returnValue += _sfFocusedDomArea.getBinSize();
    }

    return returnValue;
}

void TextEditorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AdvancedTextDomAreasFieldMask & whichField))
    {
        _mfAdvancedTextDomAreas.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClipboardVisibleFieldMask & whichField))
    {
        _sfClipboardVisible.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IsSplitFieldMask & whichField))
    {
        _sfIsSplit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedDomAreaFieldMask & whichField))
    {
        _sfFocusedDomArea.copyToBin(pMem);
    }
}

void TextEditorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AdvancedTextDomAreasFieldMask & whichField))
    {
        editMField(AdvancedTextDomAreasFieldMask, _mfAdvancedTextDomAreas);
        _mfAdvancedTextDomAreas.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClipboardVisibleFieldMask & whichField))
    {
        editSField(ClipboardVisibleFieldMask);
        _sfClipboardVisible.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IsSplitFieldMask & whichField))
    {
        editSField(IsSplitFieldMask);
        _sfIsSplit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedDomAreaFieldMask & whichField))
    {
        editSField(FocusedDomAreaFieldMask);
        _sfFocusedDomArea.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextEditorTransitPtr TextEditorBase::createLocal(BitVector bFlags)
{
    TextEditorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextEditor>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextEditorTransitPtr TextEditorBase::createDependent(BitVector bFlags)
{
    TextEditorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextEditor>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextEditorTransitPtr TextEditorBase::create(void)
{
    TextEditorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextEditor>(tmpPtr);
    }

    return fc;
}

TextEditor *TextEditorBase::createEmptyLocal(BitVector bFlags)
{
    TextEditor *returnValue;

    newPtr<TextEditor>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextEditor *TextEditorBase::createEmpty(void)
{
    TextEditor *returnValue;

    newPtr<TextEditor>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr TextEditorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextEditor *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextEditor *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextEditorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextEditor *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextEditor *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextEditorBase::shallowCopy(void) const
{
    TextEditor *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextEditor *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TextEditorBase::TextEditorBase(void) :
    Inherited(),
    _mfAdvancedTextDomAreas   (),
    _sfClipboardVisible       (bool(true)),
    _sfIsSplit                (bool(true)),
    _sfFocusedDomArea         (NULL)
{
}

TextEditorBase::TextEditorBase(const TextEditorBase &source) :
    Inherited(source),
    _mfAdvancedTextDomAreas   (),
    _sfClipboardVisible       (source._sfClipboardVisible       ),
    _sfIsSplit                (source._sfIsSplit                ),
    _sfFocusedDomArea         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

TextEditorBase::~TextEditorBase(void)
{
}

void TextEditorBase::onCreate(const TextEditor *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextEditor *pThis = static_cast<TextEditor *>(this);

        MFUnrecAdvancedTextDomAreaPtr::const_iterator AdvancedTextDomAreasIt  =
            source->_mfAdvancedTextDomAreas.begin();
        MFUnrecAdvancedTextDomAreaPtr::const_iterator AdvancedTextDomAreasEnd =
            source->_mfAdvancedTextDomAreas.end  ();

        while(AdvancedTextDomAreasIt != AdvancedTextDomAreasEnd)
        {
            pThis->pushToAdvancedTextDomAreas(*AdvancedTextDomAreasIt);

            ++AdvancedTextDomAreasIt;
        }

        pThis->setFocusedDomArea(source->getFocusedDomArea());
    }
}

GetFieldHandlePtr TextEditorBase::getHandleAdvancedTextDomAreas (void) const
{
    MFUnrecAdvancedTextDomAreaPtr::GetHandlePtr returnValue(
        new  MFUnrecAdvancedTextDomAreaPtr::GetHandle(
             &_mfAdvancedTextDomAreas,
             this->getType().getFieldDesc(AdvancedTextDomAreasFieldId),
             const_cast<TextEditorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextEditorBase::editHandleAdvancedTextDomAreas(void)
{
    MFUnrecAdvancedTextDomAreaPtr::EditHandlePtr returnValue(
        new  MFUnrecAdvancedTextDomAreaPtr::EditHandle(
             &_mfAdvancedTextDomAreas,
             this->getType().getFieldDesc(AdvancedTextDomAreasFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&TextEditor::pushToAdvancedTextDomAreas,
                    static_cast<TextEditor *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&TextEditor::removeFromAdvancedTextDomAreas,
                    static_cast<TextEditor *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&TextEditor::removeObjFromAdvancedTextDomAreas,
                    static_cast<TextEditor *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&TextEditor::clearAdvancedTextDomAreas,
                    static_cast<TextEditor *>(this)));

    editMField(AdvancedTextDomAreasFieldMask, _mfAdvancedTextDomAreas);

    return returnValue;
}

GetFieldHandlePtr TextEditorBase::getHandleClipboardVisible (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClipboardVisible,
             this->getType().getFieldDesc(ClipboardVisibleFieldId),
             const_cast<TextEditorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextEditorBase::editHandleClipboardVisible(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClipboardVisible,
             this->getType().getFieldDesc(ClipboardVisibleFieldId),
             this));


    editSField(ClipboardVisibleFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextEditorBase::getHandleIsSplit         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIsSplit,
             this->getType().getFieldDesc(IsSplitFieldId),
             const_cast<TextEditorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextEditorBase::editHandleIsSplit        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIsSplit,
             this->getType().getFieldDesc(IsSplitFieldId),
             this));


    editSField(IsSplitFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextEditorBase::getHandleFocusedDomArea  (void) const
{
    SFUnrecTextDomAreaPtr::GetHandlePtr returnValue(
        new  SFUnrecTextDomAreaPtr::GetHandle(
             &_sfFocusedDomArea,
             this->getType().getFieldDesc(FocusedDomAreaFieldId),
             const_cast<TextEditorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextEditorBase::editHandleFocusedDomArea (void)
{
    SFUnrecTextDomAreaPtr::EditHandlePtr returnValue(
        new  SFUnrecTextDomAreaPtr::EditHandle(
             &_sfFocusedDomArea,
             this->getType().getFieldDesc(FocusedDomAreaFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextEditor::setFocusedDomArea,
                    static_cast<TextEditor *>(this), _1));

    editSField(FocusedDomAreaFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TextEditorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextEditor *pThis = static_cast<TextEditor *>(this);

    pThis->execSync(static_cast<TextEditor *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextEditorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextEditor *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextEditor *>(pRefAspect),
                  dynamic_cast<const TextEditor *>(this));

    return returnValue;
}
#endif

void TextEditorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextEditor *>(this)->clearAdvancedTextDomAreas();

    static_cast<TextEditor *>(this)->setFocusedDomArea(NULL);


}


OSG_END_NAMESPACE
