/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SearchWindowEventDetails!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGSearchWindowEventDetailsBase.h"
#include "OSGSearchWindowEventDetails.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SearchWindowEventDetails
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt8           SearchWindowEventDetailsBase::_sfOption
    
*/

/*! \var std::string     SearchWindowEventDetailsBase::_sfSearchText
    
*/

/*! \var std::string     SearchWindowEventDetailsBase::_sfReplaceText
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SearchWindowEventDetails *>::_type("SearchWindowEventDetailsPtr", "EventDetailsPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SearchWindowEventDetails *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SearchWindowEventDetails *,
                           0);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SearchWindowEventDetailsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "Option",
        "",
        OptionFieldId, OptionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SearchWindowEventDetails::editHandleOption),
        static_cast<FieldGetMethodSig >(&SearchWindowEventDetails::getHandleOption));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "SearchText",
        "",
        SearchTextFieldId, SearchTextFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SearchWindowEventDetails::editHandleSearchText),
        static_cast<FieldGetMethodSig >(&SearchWindowEventDetails::getHandleSearchText));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "ReplaceText",
        "",
        ReplaceTextFieldId, ReplaceTextFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SearchWindowEventDetails::editHandleReplaceText),
        static_cast<FieldGetMethodSig >(&SearchWindowEventDetails::getHandleReplaceText));

    oType.addInitialDesc(pDesc);
}


SearchWindowEventDetailsBase::TypeObject SearchWindowEventDetailsBase::_type(
    SearchWindowEventDetailsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SearchWindowEventDetailsBase::createEmptyLocal),
    SearchWindowEventDetails::initMethod,
    SearchWindowEventDetails::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SearchWindowEventDetails::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SearchWindowEventDetails\"\n"
    "\tparent=\"EventDetails\"\n"
    "\tlibrary=\"ContribTextDom\"\n"
    "\tpointerfieldtypes=\"single\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "\tsupportUnregisteredCreate=\"true\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Option\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"SearchWindowEventDetails::DIALOG_OPTION_SEARCH\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"SearchText\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t    publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ReplaceText\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t    publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SearchWindowEventDetailsBase::getType(void)
{
    return _type;
}

const FieldContainerType &SearchWindowEventDetailsBase::getType(void) const
{
    return _type;
}

UInt32 SearchWindowEventDetailsBase::getContainerSize(void) const
{
    return sizeof(SearchWindowEventDetails);
}

/*------------------------- decorator get ------------------------------*/


SFUInt8 *SearchWindowEventDetailsBase::editSFOption(void)
{
    editSField(OptionFieldMask);

    return &_sfOption;
}

const SFUInt8 *SearchWindowEventDetailsBase::getSFOption(void) const
{
    return &_sfOption;
}


SFString *SearchWindowEventDetailsBase::editSFSearchText(void)
{
    editSField(SearchTextFieldMask);

    return &_sfSearchText;
}

const SFString *SearchWindowEventDetailsBase::getSFSearchText(void) const
{
    return &_sfSearchText;
}


SFString *SearchWindowEventDetailsBase::editSFReplaceText(void)
{
    editSField(ReplaceTextFieldMask);

    return &_sfReplaceText;
}

const SFString *SearchWindowEventDetailsBase::getSFReplaceText(void) const
{
    return &_sfReplaceText;
}






/*------------------------------ access -----------------------------------*/

UInt32 SearchWindowEventDetailsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        returnValue += _sfOption.getBinSize();
    }
    if(FieldBits::NoField != (SearchTextFieldMask & whichField))
    {
        returnValue += _sfSearchText.getBinSize();
    }
    if(FieldBits::NoField != (ReplaceTextFieldMask & whichField))
    {
        returnValue += _sfReplaceText.getBinSize();
    }

    return returnValue;
}

void SearchWindowEventDetailsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        _sfOption.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SearchTextFieldMask & whichField))
    {
        _sfSearchText.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ReplaceTextFieldMask & whichField))
    {
        _sfReplaceText.copyToBin(pMem);
    }
}

void SearchWindowEventDetailsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        editSField(OptionFieldMask);
        _sfOption.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SearchTextFieldMask & whichField))
    {
        editSField(SearchTextFieldMask);
        _sfSearchText.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ReplaceTextFieldMask & whichField))
    {
        editSField(ReplaceTextFieldMask);
        _sfReplaceText.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SearchWindowEventDetailsTransitPtr SearchWindowEventDetailsBase::createLocal(BitVector bFlags)
{
    SearchWindowEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SearchWindowEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SearchWindowEventDetailsTransitPtr SearchWindowEventDetailsBase::createDependent(BitVector bFlags)
{
    SearchWindowEventDetailsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SearchWindowEventDetails>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SearchWindowEventDetailsTransitPtr SearchWindowEventDetailsBase::create(void)
{
    return createLocal();
}

SearchWindowEventDetails *SearchWindowEventDetailsBase::createEmptyLocal(BitVector bFlags)
{
    SearchWindowEventDetails *returnValue;

    newPtr<SearchWindowEventDetails>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SearchWindowEventDetails *SearchWindowEventDetailsBase::createEmpty(void)
{
    return createEmptyLocal();
}

SearchWindowEventDetails *SearchWindowEventDetailsBase::createUnregistered(void)
{
    SearchWindowEventDetails *returnValue = new SearchWindowEventDetails;

#ifdef OSG_MT_CPTR_ASPECT
    returnValue->setupAspectStore();
#endif
    //Do not register with the FieldContainer Factory

    returnValue->onCreate      (      );
    returnValue->onCreateAspect(returnValue);
    
    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();
    
    return returnValue;
}

FieldContainerTransitPtr SearchWindowEventDetailsBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SearchWindowEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SearchWindowEventDetails *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SearchWindowEventDetailsBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SearchWindowEventDetails *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SearchWindowEventDetails *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SearchWindowEventDetailsBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}



/*------------------------- constructors ----------------------------------*/

SearchWindowEventDetailsBase::SearchWindowEventDetailsBase(void) :
    Inherited(),
    _sfOption                 (UInt8(SearchWindowEventDetails::DIALOG_OPTION_SEARCH)),
    _sfSearchText             (),
    _sfReplaceText            ()
{
}

SearchWindowEventDetailsBase::SearchWindowEventDetailsBase(const SearchWindowEventDetailsBase &source) :
    Inherited(source),
    _sfOption                 (source._sfOption                 ),
    _sfSearchText             (source._sfSearchText             ),
    _sfReplaceText            (source._sfReplaceText            )
{
}


/*-------------------------- destructors ----------------------------------*/

SearchWindowEventDetailsBase::~SearchWindowEventDetailsBase(void)
{
}


GetFieldHandlePtr SearchWindowEventDetailsBase::getHandleOption          (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfOption,
             this->getType().getFieldDesc(OptionFieldId),
             const_cast<SearchWindowEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SearchWindowEventDetailsBase::editHandleOption         (void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfOption,
             this->getType().getFieldDesc(OptionFieldId),
             this));


    editSField(OptionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SearchWindowEventDetailsBase::getHandleSearchText      (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfSearchText,
             this->getType().getFieldDesc(SearchTextFieldId),
             const_cast<SearchWindowEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SearchWindowEventDetailsBase::editHandleSearchText     (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfSearchText,
             this->getType().getFieldDesc(SearchTextFieldId),
             this));


    editSField(SearchTextFieldMask);

    return returnValue;
}

GetFieldHandlePtr SearchWindowEventDetailsBase::getHandleReplaceText     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfReplaceText,
             this->getType().getFieldDesc(ReplaceTextFieldId),
             const_cast<SearchWindowEventDetailsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SearchWindowEventDetailsBase::editHandleReplaceText    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfReplaceText,
             this->getType().getFieldDesc(ReplaceTextFieldId),
             this));


    editSField(ReplaceTextFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void SearchWindowEventDetailsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SearchWindowEventDetails *pThis = static_cast<SearchWindowEventDetails *>(this);

    pThis->execSync(static_cast<SearchWindowEventDetails *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SearchWindowEventDetailsBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SearchWindowEventDetails *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SearchWindowEventDetails *>(pRefAspect),
                  dynamic_cast<const SearchWindowEventDetails *>(this));

    return returnValue;
}
#endif

void SearchWindowEventDetailsBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
