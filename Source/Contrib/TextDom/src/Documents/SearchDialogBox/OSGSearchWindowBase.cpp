/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SearchWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGSearchWindowBase.h"
#include "OSGSearchWindow.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SearchWindow
    A TextDom Search And Replace Dialog Window.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SearchWindow *>::_type("SearchWindowPtr", "InternalWindowPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SearchWindow *)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SearchWindowBase::classDescInserter(TypeObject &oType)
{
}


SearchWindowBase::TypeObject SearchWindowBase::_type(
    SearchWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SearchWindowBase::createEmptyLocal),
    SearchWindow::initMethod,
    SearchWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SearchWindow::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SearchWindow\"\n"
    "    parent=\"InternalWindow\"\n"
    "    library=\"ContribTextDom\"\n"
    "    pointerfielddetailsTypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    "    parentProducer=\"AbstractWindow\"\n"
    ">\n"
    "A TextDom Search And Replace Dialog Window.\n"
    "\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"SearchWindowClosing\"\n"
    "\t\tdetailsType=\"SearchWindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"SearchWindowClosed\"\n"
    "\t\tdetailsType=\"SearchWindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"SearchButtonClicked\"\n"
    "\t\tdetailsType=\"SearchWindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ReplaceButtonClicked\"\n"
    "\t\tdetailsType=\"SearchWindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ReplaceAllButtonClicked\"\n"
    "\t\tdetailsType=\"SearchWindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"BookmarkAllButtonClicked\"\n"
    "\t\tdetailsType=\"SearchWindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\n"
    "</FieldContainer>\n"
    "\n",
    "A TextDom Search And Replace Dialog Window.\n"
    );

//! SearchWindow Produced Events

EventDescription *SearchWindowBase::_eventDesc[] =
{
    new EventDescription("SearchWindowClosing", 
                          "",
                          SearchWindowClosingEventId, 
                          FieldTraits<SearchWindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&SearchWindowBase::getHandleSearchWindowClosingSignal)),

    new EventDescription("SearchWindowClosed", 
                          "",
                          SearchWindowClosedEventId, 
                          FieldTraits<SearchWindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&SearchWindowBase::getHandleSearchWindowClosedSignal)),

    new EventDescription("SearchButtonClicked", 
                          "",
                          SearchButtonClickedEventId, 
                          FieldTraits<SearchWindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&SearchWindowBase::getHandleSearchButtonClickedSignal)),

    new EventDescription("ReplaceButtonClicked", 
                          "",
                          ReplaceButtonClickedEventId, 
                          FieldTraits<SearchWindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&SearchWindowBase::getHandleReplaceButtonClickedSignal)),

    new EventDescription("ReplaceAllButtonClicked", 
                          "",
                          ReplaceAllButtonClickedEventId, 
                          FieldTraits<SearchWindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&SearchWindowBase::getHandleReplaceAllButtonClickedSignal)),

    new EventDescription("BookmarkAllButtonClicked", 
                          "",
                          BookmarkAllButtonClickedEventId, 
                          FieldTraits<SearchWindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&SearchWindowBase::getHandleBookmarkAllButtonClickedSignal))

};

EventProducerType SearchWindowBase::_producerType(
    "SearchWindowProducerType",
    "AbstractWindowProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &SearchWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &SearchWindowBase::getType(void) const
{
    return _type;
}

const EventProducerType &SearchWindowBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 SearchWindowBase::getContainerSize(void) const
{
    return sizeof(SearchWindow);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

UInt32 SearchWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void SearchWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

}

void SearchWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

}

//! create a new instance of the class
SearchWindowTransitPtr SearchWindowBase::createLocal(BitVector bFlags)
{
    SearchWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SearchWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SearchWindowTransitPtr SearchWindowBase::createDependent(BitVector bFlags)
{
    SearchWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SearchWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SearchWindowTransitPtr SearchWindowBase::create(void)
{
    SearchWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SearchWindow>(tmpPtr);
    }

    return fc;
}

SearchWindow *SearchWindowBase::createEmptyLocal(BitVector bFlags)
{
    SearchWindow *returnValue;

    newPtr<SearchWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SearchWindow *SearchWindowBase::createEmpty(void)
{
    SearchWindow *returnValue;

    newPtr<SearchWindow>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr SearchWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SearchWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SearchWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SearchWindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SearchWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SearchWindow *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SearchWindowBase::shallowCopy(void) const
{
    SearchWindow *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SearchWindow *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- event producers ----------------------------------*/
void SearchWindowBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case SearchWindowClosingEventId:
        OSG_ASSERT(dynamic_cast<SearchWindowClosingEventDetailsType* const>(e));

        _SearchWindowClosingEvent.set_combiner(ConsumableEventCombiner(e));
        _SearchWindowClosingEvent(dynamic_cast<SearchWindowClosingEventDetailsType* const>(e), SearchWindowClosingEventId);
        break;
    case SearchWindowClosedEventId:
        OSG_ASSERT(dynamic_cast<SearchWindowClosedEventDetailsType* const>(e));

        _SearchWindowClosedEvent.set_combiner(ConsumableEventCombiner(e));
        _SearchWindowClosedEvent(dynamic_cast<SearchWindowClosedEventDetailsType* const>(e), SearchWindowClosedEventId);
        break;
    case SearchButtonClickedEventId:
        OSG_ASSERT(dynamic_cast<SearchButtonClickedEventDetailsType* const>(e));

        _SearchButtonClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _SearchButtonClickedEvent(dynamic_cast<SearchButtonClickedEventDetailsType* const>(e), SearchButtonClickedEventId);
        break;
    case ReplaceButtonClickedEventId:
        OSG_ASSERT(dynamic_cast<ReplaceButtonClickedEventDetailsType* const>(e));

        _ReplaceButtonClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _ReplaceButtonClickedEvent(dynamic_cast<ReplaceButtonClickedEventDetailsType* const>(e), ReplaceButtonClickedEventId);
        break;
    case ReplaceAllButtonClickedEventId:
        OSG_ASSERT(dynamic_cast<ReplaceAllButtonClickedEventDetailsType* const>(e));

        _ReplaceAllButtonClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _ReplaceAllButtonClickedEvent(dynamic_cast<ReplaceAllButtonClickedEventDetailsType* const>(e), ReplaceAllButtonClickedEventId);
        break;
    case BookmarkAllButtonClickedEventId:
        OSG_ASSERT(dynamic_cast<BookmarkAllButtonClickedEventDetailsType* const>(e));

        _BookmarkAllButtonClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _BookmarkAllButtonClickedEvent(dynamic_cast<BookmarkAllButtonClickedEventDetailsType* const>(e), BookmarkAllButtonClickedEventId);
        break;
    default:
        Inherited::produceEvent(eventId, e);
        break;
    }
}

boost::signals2::connection SearchWindowBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case SearchWindowClosingEventId:
        return _SearchWindowClosingEvent.connect(listener, at);
        break;
    case SearchWindowClosedEventId:
        return _SearchWindowClosedEvent.connect(listener, at);
        break;
    case SearchButtonClickedEventId:
        return _SearchButtonClickedEvent.connect(listener, at);
        break;
    case ReplaceButtonClickedEventId:
        return _ReplaceButtonClickedEvent.connect(listener, at);
        break;
    case ReplaceAllButtonClickedEventId:
        return _ReplaceAllButtonClickedEvent.connect(listener, at);
        break;
    case BookmarkAllButtonClickedEventId:
        return _BookmarkAllButtonClickedEvent.connect(listener, at);
        break;
    default:
        return Inherited::connectEvent(eventId, listener, at);
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  SearchWindowBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case SearchWindowClosingEventId:
        return _SearchWindowClosingEvent.connect(group, listener, at);
        break;
    case SearchWindowClosedEventId:
        return _SearchWindowClosedEvent.connect(group, listener, at);
        break;
    case SearchButtonClickedEventId:
        return _SearchButtonClickedEvent.connect(group, listener, at);
        break;
    case ReplaceButtonClickedEventId:
        return _ReplaceButtonClickedEvent.connect(group, listener, at);
        break;
    case ReplaceAllButtonClickedEventId:
        return _ReplaceAllButtonClickedEvent.connect(group, listener, at);
        break;
    case BookmarkAllButtonClickedEventId:
        return _BookmarkAllButtonClickedEvent.connect(group, listener, at);
        break;
    default:
        return Inherited::connectEvent(eventId, group, listener, at);
        break;
    }

    return boost::signals2::connection();
}
    
void  SearchWindowBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case SearchWindowClosingEventId:
        _SearchWindowClosingEvent.disconnect(group);
        break;
    case SearchWindowClosedEventId:
        _SearchWindowClosedEvent.disconnect(group);
        break;
    case SearchButtonClickedEventId:
        _SearchButtonClickedEvent.disconnect(group);
        break;
    case ReplaceButtonClickedEventId:
        _ReplaceButtonClickedEvent.disconnect(group);
        break;
    case ReplaceAllButtonClickedEventId:
        _ReplaceAllButtonClickedEvent.disconnect(group);
        break;
    case BookmarkAllButtonClickedEventId:
        _BookmarkAllButtonClickedEvent.disconnect(group);
        break;
    default:
        return Inherited::disconnectEvent(eventId, group);
        break;
    }
}

void  SearchWindowBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case SearchWindowClosingEventId:
        _SearchWindowClosingEvent.disconnect_all_slots();
        break;
    case SearchWindowClosedEventId:
        _SearchWindowClosedEvent.disconnect_all_slots();
        break;
    case SearchButtonClickedEventId:
        _SearchButtonClickedEvent.disconnect_all_slots();
        break;
    case ReplaceButtonClickedEventId:
        _ReplaceButtonClickedEvent.disconnect_all_slots();
        break;
    case ReplaceAllButtonClickedEventId:
        _ReplaceAllButtonClickedEvent.disconnect_all_slots();
        break;
    case BookmarkAllButtonClickedEventId:
        _BookmarkAllButtonClickedEvent.disconnect_all_slots();
        break;
    default:
        Inherited::disconnectAllSlotsEvent(eventId);
        break;
    }
}

bool  SearchWindowBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case SearchWindowClosingEventId:
        return _SearchWindowClosingEvent.empty();
        break;
    case SearchWindowClosedEventId:
        return _SearchWindowClosedEvent.empty();
        break;
    case SearchButtonClickedEventId:
        return _SearchButtonClickedEvent.empty();
        break;
    case ReplaceButtonClickedEventId:
        return _ReplaceButtonClickedEvent.empty();
        break;
    case ReplaceAllButtonClickedEventId:
        return _ReplaceAllButtonClickedEvent.empty();
        break;
    case BookmarkAllButtonClickedEventId:
        return _BookmarkAllButtonClickedEvent.empty();
        break;
    default:
        return Inherited::isEmptyEvent(eventId);
        break;
    }
}

UInt32  SearchWindowBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case SearchWindowClosingEventId:
        return _SearchWindowClosingEvent.num_slots();
        break;
    case SearchWindowClosedEventId:
        return _SearchWindowClosedEvent.num_slots();
        break;
    case SearchButtonClickedEventId:
        return _SearchButtonClickedEvent.num_slots();
        break;
    case ReplaceButtonClickedEventId:
        return _ReplaceButtonClickedEvent.num_slots();
        break;
    case ReplaceAllButtonClickedEventId:
        return _ReplaceAllButtonClickedEvent.num_slots();
        break;
    case BookmarkAllButtonClickedEventId:
        return _BookmarkAllButtonClickedEvent.num_slots();
        break;
    default:
        return Inherited::numSlotsEvent(eventId);
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

SearchWindowBase::SearchWindowBase(void) :
    Inherited()
{
}

SearchWindowBase::SearchWindowBase(const SearchWindowBase &source) :
    Inherited(source)
{
}


/*-------------------------- destructors ----------------------------------*/

SearchWindowBase::~SearchWindowBase(void)
{
}



GetEventHandlePtr SearchWindowBase::getHandleSearchWindowClosingSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<SearchWindowClosingEventType>(
             const_cast<SearchWindowClosingEventType *>(&_SearchWindowClosingEvent),
             _producerType.getEventDescription(SearchWindowClosingEventId),
             const_cast<SearchWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr SearchWindowBase::getHandleSearchWindowClosedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<SearchWindowClosedEventType>(
             const_cast<SearchWindowClosedEventType *>(&_SearchWindowClosedEvent),
             _producerType.getEventDescription(SearchWindowClosedEventId),
             const_cast<SearchWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr SearchWindowBase::getHandleSearchButtonClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<SearchButtonClickedEventType>(
             const_cast<SearchButtonClickedEventType *>(&_SearchButtonClickedEvent),
             _producerType.getEventDescription(SearchButtonClickedEventId),
             const_cast<SearchWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr SearchWindowBase::getHandleReplaceButtonClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ReplaceButtonClickedEventType>(
             const_cast<ReplaceButtonClickedEventType *>(&_ReplaceButtonClickedEvent),
             _producerType.getEventDescription(ReplaceButtonClickedEventId),
             const_cast<SearchWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr SearchWindowBase::getHandleReplaceAllButtonClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ReplaceAllButtonClickedEventType>(
             const_cast<ReplaceAllButtonClickedEventType *>(&_ReplaceAllButtonClickedEvent),
             _producerType.getEventDescription(ReplaceAllButtonClickedEventId),
             const_cast<SearchWindowBase *>(this)));

    return returnValue;
}

GetEventHandlePtr SearchWindowBase::getHandleBookmarkAllButtonClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<BookmarkAllButtonClickedEventType>(
             const_cast<BookmarkAllButtonClickedEventType *>(&_BookmarkAllButtonClickedEvent),
             _producerType.getEventDescription(BookmarkAllButtonClickedEventId),
             const_cast<SearchWindowBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SearchWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SearchWindow *pThis = static_cast<SearchWindow *>(this);

    pThis->execSync(static_cast<SearchWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SearchWindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SearchWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SearchWindow *>(pRefAspect),
                  dynamic_cast<const SearchWindow *>(this));

    return returnValue;
}
#endif

void SearchWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
