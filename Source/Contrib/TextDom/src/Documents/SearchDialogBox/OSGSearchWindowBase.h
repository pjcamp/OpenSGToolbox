/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SearchWindow
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSEARCHWINDOWBASE_H_
#define _OSGSEARCHWINDOWBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTextDomDef.h"

//#include "OSGBaseTypes.h"

#include "OSGInternalWindow.h" // Parent


#include "OSGSearchWindowFields.h"

#include "OSGSearchWindowEventDetailsFields.h"

OSG_BEGIN_NAMESPACE

class SearchWindow;

//! \brief SearchWindow Base Class.

class OSG_CONTRIBTEXTDOM_DLLMAPPING SearchWindowBase : public InternalWindow
{
  public:

    typedef InternalWindow Inherited;
    typedef InternalWindow ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SearchWindow);
    
    
    typedef SearchWindowEventDetails SearchWindowClosingEventDetailsType;
    typedef SearchWindowEventDetails SearchWindowClosedEventDetailsType;
    typedef SearchWindowEventDetails SearchButtonClickedEventDetailsType;
    typedef SearchWindowEventDetails ReplaceButtonClickedEventDetailsType;
    typedef SearchWindowEventDetails ReplaceAllButtonClickedEventDetailsType;
    typedef SearchWindowEventDetails BookmarkAllButtonClickedEventDetailsType;

    typedef boost::signals2::signal<void (SearchWindowEventDetails* const, UInt32), ConsumableEventCombiner> SearchWindowClosingEventType;
    typedef boost::signals2::signal<void (SearchWindowEventDetails* const, UInt32), ConsumableEventCombiner> SearchWindowClosedEventType;
    typedef boost::signals2::signal<void (SearchWindowEventDetails* const, UInt32), ConsumableEventCombiner> SearchButtonClickedEventType;
    typedef boost::signals2::signal<void (SearchWindowEventDetails* const, UInt32), ConsumableEventCombiner> ReplaceButtonClickedEventType;
    typedef boost::signals2::signal<void (SearchWindowEventDetails* const, UInt32), ConsumableEventCombiner> ReplaceAllButtonClickedEventType;
    typedef boost::signals2::signal<void (SearchWindowEventDetails* const, UInt32), ConsumableEventCombiner> BookmarkAllButtonClickedEventType;

    /*==========================  PUBLIC  =================================*/

  public:


    enum
    {
        SearchWindowClosingEventId = Inherited::NextProducedEventId,
        SearchWindowClosedEventId = SearchWindowClosingEventId + 1,
        SearchButtonClickedEventId = SearchWindowClosedEventId + 1,
        ReplaceButtonClickedEventId = SearchButtonClickedEventId + 1,
        ReplaceAllButtonClickedEventId = ReplaceButtonClickedEventId + 1,
        BookmarkAllButtonClickedEventId = ReplaceAllButtonClickedEventId + 1,
        NextProducedEventId = BookmarkAllButtonClickedEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //SearchWindowClosing
    boost::signals2::connection connectSearchWindowClosing(const SearchWindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSearchWindowClosing(const SearchWindowClosingEventType::group_type &group,
                                                       const SearchWindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSearchWindowClosing    (const SearchWindowClosingEventType::group_type &group);
    void   disconnectAllSlotsSearchWindowClosing(void);
    bool   isEmptySearchWindowClosing       (void) const;
    UInt32 numSlotsSearchWindowClosing      (void) const;
    
    //SearchWindowClosed
    boost::signals2::connection connectSearchWindowClosed(const SearchWindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSearchWindowClosed(const SearchWindowClosedEventType::group_type &group,
                                                       const SearchWindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSearchWindowClosed     (const SearchWindowClosedEventType::group_type &group);
    void   disconnectAllSlotsSearchWindowClosed(void);
    bool   isEmptySearchWindowClosed        (void) const;
    UInt32 numSlotsSearchWindowClosed       (void) const;
    
    //SearchButtonClicked
    boost::signals2::connection connectSearchButtonClicked(const SearchButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSearchButtonClicked(const SearchButtonClickedEventType::group_type &group,
                                                       const SearchButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSearchButtonClicked    (const SearchButtonClickedEventType::group_type &group);
    void   disconnectAllSlotsSearchButtonClicked(void);
    bool   isEmptySearchButtonClicked       (void) const;
    UInt32 numSlotsSearchButtonClicked      (void) const;
    
    //ReplaceButtonClicked
    boost::signals2::connection connectReplaceButtonClicked(const ReplaceButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectReplaceButtonClicked(const ReplaceButtonClickedEventType::group_type &group,
                                                       const ReplaceButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectReplaceButtonClicked   (const ReplaceButtonClickedEventType::group_type &group);
    void   disconnectAllSlotsReplaceButtonClicked(void);
    bool   isEmptyReplaceButtonClicked      (void) const;
    UInt32 numSlotsReplaceButtonClicked     (void) const;
    
    //ReplaceAllButtonClicked
    boost::signals2::connection connectReplaceAllButtonClicked(const ReplaceAllButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectReplaceAllButtonClicked(const ReplaceAllButtonClickedEventType::group_type &group,
                                                       const ReplaceAllButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectReplaceAllButtonClicked(const ReplaceAllButtonClickedEventType::group_type &group);
    void   disconnectAllSlotsReplaceAllButtonClicked(void);
    bool   isEmptyReplaceAllButtonClicked   (void) const;
    UInt32 numSlotsReplaceAllButtonClicked  (void) const;
    
    //BookmarkAllButtonClicked
    boost::signals2::connection connectBookmarkAllButtonClicked(const BookmarkAllButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectBookmarkAllButtonClicked(const BookmarkAllButtonClickedEventType::group_type &group,
                                                       const BookmarkAllButtonClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectBookmarkAllButtonClicked(const BookmarkAllButtonClickedEventType::group_type &group);
    void   disconnectAllSlotsBookmarkAllButtonClicked(void);
    bool   isEmptyBookmarkAllButtonClicked  (void) const;
    UInt32 numSlotsBookmarkAllButtonClicked (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SearchWindowTransitPtr  create          (void);
    static  SearchWindow           *createEmpty     (void);

    static  SearchWindowTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SearchWindow            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SearchWindowTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    SearchWindowClosingEventType _SearchWindowClosingEvent;
    SearchWindowClosedEventType _SearchWindowClosedEvent;
    SearchButtonClickedEventType _SearchButtonClickedEvent;
    ReplaceButtonClickedEventType _ReplaceButtonClickedEvent;
    ReplaceAllButtonClickedEventType _ReplaceAllButtonClickedEvent;
    BookmarkAllButtonClickedEventType _BookmarkAllButtonClickedEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SearchWindowBase(void);
    SearchWindowBase(const SearchWindowBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SearchWindowBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleSearchWindowClosingSignal(void) const;
    GetEventHandlePtr getHandleSearchWindowClosedSignal(void) const;
    GetEventHandlePtr getHandleSearchButtonClickedSignal(void) const;
    GetEventHandlePtr getHandleReplaceButtonClickedSignal(void) const;
    GetEventHandlePtr getHandleReplaceAllButtonClickedSignal(void) const;
    GetEventHandlePtr getHandleBookmarkAllButtonClickedSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceSearchWindowClosing  (SearchWindowClosingEventDetailsType* const e);
    void produceSearchWindowClosed  (SearchWindowClosedEventDetailsType* const e);
    void produceSearchButtonClicked  (SearchButtonClickedEventDetailsType* const e);
    void produceReplaceButtonClicked  (ReplaceButtonClickedEventDetailsType* const e);
    void produceReplaceAllButtonClicked  (ReplaceAllButtonClickedEventDetailsType* const e);
    void produceBookmarkAllButtonClicked  (BookmarkAllButtonClickedEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SearchWindowBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SearchWindowBase &source);
};

typedef SearchWindowBase *SearchWindowBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSEARCHWINDOWBASE_H_ */
