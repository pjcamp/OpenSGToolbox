/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AbstractElement!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGDocument.h"                // ParentDocument Class

#include "OSGAbstractElementBase.h"
#include "OSGAbstractElement.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AbstractElement
    Document AbstractElement
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Document *      AbstractElementBase::_sfParentDocument
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AbstractElement *>::_type("AbstractElementPtr", "ElementPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AbstractElement *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AbstractElement *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AbstractElement *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AbstractElementBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecDocumentPtr::Description(
        SFUnrecDocumentPtr::getClassType(),
        "ParentDocument",
        "",
        ParentDocumentFieldId, ParentDocumentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractElement::editHandleParentDocument),
        static_cast<FieldGetMethodSig >(&AbstractElement::getHandleParentDocument));

    oType.addInitialDesc(pDesc);
}


AbstractElementBase::TypeObject AbstractElementBase::_type(
    AbstractElementBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    AbstractElement::initMethod,
    AbstractElement::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AbstractElement::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AbstractElement\"\n"
    "\tparent=\"Element\"\n"
    "    library=\"ContribTextDom\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"false\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "Document AbstractElement\n"
    "\t<Field\n"
    "\t\tname=\"ParentDocument\"\n"
    "\t\ttype=\"Document\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Document AbstractElement\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AbstractElementBase::getType(void)
{
    return _type;
}

const FieldContainerType &AbstractElementBase::getType(void) const
{
    return _type;
}

UInt32 AbstractElementBase::getContainerSize(void) const
{
    return sizeof(AbstractElement);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AbstractElement::_sfParentDocument field.
const SFUnrecDocumentPtr *AbstractElementBase::getSFParentDocument(void) const
{
    return &_sfParentDocument;
}

SFUnrecDocumentPtr  *AbstractElementBase::editSFParentDocument (void)
{
    editSField(ParentDocumentFieldMask);

    return &_sfParentDocument;
}





/*------------------------------ access -----------------------------------*/

UInt32 AbstractElementBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentDocumentFieldMask & whichField))
    {
        returnValue += _sfParentDocument.getBinSize();
    }

    return returnValue;
}

void AbstractElementBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentDocumentFieldMask & whichField))
    {
        _sfParentDocument.copyToBin(pMem);
    }
}

void AbstractElementBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentDocumentFieldMask & whichField))
    {
        editSField(ParentDocumentFieldMask);
        _sfParentDocument.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

AbstractElementBase::AbstractElementBase(void) :
    Inherited(),
    _sfParentDocument         (NULL)
{
}

AbstractElementBase::AbstractElementBase(const AbstractElementBase &source) :
    Inherited(source),
    _sfParentDocument         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

AbstractElementBase::~AbstractElementBase(void)
{
}

void AbstractElementBase::onCreate(const AbstractElement *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AbstractElement *pThis = static_cast<AbstractElement *>(this);

        pThis->setParentDocument(source->getParentDocument());
    }
}

GetFieldHandlePtr AbstractElementBase::getHandleParentDocument  (void) const
{
    SFUnrecDocumentPtr::GetHandlePtr returnValue(
        new  SFUnrecDocumentPtr::GetHandle(
             &_sfParentDocument,
             this->getType().getFieldDesc(ParentDocumentFieldId),
             const_cast<AbstractElementBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractElementBase::editHandleParentDocument (void)
{
    SFUnrecDocumentPtr::EditHandlePtr returnValue(
        new  SFUnrecDocumentPtr::EditHandle(
             &_sfParentDocument,
             this->getType().getFieldDesc(ParentDocumentFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&AbstractElement::setParentDocument,
                    static_cast<AbstractElement *>(this), _1));

    editSField(ParentDocumentFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void AbstractElementBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AbstractElement *pThis = static_cast<AbstractElement *>(this);

    pThis->execSync(static_cast<AbstractElement *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void AbstractElementBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AbstractElement *>(this)->setParentDocument(NULL);


}


OSG_END_NAMESPACE
