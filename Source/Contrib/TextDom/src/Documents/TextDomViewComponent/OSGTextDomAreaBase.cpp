/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextDomArea!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGDocument.h"                // DocumentModel Class
#include "OSGUIFont.h"                  // Font Class
#include "OSGTextDomLayoutManager.h"    // LayoutManager Class

#include "OSGTextDomAreaBase.h"
#include "OSGTextDomArea.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextDomArea
    A UI TextDomArea
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Document *      TextDomAreaBase::_sfDocumentModel
    
*/

/*! \var UIFont *        TextDomAreaBase::_sfFont
    
*/

/*! \var UInt32          TextDomAreaBase::_mfBookmarkedLines
    
*/

/*! \var UInt32          TextDomAreaBase::_sfCaretPosition
    
*/

/*! \var bool            TextDomAreaBase::_sfLineWrap
    
*/

/*! \var bool            TextDomAreaBase::_sfWrapStyleWord
    
*/

/*! \var UInt32          TextDomAreaBase::_sfTabSize
    
*/

/*! \var Int32           TextDomAreaBase::_sfLineSpacing
    
*/

/*! \var TextDomLayoutManager * TextDomAreaBase::_sfLayoutManager
    
*/

/*! \var bool            TextDomAreaBase::_sfEditable
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextDomArea *>::_type("TextDomAreaPtr", "ComponentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextDomArea *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextDomArea *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextDomArea *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextDomAreaBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecDocumentPtr::Description(
        SFUnrecDocumentPtr::getClassType(),
        "DocumentModel",
        "",
        DocumentModelFieldId, DocumentModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleDocumentModel),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleDocumentModel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIFontPtr::Description(
        SFUnrecUIFontPtr::getClassType(),
        "Font",
        "",
        FontFieldId, FontFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleFont),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleFont));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "BookmarkedLines",
        "",
        BookmarkedLinesFieldId, BookmarkedLinesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleBookmarkedLines),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleBookmarkedLines));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "CaretPosition",
        "",
        CaretPositionFieldId, CaretPositionFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleCaretPosition),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleCaretPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "LineWrap",
        "",
        LineWrapFieldId, LineWrapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleLineWrap),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleLineWrap));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "WrapStyleWord",
        "",
        WrapStyleWordFieldId, WrapStyleWordFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleWrapStyleWord),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleWrapStyleWord));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "TabSize",
        "",
        TabSizeFieldId, TabSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleTabSize),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleTabSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "LineSpacing",
        "",
        LineSpacingFieldId, LineSpacingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleLineSpacing),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleLineSpacing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildTextDomLayoutManagerPtr::Description(
        SFUnrecChildTextDomLayoutManagerPtr::getClassType(),
        "LayoutManager",
        "",
        LayoutManagerFieldId, LayoutManagerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleLayoutManager),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleLayoutManager));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Editable",
        "",
        EditableFieldId, EditableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomArea::editHandleEditable),
        static_cast<FieldGetMethodSig >(&TextDomArea::getHandleEditable));

    oType.addInitialDesc(pDesc);
}


TextDomAreaBase::TypeObject TextDomAreaBase::_type(
    TextDomAreaBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&TextDomAreaBase::createEmptyLocal),
    TextDomArea::initMethod,
    TextDomArea::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TextDomArea::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextDomArea\"\n"
    "\tparent=\"Component\"\n"
    "\tlibrary=\"ContribTextDom\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "\tparentProducer=\"Component\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "A UI TextDomArea\n"
    "\t<Field\n"
    "\t\tname=\"DocumentModel\"\n"
    "\t\ttype=\"Document\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Font\"\n"
    "\t\ttype=\"UIFont\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BookmarkedLines\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"CaretPosition\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LineWrap\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"WrapStyleWord\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TabSize\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"3\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"LineSpacing\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LayoutManager\"\n"
    "\t\ttype=\"TextDomLayoutManager\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentTextDomArea\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Editable\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"data\"\n"
    "        visibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "    >\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI TextDomArea\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextDomAreaBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextDomAreaBase::getType(void) const
{
    return _type;
}

UInt32 TextDomAreaBase::getContainerSize(void) const
{
    return sizeof(TextDomArea);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextDomArea::_sfDocumentModel field.
const SFUnrecDocumentPtr *TextDomAreaBase::getSFDocumentModel(void) const
{
    return &_sfDocumentModel;
}

SFUnrecDocumentPtr  *TextDomAreaBase::editSFDocumentModel  (void)
{
    editSField(DocumentModelFieldMask);

    return &_sfDocumentModel;
}

//! Get the TextDomArea::_sfFont field.
const SFUnrecUIFontPtr *TextDomAreaBase::getSFFont(void) const
{
    return &_sfFont;
}

SFUnrecUIFontPtr    *TextDomAreaBase::editSFFont           (void)
{
    editSField(FontFieldMask);

    return &_sfFont;
}

MFUInt32 *TextDomAreaBase::editMFBookmarkedLines(void)
{
    editMField(BookmarkedLinesFieldMask, _mfBookmarkedLines);

    return &_mfBookmarkedLines;
}

const MFUInt32 *TextDomAreaBase::getMFBookmarkedLines(void) const
{
    return &_mfBookmarkedLines;
}


SFUInt32 *TextDomAreaBase::editSFCaretPosition(void)
{
    editSField(CaretPositionFieldMask);

    return &_sfCaretPosition;
}

const SFUInt32 *TextDomAreaBase::getSFCaretPosition(void) const
{
    return &_sfCaretPosition;
}


SFBool *TextDomAreaBase::editSFLineWrap(void)
{
    editSField(LineWrapFieldMask);

    return &_sfLineWrap;
}

const SFBool *TextDomAreaBase::getSFLineWrap(void) const
{
    return &_sfLineWrap;
}


SFBool *TextDomAreaBase::editSFWrapStyleWord(void)
{
    editSField(WrapStyleWordFieldMask);

    return &_sfWrapStyleWord;
}

const SFBool *TextDomAreaBase::getSFWrapStyleWord(void) const
{
    return &_sfWrapStyleWord;
}


SFUInt32 *TextDomAreaBase::editSFTabSize(void)
{
    editSField(TabSizeFieldMask);

    return &_sfTabSize;
}

const SFUInt32 *TextDomAreaBase::getSFTabSize(void) const
{
    return &_sfTabSize;
}


SFInt32 *TextDomAreaBase::editSFLineSpacing(void)
{
    editSField(LineSpacingFieldMask);

    return &_sfLineSpacing;
}

const SFInt32 *TextDomAreaBase::getSFLineSpacing(void) const
{
    return &_sfLineSpacing;
}


//! Get the TextDomArea::_sfLayoutManager field.
const SFUnrecChildTextDomLayoutManagerPtr *TextDomAreaBase::getSFLayoutManager(void) const
{
    return &_sfLayoutManager;
}

SFUnrecChildTextDomLayoutManagerPtr *TextDomAreaBase::editSFLayoutManager  (void)
{
    editSField(LayoutManagerFieldMask);

    return &_sfLayoutManager;
}

SFBool *TextDomAreaBase::editSFEditable(void)
{
    editSField(EditableFieldMask);

    return &_sfEditable;
}

const SFBool *TextDomAreaBase::getSFEditable(void) const
{
    return &_sfEditable;
}






/*------------------------------ access -----------------------------------*/

UInt32 TextDomAreaBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DocumentModelFieldMask & whichField))
    {
        returnValue += _sfDocumentModel.getBinSize();
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        returnValue += _sfFont.getBinSize();
    }
    if(FieldBits::NoField != (BookmarkedLinesFieldMask & whichField))
    {
        returnValue += _mfBookmarkedLines.getBinSize();
    }
    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
    {
        returnValue += _sfCaretPosition.getBinSize();
    }
    if(FieldBits::NoField != (LineWrapFieldMask & whichField))
    {
        returnValue += _sfLineWrap.getBinSize();
    }
    if(FieldBits::NoField != (WrapStyleWordFieldMask & whichField))
    {
        returnValue += _sfWrapStyleWord.getBinSize();
    }
    if(FieldBits::NoField != (TabSizeFieldMask & whichField))
    {
        returnValue += _sfTabSize.getBinSize();
    }
    if(FieldBits::NoField != (LineSpacingFieldMask & whichField))
    {
        returnValue += _sfLineSpacing.getBinSize();
    }
    if(FieldBits::NoField != (LayoutManagerFieldMask & whichField))
    {
        returnValue += _sfLayoutManager.getBinSize();
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        returnValue += _sfEditable.getBinSize();
    }

    return returnValue;
}

void TextDomAreaBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DocumentModelFieldMask & whichField))
    {
        _sfDocumentModel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BookmarkedLinesFieldMask & whichField))
    {
        _mfBookmarkedLines.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
    {
        _sfCaretPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LineWrapFieldMask & whichField))
    {
        _sfLineWrap.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapStyleWordFieldMask & whichField))
    {
        _sfWrapStyleWord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TabSizeFieldMask & whichField))
    {
        _sfTabSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LineSpacingFieldMask & whichField))
    {
        _sfLineSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LayoutManagerFieldMask & whichField))
    {
        _sfLayoutManager.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        _sfEditable.copyToBin(pMem);
    }
}

void TextDomAreaBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DocumentModelFieldMask & whichField))
    {
        editSField(DocumentModelFieldMask);
        _sfDocumentModel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        editSField(FontFieldMask);
        _sfFont.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BookmarkedLinesFieldMask & whichField))
    {
        editMField(BookmarkedLinesFieldMask, _mfBookmarkedLines);
        _mfBookmarkedLines.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
    {
        editSField(CaretPositionFieldMask);
        _sfCaretPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LineWrapFieldMask & whichField))
    {
        editSField(LineWrapFieldMask);
        _sfLineWrap.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapStyleWordFieldMask & whichField))
    {
        editSField(WrapStyleWordFieldMask);
        _sfWrapStyleWord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TabSizeFieldMask & whichField))
    {
        editSField(TabSizeFieldMask);
        _sfTabSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LineSpacingFieldMask & whichField))
    {
        editSField(LineSpacingFieldMask);
        _sfLineSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LayoutManagerFieldMask & whichField))
    {
        editSField(LayoutManagerFieldMask);
        _sfLayoutManager.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        editSField(EditableFieldMask);
        _sfEditable.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextDomAreaTransitPtr TextDomAreaBase::createLocal(BitVector bFlags)
{
    TextDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextDomArea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextDomAreaTransitPtr TextDomAreaBase::createDependent(BitVector bFlags)
{
    TextDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextDomArea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextDomAreaTransitPtr TextDomAreaBase::create(void)
{
    TextDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextDomArea>(tmpPtr);
    }

    return fc;
}

TextDomArea *TextDomAreaBase::createEmptyLocal(BitVector bFlags)
{
    TextDomArea *returnValue;

    newPtr<TextDomArea>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextDomArea *TextDomAreaBase::createEmpty(void)
{
    TextDomArea *returnValue;

    newPtr<TextDomArea>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr TextDomAreaBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextDomArea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextDomArea *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextDomAreaBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextDomArea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextDomArea *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextDomAreaBase::shallowCopy(void) const
{
    TextDomArea *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextDomArea *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TextDomAreaBase::TextDomAreaBase(void) :
    Inherited(),
    _sfDocumentModel          (NULL),
    _sfFont                   (NULL),
    _mfBookmarkedLines        (UInt32(0)),
    _sfCaretPosition          (UInt32(0)),
    _sfLineWrap               (bool(true)),
    _sfWrapStyleWord          (bool(true)),
    _sfTabSize                (UInt32(3)),
    _sfLineSpacing            (Int32(5)),
    _sfLayoutManager          (this,
                          LayoutManagerFieldId,
                          TextDomLayoutManager::ParentTextDomAreaFieldId),
    _sfEditable               (bool(true))
{
}

TextDomAreaBase::TextDomAreaBase(const TextDomAreaBase &source) :
    Inherited(source),
    _sfDocumentModel          (NULL),
    _sfFont                   (NULL),
    _mfBookmarkedLines        (source._mfBookmarkedLines        ),
    _sfCaretPosition          (source._sfCaretPosition          ),
    _sfLineWrap               (source._sfLineWrap               ),
    _sfWrapStyleWord          (source._sfWrapStyleWord          ),
    _sfTabSize                (source._sfTabSize                ),
    _sfLineSpacing            (source._sfLineSpacing            ),
    _sfLayoutManager          (this,
                          LayoutManagerFieldId,
                          TextDomLayoutManager::ParentTextDomAreaFieldId),
    _sfEditable               (source._sfEditable               )
{
}


/*-------------------------- destructors ----------------------------------*/

TextDomAreaBase::~TextDomAreaBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool TextDomAreaBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == LayoutManagerFieldId)
    {
        TextDomLayoutManager * pTypedChild =
            dynamic_cast<TextDomLayoutManager *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfLayoutManager.getValue() == pTypedChild)
            {
                editSField(LayoutManagerFieldMask);

                _sfLayoutManager.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void TextDomAreaBase::onCreate(const TextDomArea *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextDomArea *pThis = static_cast<TextDomArea *>(this);

        pThis->setDocumentModel(source->getDocumentModel());

        pThis->setFont(source->getFont());

        pThis->setLayoutManager(source->getLayoutManager());
    }
}

GetFieldHandlePtr TextDomAreaBase::getHandleDocumentModel   (void) const
{
    SFUnrecDocumentPtr::GetHandlePtr returnValue(
        new  SFUnrecDocumentPtr::GetHandle(
             &_sfDocumentModel,
             this->getType().getFieldDesc(DocumentModelFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleDocumentModel  (void)
{
    SFUnrecDocumentPtr::EditHandlePtr returnValue(
        new  SFUnrecDocumentPtr::EditHandle(
             &_sfDocumentModel,
             this->getType().getFieldDesc(DocumentModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextDomArea::setDocumentModel,
                    static_cast<TextDomArea *>(this), _1));

    editSField(DocumentModelFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleFont            (void) const
{
    SFUnrecUIFontPtr::GetHandlePtr returnValue(
        new  SFUnrecUIFontPtr::GetHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleFont           (void)
{
    SFUnrecUIFontPtr::EditHandlePtr returnValue(
        new  SFUnrecUIFontPtr::EditHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextDomArea::setFont,
                    static_cast<TextDomArea *>(this), _1));

    editSField(FontFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleBookmarkedLines (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfBookmarkedLines,
             this->getType().getFieldDesc(BookmarkedLinesFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleBookmarkedLines(void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfBookmarkedLines,
             this->getType().getFieldDesc(BookmarkedLinesFieldId),
             this));


    editMField(BookmarkedLinesFieldMask, _mfBookmarkedLines);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleCaretPosition   (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfCaretPosition,
             this->getType().getFieldDesc(CaretPositionFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleCaretPosition  (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfCaretPosition,
             this->getType().getFieldDesc(CaretPositionFieldId),
             this));


    editSField(CaretPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleLineWrap        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLineWrap,
             this->getType().getFieldDesc(LineWrapFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleLineWrap       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLineWrap,
             this->getType().getFieldDesc(LineWrapFieldId),
             this));


    editSField(LineWrapFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleWrapStyleWord   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfWrapStyleWord,
             this->getType().getFieldDesc(WrapStyleWordFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleWrapStyleWord  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfWrapStyleWord,
             this->getType().getFieldDesc(WrapStyleWordFieldId),
             this));


    editSField(WrapStyleWordFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleTabSize         (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfTabSize,
             this->getType().getFieldDesc(TabSizeFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleTabSize        (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfTabSize,
             this->getType().getFieldDesc(TabSizeFieldId),
             this));


    editSField(TabSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleLineSpacing     (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfLineSpacing,
             this->getType().getFieldDesc(LineSpacingFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleLineSpacing    (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfLineSpacing,
             this->getType().getFieldDesc(LineSpacingFieldId),
             this));


    editSField(LineSpacingFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleLayoutManager   (void) const
{
    SFUnrecChildTextDomLayoutManagerPtr::GetHandlePtr returnValue(
        new  SFUnrecChildTextDomLayoutManagerPtr::GetHandle(
             &_sfLayoutManager,
             this->getType().getFieldDesc(LayoutManagerFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleLayoutManager  (void)
{
    SFUnrecChildTextDomLayoutManagerPtr::EditHandlePtr returnValue(
        new  SFUnrecChildTextDomLayoutManagerPtr::EditHandle(
             &_sfLayoutManager,
             this->getType().getFieldDesc(LayoutManagerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextDomArea::setLayoutManager,
                    static_cast<TextDomArea *>(this), _1));

    editSField(LayoutManagerFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomAreaBase::getHandleEditable        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEditable,
             this->getType().getFieldDesc(EditableFieldId),
             const_cast<TextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomAreaBase::editHandleEditable       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEditable,
             this->getType().getFieldDesc(EditableFieldId),
             this));


    editSField(EditableFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TextDomAreaBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextDomArea *pThis = static_cast<TextDomArea *>(this);

    pThis->execSync(static_cast<TextDomArea *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextDomAreaBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextDomArea *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextDomArea *>(pRefAspect),
                  dynamic_cast<const TextDomArea *>(this));

    return returnValue;
}
#endif

void TextDomAreaBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextDomArea *>(this)->setDocumentModel(NULL);

    static_cast<TextDomArea *>(this)->setFont(NULL);

    static_cast<TextDomArea *>(this)->setLayoutManager(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfBookmarkedLines.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
