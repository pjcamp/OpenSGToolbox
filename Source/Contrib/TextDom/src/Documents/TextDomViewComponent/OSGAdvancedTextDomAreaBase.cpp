/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AdvancedTextDomArea!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGTextDomArea.h"             // TextArea Class
#include "OSGTextAreaGutter.h"          // Gutter Class

#include "OSGAdvancedTextDomAreaBase.h"
#include "OSGAdvancedTextDomArea.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AdvancedTextDomArea
    An AdvancedTextDomArea

    This class supports adds features to the basic textDomArea.

    Features like gutter region are implemented 
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextDomArea *   AdvancedTextDomAreaBase::_sfTextArea
    
*/

/*! \var TextAreaGutter * AdvancedTextDomAreaBase::_sfGutter
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AdvancedTextDomArea *>::_type("AdvancedTextDomAreaPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AdvancedTextDomArea *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AdvancedTextDomArea *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AdvancedTextDomArea *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AdvancedTextDomAreaBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTextDomAreaPtr::Description(
        SFUnrecTextDomAreaPtr::getClassType(),
        "TextArea",
        "",
        TextAreaFieldId, TextAreaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AdvancedTextDomArea::editHandleTextArea),
        static_cast<FieldGetMethodSig >(&AdvancedTextDomArea::getHandleTextArea));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextAreaGutterPtr::Description(
        SFUnrecTextAreaGutterPtr::getClassType(),
        "Gutter",
        "",
        GutterFieldId, GutterFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AdvancedTextDomArea::editHandleGutter),
        static_cast<FieldGetMethodSig >(&AdvancedTextDomArea::getHandleGutter));

    oType.addInitialDesc(pDesc);
}


AdvancedTextDomAreaBase::TypeObject AdvancedTextDomAreaBase::_type(
    AdvancedTextDomAreaBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&AdvancedTextDomAreaBase::createEmptyLocal),
    AdvancedTextDomArea::initMethod,
    AdvancedTextDomArea::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AdvancedTextDomArea::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AdvancedTextDomArea\"\n"
    "\tparent=\"ComponentContainer\"\n"
    "\tlibrary=\"ContribTextDom\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "\tparentProducer=\"Component\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "An AdvancedTextDomArea\n"
    "\n"
    "This class supports adds features to the basic textDomArea.\n"
    "\n"
    "Features like gutter region are implemented \n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"TextArea\"\n"
    "\t\ttype=\"TextDomArea\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Gutter\"\n"
    "\t\ttype=\"TextAreaGutter\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "An AdvancedTextDomArea\n"
    "\n"
    "This class supports adds features to the basic textDomArea.\n"
    "\n"
    "Features like gutter region are implemented \n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AdvancedTextDomAreaBase::getType(void)
{
    return _type;
}

const FieldContainerType &AdvancedTextDomAreaBase::getType(void) const
{
    return _type;
}

UInt32 AdvancedTextDomAreaBase::getContainerSize(void) const
{
    return sizeof(AdvancedTextDomArea);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AdvancedTextDomArea::_sfTextArea field.
const SFUnrecTextDomAreaPtr *AdvancedTextDomAreaBase::getSFTextArea(void) const
{
    return &_sfTextArea;
}

SFUnrecTextDomAreaPtr *AdvancedTextDomAreaBase::editSFTextArea       (void)
{
    editSField(TextAreaFieldMask);

    return &_sfTextArea;
}

//! Get the AdvancedTextDomArea::_sfGutter field.
const SFUnrecTextAreaGutterPtr *AdvancedTextDomAreaBase::getSFGutter(void) const
{
    return &_sfGutter;
}

SFUnrecTextAreaGutterPtr *AdvancedTextDomAreaBase::editSFGutter         (void)
{
    editSField(GutterFieldMask);

    return &_sfGutter;
}





/*------------------------------ access -----------------------------------*/

UInt32 AdvancedTextDomAreaBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextAreaFieldMask & whichField))
    {
        returnValue += _sfTextArea.getBinSize();
    }
    if(FieldBits::NoField != (GutterFieldMask & whichField))
    {
        returnValue += _sfGutter.getBinSize();
    }

    return returnValue;
}

void AdvancedTextDomAreaBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextAreaFieldMask & whichField))
    {
        _sfTextArea.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GutterFieldMask & whichField))
    {
        _sfGutter.copyToBin(pMem);
    }
}

void AdvancedTextDomAreaBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextAreaFieldMask & whichField))
    {
        editSField(TextAreaFieldMask);
        _sfTextArea.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GutterFieldMask & whichField))
    {
        editSField(GutterFieldMask);
        _sfGutter.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AdvancedTextDomAreaTransitPtr AdvancedTextDomAreaBase::createLocal(BitVector bFlags)
{
    AdvancedTextDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<AdvancedTextDomArea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AdvancedTextDomAreaTransitPtr AdvancedTextDomAreaBase::createDependent(BitVector bFlags)
{
    AdvancedTextDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<AdvancedTextDomArea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AdvancedTextDomAreaTransitPtr AdvancedTextDomAreaBase::create(void)
{
    AdvancedTextDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<AdvancedTextDomArea>(tmpPtr);
    }

    return fc;
}

AdvancedTextDomArea *AdvancedTextDomAreaBase::createEmptyLocal(BitVector bFlags)
{
    AdvancedTextDomArea *returnValue;

    newPtr<AdvancedTextDomArea>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
AdvancedTextDomArea *AdvancedTextDomAreaBase::createEmpty(void)
{
    AdvancedTextDomArea *returnValue;

    newPtr<AdvancedTextDomArea>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr AdvancedTextDomAreaBase::shallowCopyLocal(
    BitVector bFlags) const
{
    AdvancedTextDomArea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AdvancedTextDomArea *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AdvancedTextDomAreaBase::shallowCopyDependent(
    BitVector bFlags) const
{
    AdvancedTextDomArea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AdvancedTextDomArea *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AdvancedTextDomAreaBase::shallowCopy(void) const
{
    AdvancedTextDomArea *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const AdvancedTextDomArea *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

AdvancedTextDomAreaBase::AdvancedTextDomAreaBase(void) :
    Inherited(),
    _sfTextArea               (NULL),
    _sfGutter                 (NULL)
{
}

AdvancedTextDomAreaBase::AdvancedTextDomAreaBase(const AdvancedTextDomAreaBase &source) :
    Inherited(source),
    _sfTextArea               (NULL),
    _sfGutter                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

AdvancedTextDomAreaBase::~AdvancedTextDomAreaBase(void)
{
}

void AdvancedTextDomAreaBase::onCreate(const AdvancedTextDomArea *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AdvancedTextDomArea *pThis = static_cast<AdvancedTextDomArea *>(this);

        pThis->setTextArea(source->getTextArea());

        pThis->setGutter(source->getGutter());
    }
}

GetFieldHandlePtr AdvancedTextDomAreaBase::getHandleTextArea        (void) const
{
    SFUnrecTextDomAreaPtr::GetHandlePtr returnValue(
        new  SFUnrecTextDomAreaPtr::GetHandle(
             &_sfTextArea,
             this->getType().getFieldDesc(TextAreaFieldId),
             const_cast<AdvancedTextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AdvancedTextDomAreaBase::editHandleTextArea       (void)
{
    SFUnrecTextDomAreaPtr::EditHandlePtr returnValue(
        new  SFUnrecTextDomAreaPtr::EditHandle(
             &_sfTextArea,
             this->getType().getFieldDesc(TextAreaFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&AdvancedTextDomArea::setTextArea,
                    static_cast<AdvancedTextDomArea *>(this), _1));

    editSField(TextAreaFieldMask);

    return returnValue;
}

GetFieldHandlePtr AdvancedTextDomAreaBase::getHandleGutter          (void) const
{
    SFUnrecTextAreaGutterPtr::GetHandlePtr returnValue(
        new  SFUnrecTextAreaGutterPtr::GetHandle(
             &_sfGutter,
             this->getType().getFieldDesc(GutterFieldId),
             const_cast<AdvancedTextDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AdvancedTextDomAreaBase::editHandleGutter         (void)
{
    SFUnrecTextAreaGutterPtr::EditHandlePtr returnValue(
        new  SFUnrecTextAreaGutterPtr::EditHandle(
             &_sfGutter,
             this->getType().getFieldDesc(GutterFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&AdvancedTextDomArea::setGutter,
                    static_cast<AdvancedTextDomArea *>(this), _1));

    editSField(GutterFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void AdvancedTextDomAreaBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AdvancedTextDomArea *pThis = static_cast<AdvancedTextDomArea *>(this);

    pThis->execSync(static_cast<AdvancedTextDomArea *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AdvancedTextDomAreaBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    AdvancedTextDomArea *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AdvancedTextDomArea *>(pRefAspect),
                  dynamic_cast<const AdvancedTextDomArea *>(this));

    return returnValue;
}
#endif

void AdvancedTextDomAreaBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AdvancedTextDomArea *>(this)->setTextArea(NULL);

    static_cast<AdvancedTextDomArea *>(this)->setGutter(NULL);


}


OSG_END_NAMESPACE
