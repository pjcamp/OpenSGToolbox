/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextDomLayoutManager!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGGlyphView.h"               // VisibleViews Class
#include "OSGFieldContainer.h"          // ParentTextDomArea Class

#include "OSGTextDomLayoutManagerBase.h"
#include "OSGTextDomLayoutManager.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextDomLayoutManager
    A UI TextDomLayoutManager
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GlyphView *     TextDomLayoutManagerBase::_mfVisibleViews
    
*/

/*! \var FieldContainer * TextDomLayoutManagerBase::_sfParentTextDomArea
    The TextDomArea this TextDomLayoutManager is contained in.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextDomLayoutManager *>::_type("TextDomLayoutManagerPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextDomLayoutManager *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextDomLayoutManager *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextDomLayoutManager *,
                           0);

DataType &FieldTraits< TextDomLayoutManager *, 1 >::getType(void)
{
    return FieldTraits<TextDomLayoutManager *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      TextDomLayoutManager *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextDomLayoutManagerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecGlyphViewPtr::Description(
        MFUnrecGlyphViewPtr::getClassType(),
        "VisibleViews",
        "",
        VisibleViewsFieldId, VisibleViewsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomLayoutManager::editHandleVisibleViews),
        static_cast<FieldGetMethodSig >(&TextDomLayoutManager::getHandleVisibleViews));

    oType.addInitialDesc(pDesc);

    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentTextDomArea",
        "The TextDomArea this TextDomLayoutManager is contained in.\n",
        ParentTextDomAreaFieldId, ParentTextDomAreaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&TextDomLayoutManager::invalidEditField),
        static_cast     <FieldGetMethodSig >(&TextDomLayoutManager::invalidGetField));

    oType.addInitialDesc(pDesc);
}


TextDomLayoutManagerBase::TypeObject TextDomLayoutManagerBase::_type(
    TextDomLayoutManagerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    TextDomLayoutManager::initMethod,
    TextDomLayoutManager::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TextDomLayoutManager::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextDomLayoutManager\"\n"
    "\tparent=\"FieldContainer\"\n"
    "\tlibrary=\"ContribTextDom\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"true\"\n"
    "\tisNodeCore=\"false\"\n"
    "    childFields=\"single\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "\n"
    "A UI TextDomLayoutManager\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"VisibleViews\"\n"
    "\t\ttype=\"GlyphView\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t   name=\"ParentTextDomArea\"\n"
    "\t   type=\"FieldContainer\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"none\"\n"
    "       doRefCount=\"false\"\n"
    "       passFieldMask=\"true\"\n"
    "       category=\"parentpointer\"\n"
    "\t   >\n"
    "\t  The TextDomArea this TextDomLayoutManager is contained in.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI TextDomLayoutManager\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextDomLayoutManagerBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextDomLayoutManagerBase::getType(void) const
{
    return _type;
}

UInt32 TextDomLayoutManagerBase::getContainerSize(void) const
{
    return sizeof(TextDomLayoutManager);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextDomLayoutManager::_mfVisibleViews field.
const MFUnrecGlyphViewPtr *TextDomLayoutManagerBase::getMFVisibleViews(void) const
{
    return &_mfVisibleViews;
}

MFUnrecGlyphViewPtr *TextDomLayoutManagerBase::editMFVisibleViews   (void)
{
    editMField(VisibleViewsFieldMask, _mfVisibleViews);

    return &_mfVisibleViews;
}




void TextDomLayoutManagerBase::pushToVisibleViews(GlyphView * const value)
{
    editMField(VisibleViewsFieldMask, _mfVisibleViews);

    _mfVisibleViews.push_back(value);
}

void TextDomLayoutManagerBase::assignVisibleViews(const MFUnrecGlyphViewPtr &value)
{
    MFUnrecGlyphViewPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGlyphViewPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<TextDomLayoutManager *>(this)->clearVisibleViews();

    while(elemIt != elemEnd)
    {
        this->pushToVisibleViews(*elemIt);

        ++elemIt;
    }
}

void TextDomLayoutManagerBase::removeFromVisibleViews(UInt32 uiIndex)
{
    if(uiIndex < _mfVisibleViews.size())
    {
        editMField(VisibleViewsFieldMask, _mfVisibleViews);

        _mfVisibleViews.erase(uiIndex);
    }
}

void TextDomLayoutManagerBase::removeObjFromVisibleViews(GlyphView * const value)
{
    Int32 iElemIdx = _mfVisibleViews.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VisibleViewsFieldMask, _mfVisibleViews);

        _mfVisibleViews.erase(iElemIdx);
    }
}
void TextDomLayoutManagerBase::clearVisibleViews(void)
{
    editMField(VisibleViewsFieldMask, _mfVisibleViews);


    _mfVisibleViews.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 TextDomLayoutManagerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VisibleViewsFieldMask & whichField))
    {
        returnValue += _mfVisibleViews.getBinSize();
    }
    if(FieldBits::NoField != (ParentTextDomAreaFieldMask & whichField))
    {
        returnValue += _sfParentTextDomArea.getBinSize();
    }

    return returnValue;
}

void TextDomLayoutManagerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VisibleViewsFieldMask & whichField))
    {
        _mfVisibleViews.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentTextDomAreaFieldMask & whichField))
    {
        _sfParentTextDomArea.copyToBin(pMem);
    }
}

void TextDomLayoutManagerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VisibleViewsFieldMask & whichField))
    {
        editMField(VisibleViewsFieldMask, _mfVisibleViews);
        _mfVisibleViews.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentTextDomAreaFieldMask & whichField))
    {
        editSField(ParentTextDomAreaFieldMask);
        _sfParentTextDomArea.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

TextDomLayoutManagerBase::TextDomLayoutManagerBase(void) :
    Inherited(),
    _mfVisibleViews           (),
    _sfParentTextDomArea      (NULL)
{
}

TextDomLayoutManagerBase::TextDomLayoutManagerBase(const TextDomLayoutManagerBase &source) :
    Inherited(source),
    _mfVisibleViews           (),
    _sfParentTextDomArea      (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

TextDomLayoutManagerBase::~TextDomLayoutManagerBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool TextDomLayoutManagerBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentTextDomAreaFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentTextDomArea.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentTextDomArea.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentTextDomAreaFieldMask);

            _sfParentTextDomArea.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool TextDomLayoutManagerBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentTextDomAreaFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentTextDomArea.getValue() == pTypedParent)
            {
                editSField(ParentTextDomAreaFieldMask);

                _sfParentTextDomArea.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


void TextDomLayoutManagerBase::onCreate(const TextDomLayoutManager *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextDomLayoutManager *pThis = static_cast<TextDomLayoutManager *>(this);

        MFUnrecGlyphViewPtr::const_iterator VisibleViewsIt  =
            source->_mfVisibleViews.begin();
        MFUnrecGlyphViewPtr::const_iterator VisibleViewsEnd =
            source->_mfVisibleViews.end  ();

        while(VisibleViewsIt != VisibleViewsEnd)
        {
            pThis->pushToVisibleViews(*VisibleViewsIt);

            ++VisibleViewsIt;
        }
    }
}

GetFieldHandlePtr TextDomLayoutManagerBase::getHandleVisibleViews    (void) const
{
    MFUnrecGlyphViewPtr::GetHandlePtr returnValue(
        new  MFUnrecGlyphViewPtr::GetHandle(
             &_mfVisibleViews,
             this->getType().getFieldDesc(VisibleViewsFieldId),
             const_cast<TextDomLayoutManagerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomLayoutManagerBase::editHandleVisibleViews   (void)
{
    MFUnrecGlyphViewPtr::EditHandlePtr returnValue(
        new  MFUnrecGlyphViewPtr::EditHandle(
             &_mfVisibleViews,
             this->getType().getFieldDesc(VisibleViewsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&TextDomLayoutManager::pushToVisibleViews,
                    static_cast<TextDomLayoutManager *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&TextDomLayoutManager::removeFromVisibleViews,
                    static_cast<TextDomLayoutManager *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&TextDomLayoutManager::removeObjFromVisibleViews,
                    static_cast<TextDomLayoutManager *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&TextDomLayoutManager::clearVisibleViews,
                    static_cast<TextDomLayoutManager *>(this)));

    editMField(VisibleViewsFieldMask, _mfVisibleViews);

    return returnValue;
}

GetFieldHandlePtr TextDomLayoutManagerBase::getHandleParentTextDomArea (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr TextDomLayoutManagerBase::editHandleParentTextDomArea(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TextDomLayoutManagerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextDomLayoutManager *pThis = static_cast<TextDomLayoutManager *>(this);

    pThis->execSync(static_cast<TextDomLayoutManager *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void TextDomLayoutManagerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextDomLayoutManager *>(this)->clearVisibleViews();


}


OSG_END_NAMESPACE
