/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextDomView!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGElement.h"                 // Element Class
#include "OSGUIFont.h"                  // Font Class

#include "OSGTextDomViewBase.h"
#include "OSGTextDomView.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextDomView
    A UI TextDomView
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Element *       TextDomViewBase::_sfElement
    
*/

/*! \var Vec2f           TextDomViewBase::_sfStartingPosition
    
*/

/*! \var UIFont *        TextDomViewBase::_sfFont
    
*/

/*! \var Color4f         TextDomViewBase::_sfSelectionBoxColor
    
*/

/*! \var Color4f         TextDomViewBase::_sfSelectionTextColor
    
*/

/*! \var Color4f         TextDomViewBase::_sfActiveTextColor
    
*/

/*! \var Color4f         TextDomViewBase::_sfFocusedTextColor
    
*/

/*! \var Color4f         TextDomViewBase::_sfRolloverTextColor
    
*/

/*! \var Color4f         TextDomViewBase::_sfDisabledTextColor
    
*/

/*! \var Color4f         TextDomViewBase::_sfTextColor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextDomView *>::_type("TextDomViewPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextDomView *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextDomView *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextDomView *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextDomViewBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecElementPtr::Description(
        SFUnrecElementPtr::getClassType(),
        "Element",
        "",
        ElementFieldId, ElementFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleElement),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleElement));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "StartingPosition",
        "",
        StartingPositionFieldId, StartingPositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleStartingPosition),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleStartingPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIFontPtr::Description(
        SFUnrecUIFontPtr::getClassType(),
        "Font",
        "",
        FontFieldId, FontFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleFont),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleFont));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "SelectionBoxColor",
        "",
        SelectionBoxColorFieldId, SelectionBoxColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleSelectionBoxColor),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleSelectionBoxColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "SelectionTextColor",
        "",
        SelectionTextColorFieldId, SelectionTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleSelectionTextColor),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleSelectionTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "ActiveTextColor",
        "",
        ActiveTextColorFieldId, ActiveTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleActiveTextColor),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleActiveTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "FocusedTextColor",
        "",
        FocusedTextColorFieldId, FocusedTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleFocusedTextColor),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleFocusedTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "RolloverTextColor",
        "",
        RolloverTextColorFieldId, RolloverTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleRolloverTextColor),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleRolloverTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "DisabledTextColor",
        "",
        DisabledTextColorFieldId, DisabledTextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleDisabledTextColor),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleDisabledTextColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "TextColor",
        "",
        TextColorFieldId, TextColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextDomView::editHandleTextColor),
        static_cast<FieldGetMethodSig >(&TextDomView::getHandleTextColor));

    oType.addInitialDesc(pDesc);
}


TextDomViewBase::TypeObject TextDomViewBase::_type(
    TextDomViewBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    TextDomView::initMethod,
    TextDomView::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TextDomView::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextDomView\"\n"
    "\tparent=\"FieldContainer\"\n"
    "\tlibrary=\"ContribTextDom\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"true\"\n"
    "\tisNodeCore=\"false\"\n"
    "    authors=\"Achyuthan Vasanth (vasanth.achyuthan@gmail.com), David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "A UI TextDomView\n"
    "\t<Field\n"
    "\t\tname=\"Element\"\n"
    "\t\ttype=\"Element\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"StartingPosition\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"Font\"\n"
    "\t\ttype=\"UIFont\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectionBoxColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,1.0,1.0\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectionTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ActiveTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledTextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TextColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t\n"
    "</FieldContainer>\n",
    "A UI TextDomView\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextDomViewBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextDomViewBase::getType(void) const
{
    return _type;
}

UInt32 TextDomViewBase::getContainerSize(void) const
{
    return sizeof(TextDomView);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextDomView::_sfElement field.
const SFUnrecElementPtr *TextDomViewBase::getSFElement(void) const
{
    return &_sfElement;
}

SFUnrecElementPtr   *TextDomViewBase::editSFElement        (void)
{
    editSField(ElementFieldMask);

    return &_sfElement;
}

SFVec2f *TextDomViewBase::editSFStartingPosition(void)
{
    editSField(StartingPositionFieldMask);

    return &_sfStartingPosition;
}

const SFVec2f *TextDomViewBase::getSFStartingPosition(void) const
{
    return &_sfStartingPosition;
}


//! Get the TextDomView::_sfFont field.
const SFUnrecUIFontPtr *TextDomViewBase::getSFFont(void) const
{
    return &_sfFont;
}

SFUnrecUIFontPtr    *TextDomViewBase::editSFFont           (void)
{
    editSField(FontFieldMask);

    return &_sfFont;
}

SFColor4f *TextDomViewBase::editSFSelectionBoxColor(void)
{
    editSField(SelectionBoxColorFieldMask);

    return &_sfSelectionBoxColor;
}

const SFColor4f *TextDomViewBase::getSFSelectionBoxColor(void) const
{
    return &_sfSelectionBoxColor;
}


SFColor4f *TextDomViewBase::editSFSelectionTextColor(void)
{
    editSField(SelectionTextColorFieldMask);

    return &_sfSelectionTextColor;
}

const SFColor4f *TextDomViewBase::getSFSelectionTextColor(void) const
{
    return &_sfSelectionTextColor;
}


SFColor4f *TextDomViewBase::editSFActiveTextColor(void)
{
    editSField(ActiveTextColorFieldMask);

    return &_sfActiveTextColor;
}

const SFColor4f *TextDomViewBase::getSFActiveTextColor(void) const
{
    return &_sfActiveTextColor;
}


SFColor4f *TextDomViewBase::editSFFocusedTextColor(void)
{
    editSField(FocusedTextColorFieldMask);

    return &_sfFocusedTextColor;
}

const SFColor4f *TextDomViewBase::getSFFocusedTextColor(void) const
{
    return &_sfFocusedTextColor;
}


SFColor4f *TextDomViewBase::editSFRolloverTextColor(void)
{
    editSField(RolloverTextColorFieldMask);

    return &_sfRolloverTextColor;
}

const SFColor4f *TextDomViewBase::getSFRolloverTextColor(void) const
{
    return &_sfRolloverTextColor;
}


SFColor4f *TextDomViewBase::editSFDisabledTextColor(void)
{
    editSField(DisabledTextColorFieldMask);

    return &_sfDisabledTextColor;
}

const SFColor4f *TextDomViewBase::getSFDisabledTextColor(void) const
{
    return &_sfDisabledTextColor;
}


SFColor4f *TextDomViewBase::editSFTextColor(void)
{
    editSField(TextColorFieldMask);

    return &_sfTextColor;
}

const SFColor4f *TextDomViewBase::getSFTextColor(void) const
{
    return &_sfTextColor;
}






/*------------------------------ access -----------------------------------*/

UInt32 TextDomViewBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ElementFieldMask & whichField))
    {
        returnValue += _sfElement.getBinSize();
    }
    if(FieldBits::NoField != (StartingPositionFieldMask & whichField))
    {
        returnValue += _sfStartingPosition.getBinSize();
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        returnValue += _sfFont.getBinSize();
    }
    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
    {
        returnValue += _sfSelectionBoxColor.getBinSize();
    }
    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
    {
        returnValue += _sfSelectionTextColor.getBinSize();
    }
    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
    {
        returnValue += _sfActiveTextColor.getBinSize();
    }
    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        returnValue += _sfFocusedTextColor.getBinSize();
    }
    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        returnValue += _sfRolloverTextColor.getBinSize();
    }
    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        returnValue += _sfDisabledTextColor.getBinSize();
    }
    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        returnValue += _sfTextColor.getBinSize();
    }

    return returnValue;
}

void TextDomViewBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ElementFieldMask & whichField))
    {
        _sfElement.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StartingPositionFieldMask & whichField))
    {
        _sfStartingPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
    {
        _sfSelectionBoxColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
    {
        _sfSelectionTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
    {
        _sfActiveTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        _sfRolloverTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        _sfDisabledTextColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        _sfTextColor.copyToBin(pMem);
    }
}

void TextDomViewBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ElementFieldMask & whichField))
    {
        editSField(ElementFieldMask);
        _sfElement.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StartingPositionFieldMask & whichField))
    {
        editSField(StartingPositionFieldMask);
        _sfStartingPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        editSField(FontFieldMask);
        _sfFont.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
    {
        editSField(SelectionBoxColorFieldMask);
        _sfSelectionBoxColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
    {
        editSField(SelectionTextColorFieldMask);
        _sfSelectionTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
    {
        editSField(ActiveTextColorFieldMask);
        _sfActiveTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        editSField(FocusedTextColorFieldMask);
        _sfFocusedTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        editSField(RolloverTextColorFieldMask);
        _sfRolloverTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        editSField(DisabledTextColorFieldMask);
        _sfDisabledTextColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        editSField(TextColorFieldMask);
        _sfTextColor.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

TextDomViewBase::TextDomViewBase(void) :
    Inherited(),
    _sfElement                (NULL),
    _sfStartingPosition       (Vec2f(0.0,0.0)),
    _sfFont                   (NULL),
    _sfSelectionBoxColor      (Color4f(0.0,0.0,1.0,1.0)),
    _sfSelectionTextColor     (Color4f(1.0,1.0,1.0,1.0)),
    _sfActiveTextColor        (),
    _sfFocusedTextColor       (),
    _sfRolloverTextColor      (),
    _sfDisabledTextColor      (),
    _sfTextColor              ()
{
}

TextDomViewBase::TextDomViewBase(const TextDomViewBase &source) :
    Inherited(source),
    _sfElement                (NULL),
    _sfStartingPosition       (source._sfStartingPosition       ),
    _sfFont                   (NULL),
    _sfSelectionBoxColor      (source._sfSelectionBoxColor      ),
    _sfSelectionTextColor     (source._sfSelectionTextColor     ),
    _sfActiveTextColor        (source._sfActiveTextColor        ),
    _sfFocusedTextColor       (source._sfFocusedTextColor       ),
    _sfRolloverTextColor      (source._sfRolloverTextColor      ),
    _sfDisabledTextColor      (source._sfDisabledTextColor      ),
    _sfTextColor              (source._sfTextColor              )
{
}


/*-------------------------- destructors ----------------------------------*/

TextDomViewBase::~TextDomViewBase(void)
{
}

void TextDomViewBase::onCreate(const TextDomView *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextDomView *pThis = static_cast<TextDomView *>(this);

        pThis->setElement(source->getElement());

        pThis->setFont(source->getFont());
    }
}

GetFieldHandlePtr TextDomViewBase::getHandleElement         (void) const
{
    SFUnrecElementPtr::GetHandlePtr returnValue(
        new  SFUnrecElementPtr::GetHandle(
             &_sfElement,
             this->getType().getFieldDesc(ElementFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleElement        (void)
{
    SFUnrecElementPtr::EditHandlePtr returnValue(
        new  SFUnrecElementPtr::EditHandle(
             &_sfElement,
             this->getType().getFieldDesc(ElementFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextDomView::setElement,
                    static_cast<TextDomView *>(this), _1));

    editSField(ElementFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleStartingPosition (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfStartingPosition,
             this->getType().getFieldDesc(StartingPositionFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleStartingPosition(void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfStartingPosition,
             this->getType().getFieldDesc(StartingPositionFieldId),
             this));


    editSField(StartingPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleFont            (void) const
{
    SFUnrecUIFontPtr::GetHandlePtr returnValue(
        new  SFUnrecUIFontPtr::GetHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleFont           (void)
{
    SFUnrecUIFontPtr::EditHandlePtr returnValue(
        new  SFUnrecUIFontPtr::EditHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextDomView::setFont,
                    static_cast<TextDomView *>(this), _1));

    editSField(FontFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleSelectionBoxColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfSelectionBoxColor,
             this->getType().getFieldDesc(SelectionBoxColorFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleSelectionBoxColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfSelectionBoxColor,
             this->getType().getFieldDesc(SelectionBoxColorFieldId),
             this));


    editSField(SelectionBoxColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleSelectionTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfSelectionTextColor,
             this->getType().getFieldDesc(SelectionTextColorFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleSelectionTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfSelectionTextColor,
             this->getType().getFieldDesc(SelectionTextColorFieldId),
             this));


    editSField(SelectionTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleActiveTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfActiveTextColor,
             this->getType().getFieldDesc(ActiveTextColorFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleActiveTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfActiveTextColor,
             this->getType().getFieldDesc(ActiveTextColorFieldId),
             this));


    editSField(ActiveTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleFocusedTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfFocusedTextColor,
             this->getType().getFieldDesc(FocusedTextColorFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleFocusedTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfFocusedTextColor,
             this->getType().getFieldDesc(FocusedTextColorFieldId),
             this));


    editSField(FocusedTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleRolloverTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfRolloverTextColor,
             this->getType().getFieldDesc(RolloverTextColorFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleRolloverTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfRolloverTextColor,
             this->getType().getFieldDesc(RolloverTextColorFieldId),
             this));


    editSField(RolloverTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleDisabledTextColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfDisabledTextColor,
             this->getType().getFieldDesc(DisabledTextColorFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleDisabledTextColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfDisabledTextColor,
             this->getType().getFieldDesc(DisabledTextColorFieldId),
             this));


    editSField(DisabledTextColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextDomViewBase::getHandleTextColor       (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfTextColor,
             this->getType().getFieldDesc(TextColorFieldId),
             const_cast<TextDomViewBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextDomViewBase::editHandleTextColor      (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfTextColor,
             this->getType().getFieldDesc(TextColorFieldId),
             this));


    editSField(TextColorFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TextDomViewBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextDomView *pThis = static_cast<TextDomView *>(this);

    pThis->execSync(static_cast<TextDomView *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void TextDomViewBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextDomView *>(this)->setElement(NULL);

    static_cast<TextDomView *>(this)->setFont(NULL);


}


OSG_END_NAMESPACE
