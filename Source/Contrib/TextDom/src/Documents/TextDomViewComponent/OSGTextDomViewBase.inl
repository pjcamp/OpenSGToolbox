/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 * contact: Achyuthan Vasanth (vasanth.achyuthan@gmail.com)                  *
 *          David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextDomView!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextDomViewBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TextDomViewBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TextDomViewBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the TextDomView::_sfElement field.
inline
Element * TextDomViewBase::getElement(void) const
{
    return _sfElement.getValue();
}

//! Set the value of the TextDomView::_sfElement field.
inline
void TextDomViewBase::setElement(Element * const value)
{
    editSField(ElementFieldMask);

    _sfElement.setValue(value);
}
//! Get the value of the TextDomView::_sfStartingPosition field.

inline
Vec2f &TextDomViewBase::editStartingPosition(void)
{
    editSField(StartingPositionFieldMask);

    return _sfStartingPosition.getValue();
}

//! Get the value of the TextDomView::_sfStartingPosition field.
inline
const Vec2f &TextDomViewBase::getStartingPosition(void) const
{
    return _sfStartingPosition.getValue();
}

//! Set the value of the TextDomView::_sfStartingPosition field.
inline
void TextDomViewBase::setStartingPosition(const Vec2f &value)
{
    editSField(StartingPositionFieldMask);

    _sfStartingPosition.setValue(value);
}

//! Get the value of the TextDomView::_sfFont field.
inline
UIFont * TextDomViewBase::getFont(void) const
{
    return _sfFont.getValue();
}

//! Set the value of the TextDomView::_sfFont field.
inline
void TextDomViewBase::setFont(UIFont * const value)
{
    editSField(FontFieldMask);

    _sfFont.setValue(value);
}
//! Get the value of the TextDomView::_sfSelectionBoxColor field.

inline
Color4f &TextDomViewBase::editSelectionBoxColor(void)
{
    editSField(SelectionBoxColorFieldMask);

    return _sfSelectionBoxColor.getValue();
}

//! Get the value of the TextDomView::_sfSelectionBoxColor field.
inline
const Color4f &TextDomViewBase::getSelectionBoxColor(void) const
{
    return _sfSelectionBoxColor.getValue();
}

//! Set the value of the TextDomView::_sfSelectionBoxColor field.
inline
void TextDomViewBase::setSelectionBoxColor(const Color4f &value)
{
    editSField(SelectionBoxColorFieldMask);

    _sfSelectionBoxColor.setValue(value);
}
//! Get the value of the TextDomView::_sfSelectionTextColor field.

inline
Color4f &TextDomViewBase::editSelectionTextColor(void)
{
    editSField(SelectionTextColorFieldMask);

    return _sfSelectionTextColor.getValue();
}

//! Get the value of the TextDomView::_sfSelectionTextColor field.
inline
const Color4f &TextDomViewBase::getSelectionTextColor(void) const
{
    return _sfSelectionTextColor.getValue();
}

//! Set the value of the TextDomView::_sfSelectionTextColor field.
inline
void TextDomViewBase::setSelectionTextColor(const Color4f &value)
{
    editSField(SelectionTextColorFieldMask);

    _sfSelectionTextColor.setValue(value);
}
//! Get the value of the TextDomView::_sfActiveTextColor field.

inline
Color4f &TextDomViewBase::editActiveTextColor(void)
{
    editSField(ActiveTextColorFieldMask);

    return _sfActiveTextColor.getValue();
}

//! Get the value of the TextDomView::_sfActiveTextColor field.
inline
const Color4f &TextDomViewBase::getActiveTextColor(void) const
{
    return _sfActiveTextColor.getValue();
}

//! Set the value of the TextDomView::_sfActiveTextColor field.
inline
void TextDomViewBase::setActiveTextColor(const Color4f &value)
{
    editSField(ActiveTextColorFieldMask);

    _sfActiveTextColor.setValue(value);
}
//! Get the value of the TextDomView::_sfFocusedTextColor field.

inline
Color4f &TextDomViewBase::editFocusedTextColor(void)
{
    editSField(FocusedTextColorFieldMask);

    return _sfFocusedTextColor.getValue();
}

//! Get the value of the TextDomView::_sfFocusedTextColor field.
inline
const Color4f &TextDomViewBase::getFocusedTextColor(void) const
{
    return _sfFocusedTextColor.getValue();
}

//! Set the value of the TextDomView::_sfFocusedTextColor field.
inline
void TextDomViewBase::setFocusedTextColor(const Color4f &value)
{
    editSField(FocusedTextColorFieldMask);

    _sfFocusedTextColor.setValue(value);
}
//! Get the value of the TextDomView::_sfRolloverTextColor field.

inline
Color4f &TextDomViewBase::editRolloverTextColor(void)
{
    editSField(RolloverTextColorFieldMask);

    return _sfRolloverTextColor.getValue();
}

//! Get the value of the TextDomView::_sfRolloverTextColor field.
inline
const Color4f &TextDomViewBase::getRolloverTextColor(void) const
{
    return _sfRolloverTextColor.getValue();
}

//! Set the value of the TextDomView::_sfRolloverTextColor field.
inline
void TextDomViewBase::setRolloverTextColor(const Color4f &value)
{
    editSField(RolloverTextColorFieldMask);

    _sfRolloverTextColor.setValue(value);
}
//! Get the value of the TextDomView::_sfDisabledTextColor field.

inline
Color4f &TextDomViewBase::editDisabledTextColor(void)
{
    editSField(DisabledTextColorFieldMask);

    return _sfDisabledTextColor.getValue();
}

//! Get the value of the TextDomView::_sfDisabledTextColor field.
inline
const Color4f &TextDomViewBase::getDisabledTextColor(void) const
{
    return _sfDisabledTextColor.getValue();
}

//! Set the value of the TextDomView::_sfDisabledTextColor field.
inline
void TextDomViewBase::setDisabledTextColor(const Color4f &value)
{
    editSField(DisabledTextColorFieldMask);

    _sfDisabledTextColor.setValue(value);
}
//! Get the value of the TextDomView::_sfTextColor field.

inline
Color4f &TextDomViewBase::editTextColor(void)
{
    editSField(TextColorFieldMask);

    return _sfTextColor.getValue();
}

//! Get the value of the TextDomView::_sfTextColor field.
inline
const Color4f &TextDomViewBase::getTextColor(void) const
{
    return _sfTextColor.getValue();
}

//! Set the value of the TextDomView::_sfTextColor field.
inline
void TextDomViewBase::setTextColor(const Color4f &value)
{
    editSField(TextColorFieldMask);

    _sfTextColor.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TextDomViewBase::execSync (      TextDomViewBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ElementFieldMask & whichField))
        _sfElement.syncWith(pFrom->_sfElement);

    if(FieldBits::NoField != (StartingPositionFieldMask & whichField))
        _sfStartingPosition.syncWith(pFrom->_sfStartingPosition);

    if(FieldBits::NoField != (FontFieldMask & whichField))
        _sfFont.syncWith(pFrom->_sfFont);

    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
        _sfSelectionBoxColor.syncWith(pFrom->_sfSelectionBoxColor);

    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
        _sfSelectionTextColor.syncWith(pFrom->_sfSelectionTextColor);

    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
        _sfActiveTextColor.syncWith(pFrom->_sfActiveTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pFrom->_sfFocusedTextColor);

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
        _sfRolloverTextColor.syncWith(pFrom->_sfRolloverTextColor);

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
        _sfDisabledTextColor.syncWith(pFrom->_sfDisabledTextColor);

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
        _sfTextColor.syncWith(pFrom->_sfTextColor);
}
#endif


inline
const Char8 *TextDomViewBase::getClassname(void)
{
    return "TextDomView";
}
OSG_GEN_CONTAINERPTR(TextDomView);

OSG_END_NAMESPACE

